// ---------------------------------------------------------------------------
// Protofilename : huawei-debug.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-debug.proto

package huaweiV8R12_debug

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuInfos           *Debug_CpuInfos           `protobuf:"bytes,1,opt,name=cpu_infos,json=cpu-infos,proto3" json:"cpu_infos,omitempty"`
	ServiceCpuInfos    *Debug_ServiceCpuInfos    `protobuf:"bytes,2,opt,name=service_cpu_infos,json=service-cpu-infos,proto3" json:"service_cpu_infos,omitempty"`
	MemoryInfos        *Debug_MemoryInfos        `protobuf:"bytes,3,opt,name=memory_infos,json=memory-infos,proto3" json:"memory_infos,omitempty"`
	ResouceReliability *Debug_ResouceReliability `protobuf:"bytes,4,opt,name=resouce_reliability,json=resouce-reliability,proto3" json:"resouce_reliability,omitempty"`
	BoardResouceStates *Debug_BoardResouceStates `protobuf:"bytes,5,opt,name=board_resouce_states,json=board-resouce-states,proto3" json:"board_resouce_states,omitempty"`
}

func (x *Debug) Reset() {
	*x = Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug) ProtoMessage() {}

func (x *Debug) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug.ProtoReflect.Descriptor instead.
func (*Debug) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0}
}

func (x *Debug) GetCpuInfos() *Debug_CpuInfos {
	if x != nil {
		return x.CpuInfos
	}
	return nil
}

func (x *Debug) GetServiceCpuInfos() *Debug_ServiceCpuInfos {
	if x != nil {
		return x.ServiceCpuInfos
	}
	return nil
}

func (x *Debug) GetMemoryInfos() *Debug_MemoryInfos {
	if x != nil {
		return x.MemoryInfos
	}
	return nil
}

func (x *Debug) GetResouceReliability() *Debug_ResouceReliability {
	if x != nil {
		return x.ResouceReliability
	}
	return nil
}

func (x *Debug) GetBoardResouceStates() *Debug_BoardResouceStates {
	if x != nil {
		return x.BoardResouceStates
	}
	return nil
}

type Debug_CpuInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuInfo []*Debug_CpuInfos_CpuInfo `protobuf:"bytes,1,rep,name=cpu_info,json=cpu-info,proto3" json:"cpu_info,omitempty"`
}

func (x *Debug_CpuInfos) Reset() {
	*x = Debug_CpuInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_CpuInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_CpuInfos) ProtoMessage() {}

func (x *Debug_CpuInfos) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_CpuInfos.ProtoReflect.Descriptor instead.
func (*Debug_CpuInfos) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Debug_CpuInfos) GetCpuInfo() []*Debug_CpuInfos_CpuInfo {
	if x != nil {
		return x.CpuInfo
	}
	return nil
}

type Debug_ServiceCpuInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceCpuInfo []*Debug_ServiceCpuInfos_ServiceCpuInfo `protobuf:"bytes,1,rep,name=service_cpu_info,json=service-cpu-info,proto3" json:"service_cpu_info,omitempty"`
}

func (x *Debug_ServiceCpuInfos) Reset() {
	*x = Debug_ServiceCpuInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_ServiceCpuInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_ServiceCpuInfos) ProtoMessage() {}

func (x *Debug_ServiceCpuInfos) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_ServiceCpuInfos.ProtoReflect.Descriptor instead.
func (*Debug_ServiceCpuInfos) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Debug_ServiceCpuInfos) GetServiceCpuInfo() []*Debug_ServiceCpuInfos_ServiceCpuInfo {
	if x != nil {
		return x.ServiceCpuInfo
	}
	return nil
}

type Debug_MemoryInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryInfo []*Debug_MemoryInfos_MemoryInfo `protobuf:"bytes,1,rep,name=memory_info,json=memory-info,proto3" json:"memory_info,omitempty"`
}

func (x *Debug_MemoryInfos) Reset() {
	*x = Debug_MemoryInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_MemoryInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_MemoryInfos) ProtoMessage() {}

func (x *Debug_MemoryInfos) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_MemoryInfos.ProtoReflect.Descriptor instead.
func (*Debug_MemoryInfos) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Debug_MemoryInfos) GetMemoryInfo() []*Debug_MemoryInfos_MemoryInfo {
	if x != nil {
		return x.MemoryInfo
	}
	return nil
}

type Debug_ResouceReliability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryReliability                    *Debug_ResouceReliability_MemoryReliability                    `protobuf:"bytes,1,opt,name=memory_reliability,json=memory-reliability,proto3" json:"memory_reliability,omitempty"`
	MemoryReliabilitySwitchoverThreshold *Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold `protobuf:"bytes,2,opt,name=memory_reliability_switchover_threshold,json=memory-reliability-switchover-threshold,proto3" json:"memory_reliability_switchover_threshold,omitempty"`
	FlowControlMessageReliability        *Debug_ResouceReliability_FlowControlMessageReliability        `protobuf:"bytes,3,opt,name=flow_control_message_reliability,json=flow-control-message-reliability,proto3" json:"flow_control_message_reliability,omitempty"`
}

func (x *Debug_ResouceReliability) Reset() {
	*x = Debug_ResouceReliability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_ResouceReliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_ResouceReliability) ProtoMessage() {}

func (x *Debug_ResouceReliability) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_ResouceReliability.ProtoReflect.Descriptor instead.
func (*Debug_ResouceReliability) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Debug_ResouceReliability) GetMemoryReliability() *Debug_ResouceReliability_MemoryReliability {
	if x != nil {
		return x.MemoryReliability
	}
	return nil
}

func (x *Debug_ResouceReliability) GetMemoryReliabilitySwitchoverThreshold() *Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold {
	if x != nil {
		return x.MemoryReliabilitySwitchoverThreshold
	}
	return nil
}

func (x *Debug_ResouceReliability) GetFlowControlMessageReliability() *Debug_ResouceReliability_FlowControlMessageReliability {
	if x != nil {
		return x.FlowControlMessageReliability
	}
	return nil
}

type Debug_BoardResouceStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardResouceState []*Debug_BoardResouceStates_BoardResouceState `protobuf:"bytes,1,rep,name=board_resouce_state,json=board-resouce-state,proto3" json:"board_resouce_state,omitempty"`
}

func (x *Debug_BoardResouceStates) Reset() {
	*x = Debug_BoardResouceStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_BoardResouceStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_BoardResouceStates) ProtoMessage() {}

func (x *Debug_BoardResouceStates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_BoardResouceStates.ProtoReflect.Descriptor instead.
func (*Debug_BoardResouceStates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Debug_BoardResouceStates) GetBoardResouceState() []*Debug_BoardResouceStates_BoardResouceState {
	if x != nil {
		return x.BoardResouceState
	}
	return nil
}

type Debug_CpuInfos_CpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	OverloadThreshold       uint32 `protobuf:"varint,2,opt,name=overload_threshold,json=overload-threshold,proto3" json:"overload_threshold,omitempty"`
	UnoverloadThreshold     uint32 `protobuf:"varint,3,opt,name=unoverload_threshold,json=unoverload-threshold,proto3" json:"unoverload_threshold,omitempty"`
	Interval                uint32 `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Index                   uint32 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	SystemCpuUsage          uint32 `protobuf:"varint,6,opt,name=system_cpu_usage,json=system-cpu-usage,proto3" json:"system_cpu_usage,omitempty"`
	MonitorNumber           uint32 `protobuf:"varint,7,opt,name=monitor_number,json=monitor-number,proto3" json:"monitor_number,omitempty"`
	MonitorCycle            uint32 `protobuf:"varint,8,opt,name=monitor_cycle,json=monitor-cycle,proto3" json:"monitor_cycle,omitempty"`
	OverloadStateChangeTime string `protobuf:"bytes,9,opt,name=overload_state_change_time,json=overload-state-change-time,proto3" json:"overload_state_change_time,omitempty"`
	CurrentOverloadState    string `protobuf:"bytes,10,opt,name=current_overload_state,json=current-overload-state,proto3" json:"current_overload_state,omitempty"`
}

func (x *Debug_CpuInfos_CpuInfo) Reset() {
	*x = Debug_CpuInfos_CpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_CpuInfos_CpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_CpuInfos_CpuInfo) ProtoMessage() {}

func (x *Debug_CpuInfos_CpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_CpuInfos_CpuInfo.ProtoReflect.Descriptor instead.
func (*Debug_CpuInfos_CpuInfo) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Debug_CpuInfos_CpuInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Debug_CpuInfos_CpuInfo) GetOverloadThreshold() uint32 {
	if x != nil {
		return x.OverloadThreshold
	}
	return 0
}

func (x *Debug_CpuInfos_CpuInfo) GetUnoverloadThreshold() uint32 {
	if x != nil {
		return x.UnoverloadThreshold
	}
	return 0
}

func (x *Debug_CpuInfos_CpuInfo) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Debug_CpuInfos_CpuInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Debug_CpuInfos_CpuInfo) GetSystemCpuUsage() uint32 {
	if x != nil {
		return x.SystemCpuUsage
	}
	return 0
}

func (x *Debug_CpuInfos_CpuInfo) GetMonitorNumber() uint32 {
	if x != nil {
		return x.MonitorNumber
	}
	return 0
}

func (x *Debug_CpuInfos_CpuInfo) GetMonitorCycle() uint32 {
	if x != nil {
		return x.MonitorCycle
	}
	return 0
}

func (x *Debug_CpuInfos_CpuInfo) GetOverloadStateChangeTime() string {
	if x != nil {
		return x.OverloadStateChangeTime
	}
	return ""
}

func (x *Debug_CpuInfos_CpuInfo) GetCurrentOverloadState() string {
	if x != nil {
		return x.CurrentOverloadState
	}
	return ""
}

type Debug_ServiceCpuInfos_ServiceCpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position        string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	ServiceName     string `protobuf:"bytes,2,opt,name=service_name,json=service-name,proto3" json:"service_name,omitempty"`
	ServiceCpuUsage uint32 `protobuf:"varint,3,opt,name=service_cpu_usage,json=service-cpu-usage,proto3" json:"service_cpu_usage,omitempty"`
}

func (x *Debug_ServiceCpuInfos_ServiceCpuInfo) Reset() {
	*x = Debug_ServiceCpuInfos_ServiceCpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_ServiceCpuInfos_ServiceCpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_ServiceCpuInfos_ServiceCpuInfo) ProtoMessage() {}

func (x *Debug_ServiceCpuInfos_ServiceCpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_ServiceCpuInfos_ServiceCpuInfo.ProtoReflect.Descriptor instead.
func (*Debug_ServiceCpuInfos_ServiceCpuInfo) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Debug_ServiceCpuInfos_ServiceCpuInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Debug_ServiceCpuInfos_ServiceCpuInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Debug_ServiceCpuInfos_ServiceCpuInfo) GetServiceCpuUsage() uint32 {
	if x != nil {
		return x.ServiceCpuUsage
	}
	return 0
}

type Debug_MemoryInfos_MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                 string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	OverloadThreshold        uint32 `protobuf:"varint,2,opt,name=overload_threshold,json=overload-threshold,proto3" json:"overload_threshold,omitempty"`
	UnoverloadThreshold      uint32 `protobuf:"varint,3,opt,name=unoverload_threshold,json=unoverload-threshold,proto3" json:"unoverload_threshold,omitempty"`
	Index                    uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	OsMemoryTotal            uint32 `protobuf:"varint,5,opt,name=os_memory_total,json=os-memory-total,proto3" json:"os_memory_total,omitempty"`
	OsMemoryUse              uint32 `protobuf:"varint,6,opt,name=os_memory_use,json=os-memory-use,proto3" json:"os_memory_use,omitempty"`
	OsMemoryFree             uint32 `protobuf:"varint,7,opt,name=os_memory_free,json=os-memory-free,proto3" json:"os_memory_free,omitempty"`
	OsMemoryUsage            uint32 `protobuf:"varint,8,opt,name=os_memory_usage,json=os-memory-usage,proto3" json:"os_memory_usage,omitempty"`
	DoMemoryTotal            uint32 `protobuf:"varint,9,opt,name=do_memory_total,json=do-memory-total,proto3" json:"do_memory_total,omitempty"`
	DoMemoryUse              uint32 `protobuf:"varint,10,opt,name=do_memory_use,json=do-memory-use,proto3" json:"do_memory_use,omitempty"`
	DoMemoryFree             uint32 `protobuf:"varint,11,opt,name=do_memory_free,json=do-memory-free,proto3" json:"do_memory_free,omitempty"`
	DoMemoryUsage            uint32 `protobuf:"varint,12,opt,name=do_memory_usage,json=do-memory-usage,proto3" json:"do_memory_usage,omitempty"`
	SimpleMemoryTotal        uint32 `protobuf:"varint,13,opt,name=simple_memory_total,json=simple-memory-total,proto3" json:"simple_memory_total,omitempty"`
	SimpleMemoryUse          uint32 `protobuf:"varint,14,opt,name=simple_memory_use,json=simple-memory-use,proto3" json:"simple_memory_use,omitempty"`
	SimpleMemoryFree         uint32 `protobuf:"varint,15,opt,name=simple_memory_free,json=simple-memory-free,proto3" json:"simple_memory_free,omitempty"`
	SimpleMemoryUsage        uint32 `protobuf:"varint,16,opt,name=simple_memory_usage,json=simple-memory-usage,proto3" json:"simple_memory_usage,omitempty"`
	OverloadStateChangeTime  string `protobuf:"bytes,17,opt,name=overload_state_change_time,json=overload-state-change-time,proto3" json:"overload_state_change_time,omitempty"`
	CurrentOverloadState     string `protobuf:"bytes,18,opt,name=current_overload_state,json=current-overload-state,proto3" json:"current_overload_state,omitempty"`
	MemreliNoticeThreshold   uint32 `protobuf:"varint,19,opt,name=memreli_notice_threshold,json=memreli-notice-threshold,proto3" json:"memreli_notice_threshold,omitempty"`
	MemreliOverloadThreshold uint32 `protobuf:"varint,20,opt,name=memreli_overload_threshold,json=memreli-overload-threshold,proto3" json:"memreli_overload_threshold,omitempty"`
}

func (x *Debug_MemoryInfos_MemoryInfo) Reset() {
	*x = Debug_MemoryInfos_MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_MemoryInfos_MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_MemoryInfos_MemoryInfo) ProtoMessage() {}

func (x *Debug_MemoryInfos_MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_MemoryInfos_MemoryInfo.ProtoReflect.Descriptor instead.
func (*Debug_MemoryInfos_MemoryInfo) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Debug_MemoryInfos_MemoryInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Debug_MemoryInfos_MemoryInfo) GetOverloadThreshold() uint32 {
	if x != nil {
		return x.OverloadThreshold
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetUnoverloadThreshold() uint32 {
	if x != nil {
		return x.UnoverloadThreshold
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetOsMemoryTotal() uint32 {
	if x != nil {
		return x.OsMemoryTotal
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetOsMemoryUse() uint32 {
	if x != nil {
		return x.OsMemoryUse
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetOsMemoryFree() uint32 {
	if x != nil {
		return x.OsMemoryFree
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetOsMemoryUsage() uint32 {
	if x != nil {
		return x.OsMemoryUsage
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetDoMemoryTotal() uint32 {
	if x != nil {
		return x.DoMemoryTotal
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetDoMemoryUse() uint32 {
	if x != nil {
		return x.DoMemoryUse
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetDoMemoryFree() uint32 {
	if x != nil {
		return x.DoMemoryFree
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetDoMemoryUsage() uint32 {
	if x != nil {
		return x.DoMemoryUsage
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetSimpleMemoryTotal() uint32 {
	if x != nil {
		return x.SimpleMemoryTotal
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetSimpleMemoryUse() uint32 {
	if x != nil {
		return x.SimpleMemoryUse
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetSimpleMemoryFree() uint32 {
	if x != nil {
		return x.SimpleMemoryFree
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetSimpleMemoryUsage() uint32 {
	if x != nil {
		return x.SimpleMemoryUsage
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetOverloadStateChangeTime() string {
	if x != nil {
		return x.OverloadStateChangeTime
	}
	return ""
}

func (x *Debug_MemoryInfos_MemoryInfo) GetCurrentOverloadState() string {
	if x != nil {
		return x.CurrentOverloadState
	}
	return ""
}

func (x *Debug_MemoryInfos_MemoryInfo) GetMemreliNoticeThreshold() uint32 {
	if x != nil {
		return x.MemreliNoticeThreshold
	}
	return 0
}

func (x *Debug_MemoryInfos_MemoryInfo) GetMemreliOverloadThreshold() uint32 {
	if x != nil {
		return x.MemreliOverloadThreshold
	}
	return 0
}

type Debug_ResouceReliability_MemoryReliability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Debug_ResouceReliability_MemoryReliability) Reset() {
	*x = Debug_ResouceReliability_MemoryReliability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_ResouceReliability_MemoryReliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_ResouceReliability_MemoryReliability) ProtoMessage() {}

func (x *Debug_ResouceReliability_MemoryReliability) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_ResouceReliability_MemoryReliability.ProtoReflect.Descriptor instead.
func (*Debug_ResouceReliability_MemoryReliability) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Debug_ResouceReliability_MemoryReliability) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold) Reset() {
	*x = Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold) ProtoMessage() {}

func (x *Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold.ProtoReflect.Descriptor instead.
func (*Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Debug_ResouceReliability_FlowControlMessageReliability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Debug_ResouceReliability_FlowControlMessageReliability) Reset() {
	*x = Debug_ResouceReliability_FlowControlMessageReliability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_ResouceReliability_FlowControlMessageReliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_ResouceReliability_FlowControlMessageReliability) ProtoMessage() {}

func (x *Debug_ResouceReliability_FlowControlMessageReliability) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_ResouceReliability_FlowControlMessageReliability.ProtoReflect.Descriptor instead.
func (*Debug_ResouceReliability_FlowControlMessageReliability) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *Debug_ResouceReliability_FlowControlMessageReliability) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Debug_BoardResouceStates_BoardResouceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position        string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	EntityIndex     uint32 `protobuf:"varint,2,opt,name=entity_index,json=entity-index,proto3" json:"entity_index,omitempty"`
	BoardName       string `protobuf:"bytes,3,opt,name=board_name,json=board-name,proto3" json:"board_name,omitempty"`
	CpuUsage        uint32 `protobuf:"varint,4,opt,name=cpu_usage,json=cpu-usage,proto3" json:"cpu_usage,omitempty"`
	MemoryTotalSize uint32 `protobuf:"varint,5,opt,name=memory_total_size,json=memory-total-size,proto3" json:"memory_total_size,omitempty"`
	MemoryUsedSize  uint32 `protobuf:"varint,6,opt,name=memory_used_size,json=memory-used-size,proto3" json:"memory_used_size,omitempty"`
	MemoryUsage     uint32 `protobuf:"varint,7,opt,name=memory_usage,json=memory-usage,proto3" json:"memory_usage,omitempty"`
}

func (x *Debug_BoardResouceStates_BoardResouceState) Reset() {
	*x = Debug_BoardResouceStates_BoardResouceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_debug_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug_BoardResouceStates_BoardResouceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug_BoardResouceStates_BoardResouceState) ProtoMessage() {}

func (x *Debug_BoardResouceStates_BoardResouceState) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_debug_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug_BoardResouceStates_BoardResouceState.ProtoReflect.Descriptor instead.
func (*Debug_BoardResouceStates_BoardResouceState) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_debug_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Debug_BoardResouceStates_BoardResouceState) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Debug_BoardResouceStates_BoardResouceState) GetEntityIndex() uint32 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *Debug_BoardResouceStates_BoardResouceState) GetBoardName() string {
	if x != nil {
		return x.BoardName
	}
	return ""
}

func (x *Debug_BoardResouceStates_BoardResouceState) GetCpuUsage() uint32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *Debug_BoardResouceStates_BoardResouceState) GetMemoryTotalSize() uint32 {
	if x != nil {
		return x.MemoryTotalSize
	}
	return 0
}

func (x *Debug_BoardResouceStates_BoardResouceState) GetMemoryUsedSize() uint32 {
	if x != nil {
		return x.MemoryUsedSize
	}
	return 0
}

func (x *Debug_BoardResouceStates_BoardResouceState) GetMemoryUsage() uint32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

var File_huaweiV8R12_debug_proto protoreflect.FileDescriptor

var file_huaweiV8R12_debug_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xba, 0x19, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x2e, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x09, 0x63, 0x70,
	0x75, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x70, 0x75, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x48, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x14, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x14, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x81, 0x04, 0x0a, 0x08, 0x43, 0x70,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x2e, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x70, 0x75, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xad, 0x03,
	0x0a, 0x07, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x70,
	0x75, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xf6, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x63, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x70, 0x75,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x70,
	0x75, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x7e, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x70, 0x75,
	0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xff, 0x07, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x9c, 0x07, 0x0a, 0x0a, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x73, 0x2d, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6f, 0x73, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x73, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x2d, 0x66, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6f, 0x73, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x2d, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x6f, 0x2d, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x2d, 0x66, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x6d, 0x65, 0x6d, 0x72, 0x65, 0x6c, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x6d, 0x65, 0x6d, 0x72, 0x65, 0x6c, 0x69, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x72,
	0x65, 0x6c, 0x69, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x65,
	0x6d, 0x72, 0x65, 0x6c, 0x69, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xf4, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x6d, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x52, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x2d, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xaa,
	0x01, 0x0a, 0x27, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x27, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65,
	0x72, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x20,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0x2b, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x44, 0x0a, 0x24, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x37, 0x0a, 0x1d, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0x97, 0x03, 0x0a, 0x12, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x13, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x63,
	0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8f, 0x02, 0x0a, 0x11, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x70, 0x75, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73, 0x65, 0x64,
	0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x13, 0x5a, 0x11, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R12_debug_proto_rawDescOnce sync.Once
	file_huaweiV8R12_debug_proto_rawDescData = file_huaweiV8R12_debug_proto_rawDesc
)

func file_huaweiV8R12_debug_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_debug_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_debug_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_debug_proto_rawDescData)
	})
	return file_huaweiV8R12_debug_proto_rawDescData
}

var file_huaweiV8R12_debug_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_huaweiV8R12_debug_proto_goTypes = []interface{}{
	(*Debug)(nil),                                                         // 0: huaweiV8R12_debug.Debug
	(*Debug_CpuInfos)(nil),                                                // 1: huaweiV8R12_debug.Debug.CpuInfos
	(*Debug_ServiceCpuInfos)(nil),                                         // 2: huaweiV8R12_debug.Debug.ServiceCpuInfos
	(*Debug_MemoryInfos)(nil),                                             // 3: huaweiV8R12_debug.Debug.MemoryInfos
	(*Debug_ResouceReliability)(nil),                                      // 4: huaweiV8R12_debug.Debug.ResouceReliability
	(*Debug_BoardResouceStates)(nil),                                      // 5: huaweiV8R12_debug.Debug.BoardResouceStates
	(*Debug_CpuInfos_CpuInfo)(nil),                                        // 6: huaweiV8R12_debug.Debug.CpuInfos.CpuInfo
	(*Debug_ServiceCpuInfos_ServiceCpuInfo)(nil),                          // 7: huaweiV8R12_debug.Debug.ServiceCpuInfos.ServiceCpuInfo
	(*Debug_MemoryInfos_MemoryInfo)(nil),                                  // 8: huaweiV8R12_debug.Debug.MemoryInfos.MemoryInfo
	(*Debug_ResouceReliability_MemoryReliability)(nil),                    // 9: huaweiV8R12_debug.Debug.ResouceReliability.MemoryReliability
	(*Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold)(nil), // 10: huaweiV8R12_debug.Debug.ResouceReliability.MemoryReliabilitySwitchoverThreshold
	(*Debug_ResouceReliability_FlowControlMessageReliability)(nil),        // 11: huaweiV8R12_debug.Debug.ResouceReliability.FlowControlMessageReliability
	(*Debug_BoardResouceStates_BoardResouceState)(nil),                    // 12: huaweiV8R12_debug.Debug.BoardResouceStates.BoardResouceState
}
var file_huaweiV8R12_debug_proto_depIdxs = []int32{
	1,  // 0: huaweiV8R12_debug.Debug.cpu_infos:type_name -> huaweiV8R12_debug.Debug.CpuInfos
	2,  // 1: huaweiV8R12_debug.Debug.service_cpu_infos:type_name -> huaweiV8R12_debug.Debug.ServiceCpuInfos
	3,  // 2: huaweiV8R12_debug.Debug.memory_infos:type_name -> huaweiV8R12_debug.Debug.MemoryInfos
	4,  // 3: huaweiV8R12_debug.Debug.resouce_reliability:type_name -> huaweiV8R12_debug.Debug.ResouceReliability
	5,  // 4: huaweiV8R12_debug.Debug.board_resouce_states:type_name -> huaweiV8R12_debug.Debug.BoardResouceStates
	6,  // 5: huaweiV8R12_debug.Debug.CpuInfos.cpu_info:type_name -> huaweiV8R12_debug.Debug.CpuInfos.CpuInfo
	7,  // 6: huaweiV8R12_debug.Debug.ServiceCpuInfos.service_cpu_info:type_name -> huaweiV8R12_debug.Debug.ServiceCpuInfos.ServiceCpuInfo
	8,  // 7: huaweiV8R12_debug.Debug.MemoryInfos.memory_info:type_name -> huaweiV8R12_debug.Debug.MemoryInfos.MemoryInfo
	9,  // 8: huaweiV8R12_debug.Debug.ResouceReliability.memory_reliability:type_name -> huaweiV8R12_debug.Debug.ResouceReliability.MemoryReliability
	10, // 9: huaweiV8R12_debug.Debug.ResouceReliability.memory_reliability_switchover_threshold:type_name -> huaweiV8R12_debug.Debug.ResouceReliability.MemoryReliabilitySwitchoverThreshold
	11, // 10: huaweiV8R12_debug.Debug.ResouceReliability.flow_control_message_reliability:type_name -> huaweiV8R12_debug.Debug.ResouceReliability.FlowControlMessageReliability
	12, // 11: huaweiV8R12_debug.Debug.BoardResouceStates.board_resouce_state:type_name -> huaweiV8R12_debug.Debug.BoardResouceStates.BoardResouceState
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_debug_proto_init() }
func file_huaweiV8R12_debug_proto_init() {
	if File_huaweiV8R12_debug_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_debug_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_CpuInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_ServiceCpuInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_MemoryInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_ResouceReliability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_BoardResouceStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_CpuInfos_CpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_ServiceCpuInfos_ServiceCpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_MemoryInfos_MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_ResouceReliability_MemoryReliability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_ResouceReliability_MemoryReliabilitySwitchoverThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_ResouceReliability_FlowControlMessageReliability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_debug_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug_BoardResouceStates_BoardResouceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_debug_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_debug_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_debug_proto_depIdxs,
		MessageInfos:      file_huaweiV8R12_debug_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_debug_proto = out.File
	file_huaweiV8R12_debug_proto_rawDesc = nil
	file_huaweiV8R12_debug_proto_goTypes = nil
	file_huaweiV8R12_debug_proto_depIdxs = nil
}
