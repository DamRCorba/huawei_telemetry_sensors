// ---------------------------------------------------------------------------
// Protofilename : huawei-emdi.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-emdi.proto

package huaweiV8R12_emdi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate int32

const (
	Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate_CLOCKX_90KHZ         Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate = 0
	Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate_CLOCKX_27000KHZ      Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate = 1
	Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate_CLOCKX_148500KHZ     Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate = 2
	Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate_CLOCKX_ABOUTX_148MHZ Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate = 3
)

// Enum value maps for Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate.
var (
	Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate_name = map[int32]string{
		0: "ClockRate_CLOCKX_90KHZ",
		1: "ClockRate_CLOCKX_27000KHZ",
		2: "ClockRate_CLOCKX_148500KHZ",
		3: "ClockRate_CLOCKX_ABOUTX_148MHZ",
	}
	Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate_value = map[string]int32{
		"ClockRate_CLOCKX_90KHZ":         0,
		"ClockRate_CLOCKX_27000KHZ":      1,
		"ClockRate_CLOCKX_148500KHZ":     2,
		"ClockRate_CLOCKX_ABOUTX_148MHZ": 3,
	}
)

func (x Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate) Enum() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate {
	p := new(Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate)
	*p = x
	return p
}

func (x Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_emdi_proto_enumTypes[0].Descriptor()
}

func (Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_emdi_proto_enumTypes[0]
}

func (x Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate.Descriptor instead.
func (Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

type Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction int32

const (
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction_INBOUND  Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction = 0
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction_OUTBOUND Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction = 1
)

// Enum value maps for Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction.
var (
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction) Enum() *Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction {
	p := new(Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction)
	*p = x
	return p
}

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_emdi_proto_enumTypes[1].Descriptor()
}

func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_emdi_proto_enumTypes[1]
}

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction.Descriptor instead.
func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod int32

const (
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_INVALID_ENUM_VALUE_MonitorPeriod Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod = 0
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod_SECONDX_10S        Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod = 10
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod_SECONDX_30S        Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod = 30
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod_SECONDX_60S        Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod = 60
)

// Enum value maps for Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod.
var (
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_MonitorPeriod",
		10: "MonitorPeriod_SECONDX_10S",
		30: "MonitorPeriod_SECONDX_30S",
		60: "MonitorPeriod_SECONDX_60S",
	}
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod_value = map[string]int32{
		"INVALID_ENUM_VALUE_MonitorPeriod": 0,
		"MonitorPeriod_SECONDX_10S":        10,
		"MonitorPeriod_SECONDX_30S":        30,
		"MonitorPeriod_SECONDX_60S":        60,
	}
)

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod) Enum() *Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod {
	p := new(Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod)
	*p = x
	return p
}

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_emdi_proto_enumTypes[2].Descriptor()
}

func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_emdi_proto_enumTypes[2]
}

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod.Descriptor instead.
func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus int32

const (
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus_NORMAL     Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus = 0
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus_CARX_DROP  Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus = 1
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus_RATEX_ONLY Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus = 2
)

// Enum value maps for Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus.
var (
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus_name = map[int32]string{
		0: "MonitorStatus_NORMAL",
		1: "MonitorStatus_CARX_DROP",
		2: "MonitorStatus_RATEX_ONLY",
	}
	Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus_value = map[string]int32{
		"MonitorStatus_NORMAL":     0,
		"MonitorStatus_CARX_DROP":  1,
		"MonitorStatus_RATEX_ONLY": 2,
	}
)

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus) Enum() *Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus {
	p := new(Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus)
	*p = x
	return p
}

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_emdi_proto_enumTypes[3].Descriptor()
}

func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_emdi_proto_enumTypes[3]
}

func (x Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus.Descriptor instead.
func (Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

type Emdi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiEnable         *Emdi_EmdiEnable         `protobuf:"bytes,1,opt,name=emdi_enable,json=emdi-enable,proto3" json:"emdi_enable,omitempty"`
	EmdiHistoryRecords *Emdi_EmdiHistoryRecords `protobuf:"bytes,2,opt,name=emdi_history_records,json=emdi-history-records,proto3" json:"emdi_history_records,omitempty"`
	EmdiChannels       *Emdi_EmdiChannels       `protobuf:"bytes,3,opt,name=emdi_channels,json=emdi-channels,proto3" json:"emdi_channels,omitempty"`
	EmdiTelemReps      *Emdi_EmdiTelemReps      `protobuf:"bytes,4,opt,name=emdi_telem_reps,json=emdi-telem-reps,proto3" json:"emdi_telem_reps,omitempty"`
	EmdiTelemRtps      *Emdi_EmdiTelemRtps      `protobuf:"bytes,5,opt,name=emdi_telem_rtps,json=emdi-telem-rtps,proto3" json:"emdi_telem_rtps,omitempty"`
	OutTelemReps       *Emdi_OutTelemReps       `protobuf:"bytes,6,opt,name=out_telem_reps,json=out-telem-reps,proto3" json:"out_telem_reps,omitempty"`
}

func (x *Emdi) Reset() {
	*x = Emdi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi) ProtoMessage() {}

func (x *Emdi) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi.ProtoReflect.Descriptor instead.
func (*Emdi) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0}
}

func (x *Emdi) GetEmdiEnable() *Emdi_EmdiEnable {
	if x != nil {
		return x.EmdiEnable
	}
	return nil
}

func (x *Emdi) GetEmdiHistoryRecords() *Emdi_EmdiHistoryRecords {
	if x != nil {
		return x.EmdiHistoryRecords
	}
	return nil
}

func (x *Emdi) GetEmdiChannels() *Emdi_EmdiChannels {
	if x != nil {
		return x.EmdiChannels
	}
	return nil
}

func (x *Emdi) GetEmdiTelemReps() *Emdi_EmdiTelemReps {
	if x != nil {
		return x.EmdiTelemReps
	}
	return nil
}

func (x *Emdi) GetEmdiTelemRtps() *Emdi_EmdiTelemRtps {
	if x != nil {
		return x.EmdiTelemRtps
	}
	return nil
}

func (x *Emdi) GetOutTelemReps() *Emdi_OutTelemReps {
	if x != nil {
		return x.OutTelemReps
	}
	return nil
}

type Emdi_EmdiEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiChannelGroups                 *Emdi_EmdiEnable_EmdiChannelGroups                 `protobuf:"bytes,1,opt,name=emdi_channel_groups,json=emdi-channel-groups,proto3" json:"emdi_channel_groups,omitempty"`
	EmdiLpuGroups                     *Emdi_EmdiEnable_EmdiLpuGroups                     `protobuf:"bytes,2,opt,name=emdi_lpu_groups,json=emdi-lpu-groups,proto3" json:"emdi_lpu_groups,omitempty"`
	ChannelGroupBindLpuGroups         *Emdi_EmdiEnable_ChannelGroupBindLpuGroups         `protobuf:"bytes,3,opt,name=channel_group_bind_lpu_groups,json=channel-group-bind-lpu-groups,proto3" json:"channel_group_bind_lpu_groups,omitempty"`
	OutboundChannelGroupBindLpuGroups *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups `protobuf:"bytes,4,opt,name=outbound_channel_group_bind_lpu_groups,json=outbound-channel-group-bind-lpu-groups,proto3" json:"outbound_channel_group_bind_lpu_groups,omitempty"`
}

func (x *Emdi_EmdiEnable) Reset() {
	*x = Emdi_EmdiEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable) ProtoMessage() {}

func (x *Emdi_EmdiEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Emdi_EmdiEnable) GetEmdiChannelGroups() *Emdi_EmdiEnable_EmdiChannelGroups {
	if x != nil {
		return x.EmdiChannelGroups
	}
	return nil
}

func (x *Emdi_EmdiEnable) GetEmdiLpuGroups() *Emdi_EmdiEnable_EmdiLpuGroups {
	if x != nil {
		return x.EmdiLpuGroups
	}
	return nil
}

func (x *Emdi_EmdiEnable) GetChannelGroupBindLpuGroups() *Emdi_EmdiEnable_ChannelGroupBindLpuGroups {
	if x != nil {
		return x.ChannelGroupBindLpuGroups
	}
	return nil
}

func (x *Emdi_EmdiEnable) GetOutboundChannelGroupBindLpuGroups() *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups {
	if x != nil {
		return x.OutboundChannelGroupBindLpuGroups
	}
	return nil
}

type Emdi_EmdiHistoryRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiHistoryRecord []*Emdi_EmdiHistoryRecords_EmdiHistoryRecord `protobuf:"bytes,1,rep,name=emdi_history_record,json=emdi-history-record,proto3" json:"emdi_history_record,omitempty"`
}

func (x *Emdi_EmdiHistoryRecords) Reset() {
	*x = Emdi_EmdiHistoryRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiHistoryRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiHistoryRecords) ProtoMessage() {}

func (x *Emdi_EmdiHistoryRecords) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiHistoryRecords.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiHistoryRecords) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Emdi_EmdiHistoryRecords) GetEmdiHistoryRecord() []*Emdi_EmdiHistoryRecords_EmdiHistoryRecord {
	if x != nil {
		return x.EmdiHistoryRecord
	}
	return nil
}

type Emdi_EmdiChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiChannel []*Emdi_EmdiChannels_EmdiChannel `protobuf:"bytes,1,rep,name=emdi_channel,json=emdi-channel,proto3" json:"emdi_channel,omitempty"`
}

func (x *Emdi_EmdiChannels) Reset() {
	*x = Emdi_EmdiChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiChannels) ProtoMessage() {}

func (x *Emdi_EmdiChannels) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiChannels.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiChannels) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Emdi_EmdiChannels) GetEmdiChannel() []*Emdi_EmdiChannels_EmdiChannel {
	if x != nil {
		return x.EmdiChannel
	}
	return nil
}

type Emdi_EmdiTelemReps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiTelemRep []*Emdi_EmdiTelemReps_EmdiTelemRep `protobuf:"bytes,1,rep,name=emdi_telem_rep,json=emdi-telem-rep,proto3" json:"emdi_telem_rep,omitempty"`
}

func (x *Emdi_EmdiTelemReps) Reset() {
	*x = Emdi_EmdiTelemReps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiTelemReps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiTelemReps) ProtoMessage() {}

func (x *Emdi_EmdiTelemReps) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiTelemReps.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiTelemReps) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Emdi_EmdiTelemReps) GetEmdiTelemRep() []*Emdi_EmdiTelemReps_EmdiTelemRep {
	if x != nil {
		return x.EmdiTelemRep
	}
	return nil
}

type Emdi_EmdiTelemRtps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiTelemRtp []*Emdi_EmdiTelemRtps_EmdiTelemRtp `protobuf:"bytes,1,rep,name=emdi_telem_rtp,json=emdi-telem-rtp,proto3" json:"emdi_telem_rtp,omitempty"`
}

func (x *Emdi_EmdiTelemRtps) Reset() {
	*x = Emdi_EmdiTelemRtps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiTelemRtps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiTelemRtps) ProtoMessage() {}

func (x *Emdi_EmdiTelemRtps) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiTelemRtps.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiTelemRtps) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Emdi_EmdiTelemRtps) GetEmdiTelemRtp() []*Emdi_EmdiTelemRtps_EmdiTelemRtp {
	if x != nil {
		return x.EmdiTelemRtp
	}
	return nil
}

type Emdi_OutTelemReps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTelemRep []*Emdi_OutTelemReps_OutTelemRep `protobuf:"bytes,1,rep,name=out_telem_rep,json=out-telem-rep,proto3" json:"out_telem_rep,omitempty"`
}

func (x *Emdi_OutTelemReps) Reset() {
	*x = Emdi_OutTelemReps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_OutTelemReps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_OutTelemReps) ProtoMessage() {}

func (x *Emdi_OutTelemReps) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_OutTelemReps.ProtoReflect.Descriptor instead.
func (*Emdi_OutTelemReps) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Emdi_OutTelemReps) GetOutTelemRep() []*Emdi_OutTelemReps_OutTelemRep {
	if x != nil {
		return x.OutTelemRep
	}
	return nil
}

type Emdi_EmdiEnable_EmdiChannelGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiChannelGroup []*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup `protobuf:"bytes,1,rep,name=emdi_channel_group,json=emdi-channel-group,proto3" json:"emdi_channel_group,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiChannelGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups) GetEmdiChannelGroup() []*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup {
	if x != nil {
		return x.EmdiChannelGroup
	}
	return nil
}

type Emdi_EmdiEnable_EmdiLpuGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiLpuGroup []*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup `protobuf:"bytes,1,rep,name=emdi_lpu_group,json=emdi-lpu-group,proto3" json:"emdi_lpu_group,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups) Reset() {
	*x = Emdi_EmdiEnable_EmdiLpuGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiLpuGroups) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiLpuGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiLpuGroups.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiLpuGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups) GetEmdiLpuGroup() []*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup {
	if x != nil {
		return x.EmdiLpuGroup
	}
	return nil
}

type Emdi_EmdiEnable_ChannelGroupBindLpuGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelGroupBindLpuGroup []*Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup `protobuf:"bytes,1,rep,name=channel_group_bind_lpu_group,json=channel-group-bind-lpu-group,proto3" json:"channel_group_bind_lpu_group,omitempty"`
}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups) Reset() {
	*x = Emdi_EmdiEnable_ChannelGroupBindLpuGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_ChannelGroupBindLpuGroups) ProtoMessage() {}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_ChannelGroupBindLpuGroups.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_ChannelGroupBindLpuGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups) GetChannelGroupBindLpuGroup() []*Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup {
	if x != nil {
		return x.ChannelGroupBindLpuGroup
	}
	return nil
}

type Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutboundChannelGroupBindLpuGroup []*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup `protobuf:"bytes,1,rep,name=outbound_channel_group_bind_lpu_group,json=outbound-channel-group-bind-lpu-group,proto3" json:"outbound_channel_group_bind_lpu_group,omitempty"`
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups) Reset() {
	*x = Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups) ProtoMessage() {}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups) GetOutboundChannelGroupBindLpuGroup() []*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup {
	if x != nil {
		return x.OutboundChannelGroupBindLpuGroup
	}
	return nil
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelGroupName string                                                           `protobuf:"bytes,1,opt,name=channel_group_name,json=channel-group-name,proto3" json:"channel_group_name,omitempty"`
	EmdiChannels     *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels `protobuf:"bytes,2,opt,name=emdi_channels,json=emdi-channels,proto3" json:"emdi_channels,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup) GetChannelGroupName() string {
	if x != nil {
		return x.ChannelGroupName
	}
	return ""
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup) GetEmdiChannels() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels {
	if x != nil {
		return x.EmdiChannels
	}
	return nil
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiChannel []*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel `protobuf:"bytes,1,rep,name=emdi_channel,json=emdi-channel,proto3" json:"emdi_channel,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels) GetEmdiChannel() []*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel {
	if x != nil {
		return x.EmdiChannel
	}
	return nil
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName            string                                                                                              `protobuf:"bytes,1,opt,name=channel_name,json=channel-name,proto3" json:"channel_name,omitempty"`
	SourceAddress          string                                                                                              `protobuf:"bytes,2,opt,name=source_address,json=source-address,proto3" json:"source_address,omitempty"`
	GroupAddress           string                                                                                              `protobuf:"bytes,3,opt,name=group_address,json=group-address,proto3" json:"group_address,omitempty"`
	ChannelGroupParameters *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters `protobuf:"bytes,4,opt,name=channel_group_parameters,json=channel-group-parameters,proto3" json:"channel_group_parameters,omitempty"`
	PtValue                uint32                                                                                              `protobuf:"varint,5,opt,name=pt_value,json=pt-value,proto3" json:"pt_value,omitempty"`
	ClockRate              Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate               `protobuf:"varint,6,opt,name=clock_rate,json=clock-rate,proto3,enum=huaweiV8R12_emdi.Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate" json:"clock_rate,omitempty"`
	Uncompressed           bool                                                                                                `protobuf:"varint,7,opt,name=uncompressed,proto3" json:"uncompressed,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) GetGroupAddress() string {
	if x != nil {
		return x.GroupAddress
	}
	return ""
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) GetChannelGroupParameters() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters {
	if x != nil {
		return x.ChannelGroupParameters
	}
	return nil
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) GetPtValue() uint32 {
	if x != nil {
		return x.PtValue
	}
	return 0
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) GetClockRate() Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate {
	if x != nil {
		return x.ClockRate
	}
	return Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate_CLOCKX_90KHZ
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel) GetUncompressed() bool {
	if x != nil {
		return x.Uncompressed
	}
	return false
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpnName *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName `protobuf:"bytes,1,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	VlanId  *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId  `protobuf:"bytes,2,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	VsiName *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName `protobuf:"bytes,3,opt,name=vsi_name,json=vsi-name,proto3" json:"vsi_name,omitempty"`
	BdId    *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId    `protobuf:"bytes,4,opt,name=bd_id,json=bd-id,proto3" json:"bd_id,omitempty"`
	Transit *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit `protobuf:"bytes,5,opt,name=transit,proto3" json:"transit,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) ProtoMessage() {
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) GetVpnName() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName {
	if x != nil {
		return x.VpnName
	}
	return nil
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) GetVlanId() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) GetVsiName() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName {
	if x != nil {
		return x.VsiName
	}
	return nil
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) GetBdId() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId {
	if x != nil {
		return x.BdId
	}
	return nil
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters) GetTransit() *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit {
	if x != nil {
		return x.Transit
	}
	return nil
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpnName string `protobuf:"bytes,1,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName) ProtoMessage() {
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId) ProtoMessage() {
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VsiName string `protobuf:"bytes,1,opt,name=vsi_name,json=vsi-name,proto3" json:"vsi_name,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName) ProtoMessage() {
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 2}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BdId uint32 `protobuf:"varint,1,opt,name=bd_id,json=bd-id,proto3" json:"bd_id,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId) ProtoMessage() {
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 3}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId) GetBdId() uint32 {
	if x != nil {
		return x.BdId
	}
	return 0
}

type Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transit bool `protobuf:"varint,1,opt,name=transit,proto3" json:"transit,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit) Reset() {
	*x = Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit) ProtoMessage() {
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 4}
}

func (x *Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit) GetTransit() bool {
	if x != nil {
		return x.Transit
	}
	return false
}

type Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LpuGroupName  string                                                    `protobuf:"bytes,1,opt,name=lpu_group_name,json=lpu-group-name,proto3" json:"lpu_group_name,omitempty"`
	EmdiBindSlots *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots `protobuf:"bytes,2,opt,name=emdi_bind_slots,json=emdi-bind-slots,proto3" json:"emdi_bind_slots,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup) Reset() {
	*x = Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup) GetLpuGroupName() string {
	if x != nil {
		return x.LpuGroupName
	}
	return ""
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup) GetEmdiBindSlots() *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots {
	if x != nil {
		return x.EmdiBindSlots
	}
	return nil
}

type Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmdiBindSlot []*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot `protobuf:"bytes,1,rep,name=emdi_bind_slot,json=emdi-bind-slot,proto3" json:"emdi_bind_slot,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots) Reset() {
	*x = Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots) GetEmdiBindSlot() []*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot {
	if x != nil {
		return x.EmdiBindSlot
	}
	return nil
}

type Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindSlot string `protobuf:"bytes,1,opt,name=bind_slot,json=bind-slot,proto3" json:"bind_slot,omitempty"`
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot) Reset() {
	*x = Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot) ProtoMessage() {}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0}
}

func (x *Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot) GetBindSlot() string {
	if x != nil {
		return x.BindSlot
	}
	return ""
}

type Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LpuGroupName     string `protobuf:"bytes,1,opt,name=lpu_group_name,json=lpu-group-name,proto3" json:"lpu_group_name,omitempty"`
	ChannelGroupName string `protobuf:"bytes,2,opt,name=channel_group_name,json=channel-group-name,proto3" json:"channel_group_name,omitempty"`
}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup) Reset() {
	*x = Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup) ProtoMessage() {}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup) GetLpuGroupName() string {
	if x != nil {
		return x.LpuGroupName
	}
	return ""
}

func (x *Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup) GetChannelGroupName() string {
	if x != nil {
		return x.ChannelGroupName
	}
	return ""
}

type Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LpuGroupName     string `protobuf:"bytes,1,opt,name=lpu_group_name,json=lpu-group-name,proto3" json:"lpu_group_name,omitempty"`
	ChannelGroupName string `protobuf:"bytes,2,opt,name=channel_group_name,json=channel-group-name,proto3" json:"channel_group_name,omitempty"`
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup) Reset() {
	*x = Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup) ProtoMessage() {
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup) GetLpuGroupName() string {
	if x != nil {
		return x.LpuGroupName
	}
	return ""
}

func (x *Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup) GetChannelGroupName() string {
	if x != nil {
		return x.ChannelGroupName
	}
	return ""
}

type Emdi_EmdiHistoryRecords_EmdiHistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName    string                                                  `protobuf:"bytes,1,opt,name=channel_name,json=channel-name,proto3" json:"channel_name,omitempty"`
	RecordIndex    uint32                                                  `protobuf:"varint,2,opt,name=record_index,json=record-index,proto3" json:"record_index,omitempty"`
	Direction      Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction     `protobuf:"varint,3,opt,name=direction,proto3,enum=huaweiV8R12_emdi.Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction" json:"direction,omitempty"`
	RecordTime     string                                                  `protobuf:"bytes,4,opt,name=record_time,json=record-time,proto3" json:"record_time,omitempty"`
	MonitorPeriod  Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod `protobuf:"varint,5,opt,name=monitor_period,json=monitor-period,proto3,enum=huaweiV8R12_emdi.Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod" json:"monitor_period,omitempty"`
	MonitorStatus  Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus `protobuf:"varint,6,opt,name=monitor_status,json=monitor-status,proto3,enum=huaweiV8R12_emdi.Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus" json:"monitor_status,omitempty"`
	ReceivePacket  uint64                                                  `protobuf:"varint,7,opt,name=receive_packet,json=receive-packet,proto3" json:"receive_packet,omitempty"`
	RatePps        uint64                                                  `protobuf:"varint,8,opt,name=rate_pps,json=rate-pps,proto3" json:"rate_pps,omitempty"`
	RateBps        uint64                                                  `protobuf:"varint,9,opt,name=rate_bps,json=rate-bps,proto3" json:"rate_bps,omitempty"`
	LostPacket     uint64                                                  `protobuf:"varint,10,opt,name=lost_packet,json=lost-packet,proto3" json:"lost_packet,omitempty"`
	DisorderPacket uint64                                                  `protobuf:"varint,11,opt,name=disorder_packet,json=disorder-packet,proto3" json:"disorder_packet,omitempty"`
	RtpLr          uint32                                                  `protobuf:"varint,12,opt,name=rtp_lr,json=rtp-lr,proto3" json:"rtp_lr,omitempty"`
	RtpSer         uint32                                                  `protobuf:"varint,13,opt,name=rtp_ser,json=rtp-ser,proto3" json:"rtp_ser,omitempty"`
	RtpJitter      string                                                  `protobuf:"bytes,14,opt,name=rtp_jitter,json=rtp-jitter,proto3" json:"rtp_jitter,omitempty"`
	SlotId         string                                                  `protobuf:"bytes,15,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	InterfaceName  string                                                  `protobuf:"bytes,16,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) Reset() {
	*x = Emdi_EmdiHistoryRecords_EmdiHistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiHistoryRecords_EmdiHistoryRecord) ProtoMessage() {}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiHistoryRecords_EmdiHistoryRecord.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiHistoryRecords_EmdiHistoryRecord) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetRecordIndex() uint32 {
	if x != nil {
		return x.RecordIndex
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetDirection() Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction {
	if x != nil {
		return x.Direction
	}
	return Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction_INBOUND
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetRecordTime() string {
	if x != nil {
		return x.RecordTime
	}
	return ""
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetMonitorPeriod() Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod {
	if x != nil {
		return x.MonitorPeriod
	}
	return Emdi_EmdiHistoryRecords_EmdiHistoryRecord_INVALID_ENUM_VALUE_MonitorPeriod
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetMonitorStatus() Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus {
	if x != nil {
		return x.MonitorStatus
	}
	return Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus_NORMAL
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetReceivePacket() uint64 {
	if x != nil {
		return x.ReceivePacket
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetRatePps() uint64 {
	if x != nil {
		return x.RatePps
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetRateBps() uint64 {
	if x != nil {
		return x.RateBps
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetLostPacket() uint64 {
	if x != nil {
		return x.LostPacket
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetDisorderPacket() uint64 {
	if x != nil {
		return x.DisorderPacket
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetRtpLr() uint32 {
	if x != nil {
		return x.RtpLr
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetRtpSer() uint32 {
	if x != nil {
		return x.RtpSer
	}
	return 0
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetRtpJitter() string {
	if x != nil {
		return x.RtpJitter
	}
	return ""
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Emdi_EmdiHistoryRecords_EmdiHistoryRecord) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type Emdi_EmdiChannels_EmdiChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channel-name,proto3" json:"channel_name,omitempty"`
}

func (x *Emdi_EmdiChannels_EmdiChannel) Reset() {
	*x = Emdi_EmdiChannels_EmdiChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiChannels_EmdiChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiChannels_EmdiChannel) ProtoMessage() {}

func (x *Emdi_EmdiChannels_EmdiChannel) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiChannels_EmdiChannel.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiChannels_EmdiChannel) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Emdi_EmdiChannels_EmdiChannel) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type Emdi_EmdiTelemReps_EmdiTelemRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrId                  uint32 `protobuf:"varint,1,opt,name=vr_id,json=vr-id,proto3" json:"vr_id,omitempty"`
	ChannelName           string `protobuf:"bytes,2,opt,name=channel_name,json=channel-name,proto3" json:"channel_name,omitempty"`
	ChannelSourceAddress  string `protobuf:"bytes,3,opt,name=channel_source_address,json=channel-source-address,proto3" json:"channel_source_address,omitempty"`
	ChannelGroupAddress   string `protobuf:"bytes,4,opt,name=channel_group_address,json=channel-group-address,proto3" json:"channel_group_address,omitempty"`
	ChannelVpnType        uint32 `protobuf:"varint,5,opt,name=channel_vpn_type,json=channel-vpn-type,proto3" json:"channel_vpn_type,omitempty"`
	VpnName               string `protobuf:"bytes,6,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	VlanId                uint32 `protobuf:"varint,7,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	VsiName               string `protobuf:"bytes,8,opt,name=vsi_name,json=vsi-name,proto3" json:"vsi_name,omitempty"`
	BdId                  uint32 `protobuf:"varint,9,opt,name=bd_id,json=bd-id,proto3" json:"bd_id,omitempty"`
	ReportPeriod          uint32 `protobuf:"varint,10,opt,name=report_period,json=report-period,proto3" json:"report_period,omitempty"`
	ReportTime            uint64 `protobuf:"varint,11,opt,name=report_time,json=report-time,proto3" json:"report_time,omitempty"`
	TotalRecvPackets      uint64 `protobuf:"varint,12,opt,name=total_recv_packets,json=total-recv-packets,proto3" json:"total_recv_packets,omitempty"`
	TotalLossPackets      uint64 `protobuf:"varint,13,opt,name=total_loss_packets,json=total-loss-packets,proto3" json:"total_loss_packets,omitempty"`
	TotalDisorderdPackets uint64 `protobuf:"varint,14,opt,name=total_disorderd_packets,json=total-disorderd-packets,proto3" json:"total_disorderd_packets,omitempty"`
	MonitorPeriod         uint32 `protobuf:"varint,15,opt,name=monitor_period,json=monitor-period,proto3" json:"monitor_period,omitempty"`
	MonitorTime           uint64 `protobuf:"varint,16,opt,name=monitor_time,json=monitor-time,proto3" json:"monitor_time,omitempty"`
	WorstRecvPackets      uint64 `protobuf:"varint,17,opt,name=worst_recv_packets,json=worst-recv-packets,proto3" json:"worst_recv_packets,omitempty"`
	WorstLossPackets      uint64 `protobuf:"varint,18,opt,name=worst_loss_packets,json=worst-loss-packets,proto3" json:"worst_loss_packets,omitempty"`
	WorstDisorderdPackets uint64 `protobuf:"varint,19,opt,name=worst_disorderd_packets,json=worst-disorderd-packets,proto3" json:"worst_disorderd_packets,omitempty"`
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) Reset() {
	*x = Emdi_EmdiTelemReps_EmdiTelemRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiTelemReps_EmdiTelemRep) ProtoMessage() {}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiTelemReps_EmdiTelemRep.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiTelemReps_EmdiTelemRep) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetVrId() uint32 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetChannelSourceAddress() string {
	if x != nil {
		return x.ChannelSourceAddress
	}
	return ""
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetChannelGroupAddress() string {
	if x != nil {
		return x.ChannelGroupAddress
	}
	return ""
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetChannelVpnType() uint32 {
	if x != nil {
		return x.ChannelVpnType
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetBdId() uint32 {
	if x != nil {
		return x.BdId
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetReportPeriod() uint32 {
	if x != nil {
		return x.ReportPeriod
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetReportTime() uint64 {
	if x != nil {
		return x.ReportTime
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetTotalRecvPackets() uint64 {
	if x != nil {
		return x.TotalRecvPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetTotalLossPackets() uint64 {
	if x != nil {
		return x.TotalLossPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetTotalDisorderdPackets() uint64 {
	if x != nil {
		return x.TotalDisorderdPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetMonitorPeriod() uint32 {
	if x != nil {
		return x.MonitorPeriod
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetMonitorTime() uint64 {
	if x != nil {
		return x.MonitorTime
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetWorstRecvPackets() uint64 {
	if x != nil {
		return x.WorstRecvPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetWorstLossPackets() uint64 {
	if x != nil {
		return x.WorstLossPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemReps_EmdiTelemRep) GetWorstDisorderdPackets() uint64 {
	if x != nil {
		return x.WorstDisorderdPackets
	}
	return 0
}

type Emdi_EmdiTelemRtps_EmdiTelemRtp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrId                 uint32 `protobuf:"varint,1,opt,name=vr_id,json=vr-id,proto3" json:"vr_id,omitempty"`
	ChannelName          string `protobuf:"bytes,2,opt,name=channel_name,json=channel-name,proto3" json:"channel_name,omitempty"`
	ChannelSourceAddress string `protobuf:"bytes,3,opt,name=channel_source_address,json=channel-source-address,proto3" json:"channel_source_address,omitempty"`
	ChannelGroupAddress  string `protobuf:"bytes,4,opt,name=channel_group_address,json=channel-group-address,proto3" json:"channel_group_address,omitempty"`
	ChannelVpnType       uint32 `protobuf:"varint,5,opt,name=channel_vpn_type,json=channel-vpn-type,proto3" json:"channel_vpn_type,omitempty"`
	VpnName              string `protobuf:"bytes,6,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	VlanId               uint32 `protobuf:"varint,7,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	VsiName              string `protobuf:"bytes,8,opt,name=vsi_name,json=vsi-name,proto3" json:"vsi_name,omitempty"`
	BdId                 uint32 `protobuf:"varint,9,opt,name=bd_id,json=bd-id,proto3" json:"bd_id,omitempty"`
	ReportPeriod         uint32 `protobuf:"varint,10,opt,name=report_period,json=report-period,proto3" json:"report_period,omitempty"`
	ReportTime           uint64 `protobuf:"varint,11,opt,name=report_time,json=report-time,proto3" json:"report_time,omitempty"`
	RecvPackets          uint64 `protobuf:"varint,12,opt,name=recv_packets,json=recv-packets,proto3" json:"recv_packets,omitempty"`
	LossPackets          uint64 `protobuf:"varint,13,opt,name=loss_packets,json=loss-packets,proto3" json:"loss_packets,omitempty"`
	DisorderdPackets     uint64 `protobuf:"varint,14,opt,name=disorderd_packets,json=disorderd-packets,proto3" json:"disorderd_packets,omitempty"`
	MonitorPeriod        uint32 `protobuf:"varint,15,opt,name=monitor_period,json=monitor-period,proto3" json:"monitor_period,omitempty"`
	MonitorTime          uint64 `protobuf:"varint,16,opt,name=monitor_time,json=monitor-time,proto3" json:"monitor_time,omitempty"`
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) Reset() {
	*x = Emdi_EmdiTelemRtps_EmdiTelemRtp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_EmdiTelemRtps_EmdiTelemRtp) ProtoMessage() {}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_EmdiTelemRtps_EmdiTelemRtp.ProtoReflect.Descriptor instead.
func (*Emdi_EmdiTelemRtps_EmdiTelemRtp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetVrId() uint32 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetChannelSourceAddress() string {
	if x != nil {
		return x.ChannelSourceAddress
	}
	return ""
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetChannelGroupAddress() string {
	if x != nil {
		return x.ChannelGroupAddress
	}
	return ""
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetChannelVpnType() uint32 {
	if x != nil {
		return x.ChannelVpnType
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetBdId() uint32 {
	if x != nil {
		return x.BdId
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetReportPeriod() uint32 {
	if x != nil {
		return x.ReportPeriod
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetReportTime() uint64 {
	if x != nil {
		return x.ReportTime
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetRecvPackets() uint64 {
	if x != nil {
		return x.RecvPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetLossPackets() uint64 {
	if x != nil {
		return x.LossPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetDisorderdPackets() uint64 {
	if x != nil {
		return x.DisorderdPackets
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetMonitorPeriod() uint32 {
	if x != nil {
		return x.MonitorPeriod
	}
	return 0
}

func (x *Emdi_EmdiTelemRtps_EmdiTelemRtp) GetMonitorTime() uint64 {
	if x != nil {
		return x.MonitorTime
	}
	return 0
}

type Emdi_OutTelemReps_OutTelemRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrId                  uint32 `protobuf:"varint,1,opt,name=vr_id,json=vr-id,proto3" json:"vr_id,omitempty"`
	ChannelName           string `protobuf:"bytes,2,opt,name=channel_name,json=channel-name,proto3" json:"channel_name,omitempty"`
	SlotId                string `protobuf:"bytes,3,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ChannelSourceAddress  string `protobuf:"bytes,4,opt,name=channel_source_address,json=channel-source-address,proto3" json:"channel_source_address,omitempty"`
	ChannelGroupAddress   string `protobuf:"bytes,5,opt,name=channel_group_address,json=channel-group-address,proto3" json:"channel_group_address,omitempty"`
	ChannelVpnType        uint32 `protobuf:"varint,6,opt,name=channel_vpn_type,json=channel-vpn-type,proto3" json:"channel_vpn_type,omitempty"`
	VpnName               string `protobuf:"bytes,7,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	InterfaceName         string `protobuf:"bytes,8,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ReportPeriod          uint32 `protobuf:"varint,9,opt,name=report_period,json=report-period,proto3" json:"report_period,omitempty"`
	ReportTime            uint64 `protobuf:"varint,10,opt,name=report_time,json=report-time,proto3" json:"report_time,omitempty"`
	TotalRecvPackets      uint64 `protobuf:"varint,11,opt,name=total_recv_packets,json=total-recv-packets,proto3" json:"total_recv_packets,omitempty"`
	TotalLossPackets      uint64 `protobuf:"varint,12,opt,name=total_loss_packets,json=total-loss-packets,proto3" json:"total_loss_packets,omitempty"`
	TotalDisorderdPackets uint64 `protobuf:"varint,13,opt,name=total_disorderd_packets,json=total-disorderd-packets,proto3" json:"total_disorderd_packets,omitempty"`
	MonitorPeriod         uint32 `protobuf:"varint,14,opt,name=monitor_period,json=monitor-period,proto3" json:"monitor_period,omitempty"`
	MonitorTime           uint64 `protobuf:"varint,15,opt,name=monitor_time,json=monitor-time,proto3" json:"monitor_time,omitempty"`
	WorstRecvPackets      uint64 `protobuf:"varint,16,opt,name=worst_recv_packets,json=worst-recv-packets,proto3" json:"worst_recv_packets,omitempty"`
	WorstLossPackets      uint64 `protobuf:"varint,17,opt,name=worst_loss_packets,json=worst-loss-packets,proto3" json:"worst_loss_packets,omitempty"`
	WorstDisorderdPackets uint64 `protobuf:"varint,18,opt,name=worst_disorderd_packets,json=worst-disorderd-packets,proto3" json:"worst_disorderd_packets,omitempty"`
}

func (x *Emdi_OutTelemReps_OutTelemRep) Reset() {
	*x = Emdi_OutTelemReps_OutTelemRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_emdi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emdi_OutTelemReps_OutTelemRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emdi_OutTelemReps_OutTelemRep) ProtoMessage() {}

func (x *Emdi_OutTelemReps_OutTelemRep) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_emdi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emdi_OutTelemReps_OutTelemRep.ProtoReflect.Descriptor instead.
func (*Emdi_OutTelemReps_OutTelemRep) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_emdi_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetVrId() uint32 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetChannelSourceAddress() string {
	if x != nil {
		return x.ChannelSourceAddress
	}
	return ""
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetChannelGroupAddress() string {
	if x != nil {
		return x.ChannelGroupAddress
	}
	return ""
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetChannelVpnType() uint32 {
	if x != nil {
		return x.ChannelVpnType
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetReportPeriod() uint32 {
	if x != nil {
		return x.ReportPeriod
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetReportTime() uint64 {
	if x != nil {
		return x.ReportTime
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetTotalRecvPackets() uint64 {
	if x != nil {
		return x.TotalRecvPackets
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetTotalLossPackets() uint64 {
	if x != nil {
		return x.TotalLossPackets
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetTotalDisorderdPackets() uint64 {
	if x != nil {
		return x.TotalDisorderdPackets
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetMonitorPeriod() uint32 {
	if x != nil {
		return x.MonitorPeriod
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetMonitorTime() uint64 {
	if x != nil {
		return x.MonitorTime
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetWorstRecvPackets() uint64 {
	if x != nil {
		return x.WorstRecvPackets
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetWorstLossPackets() uint64 {
	if x != nil {
		return x.WorstLossPackets
	}
	return 0
}

func (x *Emdi_OutTelemReps_OutTelemRep) GetWorstDisorderdPackets() uint64 {
	if x != nil {
		return x.WorstDisorderdPackets
	}
	return 0
}

var File_huaweiV8R12_emdi_proto protoreflect.FileDescriptor

var file_huaweiV8R12_emdi_proto_rawDesc = []byte{
	0x0a, 0x16, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x65, 0x6d,
	0x64, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x22, 0x96, 0x3f, 0x0a, 0x04, 0x45,
	0x6d, 0x64, 0x69, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x6d, 0x64,
	0x69, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x65, 0x6d, 0x64, 0x69,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x14, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x65, 0x6d, 0x64, 0x69, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64,
	0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x0d, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70,
	0x73, 0x52, 0x0f, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x72, 0x65,
	0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x5f, 0x72, 0x74, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x74, 0x70,
	0x73, 0x52, 0x0f, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x72, 0x74,
	0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x5f,
	0x72, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x73, 0x52,
	0x0e, 0x6f, 0x75, 0x74, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x70, 0x73, 0x1a,
	0x98, 0x1d, 0x0a, 0x0a, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x65,
	0x0a, 0x13, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x13, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x6c, 0x70,
	0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64,
	0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x0f, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x6c, 0x70, 0x75, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x81, 0x01, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x70, 0x75, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x1d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x6c, 0x70, 0x75, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x26, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x64, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x26, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x6c, 0x70, 0x75, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0xb1, 0x10, 0x0a, 0x11, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x74, 0x0a, 0x12, 0x65, 0x6d, 0x64, 0x69,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x65, 0x6d, 0x64, 0x69,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa5,
	0x0f, 0x0a, 0x10, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x0d, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x0d, 0x65,
	0x6d, 0x64, 0x69, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xe7, 0x0d, 0x0a,
	0x0c, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x0c, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x1a, 0xd2, 0x0c, 0x0a, 0x0b, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x18, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x74, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e,
	0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x1a, 0xc6, 0x07, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x08,
	0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64,
	0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x70, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x76, 0x70,
	0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x98,
	0x01, 0x0a, 0x08, 0x76, 0x73, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x76, 0x73, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x05, 0x62, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x42, 0x64, 0x49, 0x64, 0x52, 0x05, 0x62, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x1a, 0x25, 0x0a, 0x07, 0x56, 0x70, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x22, 0x0a, 0x06, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x1a,
	0x25, 0x0a, 0x07, 0x56, 0x73, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x73,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x73,
	0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x42, 0x64, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x64, 0x2d, 0x69, 0x64, 0x1a, 0x23, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x58, 0x5f, 0x39, 0x30, 0x4b, 0x48,
	0x5a, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65,
	0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x58, 0x5f, 0x32, 0x37, 0x30, 0x30, 0x30, 0x4b, 0x48, 0x5a,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x5f,
	0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x58, 0x5f, 0x31, 0x34, 0x38, 0x35, 0x30, 0x30, 0x4b, 0x48, 0x5a,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x5f,
	0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x58, 0x5f, 0x41, 0x42, 0x4f, 0x55, 0x54, 0x58, 0x5f, 0x31, 0x34,
	0x38, 0x4d, 0x48, 0x5a, 0x10, 0x03, 0x1a, 0xe5, 0x03, 0x0a, 0x0d, 0x45, 0x6d, 0x64, 0x69, 0x4c,
	0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x65, 0x6d, 0x64, 0x69,
	0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65,
	0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e,
	0x65, 0x6d, 0x64, 0x69, 0x2d, 0x6c, 0x70, 0x75, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xed,
	0x02, 0x0a, 0x0c, 0x45, 0x6d, 0x64, 0x69, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x70, 0x75, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x65, 0x6d, 0x64, 0x69, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65,
	0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x0f, 0x65, 0x6d,
	0x64, 0x69, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0xbe, 0x01,
	0x0a, 0x0d, 0x45, 0x6d, 0x64, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x7f, 0x0a, 0x0e, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e,
	0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x4c,
	0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x4c, 0x70, 0x75,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x0e, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x73, 0x6c, 0x6f, 0x74,
	0x1a, 0x2c, 0x0a, 0x0c, 0x45, 0x6d, 0x64, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0xaa,
	0x02, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x69, 0x6e, 0x64, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x98, 0x01, 0x0a,
	0x1c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x64, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x6c, 0x70,
	0x75, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x72, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x70, 0x75, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x70, 0x75,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xdc, 0x02, 0x0a, 0x21,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0xba, 0x01, 0x0a, 0x25, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x70, 0x75,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4c,
	0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x25, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d,
	0x62, 0x69, 0x6e, 0x64, 0x2d, 0x6c, 0x70, 0x75, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x7a,
	0x0a, 0x20, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x70, 0x75, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x70, 0x75, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc5, 0x09, 0x0a, 0x12, 0x45,
	0x6d, 0x64, 0x69, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x6d, 0x0a, 0x13, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64,
	0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x65, 0x6d, 0x64,
	0x69, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x1a, 0xbf, 0x08, 0x0a, 0x11, 0x45, 0x6d, 0x64, 0x69, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x63,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69,
	0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x71, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65,
	0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x70, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x70, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6c, 0x6f, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x74, 0x70, 0x5f, 0x6c,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x74, 0x70, 0x2d, 0x6c, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x74, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x74, 0x70,
	0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x74, 0x70, 0x2d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x58, 0x5f, 0x31, 0x30, 0x53, 0x10, 0x0a, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x58, 0x5f, 0x33, 0x30, 0x53, 0x10, 0x1e, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x58, 0x5f, 0x36, 0x30, 0x53, 0x10, 0x3c, 0x22, 0x64, 0x0a, 0x0d,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x41, 0x52, 0x58, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x1a, 0x96, 0x01, 0x0a, 0x0c, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x45,
	0x6d, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x65, 0x6d, 0x64, 0x69,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x31, 0x0a, 0x0b, 0x45, 0x6d, 0x64, 0x69,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xff, 0x06, 0x0a, 0x0d,
	0x45, 0x6d, 0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x73, 0x12, 0x59, 0x0a,
	0x0e, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x73, 0x2e, 0x45, 0x6d, 0x64, 0x69,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x52, 0x0e, 0x65, 0x6d, 0x64, 0x69, 0x2d, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x70, 0x1a, 0x92, 0x06, 0x0a, 0x0c, 0x45, 0x6d, 0x64,
	0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x2d, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x70, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x76, 0x70, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x73, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x73, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xc1, 0x05,
	0x0a, 0x0d, 0x45, 0x6d, 0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x74, 0x70, 0x73, 0x12,
	0x59, 0x0a, 0x0e, 0x65, 0x6d, 0x64, 0x69, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x72, 0x74,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64, 0x69, 0x2e,
	0x45, 0x6d, 0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x74, 0x70, 0x73, 0x2e, 0x45, 0x6d,
	0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x74, 0x70, 0x52, 0x0e, 0x65, 0x6d, 0x64, 0x69,
	0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x72, 0x74, 0x70, 0x1a, 0xd4, 0x04, 0x0a, 0x0c, 0x45,
	0x6d, 0x64, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x74, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x2d, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76,
	0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x76, 0x70, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x73, 0x69, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x73, 0x69, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x1a, 0xef, 0x06, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65,
	0x70, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x5f,
	0x72, 0x65, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x2e, 0x45, 0x6d, 0x64,
	0x69, 0x2e, 0x4f, 0x75, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x73, 0x2e, 0x4f,
	0x75, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x2d,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x70, 0x1a, 0x87, 0x06, 0x0a, 0x0b, 0x4f, 0x75,
	0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x2d, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x76,
	0x70, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x64, 0x69, 0x73, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x63,
	0x76, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x2d, 0x6c, 0x6f, 0x73,
	0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x77, 0x6f, 0x72,
	0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x73,
	0x74, 0x2d, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x42, 0x12, 0x5a, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x65, 0x6d, 0x64, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R12_emdi_proto_rawDescOnce sync.Once
	file_huaweiV8R12_emdi_proto_rawDescData = file_huaweiV8R12_emdi_proto_rawDesc
)

func file_huaweiV8R12_emdi_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_emdi_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_emdi_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_emdi_proto_rawDescData)
	})
	return file_huaweiV8R12_emdi_proto_rawDescData
}

var file_huaweiV8R12_emdi_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_huaweiV8R12_emdi_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_huaweiV8R12_emdi_proto_goTypes = []interface{}{
	(Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ClockRate)(0), // 0: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ClockRate
	(Emdi_EmdiHistoryRecords_EmdiHistoryRecord_Direction)(0),                                   // 1: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.Direction
	(Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorPeriod)(0),                               // 2: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.MonitorPeriod
	(Emdi_EmdiHistoryRecords_EmdiHistoryRecord_MonitorStatus)(0),                               // 3: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.MonitorStatus
	(*Emdi)(nil),                                                                        // 4: huaweiV8R12_emdi.Emdi
	(*Emdi_EmdiEnable)(nil),                                                             // 5: huaweiV8R12_emdi.Emdi.EmdiEnable
	(*Emdi_EmdiHistoryRecords)(nil),                                                     // 6: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords
	(*Emdi_EmdiChannels)(nil),                                                           // 7: huaweiV8R12_emdi.Emdi.EmdiChannels
	(*Emdi_EmdiTelemReps)(nil),                                                          // 8: huaweiV8R12_emdi.Emdi.EmdiTelemReps
	(*Emdi_EmdiTelemRtps)(nil),                                                          // 9: huaweiV8R12_emdi.Emdi.EmdiTelemRtps
	(*Emdi_OutTelemReps)(nil),                                                           // 10: huaweiV8R12_emdi.Emdi.OutTelemReps
	(*Emdi_EmdiEnable_EmdiChannelGroups)(nil),                                           // 11: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups
	(*Emdi_EmdiEnable_EmdiLpuGroups)(nil),                                               // 12: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups
	(*Emdi_EmdiEnable_ChannelGroupBindLpuGroups)(nil),                                   // 13: huaweiV8R12_emdi.Emdi.EmdiEnable.ChannelGroupBindLpuGroups
	(*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups)(nil),                           // 14: huaweiV8R12_emdi.Emdi.EmdiEnable.OutboundChannelGroupBindLpuGroups
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup)(nil),                          // 15: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels)(nil),             // 16: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel)(nil), // 17: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters)(nil),         // 18: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName)(nil), // 19: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.VpnName
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId)(nil),  // 20: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.VlanId
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName)(nil), // 21: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.VsiName
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId)(nil),    // 22: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.BdId
	(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit)(nil), // 23: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.Transit
	(*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup)(nil),                                                                 // 24: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup
	(*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots)(nil),                                                   // 25: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup.EmdiBindSlots
	(*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot)(nil),                                      // 26: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup.EmdiBindSlots.EmdiBindSlot
	(*Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup)(nil),                                         // 27: huaweiV8R12_emdi.Emdi.EmdiEnable.ChannelGroupBindLpuGroups.ChannelGroupBindLpuGroup
	(*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup)(nil),                         // 28: huaweiV8R12_emdi.Emdi.EmdiEnable.OutboundChannelGroupBindLpuGroups.OutboundChannelGroupBindLpuGroup
	(*Emdi_EmdiHistoryRecords_EmdiHistoryRecord)(nil),                                                                  // 29: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord
	(*Emdi_EmdiChannels_EmdiChannel)(nil),                                                                              // 30: huaweiV8R12_emdi.Emdi.EmdiChannels.EmdiChannel
	(*Emdi_EmdiTelemReps_EmdiTelemRep)(nil),                                                                            // 31: huaweiV8R12_emdi.Emdi.EmdiTelemReps.EmdiTelemRep
	(*Emdi_EmdiTelemRtps_EmdiTelemRtp)(nil),                                                                            // 32: huaweiV8R12_emdi.Emdi.EmdiTelemRtps.EmdiTelemRtp
	(*Emdi_OutTelemReps_OutTelemRep)(nil),                                                                              // 33: huaweiV8R12_emdi.Emdi.OutTelemReps.OutTelemRep
}
var file_huaweiV8R12_emdi_proto_depIdxs = []int32{
	5,  // 0: huaweiV8R12_emdi.Emdi.emdi_enable:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable
	6,  // 1: huaweiV8R12_emdi.Emdi.emdi_history_records:type_name -> huaweiV8R12_emdi.Emdi.EmdiHistoryRecords
	7,  // 2: huaweiV8R12_emdi.Emdi.emdi_channels:type_name -> huaweiV8R12_emdi.Emdi.EmdiChannels
	8,  // 3: huaweiV8R12_emdi.Emdi.emdi_telem_reps:type_name -> huaweiV8R12_emdi.Emdi.EmdiTelemReps
	9,  // 4: huaweiV8R12_emdi.Emdi.emdi_telem_rtps:type_name -> huaweiV8R12_emdi.Emdi.EmdiTelemRtps
	10, // 5: huaweiV8R12_emdi.Emdi.out_telem_reps:type_name -> huaweiV8R12_emdi.Emdi.OutTelemReps
	11, // 6: huaweiV8R12_emdi.Emdi.EmdiEnable.emdi_channel_groups:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups
	12, // 7: huaweiV8R12_emdi.Emdi.EmdiEnable.emdi_lpu_groups:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups
	13, // 8: huaweiV8R12_emdi.Emdi.EmdiEnable.channel_group_bind_lpu_groups:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.ChannelGroupBindLpuGroups
	14, // 9: huaweiV8R12_emdi.Emdi.EmdiEnable.outbound_channel_group_bind_lpu_groups:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.OutboundChannelGroupBindLpuGroups
	29, // 10: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.emdi_history_record:type_name -> huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord
	30, // 11: huaweiV8R12_emdi.Emdi.EmdiChannels.emdi_channel:type_name -> huaweiV8R12_emdi.Emdi.EmdiChannels.EmdiChannel
	31, // 12: huaweiV8R12_emdi.Emdi.EmdiTelemReps.emdi_telem_rep:type_name -> huaweiV8R12_emdi.Emdi.EmdiTelemReps.EmdiTelemRep
	32, // 13: huaweiV8R12_emdi.Emdi.EmdiTelemRtps.emdi_telem_rtp:type_name -> huaweiV8R12_emdi.Emdi.EmdiTelemRtps.EmdiTelemRtp
	33, // 14: huaweiV8R12_emdi.Emdi.OutTelemReps.out_telem_rep:type_name -> huaweiV8R12_emdi.Emdi.OutTelemReps.OutTelemRep
	15, // 15: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.emdi_channel_group:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup
	24, // 16: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.emdi_lpu_group:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup
	27, // 17: huaweiV8R12_emdi.Emdi.EmdiEnable.ChannelGroupBindLpuGroups.channel_group_bind_lpu_group:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.ChannelGroupBindLpuGroups.ChannelGroupBindLpuGroup
	28, // 18: huaweiV8R12_emdi.Emdi.EmdiEnable.OutboundChannelGroupBindLpuGroups.outbound_channel_group_bind_lpu_group:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.OutboundChannelGroupBindLpuGroups.OutboundChannelGroupBindLpuGroup
	16, // 19: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.emdi_channels:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels
	17, // 20: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.emdi_channel:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel
	18, // 21: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.channel_group_parameters:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters
	0,  // 22: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.clock_rate:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ClockRate
	19, // 23: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.vpn_name:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.VpnName
	20, // 24: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.vlan_id:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.VlanId
	21, // 25: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.vsi_name:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.VsiName
	22, // 26: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.bd_id:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.BdId
	23, // 27: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.transit:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiChannelGroups.EmdiChannelGroup.EmdiChannels.EmdiChannel.ChannelGroupParameters.Transit
	25, // 28: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup.emdi_bind_slots:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup.EmdiBindSlots
	26, // 29: huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup.EmdiBindSlots.emdi_bind_slot:type_name -> huaweiV8R12_emdi.Emdi.EmdiEnable.EmdiLpuGroups.EmdiLpuGroup.EmdiBindSlots.EmdiBindSlot
	1,  // 30: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.direction:type_name -> huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.Direction
	2,  // 31: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.monitor_period:type_name -> huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.MonitorPeriod
	3,  // 32: huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.monitor_status:type_name -> huaweiV8R12_emdi.Emdi.EmdiHistoryRecords.EmdiHistoryRecord.MonitorStatus
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_emdi_proto_init() }
func file_huaweiV8R12_emdi_proto_init() {
	if File_huaweiV8R12_emdi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_emdi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiHistoryRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiTelemReps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiTelemRtps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_OutTelemReps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiLpuGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_ChannelGroupBindLpuGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VpnName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VlanId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_VsiName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_BdId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiChannelGroups_EmdiChannelGroup_EmdiChannels_EmdiChannel_ChannelGroupParameters_Transit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_EmdiLpuGroups_EmdiLpuGroup_EmdiBindSlots_EmdiBindSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_ChannelGroupBindLpuGroups_ChannelGroupBindLpuGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiEnable_OutboundChannelGroupBindLpuGroups_OutboundChannelGroupBindLpuGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiHistoryRecords_EmdiHistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiChannels_EmdiChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiTelemReps_EmdiTelemRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_EmdiTelemRtps_EmdiTelemRtp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_emdi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emdi_OutTelemReps_OutTelemRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_emdi_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_emdi_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_emdi_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_emdi_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_emdi_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_emdi_proto = out.File
	file_huaweiV8R12_emdi_proto_rawDesc = nil
	file_huaweiV8R12_emdi_proto_goTypes = nil
	file_huaweiV8R12_emdi_proto_depIdxs = nil
}
