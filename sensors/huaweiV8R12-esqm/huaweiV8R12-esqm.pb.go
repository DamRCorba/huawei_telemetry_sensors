// ---------------------------------------------------------------------------
// Protofilename : huawei-esqm.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-esqm.proto

package huaweiV8R12_esqm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Esqm_TcpDatas_TcpData_AgeType int32

const (
	Esqm_TcpDatas_TcpData_INVALID_ENUM_VALUE_AgeType  Esqm_TcpDatas_TcpData_AgeType = 0
	Esqm_TcpDatas_TcpData_AgeType_AGINGX_TIME         Esqm_TcpDatas_TcpData_AgeType = 1
	Esqm_TcpDatas_TcpData_AgeType_TCPX_FIN            Esqm_TcpDatas_TcpData_AgeType = 2
	Esqm_TcpDatas_TcpData_AgeType_TCPX_RST            Esqm_TcpDatas_TcpData_AgeType = 3
	Esqm_TcpDatas_TcpData_AgeType_SCTPX_SHUTDOWN      Esqm_TcpDatas_TcpData_AgeType = 4
	Esqm_TcpDatas_TcpData_AgeType_SCTPX_SHUTDOWNX_ACK Esqm_TcpDatas_TcpData_AgeType = 5
	Esqm_TcpDatas_TcpData_AgeType_SCTPX_ABORT         Esqm_TcpDatas_TcpData_AgeType = 6
)

// Enum value maps for Esqm_TcpDatas_TcpData_AgeType.
var (
	Esqm_TcpDatas_TcpData_AgeType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AgeType",
		1: "AgeType_AGINGX_TIME",
		2: "AgeType_TCPX_FIN",
		3: "AgeType_TCPX_RST",
		4: "AgeType_SCTPX_SHUTDOWN",
		5: "AgeType_SCTPX_SHUTDOWNX_ACK",
		6: "AgeType_SCTPX_ABORT",
	}
	Esqm_TcpDatas_TcpData_AgeType_value = map[string]int32{
		"INVALID_ENUM_VALUE_AgeType":  0,
		"AgeType_AGINGX_TIME":         1,
		"AgeType_TCPX_FIN":            2,
		"AgeType_TCPX_RST":            3,
		"AgeType_SCTPX_SHUTDOWN":      4,
		"AgeType_SCTPX_SHUTDOWNX_ACK": 5,
		"AgeType_SCTPX_ABORT":         6,
	}
)

func (x Esqm_TcpDatas_TcpData_AgeType) Enum() *Esqm_TcpDatas_TcpData_AgeType {
	p := new(Esqm_TcpDatas_TcpData_AgeType)
	*p = x
	return p
}

func (x Esqm_TcpDatas_TcpData_AgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_TcpDatas_TcpData_AgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[0].Descriptor()
}

func (Esqm_TcpDatas_TcpData_AgeType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[0]
}

func (x Esqm_TcpDatas_TcpData_AgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_TcpDatas_TcpData_AgeType.Descriptor instead.
func (Esqm_TcpDatas_TcpData_AgeType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Esqm_TcpDatas_TcpData_FlowType int32

const (
	Esqm_TcpDatas_TcpData_INVALID_ENUM_VALUE_FlowType Esqm_TcpDatas_TcpData_FlowType = 0
	Esqm_TcpDatas_TcpData_FlowType_TCPX_SYN           Esqm_TcpDatas_TcpData_FlowType = 1
	Esqm_TcpDatas_TcpData_FlowType_TCPX_SYNX_ACK      Esqm_TcpDatas_TcpData_FlowType = 2
	Esqm_TcpDatas_TcpData_FlowType_SCTPX_SACK         Esqm_TcpDatas_TcpData_FlowType = 3
	Esqm_TcpDatas_TcpData_FlowType_SCTPX_INIT         Esqm_TcpDatas_TcpData_FlowType = 4
	Esqm_TcpDatas_TcpData_FlowType_SCTPX_INITX_ACK    Esqm_TcpDatas_TcpData_FlowType = 5
)

// Enum value maps for Esqm_TcpDatas_TcpData_FlowType.
var (
	Esqm_TcpDatas_TcpData_FlowType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_FlowType",
		1: "FlowType_TCPX_SYN",
		2: "FlowType_TCPX_SYNX_ACK",
		3: "FlowType_SCTPX_SACK",
		4: "FlowType_SCTPX_INIT",
		5: "FlowType_SCTPX_INITX_ACK",
	}
	Esqm_TcpDatas_TcpData_FlowType_value = map[string]int32{
		"INVALID_ENUM_VALUE_FlowType": 0,
		"FlowType_TCPX_SYN":           1,
		"FlowType_TCPX_SYNX_ACK":      2,
		"FlowType_SCTPX_SACK":         3,
		"FlowType_SCTPX_INIT":         4,
		"FlowType_SCTPX_INITX_ACK":    5,
	}
)

func (x Esqm_TcpDatas_TcpData_FlowType) Enum() *Esqm_TcpDatas_TcpData_FlowType {
	p := new(Esqm_TcpDatas_TcpData_FlowType)
	*p = x
	return p
}

func (x Esqm_TcpDatas_TcpData_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_TcpDatas_TcpData_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[1].Descriptor()
}

func (Esqm_TcpDatas_TcpData_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[1]
}

func (x Esqm_TcpDatas_TcpData_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_TcpDatas_TcpData_FlowType.Descriptor instead.
func (Esqm_TcpDatas_TcpData_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

type Esqm_TcpDatas_TcpData_FlowDirection int32

const (
	Esqm_TcpDatas_TcpData_FlowDirection_INGRESS Esqm_TcpDatas_TcpData_FlowDirection = 0
	Esqm_TcpDatas_TcpData_FlowDirection_EGRESS  Esqm_TcpDatas_TcpData_FlowDirection = 1
)

// Enum value maps for Esqm_TcpDatas_TcpData_FlowDirection.
var (
	Esqm_TcpDatas_TcpData_FlowDirection_name = map[int32]string{
		0: "FlowDirection_INGRESS",
		1: "FlowDirection_EGRESS",
	}
	Esqm_TcpDatas_TcpData_FlowDirection_value = map[string]int32{
		"FlowDirection_INGRESS": 0,
		"FlowDirection_EGRESS":  1,
	}
)

func (x Esqm_TcpDatas_TcpData_FlowDirection) Enum() *Esqm_TcpDatas_TcpData_FlowDirection {
	p := new(Esqm_TcpDatas_TcpData_FlowDirection)
	*p = x
	return p
}

func (x Esqm_TcpDatas_TcpData_FlowDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_TcpDatas_TcpData_FlowDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[2].Descriptor()
}

func (Esqm_TcpDatas_TcpData_FlowDirection) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[2]
}

func (x Esqm_TcpDatas_TcpData_FlowDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_TcpDatas_TcpData_FlowDirection.Descriptor instead.
func (Esqm_TcpDatas_TcpData_FlowDirection) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

type Esqm_TcpDatas_TcpData_AddressFamily int32

const (
	Esqm_TcpDatas_TcpData_AddressFamily_IPV4 Esqm_TcpDatas_TcpData_AddressFamily = 0
)

// Enum value maps for Esqm_TcpDatas_TcpData_AddressFamily.
var (
	Esqm_TcpDatas_TcpData_AddressFamily_name = map[int32]string{
		0: "AddressFamily_IPV4",
	}
	Esqm_TcpDatas_TcpData_AddressFamily_value = map[string]int32{
		"AddressFamily_IPV4": 0,
	}
)

func (x Esqm_TcpDatas_TcpData_AddressFamily) Enum() *Esqm_TcpDatas_TcpData_AddressFamily {
	p := new(Esqm_TcpDatas_TcpData_AddressFamily)
	*p = x
	return p
}

func (x Esqm_TcpDatas_TcpData_AddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_TcpDatas_TcpData_AddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[3].Descriptor()
}

func (Esqm_TcpDatas_TcpData_AddressFamily) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[3]
}

func (x Esqm_TcpDatas_TcpData_AddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_TcpDatas_TcpData_AddressFamily.Descriptor instead.
func (Esqm_TcpDatas_TcpData_AddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

type Esqm_GtpDatas_GtpData_AgeType int32

const (
	Esqm_GtpDatas_GtpData_INVALID_ENUM_VALUE_AgeType Esqm_GtpDatas_GtpData_AgeType = 0
	Esqm_GtpDatas_GtpData_AgeType_AGINGX_TIME        Esqm_GtpDatas_GtpData_AgeType = 1
)

// Enum value maps for Esqm_GtpDatas_GtpData_AgeType.
var (
	Esqm_GtpDatas_GtpData_AgeType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AgeType",
		1: "AgeType_AGINGX_TIME",
	}
	Esqm_GtpDatas_GtpData_AgeType_value = map[string]int32{
		"INVALID_ENUM_VALUE_AgeType": 0,
		"AgeType_AGINGX_TIME":        1,
	}
)

func (x Esqm_GtpDatas_GtpData_AgeType) Enum() *Esqm_GtpDatas_GtpData_AgeType {
	p := new(Esqm_GtpDatas_GtpData_AgeType)
	*p = x
	return p
}

func (x Esqm_GtpDatas_GtpData_AgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_GtpDatas_GtpData_AgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[4].Descriptor()
}

func (Esqm_GtpDatas_GtpData_AgeType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[4]
}

func (x Esqm_GtpDatas_GtpData_AgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_GtpDatas_GtpData_AgeType.Descriptor instead.
func (Esqm_GtpDatas_GtpData_AgeType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Esqm_GtpDatas_GtpData_FlowType int32

const (
	Esqm_GtpDatas_GtpData_INVALID_ENUM_VALUE_FlowType Esqm_GtpDatas_GtpData_FlowType = 0
	Esqm_GtpDatas_GtpData_FlowType_GTP                Esqm_GtpDatas_GtpData_FlowType = 6
)

// Enum value maps for Esqm_GtpDatas_GtpData_FlowType.
var (
	Esqm_GtpDatas_GtpData_FlowType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_FlowType",
		6: "FlowType_GTP",
	}
	Esqm_GtpDatas_GtpData_FlowType_value = map[string]int32{
		"INVALID_ENUM_VALUE_FlowType": 0,
		"FlowType_GTP":                6,
	}
)

func (x Esqm_GtpDatas_GtpData_FlowType) Enum() *Esqm_GtpDatas_GtpData_FlowType {
	p := new(Esqm_GtpDatas_GtpData_FlowType)
	*p = x
	return p
}

func (x Esqm_GtpDatas_GtpData_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_GtpDatas_GtpData_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[5].Descriptor()
}

func (Esqm_GtpDatas_GtpData_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[5]
}

func (x Esqm_GtpDatas_GtpData_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_GtpDatas_GtpData_FlowType.Descriptor instead.
func (Esqm_GtpDatas_GtpData_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type Esqm_GtpDatas_GtpData_FlowDirection int32

const (
	Esqm_GtpDatas_GtpData_FlowDirection_INGRESS Esqm_GtpDatas_GtpData_FlowDirection = 0
	Esqm_GtpDatas_GtpData_FlowDirection_EGRESS  Esqm_GtpDatas_GtpData_FlowDirection = 1
)

// Enum value maps for Esqm_GtpDatas_GtpData_FlowDirection.
var (
	Esqm_GtpDatas_GtpData_FlowDirection_name = map[int32]string{
		0: "FlowDirection_INGRESS",
		1: "FlowDirection_EGRESS",
	}
	Esqm_GtpDatas_GtpData_FlowDirection_value = map[string]int32{
		"FlowDirection_INGRESS": 0,
		"FlowDirection_EGRESS":  1,
	}
)

func (x Esqm_GtpDatas_GtpData_FlowDirection) Enum() *Esqm_GtpDatas_GtpData_FlowDirection {
	p := new(Esqm_GtpDatas_GtpData_FlowDirection)
	*p = x
	return p
}

func (x Esqm_GtpDatas_GtpData_FlowDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_GtpDatas_GtpData_FlowDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[6].Descriptor()
}

func (Esqm_GtpDatas_GtpData_FlowDirection) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[6]
}

func (x Esqm_GtpDatas_GtpData_FlowDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_GtpDatas_GtpData_FlowDirection.Descriptor instead.
func (Esqm_GtpDatas_GtpData_FlowDirection) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

type Esqm_GtpDatas_GtpData_PacketType int32

const (
	Esqm_GtpDatas_GtpData_PacketType_HEARTBEATX_REQ Esqm_GtpDatas_GtpData_PacketType = 0
	Esqm_GtpDatas_GtpData_PacketType_HEARTBEATX_RSQ Esqm_GtpDatas_GtpData_PacketType = 1
)

// Enum value maps for Esqm_GtpDatas_GtpData_PacketType.
var (
	Esqm_GtpDatas_GtpData_PacketType_name = map[int32]string{
		0: "PacketType_HEARTBEATX_REQ",
		1: "PacketType_HEARTBEATX_RSQ",
	}
	Esqm_GtpDatas_GtpData_PacketType_value = map[string]int32{
		"PacketType_HEARTBEATX_REQ": 0,
		"PacketType_HEARTBEATX_RSQ": 1,
	}
)

func (x Esqm_GtpDatas_GtpData_PacketType) Enum() *Esqm_GtpDatas_GtpData_PacketType {
	p := new(Esqm_GtpDatas_GtpData_PacketType)
	*p = x
	return p
}

func (x Esqm_GtpDatas_GtpData_PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_GtpDatas_GtpData_PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[7].Descriptor()
}

func (Esqm_GtpDatas_GtpData_PacketType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[7]
}

func (x Esqm_GtpDatas_GtpData_PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_GtpDatas_GtpData_PacketType.Descriptor instead.
func (Esqm_GtpDatas_GtpData_PacketType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

type Esqm_GtpDatas_GtpData_AddressFamily int32

const (
	Esqm_GtpDatas_GtpData_AddressFamily_IPV4 Esqm_GtpDatas_GtpData_AddressFamily = 0
)

// Enum value maps for Esqm_GtpDatas_GtpData_AddressFamily.
var (
	Esqm_GtpDatas_GtpData_AddressFamily_name = map[int32]string{
		0: "AddressFamily_IPV4",
	}
	Esqm_GtpDatas_GtpData_AddressFamily_value = map[string]int32{
		"AddressFamily_IPV4": 0,
	}
)

func (x Esqm_GtpDatas_GtpData_AddressFamily) Enum() *Esqm_GtpDatas_GtpData_AddressFamily {
	p := new(Esqm_GtpDatas_GtpData_AddressFamily)
	*p = x
	return p
}

func (x Esqm_GtpDatas_GtpData_AddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Esqm_GtpDatas_GtpData_AddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_esqm_proto_enumTypes[8].Descriptor()
}

func (Esqm_GtpDatas_GtpData_AddressFamily) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_esqm_proto_enumTypes[8]
}

func (x Esqm_GtpDatas_GtpData_AddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Esqm_GtpDatas_GtpData_AddressFamily.Descriptor instead.
func (Esqm_GtpDatas_GtpData_AddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 1, 0, 4}
}

type Esqm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpDatas *Esqm_TcpDatas `protobuf:"bytes,1,opt,name=tcp_datas,json=tcp-datas,proto3" json:"tcp_datas,omitempty"`
	GtpDatas *Esqm_GtpDatas `protobuf:"bytes,2,opt,name=gtp_datas,json=gtp-datas,proto3" json:"gtp_datas,omitempty"`
}

func (x *Esqm) Reset() {
	*x = Esqm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_esqm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Esqm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Esqm) ProtoMessage() {}

func (x *Esqm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_esqm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Esqm.ProtoReflect.Descriptor instead.
func (*Esqm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0}
}

func (x *Esqm) GetTcpDatas() *Esqm_TcpDatas {
	if x != nil {
		return x.TcpDatas
	}
	return nil
}

func (x *Esqm) GetGtpDatas() *Esqm_GtpDatas {
	if x != nil {
		return x.GtpDatas
	}
	return nil
}

type Esqm_TcpDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpData []*Esqm_TcpDatas_TcpData `protobuf:"bytes,1,rep,name=tcp_data,json=tcp-data,proto3" json:"tcp_data,omitempty"`
}

func (x *Esqm_TcpDatas) Reset() {
	*x = Esqm_TcpDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_esqm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Esqm_TcpDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Esqm_TcpDatas) ProtoMessage() {}

func (x *Esqm_TcpDatas) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_esqm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Esqm_TcpDatas.ProtoReflect.Descriptor instead.
func (*Esqm_TcpDatas) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Esqm_TcpDatas) GetTcpData() []*Esqm_TcpDatas_TcpData {
	if x != nil {
		return x.TcpData
	}
	return nil
}

type Esqm_GtpDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GtpData []*Esqm_GtpDatas_GtpData `protobuf:"bytes,1,rep,name=gtp_data,json=gtp-data,proto3" json:"gtp_data,omitempty"`
}

func (x *Esqm_GtpDatas) Reset() {
	*x = Esqm_GtpDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_esqm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Esqm_GtpDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Esqm_GtpDatas) ProtoMessage() {}

func (x *Esqm_GtpDatas) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_esqm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Esqm_GtpDatas.ProtoReflect.Descriptor instead.
func (*Esqm_GtpDatas) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Esqm_GtpDatas) GetGtpData() []*Esqm_GtpDatas_GtpData {
	if x != nil {
		return x.GtpData
	}
	return nil
}

type Esqm_TcpDatas_TcpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIpAddr               string                              `protobuf:"bytes,1,opt,name=src_ip_addr,json=src-ip-addr,proto3" json:"src_ip_addr,omitempty"`
	DstIpAddr               string                              `protobuf:"bytes,2,opt,name=dst_ip_addr,json=dst-ip-addr,proto3" json:"dst_ip_addr,omitempty"`
	SrcPort                 uint32                              `protobuf:"varint,3,opt,name=src_port,json=src-port,proto3" json:"src_port,omitempty"`
	DstPort                 uint32                              `protobuf:"varint,4,opt,name=dst_port,json=dst-port,proto3" json:"dst_port,omitempty"`
	Protocol                uint32                              `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AgeType                 Esqm_TcpDatas_TcpData_AgeType       `protobuf:"varint,6,opt,name=age_type,json=age-type,proto3,enum=huaweiV8R12_esqm.Esqm_TcpDatas_TcpData_AgeType" json:"age_type,omitempty"`
	FlowType                Esqm_TcpDatas_TcpData_FlowType      `protobuf:"varint,7,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_esqm.Esqm_TcpDatas_TcpData_FlowType" json:"flow_type,omitempty"`
	FlowDirection           Esqm_TcpDatas_TcpData_FlowDirection `protobuf:"varint,8,opt,name=flow_direction,json=flow-direction,proto3,enum=huaweiV8R12_esqm.Esqm_TcpDatas_TcpData_FlowDirection" json:"flow_direction,omitempty"`
	PortIfIndex             uint32                              `protobuf:"varint,9,opt,name=port_if_index,json=port-if-index,proto3" json:"port_if_index,omitempty"`
	RouteIfIndex            uint32                              `protobuf:"varint,10,opt,name=route_if_index,json=route-if-index,proto3" json:"route_if_index,omitempty"`
	NextHop                 string                              `protobuf:"bytes,11,opt,name=next_hop,json=next-hop,proto3" json:"next_hop,omitempty"`
	Label                   uint32                              `protobuf:"varint,12,opt,name=label,proto3" json:"label,omitempty"`
	VpnName                 string                              `protobuf:"bytes,13,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	CreatedTimestampSec     uint32                              `protobuf:"varint,14,opt,name=created_timestamp_sec,json=created-timestamp-sec,proto3" json:"created_timestamp_sec,omitempty"`
	CreatedTimestampNanoSec uint32                              `protobuf:"varint,15,opt,name=created_timestamp_nano_sec,json=created-timestamp-nano-sec,proto3" json:"created_timestamp_nano_sec,omitempty"`
	PacketNum               uint64                              `protobuf:"varint,16,opt,name=packet_num,json=packet-num,proto3" json:"packet_num,omitempty"`
	RetransNum              uint64                              `protobuf:"varint,17,opt,name=retrans_num,json=retrans-num,proto3" json:"retrans_num,omitempty"`
	RetransRadio            uint64                              `protobuf:"varint,18,opt,name=retrans_radio,json=retrans-radio,proto3" json:"retrans_radio,omitempty"`
	AddressFamily           Esqm_TcpDatas_TcpData_AddressFamily `protobuf:"varint,19,opt,name=address_family,json=address-family,proto3,enum=huaweiV8R12_esqm.Esqm_TcpDatas_TcpData_AddressFamily" json:"address_family,omitempty"`
	OuterVlan               uint32                              `protobuf:"varint,20,opt,name=outer_vlan,json=outer-vlan,proto3" json:"outer_vlan,omitempty"`
	InnerVlan               uint32                              `protobuf:"varint,21,opt,name=inner_vlan,json=inner-vlan,proto3" json:"inner_vlan,omitempty"`
	Ttl                     uint32                              `protobuf:"varint,22,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Esqm_TcpDatas_TcpData) Reset() {
	*x = Esqm_TcpDatas_TcpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_esqm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Esqm_TcpDatas_TcpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Esqm_TcpDatas_TcpData) ProtoMessage() {}

func (x *Esqm_TcpDatas_TcpData) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_esqm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Esqm_TcpDatas_TcpData.ProtoReflect.Descriptor instead.
func (*Esqm_TcpDatas_TcpData) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Esqm_TcpDatas_TcpData) GetSrcIpAddr() string {
	if x != nil {
		return x.SrcIpAddr
	}
	return ""
}

func (x *Esqm_TcpDatas_TcpData) GetDstIpAddr() string {
	if x != nil {
		return x.DstIpAddr
	}
	return ""
}

func (x *Esqm_TcpDatas_TcpData) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetAgeType() Esqm_TcpDatas_TcpData_AgeType {
	if x != nil {
		return x.AgeType
	}
	return Esqm_TcpDatas_TcpData_INVALID_ENUM_VALUE_AgeType
}

func (x *Esqm_TcpDatas_TcpData) GetFlowType() Esqm_TcpDatas_TcpData_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Esqm_TcpDatas_TcpData_INVALID_ENUM_VALUE_FlowType
}

func (x *Esqm_TcpDatas_TcpData) GetFlowDirection() Esqm_TcpDatas_TcpData_FlowDirection {
	if x != nil {
		return x.FlowDirection
	}
	return Esqm_TcpDatas_TcpData_FlowDirection_INGRESS
}

func (x *Esqm_TcpDatas_TcpData) GetPortIfIndex() uint32 {
	if x != nil {
		return x.PortIfIndex
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetRouteIfIndex() uint32 {
	if x != nil {
		return x.RouteIfIndex
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *Esqm_TcpDatas_TcpData) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Esqm_TcpDatas_TcpData) GetCreatedTimestampSec() uint32 {
	if x != nil {
		return x.CreatedTimestampSec
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetCreatedTimestampNanoSec() uint32 {
	if x != nil {
		return x.CreatedTimestampNanoSec
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetPacketNum() uint64 {
	if x != nil {
		return x.PacketNum
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetRetransNum() uint64 {
	if x != nil {
		return x.RetransNum
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetRetransRadio() uint64 {
	if x != nil {
		return x.RetransRadio
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetAddressFamily() Esqm_TcpDatas_TcpData_AddressFamily {
	if x != nil {
		return x.AddressFamily
	}
	return Esqm_TcpDatas_TcpData_AddressFamily_IPV4
}

func (x *Esqm_TcpDatas_TcpData) GetOuterVlan() uint32 {
	if x != nil {
		return x.OuterVlan
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetInnerVlan() uint32 {
	if x != nil {
		return x.InnerVlan
	}
	return 0
}

func (x *Esqm_TcpDatas_TcpData) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type Esqm_GtpDatas_GtpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIpAddr            string                              `protobuf:"bytes,1,opt,name=src_ip_addr,json=src-ip-addr,proto3" json:"src_ip_addr,omitempty"`
	DstIpAddr            string                              `protobuf:"bytes,2,opt,name=dst_ip_addr,json=dst-ip-addr,proto3" json:"dst_ip_addr,omitempty"`
	SrcPort              uint32                              `protobuf:"varint,3,opt,name=src_port,json=src-port,proto3" json:"src_port,omitempty"`
	DstPort              uint32                              `protobuf:"varint,4,opt,name=dst_port,json=dst-port,proto3" json:"dst_port,omitempty"`
	Protocol             uint32                              `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AgeType              Esqm_GtpDatas_GtpData_AgeType       `protobuf:"varint,6,opt,name=age_type,json=age-type,proto3,enum=huaweiV8R12_esqm.Esqm_GtpDatas_GtpData_AgeType" json:"age_type,omitempty"`
	FlowType             Esqm_GtpDatas_GtpData_FlowType      `protobuf:"varint,7,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_esqm.Esqm_GtpDatas_GtpData_FlowType" json:"flow_type,omitempty"`
	FlowDirection        Esqm_GtpDatas_GtpData_FlowDirection `protobuf:"varint,8,opt,name=flow_direction,json=flow-direction,proto3,enum=huaweiV8R12_esqm.Esqm_GtpDatas_GtpData_FlowDirection" json:"flow_direction,omitempty"`
	PortIfIndex          uint32                              `protobuf:"varint,9,opt,name=port_if_index,json=port-if-index,proto3" json:"port_if_index,omitempty"`
	RouteIfIndex         uint32                              `protobuf:"varint,10,opt,name=route_if_index,json=route-if-index,proto3" json:"route_if_index,omitempty"`
	NextHop              string                              `protobuf:"bytes,11,opt,name=next_hop,json=next-hop,proto3" json:"next_hop,omitempty"`
	Label                uint32                              `protobuf:"varint,12,opt,name=label,proto3" json:"label,omitempty"`
	VpnName              string                              `protobuf:"bytes,13,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	HeartbeatTimeSec     uint32                              `protobuf:"varint,14,opt,name=heartbeat_time_sec,json=heartbeat-time-sec,proto3" json:"heartbeat_time_sec,omitempty"`
	HeartbeatTimeNanoSec uint32                              `protobuf:"varint,15,opt,name=heartbeat_time_nano_sec,json=heartbeat-time-nano-sec,proto3" json:"heartbeat_time_nano_sec,omitempty"`
	PacketNum            uint64                              `protobuf:"varint,16,opt,name=packet_num,json=packet-num,proto3" json:"packet_num,omitempty"`
	PacketBytes          uint64                              `protobuf:"varint,17,opt,name=packet_bytes,json=packet-bytes,proto3" json:"packet_bytes,omitempty"`
	PacketType           Esqm_GtpDatas_GtpData_PacketType    `protobuf:"varint,18,opt,name=packet_type,json=packet-type,proto3,enum=huaweiV8R12_esqm.Esqm_GtpDatas_GtpData_PacketType" json:"packet_type,omitempty"`
	AddressFamily        Esqm_GtpDatas_GtpData_AddressFamily `protobuf:"varint,19,opt,name=address_family,json=address-family,proto3,enum=huaweiV8R12_esqm.Esqm_GtpDatas_GtpData_AddressFamily" json:"address_family,omitempty"`
	LastIpId             uint32                              `protobuf:"varint,20,opt,name=last_ip_id,json=last-ip-id,proto3" json:"last_ip_id,omitempty"`
	CurrIpId             uint32                              `protobuf:"varint,21,opt,name=curr_ip_id,json=curr-ip-id,proto3" json:"curr_ip_id,omitempty"`
	OuterVlan            uint32                              `protobuf:"varint,22,opt,name=outer_vlan,json=outer-vlan,proto3" json:"outer_vlan,omitempty"`
	InnerVlan            uint32                              `protobuf:"varint,23,opt,name=inner_vlan,json=inner-vlan,proto3" json:"inner_vlan,omitempty"`
	Ttl                  uint32                              `protobuf:"varint,24,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Esqm_GtpDatas_GtpData) Reset() {
	*x = Esqm_GtpDatas_GtpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_esqm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Esqm_GtpDatas_GtpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Esqm_GtpDatas_GtpData) ProtoMessage() {}

func (x *Esqm_GtpDatas_GtpData) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_esqm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Esqm_GtpDatas_GtpData.ProtoReflect.Descriptor instead.
func (*Esqm_GtpDatas_GtpData) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_esqm_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Esqm_GtpDatas_GtpData) GetSrcIpAddr() string {
	if x != nil {
		return x.SrcIpAddr
	}
	return ""
}

func (x *Esqm_GtpDatas_GtpData) GetDstIpAddr() string {
	if x != nil {
		return x.DstIpAddr
	}
	return ""
}

func (x *Esqm_GtpDatas_GtpData) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetAgeType() Esqm_GtpDatas_GtpData_AgeType {
	if x != nil {
		return x.AgeType
	}
	return Esqm_GtpDatas_GtpData_INVALID_ENUM_VALUE_AgeType
}

func (x *Esqm_GtpDatas_GtpData) GetFlowType() Esqm_GtpDatas_GtpData_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Esqm_GtpDatas_GtpData_INVALID_ENUM_VALUE_FlowType
}

func (x *Esqm_GtpDatas_GtpData) GetFlowDirection() Esqm_GtpDatas_GtpData_FlowDirection {
	if x != nil {
		return x.FlowDirection
	}
	return Esqm_GtpDatas_GtpData_FlowDirection_INGRESS
}

func (x *Esqm_GtpDatas_GtpData) GetPortIfIndex() uint32 {
	if x != nil {
		return x.PortIfIndex
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetRouteIfIndex() uint32 {
	if x != nil {
		return x.RouteIfIndex
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *Esqm_GtpDatas_GtpData) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Esqm_GtpDatas_GtpData) GetHeartbeatTimeSec() uint32 {
	if x != nil {
		return x.HeartbeatTimeSec
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetHeartbeatTimeNanoSec() uint32 {
	if x != nil {
		return x.HeartbeatTimeNanoSec
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetPacketNum() uint64 {
	if x != nil {
		return x.PacketNum
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetPacketBytes() uint64 {
	if x != nil {
		return x.PacketBytes
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetPacketType() Esqm_GtpDatas_GtpData_PacketType {
	if x != nil {
		return x.PacketType
	}
	return Esqm_GtpDatas_GtpData_PacketType_HEARTBEATX_REQ
}

func (x *Esqm_GtpDatas_GtpData) GetAddressFamily() Esqm_GtpDatas_GtpData_AddressFamily {
	if x != nil {
		return x.AddressFamily
	}
	return Esqm_GtpDatas_GtpData_AddressFamily_IPV4
}

func (x *Esqm_GtpDatas_GtpData) GetLastIpId() uint32 {
	if x != nil {
		return x.LastIpId
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetCurrIpId() uint32 {
	if x != nil {
		return x.CurrIpId
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetOuterVlan() uint32 {
	if x != nil {
		return x.OuterVlan
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetInnerVlan() uint32 {
	if x != nil {
		return x.InnerVlan
	}
	return 0
}

func (x *Esqm_GtpDatas_GtpData) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

var File_huaweiV8R12_esqm_proto protoreflect.FileDescriptor

var file_huaweiV8R12_esqm_proto_rawDesc = []byte{
	0x0a, 0x16, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x65, 0x73,
	0x71, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x22, 0xc9, 0x18, 0x0a, 0x04, 0x45,
	0x73, 0x71, 0x6d, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x54,
	0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x52, 0x09, 0x74, 0x63, 0x70, 0x2d, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x67, 0x74, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x47, 0x74,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x52, 0x09, 0x67, 0x74, 0x70, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x1a, 0x81, 0x0c, 0x0a, 0x08, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x43,
	0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65,
	0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x63, 0x70, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xaf, 0x0b, 0x0a, 0x07, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71,
	0x6d, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x67, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e,
	0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e,
	0x45, 0x73, 0x71, 0x6d, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x54, 0x63,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2d, 0x73, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2d, 0x6e, 0x61, 0x6e,
	0x6f, 0x2d, 0x73, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x12, 0x5d, 0x0a,
	0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x54, 0x63,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0xc4,
	0x01, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x58, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x43, 0x50, 0x58, 0x5f, 0x46, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x43, 0x50, 0x58, 0x5f, 0x52, 0x53, 0x54, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x43, 0x54, 0x50, 0x58,
	0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x43, 0x54, 0x50, 0x58, 0x5f, 0x53, 0x48, 0x55,
	0x54, 0x44, 0x4f, 0x57, 0x4e, 0x58, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x43, 0x54, 0x50, 0x58, 0x5f, 0x41, 0x42,
	0x4f, 0x52, 0x54, 0x10, 0x06, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x54, 0x43, 0x50, 0x58, 0x5f, 0x53, 0x59, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x43, 0x50, 0x58, 0x5f, 0x53, 0x59, 0x4e, 0x58,
	0x5f, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x43, 0x54, 0x50, 0x58, 0x5f, 0x53, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x43, 0x54, 0x50,
	0x58, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x43, 0x54, 0x50, 0x58, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x58,
	0x5f, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x22, 0x44, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0x27, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x00, 0x1a, 0xbe, 0x0b, 0x0a, 0x08, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x67, 0x74, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x47, 0x74, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x67,
	0x74, 0x70, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xec, 0x0a, 0x0a, 0x07, 0x47, 0x74, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x2d,
	0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d,
	0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x47,
	0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45,
	0x73, 0x71, 0x6d, 0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x47, 0x74, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65,
	0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x69, 0x66, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2d,
	0x73, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x2d, 0x6e, 0x61, 0x6e, 0x6f, 0x2d, 0x73, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x47,
	0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73,
	0x71, 0x6d, 0x2e, 0x45, 0x73, 0x71, 0x6d, 0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x2e, 0x47, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x2d, 0x69, 0x70, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x2d, 0x69, 0x70, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x42, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x08,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x54, 0x50, 0x10, 0x06, 0x22, 0x44, 0x0a, 0x0d, 0x46,
	0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x58, 0x5f, 0x52, 0x53, 0x51, 0x10, 0x01, 0x22, 0x27, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x65, 0x73, 0x71, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_huaweiV8R12_esqm_proto_rawDescOnce sync.Once
	file_huaweiV8R12_esqm_proto_rawDescData = file_huaweiV8R12_esqm_proto_rawDesc
)

func file_huaweiV8R12_esqm_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_esqm_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_esqm_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_esqm_proto_rawDescData)
	})
	return file_huaweiV8R12_esqm_proto_rawDescData
}

var file_huaweiV8R12_esqm_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_huaweiV8R12_esqm_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_huaweiV8R12_esqm_proto_goTypes = []interface{}{
	(Esqm_TcpDatas_TcpData_AgeType)(0),       // 0: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.AgeType
	(Esqm_TcpDatas_TcpData_FlowType)(0),      // 1: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.FlowType
	(Esqm_TcpDatas_TcpData_FlowDirection)(0), // 2: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.FlowDirection
	(Esqm_TcpDatas_TcpData_AddressFamily)(0), // 3: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.AddressFamily
	(Esqm_GtpDatas_GtpData_AgeType)(0),       // 4: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.AgeType
	(Esqm_GtpDatas_GtpData_FlowType)(0),      // 5: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.FlowType
	(Esqm_GtpDatas_GtpData_FlowDirection)(0), // 6: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.FlowDirection
	(Esqm_GtpDatas_GtpData_PacketType)(0),    // 7: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.PacketType
	(Esqm_GtpDatas_GtpData_AddressFamily)(0), // 8: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.AddressFamily
	(*Esqm)(nil),                             // 9: huaweiV8R12_esqm.Esqm
	(*Esqm_TcpDatas)(nil),                    // 10: huaweiV8R12_esqm.Esqm.TcpDatas
	(*Esqm_GtpDatas)(nil),                    // 11: huaweiV8R12_esqm.Esqm.GtpDatas
	(*Esqm_TcpDatas_TcpData)(nil),            // 12: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData
	(*Esqm_GtpDatas_GtpData)(nil),            // 13: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData
}
var file_huaweiV8R12_esqm_proto_depIdxs = []int32{
	10, // 0: huaweiV8R12_esqm.Esqm.tcp_datas:type_name -> huaweiV8R12_esqm.Esqm.TcpDatas
	11, // 1: huaweiV8R12_esqm.Esqm.gtp_datas:type_name -> huaweiV8R12_esqm.Esqm.GtpDatas
	12, // 2: huaweiV8R12_esqm.Esqm.TcpDatas.tcp_data:type_name -> huaweiV8R12_esqm.Esqm.TcpDatas.TcpData
	13, // 3: huaweiV8R12_esqm.Esqm.GtpDatas.gtp_data:type_name -> huaweiV8R12_esqm.Esqm.GtpDatas.GtpData
	0,  // 4: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.age_type:type_name -> huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.AgeType
	1,  // 5: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.flow_type:type_name -> huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.FlowType
	2,  // 6: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.flow_direction:type_name -> huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.FlowDirection
	3,  // 7: huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.address_family:type_name -> huaweiV8R12_esqm.Esqm.TcpDatas.TcpData.AddressFamily
	4,  // 8: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.age_type:type_name -> huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.AgeType
	5,  // 9: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.flow_type:type_name -> huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.FlowType
	6,  // 10: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.flow_direction:type_name -> huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.FlowDirection
	7,  // 11: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.packet_type:type_name -> huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.PacketType
	8,  // 12: huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.address_family:type_name -> huaweiV8R12_esqm.Esqm.GtpDatas.GtpData.AddressFamily
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_esqm_proto_init() }
func file_huaweiV8R12_esqm_proto_init() {
	if File_huaweiV8R12_esqm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_esqm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Esqm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_esqm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Esqm_TcpDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_esqm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Esqm_GtpDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_esqm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Esqm_TcpDatas_TcpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_esqm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Esqm_GtpDatas_GtpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_esqm_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_esqm_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_esqm_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_esqm_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_esqm_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_esqm_proto = out.File
	file_huaweiV8R12_esqm_proto_rawDesc = nil
	file_huaweiV8R12_esqm_proto_goTypes = nil
	file_huaweiV8R12_esqm_proto_depIdxs = nil
}
