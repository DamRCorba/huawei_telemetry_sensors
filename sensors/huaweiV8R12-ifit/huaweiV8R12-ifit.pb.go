// ---------------------------------------------------------------------------
// Protofilename : huawei-ifit.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-ifit.proto

package huaweiV8R12_ifit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ifit_FlowStatistics_FlowStatistic_Direction int32

const (
	Ifit_FlowStatistics_FlowStatistic_INVALID_ENUM_VALUE_Direction Ifit_FlowStatistics_FlowStatistic_Direction = 0
	Ifit_FlowStatistics_FlowStatistic_Direction_INGRESS            Ifit_FlowStatistics_FlowStatistic_Direction = 1
	Ifit_FlowStatistics_FlowStatistic_Direction_TRANSITX_INPUT     Ifit_FlowStatistics_FlowStatistic_Direction = 2
	Ifit_FlowStatistics_FlowStatistic_Direction_TRANSITX_OUTPUT    Ifit_FlowStatistics_FlowStatistic_Direction = 3
	Ifit_FlowStatistics_FlowStatistic_Direction_EGRESS             Ifit_FlowStatistics_FlowStatistic_Direction = 4
)

// Enum value maps for Ifit_FlowStatistics_FlowStatistic_Direction.
var (
	Ifit_FlowStatistics_FlowStatistic_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_INGRESS",
		2: "Direction_TRANSITX_INPUT",
		3: "Direction_TRANSITX_OUTPUT",
		4: "Direction_EGRESS",
	}
	Ifit_FlowStatistics_FlowStatistic_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INGRESS":            1,
		"Direction_TRANSITX_INPUT":     2,
		"Direction_TRANSITX_OUTPUT":    3,
		"Direction_EGRESS":             4,
	}
)

func (x Ifit_FlowStatistics_FlowStatistic_Direction) Enum() *Ifit_FlowStatistics_FlowStatistic_Direction {
	p := new(Ifit_FlowStatistics_FlowStatistic_Direction)
	*p = x
	return p
}

func (x Ifit_FlowStatistics_FlowStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_FlowStatistics_FlowStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[0].Descriptor()
}

func (Ifit_FlowStatistics_FlowStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[0]
}

func (x Ifit_FlowStatistics_FlowStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_FlowStatistics_FlowStatistic_Direction.Descriptor instead.
func (Ifit_FlowStatistics_FlowStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Ifit_FlowStatistics_FlowStatistic_AddressFamily int32

const (
	Ifit_FlowStatistics_FlowStatistic_AddressFamily_IPV4 Ifit_FlowStatistics_FlowStatistic_AddressFamily = 0
	Ifit_FlowStatistics_FlowStatistic_AddressFamily_IPV6 Ifit_FlowStatistics_FlowStatistic_AddressFamily = 1
)

// Enum value maps for Ifit_FlowStatistics_FlowStatistic_AddressFamily.
var (
	Ifit_FlowStatistics_FlowStatistic_AddressFamily_name = map[int32]string{
		0: "AddressFamily_IPV4",
		1: "AddressFamily_IPV6",
	}
	Ifit_FlowStatistics_FlowStatistic_AddressFamily_value = map[string]int32{
		"AddressFamily_IPV4": 0,
		"AddressFamily_IPV6": 1,
	}
)

func (x Ifit_FlowStatistics_FlowStatistic_AddressFamily) Enum() *Ifit_FlowStatistics_FlowStatistic_AddressFamily {
	p := new(Ifit_FlowStatistics_FlowStatistic_AddressFamily)
	*p = x
	return p
}

func (x Ifit_FlowStatistics_FlowStatistic_AddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_FlowStatistics_FlowStatistic_AddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[1].Descriptor()
}

func (Ifit_FlowStatistics_FlowStatistic_AddressFamily) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[1]
}

func (x Ifit_FlowStatistics_FlowStatistic_AddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_FlowStatistics_FlowStatistic_AddressFamily.Descriptor instead.
func (Ifit_FlowStatistics_FlowStatistic_AddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type Ifit_FlowHopStatistics_FlowHopStatistic_Direction int32

const (
	Ifit_FlowHopStatistics_FlowHopStatistic_INVALID_ENUM_VALUE_Direction Ifit_FlowHopStatistics_FlowHopStatistic_Direction = 0
	Ifit_FlowHopStatistics_FlowHopStatistic_Direction_INGRESS            Ifit_FlowHopStatistics_FlowHopStatistic_Direction = 1
	Ifit_FlowHopStatistics_FlowHopStatistic_Direction_TRANSITX_INPUT     Ifit_FlowHopStatistics_FlowHopStatistic_Direction = 2
	Ifit_FlowHopStatistics_FlowHopStatistic_Direction_TRANSITX_OUTPUT    Ifit_FlowHopStatistics_FlowHopStatistic_Direction = 3
	Ifit_FlowHopStatistics_FlowHopStatistic_Direction_EGRESS             Ifit_FlowHopStatistics_FlowHopStatistic_Direction = 4
)

// Enum value maps for Ifit_FlowHopStatistics_FlowHopStatistic_Direction.
var (
	Ifit_FlowHopStatistics_FlowHopStatistic_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_INGRESS",
		2: "Direction_TRANSITX_INPUT",
		3: "Direction_TRANSITX_OUTPUT",
		4: "Direction_EGRESS",
	}
	Ifit_FlowHopStatistics_FlowHopStatistic_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INGRESS":            1,
		"Direction_TRANSITX_INPUT":     2,
		"Direction_TRANSITX_OUTPUT":    3,
		"Direction_EGRESS":             4,
	}
)

func (x Ifit_FlowHopStatistics_FlowHopStatistic_Direction) Enum() *Ifit_FlowHopStatistics_FlowHopStatistic_Direction {
	p := new(Ifit_FlowHopStatistics_FlowHopStatistic_Direction)
	*p = x
	return p
}

func (x Ifit_FlowHopStatistics_FlowHopStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_FlowHopStatistics_FlowHopStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[2].Descriptor()
}

func (Ifit_FlowHopStatistics_FlowHopStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[2]
}

func (x Ifit_FlowHopStatistics_FlowHopStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_FlowHopStatistics_FlowHopStatistic_Direction.Descriptor instead.
func (Ifit_FlowHopStatistics_FlowHopStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction int32

const (
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_INVALID_ENUM_VALUE_Direction Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction = 0
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction_INGRESS            Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction = 1
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction_TRANSITX_INPUT     Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction = 2
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction_TRANSITX_OUTPUT    Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction = 3
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction_EGRESS             Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction = 4
)

// Enum value maps for Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction.
var (
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_INGRESS",
		2: "Direction_TRANSITX_INPUT",
		3: "Direction_TRANSITX_OUTPUT",
		4: "Direction_EGRESS",
	}
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INGRESS":            1,
		"Direction_TRANSITX_INPUT":     2,
		"Direction_TRANSITX_OUTPUT":    3,
		"Direction_EGRESS":             4,
	}
)

func (x Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction) Enum() *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction {
	p := new(Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction)
	*p = x
	return p
}

func (x Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[3].Descriptor()
}

func (Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[3]
}

func (x Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction.Descriptor instead.
func (Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

type Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType int32

const (
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType_VPN  Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType = 0
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType_EVPN Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType = 1
)

// Enum value maps for Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType.
var (
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType_name = map[int32]string{
		0: "VpnType_VPN",
		1: "VpnType_EVPN",
	}
	Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType_value = map[string]int32{
		"VpnType_VPN":  0,
		"VpnType_EVPN": 1,
	}
)

func (x Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType) Enum() *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType {
	p := new(Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType)
	*p = x
	return p
}

func (x Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[4].Descriptor()
}

func (Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[4]
}

func (x Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType.Descriptor instead.
func (Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

type Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction int32

const (
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_INVALID_ENUM_VALUE_Direction Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction = 0
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction_INGRESS            Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction = 1
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction_TRANSITX_INPUT     Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction = 2
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction_TRANSITX_OUTPUT    Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction = 3
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction_EGRESS             Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction = 4
)

// Enum value maps for Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction.
var (
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_INGRESS",
		2: "Direction_TRANSITX_INPUT",
		3: "Direction_TRANSITX_OUTPUT",
		4: "Direction_EGRESS",
	}
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INGRESS":            1,
		"Direction_TRANSITX_INPUT":     2,
		"Direction_TRANSITX_OUTPUT":    3,
		"Direction_EGRESS":             4,
	}
)

func (x Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction) Enum() *Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction {
	p := new(Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction)
	*p = x
	return p
}

func (x Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[5].Descriptor()
}

func (Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[5]
}

func (x Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction.Descriptor instead.
func (Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

type Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType int32

const (
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType_VPN  Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType = 0
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType_EVPN Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType = 1
)

// Enum value maps for Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType.
var (
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType_name = map[int32]string{
		0: "VpnType_VPN",
		1: "VpnType_EVPN",
	}
	Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType_value = map[string]int32{
		"VpnType_VPN":  0,
		"VpnType_EVPN": 1,
	}
)

func (x Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType) Enum() *Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType {
	p := new(Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType)
	*p = x
	return p
}

func (x Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[6].Descriptor()
}

func (Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[6]
}

func (x Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType.Descriptor instead.
func (Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 4, 0, 1}
}

type Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode int32

const (
	Ifit_IfitCommon_StaticInstances_StaticInstance_INVALID_ENUM_VALUE_MeasureMode Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode = 0
	Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode_E2E                Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode = 1
	Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode_TRACE              Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode = 2
)

// Enum value maps for Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode.
var (
	Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_MeasureMode",
		1: "MeasureMode_E2E",
		2: "MeasureMode_TRACE",
	}
	Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_MeasureMode": 0,
		"MeasureMode_E2E":                1,
		"MeasureMode_TRACE":              2,
	}
)

func (x Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode) Enum() *Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode {
	p := new(Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode)
	*p = x
	return p
}

func (x Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[7].Descriptor()
}

func (Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[7]
}

func (x Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode.Descriptor instead.
func (Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 3, 0, 0}
}

type Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType int32

const (
	Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_INVALID_ENUM_VALUE_FlowType Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType = 0
	Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType_BIDIRECTION        Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType = 1
	Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType_UNIDIRECTION       Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType = 2
)

// Enum value maps for Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType.
var (
	Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_FlowType",
		1: "FlowType_BIDIRECTION",
		2: "FlowType_UNIDIRECTION",
	}
	Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType_value = map[string]int32{
		"INVALID_ENUM_VALUE_FlowType": 0,
		"FlowType_BIDIRECTION":        1,
		"FlowType_UNIDIRECTION":       2,
	}
)

func (x Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType) Enum() *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType {
	p := new(Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType)
	*p = x
	return p
}

func (x Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[8].Descriptor()
}

func (Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[8]
}

func (x Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType.Descriptor instead.
func (Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 3, 0, 0, 0}
}

type Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType int32

const (
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_INVALID_ENUM_VALUE_FlowType Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType = 0
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType_BIDIRECTION        Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType = 1
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType_UNIDIRECTION       Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType = 2
)

// Enum value maps for Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType.
var (
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_FlowType",
		1: "FlowType_BIDIRECTION",
		2: "FlowType_UNIDIRECTION",
	}
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType_value = map[string]int32{
		"INVALID_ENUM_VALUE_FlowType": 0,
		"FlowType_BIDIRECTION":        1,
		"FlowType_UNIDIRECTION":       2,
	}
)

func (x Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType) Enum() *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType {
	p := new(Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType)
	*p = x
	return p
}

func (x Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[9].Descriptor()
}

func (Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[9]
}

func (x Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType.Descriptor instead.
func (Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 4, 0, 0}
}

type Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction int32

const (
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_INVALID_ENUM_VALUE_Direction Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction = 0
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction_INGRESS            Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction = 1
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction_TRANSITX_INPUT     Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction = 2
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction_TRANSITX_OUTPUT    Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction = 3
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction_EGRESS             Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction = 4
)

// Enum value maps for Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction.
var (
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_INGRESS",
		2: "Direction_TRANSITX_INPUT",
		3: "Direction_TRANSITX_OUTPUT",
		4: "Direction_EGRESS",
	}
	Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INGRESS":            1,
		"Direction_TRANSITX_INPUT":     2,
		"Direction_TRANSITX_OUTPUT":    3,
		"Direction_EGRESS":             4,
	}
)

func (x Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction) Enum() *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction {
	p := new(Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction)
	*p = x
	return p
}

func (x Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifit_proto_enumTypes[10].Descriptor()
}

func (Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifit_proto_enumTypes[10]
}

func (x Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction.Descriptor instead.
func (Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 4, 0, 1}
}

type Ifit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global                *Ifit_Global                `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	FlowStatistics        *Ifit_FlowStatistics        `protobuf:"bytes,2,opt,name=flow_statistics,json=flow-statistics,proto3" json:"flow_statistics,omitempty"`
	FlowHopStatistics     *Ifit_FlowHopStatistics     `protobuf:"bytes,3,opt,name=flow_hop_statistics,json=flow-hop-statistics,proto3" json:"flow_hop_statistics,omitempty"`
	FlowPeerIpStatistics  *Ifit_FlowPeerIpStatistics  `protobuf:"bytes,4,opt,name=flow_peer_ip_statistics,json=flow-peer-ip-statistics,proto3" json:"flow_peer_ip_statistics,omitempty"`
	FlowLocatorStatistics *Ifit_FlowLocatorStatistics `protobuf:"bytes,5,opt,name=flow_locator_statistics,json=flow-locator-statistics,proto3" json:"flow_locator_statistics,omitempty"`
	IfitCommon            *Ifit_IfitCommon            `protobuf:"bytes,6,opt,name=ifit_common,json=ifit-common,proto3" json:"ifit_common,omitempty"`
}

func (x *Ifit) Reset() {
	*x = Ifit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit) ProtoMessage() {}

func (x *Ifit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit.ProtoReflect.Descriptor instead.
func (*Ifit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0}
}

func (x *Ifit) GetGlobal() *Ifit_Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Ifit) GetFlowStatistics() *Ifit_FlowStatistics {
	if x != nil {
		return x.FlowStatistics
	}
	return nil
}

func (x *Ifit) GetFlowHopStatistics() *Ifit_FlowHopStatistics {
	if x != nil {
		return x.FlowHopStatistics
	}
	return nil
}

func (x *Ifit) GetFlowPeerIpStatistics() *Ifit_FlowPeerIpStatistics {
	if x != nil {
		return x.FlowPeerIpStatistics
	}
	return nil
}

func (x *Ifit) GetFlowLocatorStatistics() *Ifit_FlowLocatorStatistics {
	if x != nil {
		return x.FlowLocatorStatistics
	}
	return nil
}

func (x *Ifit) GetIfitCommon() *Ifit_IfitCommon {
	if x != nil {
		return x.IfitCommon
	}
	return nil
}

type Ifit_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	NodeId uint32 `protobuf:"varint,2,opt,name=node_id,json=node-id,proto3" json:"node_id,omitempty"`
}

func (x *Ifit_Global) Reset() {
	*x = Ifit_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_Global) ProtoMessage() {}

func (x *Ifit_Global) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_Global.ProtoReflect.Descriptor instead.
func (*Ifit_Global) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ifit_Global) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Ifit_Global) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type Ifit_FlowStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowStatistic []*Ifit_FlowStatistics_FlowStatistic `protobuf:"bytes,1,rep,name=flow_statistic,json=flow-statistic,proto3" json:"flow_statistic,omitempty"`
}

func (x *Ifit_FlowStatistics) Reset() {
	*x = Ifit_FlowStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowStatistics) ProtoMessage() {}

func (x *Ifit_FlowStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowStatistics.ProtoReflect.Descriptor instead.
func (*Ifit_FlowStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ifit_FlowStatistics) GetFlowStatistic() []*Ifit_FlowStatistics_FlowStatistic {
	if x != nil {
		return x.FlowStatistic
	}
	return nil
}

type Ifit_FlowHopStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowHopStatistic []*Ifit_FlowHopStatistics_FlowHopStatistic `protobuf:"bytes,1,rep,name=flow_hop_statistic,json=flow-hop-statistic,proto3" json:"flow_hop_statistic,omitempty"`
}

func (x *Ifit_FlowHopStatistics) Reset() {
	*x = Ifit_FlowHopStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowHopStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowHopStatistics) ProtoMessage() {}

func (x *Ifit_FlowHopStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowHopStatistics.ProtoReflect.Descriptor instead.
func (*Ifit_FlowHopStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ifit_FlowHopStatistics) GetFlowHopStatistic() []*Ifit_FlowHopStatistics_FlowHopStatistic {
	if x != nil {
		return x.FlowHopStatistic
	}
	return nil
}

type Ifit_FlowPeerIpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowPeerIpStatistic []*Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic `protobuf:"bytes,1,rep,name=flow_peer_ip_statistic,json=flow-peer-ip-statistic,proto3" json:"flow_peer_ip_statistic,omitempty"`
}

func (x *Ifit_FlowPeerIpStatistics) Reset() {
	*x = Ifit_FlowPeerIpStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowPeerIpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowPeerIpStatistics) ProtoMessage() {}

func (x *Ifit_FlowPeerIpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowPeerIpStatistics.ProtoReflect.Descriptor instead.
func (*Ifit_FlowPeerIpStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Ifit_FlowPeerIpStatistics) GetFlowPeerIpStatistic() []*Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic {
	if x != nil {
		return x.FlowPeerIpStatistic
	}
	return nil
}

type Ifit_FlowLocatorStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowLocatorStatistic []*Ifit_FlowLocatorStatistics_FlowLocatorStatistic `protobuf:"bytes,1,rep,name=flow_locator_statistic,json=flow-locator-statistic,proto3" json:"flow_locator_statistic,omitempty"`
}

func (x *Ifit_FlowLocatorStatistics) Reset() {
	*x = Ifit_FlowLocatorStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowLocatorStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowLocatorStatistics) ProtoMessage() {}

func (x *Ifit_FlowLocatorStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowLocatorStatistics.ProtoReflect.Descriptor instead.
func (*Ifit_FlowLocatorStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Ifit_FlowLocatorStatistics) GetFlowLocatorStatistic() []*Ifit_FlowLocatorStatistics_FlowLocatorStatistic {
	if x != nil {
		return x.FlowLocatorStatistic
	}
	return nil
}

type Ifit_IfitCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global          *Ifit_IfitCommon_Global          `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	NextHops        *Ifit_IfitCommon_NextHops        `protobuf:"bytes,2,opt,name=next_hops,json=next-hops,proto3" json:"next_hops,omitempty"`
	PeerLocators    *Ifit_IfitCommon_PeerLocators    `protobuf:"bytes,3,opt,name=peer_locators,json=peer-locators,proto3" json:"peer_locators,omitempty"`
	StaticInstances *Ifit_IfitCommon_StaticInstances `protobuf:"bytes,4,opt,name=static_instances,json=static-instances,proto3" json:"static_instances,omitempty"`
	DynamicFlowHops *Ifit_IfitCommon_DynamicFlowHops `protobuf:"bytes,5,opt,name=dynamic_flow_hops,json=dynamic-flow-hops,proto3" json:"dynamic_flow_hops,omitempty"`
}

func (x *Ifit_IfitCommon) Reset() {
	*x = Ifit_IfitCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon) ProtoMessage() {}

func (x *Ifit_IfitCommon) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Ifit_IfitCommon) GetGlobal() *Ifit_IfitCommon_Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Ifit_IfitCommon) GetNextHops() *Ifit_IfitCommon_NextHops {
	if x != nil {
		return x.NextHops
	}
	return nil
}

func (x *Ifit_IfitCommon) GetPeerLocators() *Ifit_IfitCommon_PeerLocators {
	if x != nil {
		return x.PeerLocators
	}
	return nil
}

func (x *Ifit_IfitCommon) GetStaticInstances() *Ifit_IfitCommon_StaticInstances {
	if x != nil {
		return x.StaticInstances
	}
	return nil
}

func (x *Ifit_IfitCommon) GetDynamicFlowHops() *Ifit_IfitCommon_DynamicFlowHops {
	if x != nil {
		return x.DynamicFlowHops
	}
	return nil
}

type Ifit_FlowStatistics_FlowStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId              uint64                                          `protobuf:"varint,1,opt,name=flow_id,json=flow-id,proto3" json:"flow_id,omitempty"`
	Direction           Ifit_FlowStatistics_FlowStatistic_Direction     `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifit.Ifit_FlowStatistics_FlowStatistic_Direction" json:"direction,omitempty"`
	AddressFamily       Ifit_FlowStatistics_FlowStatistic_AddressFamily `protobuf:"varint,3,opt,name=address_family,json=address-family,proto3,enum=huaweiV8R12_ifit.Ifit_FlowStatistics_FlowStatistic_AddressFamily" json:"address_family,omitempty"`
	SourceIp            string                                          `protobuf:"bytes,4,opt,name=source_ip,json=source-ip,proto3" json:"source_ip,omitempty"`
	DestinationIp       string                                          `protobuf:"bytes,5,opt,name=destination_ip,json=destination-ip,proto3" json:"destination_ip,omitempty"`
	SourceMask          uint32                                          `protobuf:"varint,6,opt,name=source_mask,json=source-mask,proto3" json:"source_mask,omitempty"`
	DestinationMask     uint32                                          `protobuf:"varint,7,opt,name=destination_mask,json=destination-mask,proto3" json:"destination_mask,omitempty"`
	SourcePort          uint32                                          `protobuf:"varint,8,opt,name=source_port,json=source-port,proto3" json:"source_port,omitempty"`
	DestinationPort     uint32                                          `protobuf:"varint,9,opt,name=destination_port,json=destination-port,proto3" json:"destination_port,omitempty"`
	Protocol            uint32                                          `protobuf:"varint,10,opt,name=protocol,proto3" json:"protocol,omitempty"`
	VpnName             string                                          `protobuf:"bytes,11,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	IfIndex             uint32                                          `protobuf:"varint,12,opt,name=if_index,json=if-index,proto3" json:"if_index,omitempty"`
	ErrorInfo           uint32                                          `protobuf:"varint,13,opt,name=error_info,json=error-info,proto3" json:"error_info,omitempty"`
	Interval            uint32                                          `protobuf:"varint,14,opt,name=interval,proto3" json:"interval,omitempty"`
	PeriodId            uint64                                          `protobuf:"varint,15,opt,name=period_id,json=period-id,proto3" json:"period_id,omitempty"`
	PacketCount         uint64                                          `protobuf:"varint,16,opt,name=packet_count,json=packet-count,proto3" json:"packet_count,omitempty"`
	ByteCount           uint64                                          `protobuf:"varint,17,opt,name=byte_count,json=byte-count,proto3" json:"byte_count,omitempty"`
	TimestampSecond     uint32                                          `protobuf:"varint,18,opt,name=timestamp_second,json=timestamp-second,proto3" json:"timestamp_second,omitempty"`
	TimestampNanosecond uint32                                          `protobuf:"varint,19,opt,name=timestamp_nanosecond,json=timestamp-nanosecond,proto3" json:"timestamp_nanosecond,omitempty"`
	Ttl                 uint32                                          `protobuf:"varint,21,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Dscp                uint32                                          `protobuf:"varint,22,opt,name=dscp,proto3" json:"dscp,omitempty"`
	TunnelIfIndex       string                                          `protobuf:"bytes,23,opt,name=tunnel_if_index,json=tunnel-if-index,proto3" json:"tunnel_if_index,omitempty"`
}

func (x *Ifit_FlowStatistics_FlowStatistic) Reset() {
	*x = Ifit_FlowStatistics_FlowStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowStatistics_FlowStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowStatistics_FlowStatistic) ProtoMessage() {}

func (x *Ifit_FlowStatistics_FlowStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowStatistics_FlowStatistic.ProtoReflect.Descriptor instead.
func (*Ifit_FlowStatistics_FlowStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetFlowId() uint64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetDirection() Ifit_FlowStatistics_FlowStatistic_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifit_FlowStatistics_FlowStatistic_INVALID_ENUM_VALUE_Direction
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetAddressFamily() Ifit_FlowStatistics_FlowStatistic_AddressFamily {
	if x != nil {
		return x.AddressFamily
	}
	return Ifit_FlowStatistics_FlowStatistic_AddressFamily_IPV4
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetDestinationIp() string {
	if x != nil {
		return x.DestinationIp
	}
	return ""
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetSourceMask() uint32 {
	if x != nil {
		return x.SourceMask
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetDestinationMask() uint32 {
	if x != nil {
		return x.DestinationMask
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetErrorInfo() uint32 {
	if x != nil {
		return x.ErrorInfo
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetPeriodId() uint64 {
	if x != nil {
		return x.PeriodId
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetPacketCount() uint64 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetByteCount() uint64 {
	if x != nil {
		return x.ByteCount
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetTimestampSecond() uint32 {
	if x != nil {
		return x.TimestampSecond
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetTimestampNanosecond() uint32 {
	if x != nil {
		return x.TimestampNanosecond
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *Ifit_FlowStatistics_FlowStatistic) GetTunnelIfIndex() string {
	if x != nil {
		return x.TunnelIfIndex
	}
	return ""
}

type Ifit_FlowHopStatistics_FlowHopStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId              uint64                                            `protobuf:"varint,1,opt,name=flow_id,json=flow-id,proto3" json:"flow_id,omitempty"`
	Direction           Ifit_FlowHopStatistics_FlowHopStatistic_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifit.Ifit_FlowHopStatistics_FlowHopStatistic_Direction" json:"direction,omitempty"`
	IfIndex             uint32                                            `protobuf:"varint,3,opt,name=if_index,json=if-index,proto3" json:"if_index,omitempty"`
	ErrorInfo           uint32                                            `protobuf:"varint,4,opt,name=error_info,json=error-info,proto3" json:"error_info,omitempty"`
	PeriodId            uint64                                            `protobuf:"varint,5,opt,name=period_id,json=period-id,proto3" json:"period_id,omitempty"`
	PacketCount         uint64                                            `protobuf:"varint,6,opt,name=packet_count,json=packet-count,proto3" json:"packet_count,omitempty"`
	ByteCount           uint64                                            `protobuf:"varint,7,opt,name=byte_count,json=byte-count,proto3" json:"byte_count,omitempty"`
	TimestampSecond     uint32                                            `protobuf:"varint,8,opt,name=timestamp_second,json=timestamp-second,proto3" json:"timestamp_second,omitempty"`
	TimestampNanosecond uint32                                            `protobuf:"varint,9,opt,name=timestamp_nanosecond,json=timestamp-nanosecond,proto3" json:"timestamp_nanosecond,omitempty"`
	Ttl                 uint32                                            `protobuf:"varint,11,opt,name=ttl,proto3" json:"ttl,omitempty"`
	TunnelIfIndex       string                                            `protobuf:"bytes,12,opt,name=tunnel_if_index,json=tunnel-if-index,proto3" json:"tunnel_if_index,omitempty"`
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) Reset() {
	*x = Ifit_FlowHopStatistics_FlowHopStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowHopStatistics_FlowHopStatistic) ProtoMessage() {}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowHopStatistics_FlowHopStatistic.ProtoReflect.Descriptor instead.
func (*Ifit_FlowHopStatistics_FlowHopStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetFlowId() uint64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetDirection() Ifit_FlowHopStatistics_FlowHopStatistic_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifit_FlowHopStatistics_FlowHopStatistic_INVALID_ENUM_VALUE_Direction
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetErrorInfo() uint32 {
	if x != nil {
		return x.ErrorInfo
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetPeriodId() uint64 {
	if x != nil {
		return x.PeriodId
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetPacketCount() uint64 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetByteCount() uint64 {
	if x != nil {
		return x.ByteCount
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetTimestampSecond() uint32 {
	if x != nil {
		return x.TimestampSecond
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetTimestampNanosecond() uint32 {
	if x != nil {
		return x.TimestampNanosecond
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Ifit_FlowHopStatistics_FlowHopStatistic) GetTunnelIfIndex() string {
	if x != nil {
		return x.TunnelIfIndex
	}
	return ""
}

type Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId              uint64                                                  `protobuf:"varint,1,opt,name=flow_id,json=flow-id,proto3" json:"flow_id,omitempty"`
	Direction           Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifit.Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction" json:"direction,omitempty"`
	PeerIp              string                                                  `protobuf:"bytes,3,opt,name=peer_ip,json=peer-ip,proto3" json:"peer_ip,omitempty"`
	VpnName             string                                                  `protobuf:"bytes,4,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	ErrorInfo           uint32                                                  `protobuf:"varint,5,opt,name=error_info,json=error-info,proto3" json:"error_info,omitempty"`
	Interval            uint32                                                  `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
	IfIndex             uint32                                                  `protobuf:"varint,7,opt,name=if_index,json=if-index,proto3" json:"if_index,omitempty"`
	PeriodId            uint64                                                  `protobuf:"varint,8,opt,name=period_id,json=period-id,proto3" json:"period_id,omitempty"`
	PacketCount         uint64                                                  `protobuf:"varint,9,opt,name=packet_count,json=packet-count,proto3" json:"packet_count,omitempty"`
	ByteCount           uint64                                                  `protobuf:"varint,10,opt,name=byte_count,json=byte-count,proto3" json:"byte_count,omitempty"`
	TimestampSecond     uint32                                                  `protobuf:"varint,11,opt,name=timestamp_second,json=timestamp-second,proto3" json:"timestamp_second,omitempty"`
	TimestampNanosecond uint32                                                  `protobuf:"varint,12,opt,name=timestamp_nanosecond,json=timestamp-nanosecond,proto3" json:"timestamp_nanosecond,omitempty"`
	VpnType             Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType   `protobuf:"varint,13,opt,name=vpn_type,json=vpn-type,proto3,enum=huaweiV8R12_ifit.Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType" json:"vpn_type,omitempty"`
	EvpnName            string                                                  `protobuf:"bytes,14,opt,name=evpn_name,json=evpn-name,proto3" json:"evpn_name,omitempty"`
	Ttl                 uint32                                                  `protobuf:"varint,15,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) Reset() {
	*x = Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) ProtoMessage() {}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic.ProtoReflect.Descriptor instead.
func (*Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetFlowId() uint64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetDirection() Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_INVALID_ENUM_VALUE_Direction
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetErrorInfo() uint32 {
	if x != nil {
		return x.ErrorInfo
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetPeriodId() uint64 {
	if x != nil {
		return x.PeriodId
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetPacketCount() uint64 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetByteCount() uint64 {
	if x != nil {
		return x.ByteCount
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetTimestampSecond() uint32 {
	if x != nil {
		return x.TimestampSecond
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetTimestampNanosecond() uint32 {
	if x != nil {
		return x.TimestampNanosecond
	}
	return 0
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetVpnType() Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType {
	if x != nil {
		return x.VpnType
	}
	return Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType_VPN
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetEvpnName() string {
	if x != nil {
		return x.EvpnName
	}
	return ""
}

func (x *Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type Ifit_FlowLocatorStatistics_FlowLocatorStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId              uint64                                                    `protobuf:"varint,1,opt,name=flow_id,json=flow-id,proto3" json:"flow_id,omitempty"`
	Direction           Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifit.Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction" json:"direction,omitempty"`
	LocatorPrefix       string                                                    `protobuf:"bytes,3,opt,name=locator_prefix,json=locator-prefix,proto3" json:"locator_prefix,omitempty"`
	PrefixLength        uint32                                                    `protobuf:"varint,4,opt,name=prefix_length,json=prefix-length,proto3" json:"prefix_length,omitempty"`
	VpnName             string                                                    `protobuf:"bytes,5,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	ErrorInfo           uint32                                                    `protobuf:"varint,6,opt,name=error_info,json=error-info,proto3" json:"error_info,omitempty"`
	Interval            uint32                                                    `protobuf:"varint,7,opt,name=interval,proto3" json:"interval,omitempty"`
	PeriodId            uint64                                                    `protobuf:"varint,8,opt,name=period_id,json=period-id,proto3" json:"period_id,omitempty"`
	IfIndex             uint32                                                    `protobuf:"varint,9,opt,name=if_index,json=if-index,proto3" json:"if_index,omitempty"`
	PacketCount         uint64                                                    `protobuf:"varint,10,opt,name=packet_count,json=packet-count,proto3" json:"packet_count,omitempty"`
	ByteCount           uint64                                                    `protobuf:"varint,11,opt,name=byte_count,json=byte-count,proto3" json:"byte_count,omitempty"`
	TimestampSecond     uint32                                                    `protobuf:"varint,12,opt,name=timestamp_second,json=timestamp-second,proto3" json:"timestamp_second,omitempty"`
	TimestampNanosecond uint32                                                    `protobuf:"varint,13,opt,name=timestamp_nanosecond,json=timestamp-nanosecond,proto3" json:"timestamp_nanosecond,omitempty"`
	VpnType             Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType   `protobuf:"varint,14,opt,name=vpn_type,json=vpn-type,proto3,enum=huaweiV8R12_ifit.Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType" json:"vpn_type,omitempty"`
	EvpnName            string                                                    `protobuf:"bytes,15,opt,name=evpn_name,json=evpn-name,proto3" json:"evpn_name,omitempty"`
	Ttl                 uint32                                                    `protobuf:"varint,16,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) Reset() {
	*x = Ifit_FlowLocatorStatistics_FlowLocatorStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_FlowLocatorStatistics_FlowLocatorStatistic) ProtoMessage() {}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_FlowLocatorStatistics_FlowLocatorStatistic.ProtoReflect.Descriptor instead.
func (*Ifit_FlowLocatorStatistics_FlowLocatorStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetFlowId() uint64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetDirection() Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifit_FlowLocatorStatistics_FlowLocatorStatistic_INVALID_ENUM_VALUE_Direction
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetLocatorPrefix() string {
	if x != nil {
		return x.LocatorPrefix
	}
	return ""
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetErrorInfo() uint32 {
	if x != nil {
		return x.ErrorInfo
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetPeriodId() uint64 {
	if x != nil {
		return x.PeriodId
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetPacketCount() uint64 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetByteCount() uint64 {
	if x != nil {
		return x.ByteCount
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetTimestampSecond() uint32 {
	if x != nil {
		return x.TimestampSecond
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetTimestampNanosecond() uint32 {
	if x != nil {
		return x.TimestampNanosecond
	}
	return 0
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetVpnType() Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType {
	if x != nil {
		return x.VpnType
	}
	return Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType_VPN
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetEvpnName() string {
	if x != nil {
		return x.EvpnName
	}
	return ""
}

func (x *Ifit_FlowLocatorStatistics_FlowLocatorStatistic) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type Ifit_IfitCommon_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                     uint32 `protobuf:"varint,1,opt,name=node_id,json=node-id,proto3" json:"node_id,omitempty"`
	DynamicFlowAgingMultiplier uint32 `protobuf:"varint,2,opt,name=dynamic_flow_aging_multiplier,json=dynamic-flow-aging-multiplier,proto3" json:"dynamic_flow_aging_multiplier,omitempty"`
}

func (x *Ifit_IfitCommon_Global) Reset() {
	*x = Ifit_IfitCommon_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_Global) ProtoMessage() {}

func (x *Ifit_IfitCommon_Global) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_Global.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_Global) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Ifit_IfitCommon_Global) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Ifit_IfitCommon_Global) GetDynamicFlowAgingMultiplier() uint32 {
	if x != nil {
		return x.DynamicFlowAgingMultiplier
	}
	return 0
}

type Ifit_IfitCommon_NextHops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextHop []*Ifit_IfitCommon_NextHops_NextHop `protobuf:"bytes,1,rep,name=next_hop,json=next-hop,proto3" json:"next_hop,omitempty"`
}

func (x *Ifit_IfitCommon_NextHops) Reset() {
	*x = Ifit_IfitCommon_NextHops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_NextHops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_NextHops) ProtoMessage() {}

func (x *Ifit_IfitCommon_NextHops) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_NextHops.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_NextHops) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *Ifit_IfitCommon_NextHops) GetNextHop() []*Ifit_IfitCommon_NextHops_NextHop {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type Ifit_IfitCommon_PeerLocators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerLocator []*Ifit_IfitCommon_PeerLocators_PeerLocator `protobuf:"bytes,1,rep,name=peer_locator,json=peer-locator,proto3" json:"peer_locator,omitempty"`
}

func (x *Ifit_IfitCommon_PeerLocators) Reset() {
	*x = Ifit_IfitCommon_PeerLocators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_PeerLocators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_PeerLocators) ProtoMessage() {}

func (x *Ifit_IfitCommon_PeerLocators) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_PeerLocators.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_PeerLocators) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 2}
}

func (x *Ifit_IfitCommon_PeerLocators) GetPeerLocator() []*Ifit_IfitCommon_PeerLocators_PeerLocator {
	if x != nil {
		return x.PeerLocator
	}
	return nil
}

type Ifit_IfitCommon_StaticInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticInstance []*Ifit_IfitCommon_StaticInstances_StaticInstance `protobuf:"bytes,1,rep,name=static_instance,json=static-instance,proto3" json:"static_instance,omitempty"`
}

func (x *Ifit_IfitCommon_StaticInstances) Reset() {
	*x = Ifit_IfitCommon_StaticInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_StaticInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_StaticInstances) ProtoMessage() {}

func (x *Ifit_IfitCommon_StaticInstances) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_StaticInstances.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_StaticInstances) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 3}
}

func (x *Ifit_IfitCommon_StaticInstances) GetStaticInstance() []*Ifit_IfitCommon_StaticInstances_StaticInstance {
	if x != nil {
		return x.StaticInstance
	}
	return nil
}

type Ifit_IfitCommon_DynamicFlowHops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicFlowHop []*Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop `protobuf:"bytes,1,rep,name=dynamic_flow_hop,json=dynamic-flow-hop,proto3" json:"dynamic_flow_hop,omitempty"`
}

func (x *Ifit_IfitCommon_DynamicFlowHops) Reset() {
	*x = Ifit_IfitCommon_DynamicFlowHops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_DynamicFlowHops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_DynamicFlowHops) ProtoMessage() {}

func (x *Ifit_IfitCommon_DynamicFlowHops) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_DynamicFlowHops.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_DynamicFlowHops) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 4}
}

func (x *Ifit_IfitCommon_DynamicFlowHops) GetDynamicFlowHop() []*Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop {
	if x != nil {
		return x.DynamicFlowHop
	}
	return nil
}

type Ifit_IfitCommon_NextHops_NextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Ifit_IfitCommon_NextHops_NextHop) Reset() {
	*x = Ifit_IfitCommon_NextHops_NextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_NextHops_NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_NextHops_NextHop) ProtoMessage() {}

func (x *Ifit_IfitCommon_NextHops_NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_NextHops_NextHop.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_NextHops_NextHop) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 1, 0}
}

func (x *Ifit_IfitCommon_NextHops_NextHop) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Ifit_IfitCommon_PeerLocators_PeerLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix           string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixMaskLength uint32 `protobuf:"varint,2,opt,name=prefix_mask_length,json=prefix-mask-length,proto3" json:"prefix_mask_length,omitempty"`
}

func (x *Ifit_IfitCommon_PeerLocators_PeerLocator) Reset() {
	*x = Ifit_IfitCommon_PeerLocators_PeerLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_PeerLocators_PeerLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_PeerLocators_PeerLocator) ProtoMessage() {}

func (x *Ifit_IfitCommon_PeerLocators_PeerLocator) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_PeerLocators_PeerLocator.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_PeerLocators_PeerLocator) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 2, 0}
}

func (x *Ifit_IfitCommon_PeerLocators_PeerLocator) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ifit_IfitCommon_PeerLocators_PeerLocator) GetPrefixMaskLength() uint32 {
	if x != nil {
		return x.PrefixMaskLength
	}
	return 0
}

type Ifit_IfitCommon_StaticInstances_StaticInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interval              uint32                                                     `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	MeasureMode           Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode `protobuf:"varint,3,opt,name=measure_mode,json=measure-mode,proto3,enum=huaweiV8R12_ifit.Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode" json:"measure_mode,omitempty"`
	LossMeasureEnable     bool                                                       `protobuf:"varint,4,opt,name=loss_measure_enable,json=loss-measure-enable,proto3" json:"loss_measure_enable,omitempty"`
	DelayMeasureEnable    bool                                                       `protobuf:"varint,5,opt,name=delay_measure_enable,json=delay-measure-enable,proto3" json:"delay_measure_enable,omitempty"`
	DisorderMeasureEnable bool                                                       `protobuf:"varint,6,opt,name=disorder_measure_enable,json=disorder-measure-enable,proto3" json:"disorder_measure_enable,omitempty"`
	Flow                  *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow       `protobuf:"bytes,7,opt,name=flow,proto3" json:"flow,omitempty"`
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) Reset() {
	*x = Ifit_IfitCommon_StaticInstances_StaticInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_StaticInstances_StaticInstance) ProtoMessage() {}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_StaticInstances_StaticInstance.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_StaticInstances_StaticInstance) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 3, 0}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) GetMeasureMode() Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode {
	if x != nil {
		return x.MeasureMode
	}
	return Ifit_IfitCommon_StaticInstances_StaticInstance_INVALID_ENUM_VALUE_MeasureMode
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) GetLossMeasureEnable() bool {
	if x != nil {
		return x.LossMeasureEnable
	}
	return false
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) GetDelayMeasureEnable() bool {
	if x != nil {
		return x.DelayMeasureEnable
	}
	return false
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) GetDisorderMeasureEnable() bool {
	if x != nil {
		return x.DisorderMeasureEnable
	}
	return false
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance) GetFlow() *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type Ifit_IfitCommon_StaticInstances_StaticInstance_Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_ifit.Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType" json:"flow_type,omitempty"`
	BindIfs  *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs `protobuf:"bytes,2,opt,name=bind_ifs,json=bind-ifs,proto3" json:"bind_ifs,omitempty"`
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow) Reset() {
	*x = Ifit_IfitCommon_StaticInstances_StaticInstance_Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow) ProtoMessage() {}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_StaticInstances_StaticInstance_Flow.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 3, 0, 0}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow) GetFlowType() Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_INVALID_ENUM_VALUE_FlowType
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow) GetBindIfs() *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs {
	if x != nil {
		return x.BindIfs
	}
	return nil
}

type Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindIf []*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf `protobuf:"bytes,1,rep,name=bind_if,json=bind-if,proto3" json:"bind_if,omitempty"`
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs) Reset() {
	*x = Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs) ProtoMessage() {}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 3, 0, 0, 0}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs) GetBindIf() []*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf {
	if x != nil {
		return x.BindIf
	}
	return nil
}

type Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName string `protobuf:"bytes,1,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
	FlowId uint64 `protobuf:"varint,2,opt,name=flow_id,json=flow-id,proto3" json:"flow_id,omitempty"`
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf) Reset() {
	*x = Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf) ProtoMessage() {}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 3, 0, 0, 0, 0}
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf) GetFlowId() uint64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

type Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId                uint64                                                   `protobuf:"varint,1,opt,name=flow_id,json=flow-id,proto3" json:"flow_id,omitempty"`
	FlowType              Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType  `protobuf:"varint,2,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_ifit.Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType" json:"flow_type,omitempty"`
	IfName                string                                                   `protobuf:"bytes,3,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
	Interval              uint32                                                   `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Direction             Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=huaweiV8R12_ifit.Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction" json:"direction,omitempty"`
	LossMeasureEnable     bool                                                     `protobuf:"varint,6,opt,name=loss_measure_enable,json=loss-measure-enable,proto3" json:"loss_measure_enable,omitempty"`
	DelayMeasureEnable    bool                                                     `protobuf:"varint,7,opt,name=delay_measure_enable,json=delay-measure-enable,proto3" json:"delay_measure_enable,omitempty"`
	DisorderMeasureEnable bool                                                     `protobuf:"varint,8,opt,name=disorder_measure_enable,json=disorder-measure-enable,proto3" json:"disorder_measure_enable,omitempty"`
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) Reset() {
	*x = Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifit_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) ProtoMessage() {}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifit_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop.ProtoReflect.Descriptor instead.
func (*Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifit_proto_rawDescGZIP(), []int{0, 5, 4, 0}
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetFlowId() uint64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetFlowType() Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_INVALID_ENUM_VALUE_FlowType
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetDirection() Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_INVALID_ENUM_VALUE_Direction
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetLossMeasureEnable() bool {
	if x != nil {
		return x.LossMeasureEnable
	}
	return false
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetDelayMeasureEnable() bool {
	if x != nil {
		return x.DelayMeasureEnable
	}
	return false
}

func (x *Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop) GetDisorderMeasureEnable() bool {
	if x != nil {
		return x.DisorderMeasureEnable
	}
	return false
}

var File_huaweiV8R12_ifit_proto protoreflect.FileDescriptor

var file_huaweiV8R12_ifit_proto_rawDesc = []byte{
	0x0a, 0x16, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x69, 0x66,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x22, 0x99, 0x3a, 0x0a, 0x04, 0x49,
	0x66, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x0f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x65, 0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x69, 0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x66,
	0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x17, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x66, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49,
	0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x0b,
	0x69, 0x66, 0x69, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x06, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x64, 0x1a, 0xc0, 0x09, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xd0, 0x08, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x70, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x70, 0x6e,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2d, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x97, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x22, 0x3f, 0x0a, 0x0d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x1a, 0xe4, 0x05, 0x0a, 0x11, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x69, 0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e,
	0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x68, 0x6f,
	0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xe3, 0x04, 0x0a, 0x10,
	0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74,
	0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2d, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x69,
	0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x04, 0x1a, 0xd7, 0x07, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x77, 0x0a, 0x16, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66,
	0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x16, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x69, 0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x1a, 0xc5, 0x06, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x2d, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2d, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x63,
	0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x58,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x58, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x22, 0x2c, 0x0a,
	0x07, 0x56, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x70, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x70, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x10, 0x01, 0x1a, 0x93, 0x08, 0x0a, 0x15,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x79, 0x0a, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x1a, 0xfe, 0x06, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x69, 0x64, 0x12, 0x69, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2d,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x66, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2d, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x65, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x76, 0x70, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x70,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x04, 0x22, 0x2c, 0x0a, 0x07, 0x56, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x56, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x10,
	0x01, 0x1a, 0xc2, 0x16, 0x0a, 0x0a, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x48, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x73, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x0d,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e,
	0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x5f, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e,
	0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x73, 0x52,
	0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x1a, 0x68, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x7f, 0x0a, 0x08,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66,
	0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x1a, 0x23, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xc5, 0x01,
	0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5e,
	0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x55,
	0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x2d, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x8a, 0x09, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x8a, 0x08, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x70, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69,
	0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74,
	0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0xfb, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x6c,
	0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69,
	0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x66, 0x73, 0x52, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x2d, 0x69, 0x66, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64,
	0x49, 0x66, 0x73, 0x12, 0x6e, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x49, 0x66, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x66, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64,
	0x2d, 0x69, 0x66, 0x1a, 0x3c, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x66, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x69,
	0x64, 0x22, 0x60, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x22, 0x5d, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x10, 0x02, 0x1a, 0xd1, 0x06, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x6c, 0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x48,
	0x6f, 0x70, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x48,
	0x6f, 0x70, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2d, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x68, 0x6f, 0x70, 0x1a, 0xcf, 0x05, 0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x69,
	0x64, 0x12, 0x67, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x70, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x68, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74, 0x2e, 0x49, 0x66, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x48, 0x6f, 0x70, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x48, 0x6f, 0x70, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x2d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x08, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e,
	0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x97, 0x01, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x42, 0x12, 0x5a, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_huaweiV8R12_ifit_proto_rawDescOnce sync.Once
	file_huaweiV8R12_ifit_proto_rawDescData = file_huaweiV8R12_ifit_proto_rawDesc
)

func file_huaweiV8R12_ifit_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_ifit_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_ifit_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_ifit_proto_rawDescData)
	})
	return file_huaweiV8R12_ifit_proto_rawDescData
}

var file_huaweiV8R12_ifit_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_huaweiV8R12_ifit_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_huaweiV8R12_ifit_proto_goTypes = []interface{}{
	(Ifit_FlowStatistics_FlowStatistic_Direction)(0),                  // 0: huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic.Direction
	(Ifit_FlowStatistics_FlowStatistic_AddressFamily)(0),              // 1: huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic.AddressFamily
	(Ifit_FlowHopStatistics_FlowHopStatistic_Direction)(0),            // 2: huaweiV8R12_ifit.Ifit.FlowHopStatistics.FlowHopStatistic.Direction
	(Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_Direction)(0),      // 3: huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic.Direction
	(Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic_VpnType)(0),        // 4: huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic.VpnType
	(Ifit_FlowLocatorStatistics_FlowLocatorStatistic_Direction)(0),    // 5: huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic.Direction
	(Ifit_FlowLocatorStatistics_FlowLocatorStatistic_VpnType)(0),      // 6: huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic.VpnType
	(Ifit_IfitCommon_StaticInstances_StaticInstance_MeasureMode)(0),   // 7: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.MeasureMode
	(Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_FlowType)(0), // 8: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.FlowType
	(Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_FlowType)(0),      // 9: huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop.FlowType
	(Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop_Direction)(0),     // 10: huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop.Direction
	(*Ifit)(nil),                                                               // 11: huaweiV8R12_ifit.Ifit
	(*Ifit_Global)(nil),                                                        // 12: huaweiV8R12_ifit.Ifit.Global
	(*Ifit_FlowStatistics)(nil),                                                // 13: huaweiV8R12_ifit.Ifit.FlowStatistics
	(*Ifit_FlowHopStatistics)(nil),                                             // 14: huaweiV8R12_ifit.Ifit.FlowHopStatistics
	(*Ifit_FlowPeerIpStatistics)(nil),                                          // 15: huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics
	(*Ifit_FlowLocatorStatistics)(nil),                                         // 16: huaweiV8R12_ifit.Ifit.FlowLocatorStatistics
	(*Ifit_IfitCommon)(nil),                                                    // 17: huaweiV8R12_ifit.Ifit.IfitCommon
	(*Ifit_FlowStatistics_FlowStatistic)(nil),                                  // 18: huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic
	(*Ifit_FlowHopStatistics_FlowHopStatistic)(nil),                            // 19: huaweiV8R12_ifit.Ifit.FlowHopStatistics.FlowHopStatistic
	(*Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic)(nil),                      // 20: huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic
	(*Ifit_FlowLocatorStatistics_FlowLocatorStatistic)(nil),                    // 21: huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic
	(*Ifit_IfitCommon_Global)(nil),                                             // 22: huaweiV8R12_ifit.Ifit.IfitCommon.Global
	(*Ifit_IfitCommon_NextHops)(nil),                                           // 23: huaweiV8R12_ifit.Ifit.IfitCommon.NextHops
	(*Ifit_IfitCommon_PeerLocators)(nil),                                       // 24: huaweiV8R12_ifit.Ifit.IfitCommon.PeerLocators
	(*Ifit_IfitCommon_StaticInstances)(nil),                                    // 25: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances
	(*Ifit_IfitCommon_DynamicFlowHops)(nil),                                    // 26: huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops
	(*Ifit_IfitCommon_NextHops_NextHop)(nil),                                   // 27: huaweiV8R12_ifit.Ifit.IfitCommon.NextHops.NextHop
	(*Ifit_IfitCommon_PeerLocators_PeerLocator)(nil),                           // 28: huaweiV8R12_ifit.Ifit.IfitCommon.PeerLocators.PeerLocator
	(*Ifit_IfitCommon_StaticInstances_StaticInstance)(nil),                     // 29: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance
	(*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow)(nil),                // 30: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow
	(*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs)(nil),        // 31: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.BindIfs
	(*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf)(nil), // 32: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.BindIfs.BindIf
	(*Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop)(nil),                     // 33: huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop
}
var file_huaweiV8R12_ifit_proto_depIdxs = []int32{
	12, // 0: huaweiV8R12_ifit.Ifit.global:type_name -> huaweiV8R12_ifit.Ifit.Global
	13, // 1: huaweiV8R12_ifit.Ifit.flow_statistics:type_name -> huaweiV8R12_ifit.Ifit.FlowStatistics
	14, // 2: huaweiV8R12_ifit.Ifit.flow_hop_statistics:type_name -> huaweiV8R12_ifit.Ifit.FlowHopStatistics
	15, // 3: huaweiV8R12_ifit.Ifit.flow_peer_ip_statistics:type_name -> huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics
	16, // 4: huaweiV8R12_ifit.Ifit.flow_locator_statistics:type_name -> huaweiV8R12_ifit.Ifit.FlowLocatorStatistics
	17, // 5: huaweiV8R12_ifit.Ifit.ifit_common:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon
	18, // 6: huaweiV8R12_ifit.Ifit.FlowStatistics.flow_statistic:type_name -> huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic
	19, // 7: huaweiV8R12_ifit.Ifit.FlowHopStatistics.flow_hop_statistic:type_name -> huaweiV8R12_ifit.Ifit.FlowHopStatistics.FlowHopStatistic
	20, // 8: huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.flow_peer_ip_statistic:type_name -> huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic
	21, // 9: huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.flow_locator_statistic:type_name -> huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic
	22, // 10: huaweiV8R12_ifit.Ifit.IfitCommon.global:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.Global
	23, // 11: huaweiV8R12_ifit.Ifit.IfitCommon.next_hops:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.NextHops
	24, // 12: huaweiV8R12_ifit.Ifit.IfitCommon.peer_locators:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.PeerLocators
	25, // 13: huaweiV8R12_ifit.Ifit.IfitCommon.static_instances:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances
	26, // 14: huaweiV8R12_ifit.Ifit.IfitCommon.dynamic_flow_hops:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops
	0,  // 15: huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic.direction:type_name -> huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic.Direction
	1,  // 16: huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic.address_family:type_name -> huaweiV8R12_ifit.Ifit.FlowStatistics.FlowStatistic.AddressFamily
	2,  // 17: huaweiV8R12_ifit.Ifit.FlowHopStatistics.FlowHopStatistic.direction:type_name -> huaweiV8R12_ifit.Ifit.FlowHopStatistics.FlowHopStatistic.Direction
	3,  // 18: huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic.direction:type_name -> huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic.Direction
	4,  // 19: huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic.vpn_type:type_name -> huaweiV8R12_ifit.Ifit.FlowPeerIpStatistics.FlowPeerIpStatistic.VpnType
	5,  // 20: huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic.direction:type_name -> huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic.Direction
	6,  // 21: huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic.vpn_type:type_name -> huaweiV8R12_ifit.Ifit.FlowLocatorStatistics.FlowLocatorStatistic.VpnType
	27, // 22: huaweiV8R12_ifit.Ifit.IfitCommon.NextHops.next_hop:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.NextHops.NextHop
	28, // 23: huaweiV8R12_ifit.Ifit.IfitCommon.PeerLocators.peer_locator:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.PeerLocators.PeerLocator
	29, // 24: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.static_instance:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance
	33, // 25: huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.dynamic_flow_hop:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop
	7,  // 26: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.measure_mode:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.MeasureMode
	30, // 27: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.flow:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow
	8,  // 28: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.flow_type:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.FlowType
	31, // 29: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.bind_ifs:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.BindIfs
	32, // 30: huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.BindIfs.bind_if:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.StaticInstances.StaticInstance.Flow.BindIfs.BindIf
	9,  // 31: huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop.flow_type:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop.FlowType
	10, // 32: huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop.direction:type_name -> huaweiV8R12_ifit.Ifit.IfitCommon.DynamicFlowHops.DynamicFlowHop.Direction
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_ifit_proto_init() }
func file_huaweiV8R12_ifit_proto_init() {
	if File_huaweiV8R12_ifit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_ifit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowHopStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowPeerIpStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowLocatorStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowStatistics_FlowStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowHopStatistics_FlowHopStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowPeerIpStatistics_FlowPeerIpStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_FlowLocatorStatistics_FlowLocatorStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_NextHops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_PeerLocators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_StaticInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_DynamicFlowHops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_NextHops_NextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_PeerLocators_PeerLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_StaticInstances_StaticInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_StaticInstances_StaticInstance_Flow_BindIfs_BindIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifit_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifit_IfitCommon_DynamicFlowHops_DynamicFlowHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_ifit_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_ifit_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_ifit_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_ifit_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_ifit_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_ifit_proto = out.File
	file_huaweiV8R12_ifit_proto_rawDesc = nil
	file_huaweiV8R12_ifit_proto_goTypes = nil
	file_huaweiV8R12_ifit_proto_depIdxs = nil
}
