// ---------------------------------------------------------------------------
// Protofilename : huawei-ifit.proto
syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-ifit
// revision 2019-05-21
// namespace urn:huawei:yang:huawei-ifit

option go_package = "huaweiV8R12_ifit";
package huaweiV8R12_ifit;

message Ifit {
   message Global {
      bool enable = 1 [json_name = "enable"];
      uint32 node_id = 2 [json_name = "node-id"];
   }
   Global global = 1 [json_name = "global"];
   message FlowStatistics {
      message FlowStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
         };
         Direction direction = 2 [json_name = "direction"];
         enum AddressFamily {
            AddressFamily_IPV4 = 0;
            AddressFamily_IPV6 = 1;
         };
         AddressFamily address_family = 3 [json_name = "address-family"];
         string source_ip = 4 [json_name = "source-ip"];
         string destination_ip = 5 [json_name = "destination-ip"];
         uint32 source_mask = 6 [json_name = "source-mask"];
         uint32 destination_mask = 7 [json_name = "destination-mask"];
         uint32 source_port = 8 [json_name = "source-port"];
         uint32 destination_port = 9 [json_name = "destination-port"];
         uint32 protocol = 10 [json_name = "protocol"];
         string vpn_name = 11 [json_name = "vpn-name"];
         uint32 if_index = 12 [json_name = "if-index"];
         uint32 error_info = 13 [json_name = "error-info"];
         uint32 interval = 14 [json_name = "interval"];
         uint64 period_id = 15 [json_name = "period-id"];
         uint64 packet_count = 16 [json_name = "packet-count"];
         uint64 byte_count = 17 [json_name = "byte-count"];
         uint32 timestamp_second = 18 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 19 [json_name = "timestamp-nanosecond"];
         uint32 ttl = 21 [json_name = "ttl"];
         uint32 dscp = 22 [json_name = "dscp"];
         string tunnel_if_index = 23 [json_name = "tunnel-if-index"];
      }
      repeated FlowStatistic flow_statistic = 1 [json_name = "flow-statistic"];
   }
   FlowStatistics flow_statistics = 2 [json_name = "flow-statistics"];
   message FlowHopStatistics {
      message FlowHopStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
         };
         Direction direction = 2 [json_name = "direction"];
         uint32 if_index = 3 [json_name = "if-index"];
         uint32 error_info = 4 [json_name = "error-info"];
         uint64 period_id = 5 [json_name = "period-id"];
         uint64 packet_count = 6 [json_name = "packet-count"];
         uint64 byte_count = 7 [json_name = "byte-count"];
         uint32 timestamp_second = 8 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 9 [json_name = "timestamp-nanosecond"];
         uint32 ttl = 11 [json_name = "ttl"];
         string tunnel_if_index = 12 [json_name = "tunnel-if-index"];
      }
      repeated FlowHopStatistic flow_hop_statistic = 1 [json_name = "flow-hop-statistic"];
   }
   FlowHopStatistics flow_hop_statistics = 3 [json_name = "flow-hop-statistics"];
   message FlowPeerIpStatistics {
      message FlowPeerIpStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
         };
         Direction direction = 2 [json_name = "direction"];
         string peer_ip = 3 [json_name = "peer-ip"];
         string vpn_name = 4 [json_name = "vpn-name"];
         uint32 error_info = 5 [json_name = "error-info"];
         uint32 interval = 6 [json_name = "interval"];
         uint32 if_index = 7 [json_name = "if-index"];
         uint64 period_id = 8 [json_name = "period-id"];
         uint64 packet_count = 9 [json_name = "packet-count"];
         uint64 byte_count = 10 [json_name = "byte-count"];
         uint32 timestamp_second = 11 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 12 [json_name = "timestamp-nanosecond"];
         enum VpnType {
            VpnType_VPN = 0;
            VpnType_EVPN = 1;
         };
         VpnType vpn_type = 13 [json_name = "vpn-type"];
         string evpn_name = 14 [json_name = "evpn-name"];
         uint32 ttl = 15 [json_name = "ttl"];
      }
      repeated FlowPeerIpStatistic flow_peer_ip_statistic = 1 [json_name = "flow-peer-ip-statistic"];
   }
   FlowPeerIpStatistics flow_peer_ip_statistics = 4 [json_name = "flow-peer-ip-statistics"];
   message FlowLocatorStatistics {
      message FlowLocatorStatistic {
         uint64 flow_id = 1 [json_name = "flow-id"];
         enum Direction {
            INVALID_ENUM_VALUE_Direction = 0;
            Direction_INGRESS = 1;
            Direction_TRANSITX_INPUT = 2;
            Direction_TRANSITX_OUTPUT = 3;
            Direction_EGRESS = 4;
         };
         Direction direction = 2 [json_name = "direction"];
         string locator_prefix = 3 [json_name = "locator-prefix"];
         uint32 prefix_length = 4 [json_name = "prefix-length"];
         string vpn_name = 5 [json_name = "vpn-name"];
         uint32 error_info = 6 [json_name = "error-info"];
         uint32 interval = 7 [json_name = "interval"];
         uint64 period_id = 8 [json_name = "period-id"];
         uint32 if_index = 9 [json_name = "if-index"];
         uint64 packet_count = 10 [json_name = "packet-count"];
         uint64 byte_count = 11 [json_name = "byte-count"];
         uint32 timestamp_second = 12 [json_name = "timestamp-second"];
         uint32 timestamp_nanosecond = 13 [json_name = "timestamp-nanosecond"];
         enum VpnType {
            VpnType_VPN = 0;
            VpnType_EVPN = 1;
         };
         VpnType vpn_type = 14 [json_name = "vpn-type"];
         string evpn_name = 15 [json_name = "evpn-name"];
         uint32 ttl = 16 [json_name = "ttl"];
      }
      repeated FlowLocatorStatistic flow_locator_statistic = 1 [json_name = "flow-locator-statistic"];
   }
   FlowLocatorStatistics flow_locator_statistics = 5 [json_name = "flow-locator-statistics"];
   message IfitCommon {
      message Global {
         uint32 node_id = 1 [json_name = "node-id"];
         uint32 dynamic_flow_aging_multiplier = 2 [json_name = "dynamic-flow-aging-multiplier"];
      }
      Global global = 1 [json_name = "global"];
      message NextHops {
         message NextHop {
            string address = 1 [json_name = "address"];
         }
         repeated NextHop next_hop = 1 [json_name = "next-hop"];
      }
      NextHops next_hops = 2 [json_name = "next-hops"];
      message PeerLocators {
         message PeerLocator {
            string prefix = 1 [json_name = "prefix"];
            uint32 prefix_mask_length = 2 [json_name = "prefix-mask-length"];
         }
         repeated PeerLocator peer_locator = 1 [json_name = "peer-locator"];
      }
      PeerLocators peer_locators = 3 [json_name = "peer-locators"];
      message StaticInstances {
         message StaticInstance {
            string name = 1 [json_name = "name"];
            uint32 interval = 2 [json_name = "interval"];
            enum MeasureMode {
               INVALID_ENUM_VALUE_MeasureMode = 0;
               MeasureMode_E2E = 1;
               MeasureMode_TRACE = 2;
            };
            MeasureMode measure_mode = 3 [json_name = "measure-mode"];
            bool loss_measure_enable = 4 [json_name = "loss-measure-enable"];
            bool delay_measure_enable = 5 [json_name = "delay-measure-enable"];
            bool disorder_measure_enable = 6 [json_name = "disorder-measure-enable"];
            message Flow {
               enum FlowType {
                  INVALID_ENUM_VALUE_FlowType = 0;
                  FlowType_BIDIRECTION = 1;
                  FlowType_UNIDIRECTION = 2;
               };
               FlowType flow_type = 1 [json_name = "flow-type"];
               message BindIfs {
                  message BindIf {
                     string if_name = 1 [json_name = "if-name"];
                     uint64 flow_id = 2 [json_name = "flow-id"];
                  }
                  repeated BindIf bind_if = 1 [json_name = "bind-if"];
               }
               BindIfs bind_ifs = 2 [json_name = "bind-ifs"];
            }
            Flow flow = 7 [json_name = "flow"];
         }
         repeated StaticInstance static_instance = 1 [json_name = "static-instance"];
      }
      StaticInstances static_instances = 4 [json_name = "static-instances"];
      message DynamicFlowHops {
         message DynamicFlowHop {
            uint64 flow_id = 1 [json_name = "flow-id"];
            enum FlowType {
               INVALID_ENUM_VALUE_FlowType = 0;
               FlowType_BIDIRECTION = 1;
               FlowType_UNIDIRECTION = 2;
            };
            FlowType flow_type = 2 [json_name = "flow-type"];
            string if_name = 3 [json_name = "if-name"];
            uint32 interval = 4 [json_name = "interval"];
            enum Direction {
               INVALID_ENUM_VALUE_Direction = 0;
               Direction_INGRESS = 1;
               Direction_TRANSITX_INPUT = 2;
               Direction_TRANSITX_OUTPUT = 3;
               Direction_EGRESS = 4;
            };
            Direction direction = 5 [json_name = "direction"];
            bool loss_measure_enable = 6 [json_name = "loss-measure-enable"];
            bool delay_measure_enable = 7 [json_name = "delay-measure-enable"];
            bool disorder_measure_enable = 8 [json_name = "disorder-measure-enable"];
         }
         repeated DynamicFlowHop dynamic_flow_hop = 1 [json_name = "dynamic-flow-hop"];
      }
      DynamicFlowHops dynamic_flow_hops = 5 [json_name = "dynamic-flow-hops"];
   }
   IfitCommon ifit_common = 6 [json_name = "ifit-common"];
}
