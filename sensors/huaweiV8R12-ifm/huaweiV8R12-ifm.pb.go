// ---------------------------------------------------------------------------
// Protofilename : huawei-ifm.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-ifm.proto

package huaweiV8R12_ifm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ifm_Global_FimIfmGlobal_GlobalStrictFilter int32

const (
	Ifm_Global_FimIfmGlobal_GlobalStrictFilter_DISABLE Ifm_Global_FimIfmGlobal_GlobalStrictFilter = 0
	Ifm_Global_FimIfmGlobal_GlobalStrictFilter_ENABLE  Ifm_Global_FimIfmGlobal_GlobalStrictFilter = 1
)

// Enum value maps for Ifm_Global_FimIfmGlobal_GlobalStrictFilter.
var (
	Ifm_Global_FimIfmGlobal_GlobalStrictFilter_name = map[int32]string{
		0: "GlobalStrictFilter_DISABLE",
		1: "GlobalStrictFilter_ENABLE",
	}
	Ifm_Global_FimIfmGlobal_GlobalStrictFilter_value = map[string]int32{
		"GlobalStrictFilter_DISABLE": 0,
		"GlobalStrictFilter_ENABLE":  1,
	}
)

func (x Ifm_Global_FimIfmGlobal_GlobalStrictFilter) Enum() *Ifm_Global_FimIfmGlobal_GlobalStrictFilter {
	p := new(Ifm_Global_FimIfmGlobal_GlobalStrictFilter)
	*p = x
	return p
}

func (x Ifm_Global_FimIfmGlobal_GlobalStrictFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Global_FimIfmGlobal_GlobalStrictFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[0].Descriptor()
}

func (Ifm_Global_FimIfmGlobal_GlobalStrictFilter) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[0]
}

func (x Ifm_Global_FimIfmGlobal_GlobalStrictFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Global_FimIfmGlobal_GlobalStrictFilter.Descriptor instead.
func (Ifm_Global_FimIfmGlobal_GlobalStrictFilter) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

type Ifm_Global_FimIfmGlobal_DualStatEnable int32

const (
	Ifm_Global_FimIfmGlobal_DualStatEnable_DISABLE Ifm_Global_FimIfmGlobal_DualStatEnable = 0
	Ifm_Global_FimIfmGlobal_DualStatEnable_ENABLE  Ifm_Global_FimIfmGlobal_DualStatEnable = 1
)

// Enum value maps for Ifm_Global_FimIfmGlobal_DualStatEnable.
var (
	Ifm_Global_FimIfmGlobal_DualStatEnable_name = map[int32]string{
		0: "DualStatEnable_DISABLE",
		1: "DualStatEnable_ENABLE",
	}
	Ifm_Global_FimIfmGlobal_DualStatEnable_value = map[string]int32{
		"DualStatEnable_DISABLE": 0,
		"DualStatEnable_ENABLE":  1,
	}
)

func (x Ifm_Global_FimIfmGlobal_DualStatEnable) Enum() *Ifm_Global_FimIfmGlobal_DualStatEnable {
	p := new(Ifm_Global_FimIfmGlobal_DualStatEnable)
	*p = x
	return p
}

func (x Ifm_Global_FimIfmGlobal_DualStatEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Global_FimIfmGlobal_DualStatEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[1].Descriptor()
}

func (Ifm_Global_FimIfmGlobal_DualStatEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[1]
}

func (x Ifm_Global_FimIfmGlobal_DualStatEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Global_FimIfmGlobal_DualStatEnable.Descriptor instead.
func (Ifm_Global_FimIfmGlobal_DualStatEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

type Ifm_Global_FimIfmGlobal_TrunkAdjustEnable int32

const (
	Ifm_Global_FimIfmGlobal_TrunkAdjustEnable_DISABLE Ifm_Global_FimIfmGlobal_TrunkAdjustEnable = 0
	Ifm_Global_FimIfmGlobal_TrunkAdjustEnable_ENABLE  Ifm_Global_FimIfmGlobal_TrunkAdjustEnable = 1
)

// Enum value maps for Ifm_Global_FimIfmGlobal_TrunkAdjustEnable.
var (
	Ifm_Global_FimIfmGlobal_TrunkAdjustEnable_name = map[int32]string{
		0: "TrunkAdjustEnable_DISABLE",
		1: "TrunkAdjustEnable_ENABLE",
	}
	Ifm_Global_FimIfmGlobal_TrunkAdjustEnable_value = map[string]int32{
		"TrunkAdjustEnable_DISABLE": 0,
		"TrunkAdjustEnable_ENABLE":  1,
	}
)

func (x Ifm_Global_FimIfmGlobal_TrunkAdjustEnable) Enum() *Ifm_Global_FimIfmGlobal_TrunkAdjustEnable {
	p := new(Ifm_Global_FimIfmGlobal_TrunkAdjustEnable)
	*p = x
	return p
}

func (x Ifm_Global_FimIfmGlobal_TrunkAdjustEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Global_FimIfmGlobal_TrunkAdjustEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[2].Descriptor()
}

func (Ifm_Global_FimIfmGlobal_TrunkAdjustEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[2]
}

func (x Ifm_Global_FimIfmGlobal_TrunkAdjustEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Global_FimIfmGlobal_TrunkAdjustEnable.Descriptor instead.
func (Ifm_Global_FimIfmGlobal_TrunkAdjustEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 2, 2}
}

type Ifm_Global_FimIfmGlobal_QinqTransportEnable int32

const (
	Ifm_Global_FimIfmGlobal_QinqTransportEnable_DISABLE Ifm_Global_FimIfmGlobal_QinqTransportEnable = 0
	Ifm_Global_FimIfmGlobal_QinqTransportEnable_ENABLE  Ifm_Global_FimIfmGlobal_QinqTransportEnable = 1
)

// Enum value maps for Ifm_Global_FimIfmGlobal_QinqTransportEnable.
var (
	Ifm_Global_FimIfmGlobal_QinqTransportEnable_name = map[int32]string{
		0: "QinqTransportEnable_DISABLE",
		1: "QinqTransportEnable_ENABLE",
	}
	Ifm_Global_FimIfmGlobal_QinqTransportEnable_value = map[string]int32{
		"QinqTransportEnable_DISABLE": 0,
		"QinqTransportEnable_ENABLE":  1,
	}
)

func (x Ifm_Global_FimIfmGlobal_QinqTransportEnable) Enum() *Ifm_Global_FimIfmGlobal_QinqTransportEnable {
	p := new(Ifm_Global_FimIfmGlobal_QinqTransportEnable)
	*p = x
	return p
}

func (x Ifm_Global_FimIfmGlobal_QinqTransportEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Global_FimIfmGlobal_QinqTransportEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[3].Descriptor()
}

func (Ifm_Global_FimIfmGlobal_QinqTransportEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[3]
}

func (x Ifm_Global_FimIfmGlobal_QinqTransportEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Global_FimIfmGlobal_QinqTransportEnable.Descriptor instead.
func (Ifm_Global_FimIfmGlobal_QinqTransportEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 2, 3}
}

type Ifm_Global_FimTrunkLocalfwd_Enable int32

const (
	Ifm_Global_FimTrunkLocalfwd_Enable_DISABLE Ifm_Global_FimTrunkLocalfwd_Enable = 0
	Ifm_Global_FimTrunkLocalfwd_Enable_ENABLE  Ifm_Global_FimTrunkLocalfwd_Enable = 1
)

// Enum value maps for Ifm_Global_FimTrunkLocalfwd_Enable.
var (
	Ifm_Global_FimTrunkLocalfwd_Enable_name = map[int32]string{
		0: "Enable_DISABLE",
		1: "Enable_ENABLE",
	}
	Ifm_Global_FimTrunkLocalfwd_Enable_value = map[string]int32{
		"Enable_DISABLE": 0,
		"Enable_ENABLE":  1,
	}
)

func (x Ifm_Global_FimTrunkLocalfwd_Enable) Enum() *Ifm_Global_FimTrunkLocalfwd_Enable {
	p := new(Ifm_Global_FimTrunkLocalfwd_Enable)
	*p = x
	return p
}

func (x Ifm_Global_FimTrunkLocalfwd_Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Global_FimTrunkLocalfwd_Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[4].Descriptor()
}

func (Ifm_Global_FimTrunkLocalfwd_Enable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[4]
}

func (x Ifm_Global_FimTrunkLocalfwd_Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Global_FimTrunkLocalfwd_Enable.Descriptor instead.
func (Ifm_Global_FimTrunkLocalfwd_Enable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

type Ifm_Interfaces_Interface_Class int32

const (
	Ifm_Interfaces_Interface_Class_MAINX_INTERFACE Ifm_Interfaces_Interface_Class = 0
	Ifm_Interfaces_Interface_Class_SUBX_INTERFACE  Ifm_Interfaces_Interface_Class = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Class.
var (
	Ifm_Interfaces_Interface_Class_name = map[int32]string{
		0: "Class_MAINX_INTERFACE",
		1: "Class_SUBX_INTERFACE",
	}
	Ifm_Interfaces_Interface_Class_value = map[string]int32{
		"Class_MAINX_INTERFACE": 0,
		"Class_SUBX_INTERFACE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Class) Enum() *Ifm_Interfaces_Interface_Class {
	p := new(Ifm_Interfaces_Interface_Class)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[5].Descriptor()
}

func (Ifm_Interfaces_Interface_Class) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[5]
}

func (x Ifm_Interfaces_Interface_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Class.Descriptor instead.
func (Ifm_Interfaces_Interface_Class) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Type int32

const (
	Ifm_Interfaces_Interface_Type_ETHERNET           Ifm_Interfaces_Interface_Type = 0
	Ifm_Interfaces_Interface_Type_GIGABITETHERNET    Ifm_Interfaces_Interface_Type = 2
	Ifm_Interfaces_Interface_Type_ETHX_TRUNK         Ifm_Interfaces_Interface_Type = 4
	Ifm_Interfaces_Interface_Type_IPX_TRUNK          Ifm_Interfaces_Interface_Type = 5
	Ifm_Interfaces_Interface_Type_VIRTUALX_ETHERNET  Ifm_Interfaces_Interface_Type = 6
	Ifm_Interfaces_Interface_Type_SERIAL             Ifm_Interfaces_Interface_Type = 8
	Ifm_Interfaces_Interface_Type_POS                Ifm_Interfaces_Interface_Type = 9
	Ifm_Interfaces_Interface_Type_CPOS               Ifm_Interfaces_Interface_Type = 10
	Ifm_Interfaces_Interface_Type_ATM                Ifm_Interfaces_Interface_Type = 11
	Ifm_Interfaces_Interface_Type_TUNNEL             Ifm_Interfaces_Interface_Type = 14
	Ifm_Interfaces_Interface_Type_VLANIF             Ifm_Interfaces_Interface_Type = 15
	Ifm_Interfaces_Interface_Type_NULL               Ifm_Interfaces_Interface_Type = 18
	Ifm_Interfaces_Interface_Type_LOOPBACK           Ifm_Interfaces_Interface_Type = 19
	Ifm_Interfaces_Interface_Type_X_100GE            Ifm_Interfaces_Interface_Type = 20
	Ifm_Interfaces_Interface_Type_LMPIF              Ifm_Interfaces_Interface_Type = 21
	Ifm_Interfaces_Interface_Type_MTUNNEL            Ifm_Interfaces_Interface_Type = 22
	Ifm_Interfaces_Interface_Type_X_40GE             Ifm_Interfaces_Interface_Type = 23
	Ifm_Interfaces_Interface_Type_X_10GE             Ifm_Interfaces_Interface_Type = 24
	Ifm_Interfaces_Interface_Type_GEBRIEF            Ifm_Interfaces_Interface_Type = 25
	Ifm_Interfaces_Interface_Type_METH               Ifm_Interfaces_Interface_Type = 26
	Ifm_Interfaces_Interface_Type_STACKX_PORT        Ifm_Interfaces_Interface_Type = 27
	Ifm_Interfaces_Interface_Type_SIP                Ifm_Interfaces_Interface_Type = 28
	Ifm_Interfaces_Interface_Type_E1                 Ifm_Interfaces_Interface_Type = 30
	Ifm_Interfaces_Interface_Type_MPX_GROUP          Ifm_Interfaces_Interface_Type = 31
	Ifm_Interfaces_Interface_Type_IMAX_GROUP         Ifm_Interfaces_Interface_Type = 32
	Ifm_Interfaces_Interface_Type_VMETH              Ifm_Interfaces_Interface_Type = 33
	Ifm_Interfaces_Interface_Type_REMOTEX_AP         Ifm_Interfaces_Interface_Type = 35
	Ifm_Interfaces_Interface_Type_VBRIDGE            Ifm_Interfaces_Interface_Type = 36
	Ifm_Interfaces_Interface_Type_ATMX_BUNDLE        Ifm_Interfaces_Interface_Type = 37
	Ifm_Interfaces_Interface_Type_FIBERX_CHANNEL     Ifm_Interfaces_Interface_Type = 38
	Ifm_Interfaces_Interface_Type_INFINIBAND         Ifm_Interfaces_Interface_Type = 39
	Ifm_Interfaces_Interface_Type_VBDIF              Ifm_Interfaces_Interface_Type = 40
	Ifm_Interfaces_Interface_Type_T1                 Ifm_Interfaces_Interface_Type = 41
	Ifm_Interfaces_Interface_Type_T3                 Ifm_Interfaces_Interface_Type = 42
	Ifm_Interfaces_Interface_Type_VC4                Ifm_Interfaces_Interface_Type = 43
	Ifm_Interfaces_Interface_Type_VC12               Ifm_Interfaces_Interface_Type = 44
	Ifm_Interfaces_Interface_Type_GLOBALX_VE         Ifm_Interfaces_Interface_Type = 45
	Ifm_Interfaces_Interface_Type_FABRICX_PORT       Ifm_Interfaces_Interface_Type = 46
	Ifm_Interfaces_Interface_Type_E3                 Ifm_Interfaces_Interface_Type = 48
	Ifm_Interfaces_Interface_Type_VP                 Ifm_Interfaces_Interface_Type = 49
	Ifm_Interfaces_Interface_Type_DCNINTERFACE       Ifm_Interfaces_Interface_Type = 50
	Ifm_Interfaces_Interface_Type_CPOSX_TRUNK        Ifm_Interfaces_Interface_Type = 51
	Ifm_Interfaces_Interface_Type_TRUNKX_SERIAL      Ifm_Interfaces_Interface_Type = 52
	Ifm_Interfaces_Interface_Type_GLOBALX_MPX_GROUP  Ifm_Interfaces_Interface_Type = 53
	Ifm_Interfaces_Interface_Type_OTN                Ifm_Interfaces_Interface_Type = 55
	Ifm_Interfaces_Interface_Type_GLOBALX_IMAX_GROUP Ifm_Interfaces_Interface_Type = 57
	Ifm_Interfaces_Interface_Type_POSX_TRUNK         Ifm_Interfaces_Interface_Type = 59
	Ifm_Interfaces_Interface_Type_GMPLSX_UNI         Ifm_Interfaces_Interface_Type = 63
	Ifm_Interfaces_Interface_Type_WDM                Ifm_Interfaces_Interface_Type = 64
	Ifm_Interfaces_Interface_Type_NVE                Ifm_Interfaces_Interface_Type = 65
	Ifm_Interfaces_Interface_Type_FCOEX_PORT         Ifm_Interfaces_Interface_Type = 67
	Ifm_Interfaces_Interface_Type_VIRTUALX_TEMPLATE  Ifm_Interfaces_Interface_Type = 68
	Ifm_Interfaces_Interface_Type_FC                 Ifm_Interfaces_Interface_Type = 70
	Ifm_Interfaces_Interface_Type_X_4X10GE           Ifm_Interfaces_Interface_Type = 71
	Ifm_Interfaces_Interface_Type_X_10X10GE          Ifm_Interfaces_Interface_Type = 72
	Ifm_Interfaces_Interface_Type_X_3X40GE           Ifm_Interfaces_Interface_Type = 73
	Ifm_Interfaces_Interface_Type_X_4X25GE           Ifm_Interfaces_Interface_Type = 74
	Ifm_Interfaces_Interface_Type_X_25GE             Ifm_Interfaces_Interface_Type = 75
	Ifm_Interfaces_Interface_Type_IMETH              Ifm_Interfaces_Interface_Type = 79
	Ifm_Interfaces_Interface_Type_PWX_VE             Ifm_Interfaces_Interface_Type = 88
	Ifm_Interfaces_Interface_Type_VXX_TUNNEL         Ifm_Interfaces_Interface_Type = 89
	Ifm_Interfaces_Interface_Type_SERVICEIF          Ifm_Interfaces_Interface_Type = 90
	Ifm_Interfaces_Interface_Type_XGIGABITETHERNET   Ifm_Interfaces_Interface_Type = 91
	Ifm_Interfaces_Interface_Type_X_200GE            Ifm_Interfaces_Interface_Type = 92
	Ifm_Interfaces_Interface_Type_VIRTUALX_ODUK      Ifm_Interfaces_Interface_Type = 94
	Ifm_Interfaces_Interface_Type_FLEXE              Ifm_Interfaces_Interface_Type = 95
	Ifm_Interfaces_Interface_Type_FLEXEX_200GE       Ifm_Interfaces_Interface_Type = 96
	Ifm_Interfaces_Interface_Type_X_50X_100GE        Ifm_Interfaces_Interface_Type = 101
	Ifm_Interfaces_Interface_Type_X_50GE             Ifm_Interfaces_Interface_Type = 102
	Ifm_Interfaces_Interface_Type_FLEXEX_50G         Ifm_Interfaces_Interface_Type = 103
	Ifm_Interfaces_Interface_Type_FLEXEX_100G        Ifm_Interfaces_Interface_Type = 104
	Ifm_Interfaces_Interface_Type_FLEXEX_50X_100G    Ifm_Interfaces_Interface_Type = 105
	Ifm_Interfaces_Interface_Type_VIRTUALX_SERIAL    Ifm_Interfaces_Interface_Type = 107
	Ifm_Interfaces_Interface_Type_X_400GE            Ifm_Interfaces_Interface_Type = 108
	Ifm_Interfaces_Interface_Type_HPGE               Ifm_Interfaces_Interface_Type = 114
	Ifm_Interfaces_Interface_Type_VIRTUALX_IF        Ifm_Interfaces_Interface_Type = 116
)

// Enum value maps for Ifm_Interfaces_Interface_Type.
var (
	Ifm_Interfaces_Interface_Type_name = map[int32]string{
		0:   "Type_ETHERNET",
		2:   "Type_GIGABITETHERNET",
		4:   "Type_ETHX_TRUNK",
		5:   "Type_IPX_TRUNK",
		6:   "Type_VIRTUALX_ETHERNET",
		8:   "Type_SERIAL",
		9:   "Type_POS",
		10:  "Type_CPOS",
		11:  "Type_ATM",
		14:  "Type_TUNNEL",
		15:  "Type_VLANIF",
		18:  "Type_NULL",
		19:  "Type_LOOPBACK",
		20:  "Type_X_100GE",
		21:  "Type_LMPIF",
		22:  "Type_MTUNNEL",
		23:  "Type_X_40GE",
		24:  "Type_X_10GE",
		25:  "Type_GEBRIEF",
		26:  "Type_METH",
		27:  "Type_STACKX_PORT",
		28:  "Type_SIP",
		30:  "Type_E1",
		31:  "Type_MPX_GROUP",
		32:  "Type_IMAX_GROUP",
		33:  "Type_VMETH",
		35:  "Type_REMOTEX_AP",
		36:  "Type_VBRIDGE",
		37:  "Type_ATMX_BUNDLE",
		38:  "Type_FIBERX_CHANNEL",
		39:  "Type_INFINIBAND",
		40:  "Type_VBDIF",
		41:  "Type_T1",
		42:  "Type_T3",
		43:  "Type_VC4",
		44:  "Type_VC12",
		45:  "Type_GLOBALX_VE",
		46:  "Type_FABRICX_PORT",
		48:  "Type_E3",
		49:  "Type_VP",
		50:  "Type_DCNINTERFACE",
		51:  "Type_CPOSX_TRUNK",
		52:  "Type_TRUNKX_SERIAL",
		53:  "Type_GLOBALX_MPX_GROUP",
		55:  "Type_OTN",
		57:  "Type_GLOBALX_IMAX_GROUP",
		59:  "Type_POSX_TRUNK",
		63:  "Type_GMPLSX_UNI",
		64:  "Type_WDM",
		65:  "Type_NVE",
		67:  "Type_FCOEX_PORT",
		68:  "Type_VIRTUALX_TEMPLATE",
		70:  "Type_FC",
		71:  "Type_X_4X10GE",
		72:  "Type_X_10X10GE",
		73:  "Type_X_3X40GE",
		74:  "Type_X_4X25GE",
		75:  "Type_X_25GE",
		79:  "Type_IMETH",
		88:  "Type_PWX_VE",
		89:  "Type_VXX_TUNNEL",
		90:  "Type_SERVICEIF",
		91:  "Type_XGIGABITETHERNET",
		92:  "Type_X_200GE",
		94:  "Type_VIRTUALX_ODUK",
		95:  "Type_FLEXE",
		96:  "Type_FLEXEX_200GE",
		101: "Type_X_50X_100GE",
		102: "Type_X_50GE",
		103: "Type_FLEXEX_50G",
		104: "Type_FLEXEX_100G",
		105: "Type_FLEXEX_50X_100G",
		107: "Type_VIRTUALX_SERIAL",
		108: "Type_X_400GE",
		114: "Type_HPGE",
		116: "Type_VIRTUALX_IF",
	}
	Ifm_Interfaces_Interface_Type_value = map[string]int32{
		"Type_ETHERNET":           0,
		"Type_GIGABITETHERNET":    2,
		"Type_ETHX_TRUNK":         4,
		"Type_IPX_TRUNK":          5,
		"Type_VIRTUALX_ETHERNET":  6,
		"Type_SERIAL":             8,
		"Type_POS":                9,
		"Type_CPOS":               10,
		"Type_ATM":                11,
		"Type_TUNNEL":             14,
		"Type_VLANIF":             15,
		"Type_NULL":               18,
		"Type_LOOPBACK":           19,
		"Type_X_100GE":            20,
		"Type_LMPIF":              21,
		"Type_MTUNNEL":            22,
		"Type_X_40GE":             23,
		"Type_X_10GE":             24,
		"Type_GEBRIEF":            25,
		"Type_METH":               26,
		"Type_STACKX_PORT":        27,
		"Type_SIP":                28,
		"Type_E1":                 30,
		"Type_MPX_GROUP":          31,
		"Type_IMAX_GROUP":         32,
		"Type_VMETH":              33,
		"Type_REMOTEX_AP":         35,
		"Type_VBRIDGE":            36,
		"Type_ATMX_BUNDLE":        37,
		"Type_FIBERX_CHANNEL":     38,
		"Type_INFINIBAND":         39,
		"Type_VBDIF":              40,
		"Type_T1":                 41,
		"Type_T3":                 42,
		"Type_VC4":                43,
		"Type_VC12":               44,
		"Type_GLOBALX_VE":         45,
		"Type_FABRICX_PORT":       46,
		"Type_E3":                 48,
		"Type_VP":                 49,
		"Type_DCNINTERFACE":       50,
		"Type_CPOSX_TRUNK":        51,
		"Type_TRUNKX_SERIAL":      52,
		"Type_GLOBALX_MPX_GROUP":  53,
		"Type_OTN":                55,
		"Type_GLOBALX_IMAX_GROUP": 57,
		"Type_POSX_TRUNK":         59,
		"Type_GMPLSX_UNI":         63,
		"Type_WDM":                64,
		"Type_NVE":                65,
		"Type_FCOEX_PORT":         67,
		"Type_VIRTUALX_TEMPLATE":  68,
		"Type_FC":                 70,
		"Type_X_4X10GE":           71,
		"Type_X_10X10GE":          72,
		"Type_X_3X40GE":           73,
		"Type_X_4X25GE":           74,
		"Type_X_25GE":             75,
		"Type_IMETH":              79,
		"Type_PWX_VE":             88,
		"Type_VXX_TUNNEL":         89,
		"Type_SERVICEIF":          90,
		"Type_XGIGABITETHERNET":   91,
		"Type_X_200GE":            92,
		"Type_VIRTUALX_ODUK":      94,
		"Type_FLEXE":              95,
		"Type_FLEXEX_200GE":       96,
		"Type_X_50X_100GE":        101,
		"Type_X_50GE":             102,
		"Type_FLEXEX_50G":         103,
		"Type_FLEXEX_100G":        104,
		"Type_FLEXEX_50X_100G":    105,
		"Type_VIRTUALX_SERIAL":    107,
		"Type_X_400GE":            108,
		"Type_HPGE":               114,
		"Type_VIRTUALX_IF":        116,
	}
)

func (x Ifm_Interfaces_Interface_Type) Enum() *Ifm_Interfaces_Interface_Type {
	p := new(Ifm_Interfaces_Interface_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[6].Descriptor()
}

func (Ifm_Interfaces_Interface_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[6]
}

func (x Ifm_Interfaces_Interface_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type Ifm_Interfaces_Interface_AdminStatus int32

const (
	Ifm_Interfaces_Interface_AdminStatus_DOWN Ifm_Interfaces_Interface_AdminStatus = 0
	Ifm_Interfaces_Interface_AdminStatus_UP   Ifm_Interfaces_Interface_AdminStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_AdminStatus.
var (
	Ifm_Interfaces_Interface_AdminStatus_name = map[int32]string{
		0: "AdminStatus_DOWN",
		1: "AdminStatus_UP",
	}
	Ifm_Interfaces_Interface_AdminStatus_value = map[string]int32{
		"AdminStatus_DOWN": 0,
		"AdminStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_AdminStatus) Enum() *Ifm_Interfaces_Interface_AdminStatus {
	p := new(Ifm_Interfaces_Interface_AdminStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[7].Descriptor()
}

func (Ifm_Interfaces_Interface_AdminStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[7]
}

func (x Ifm_Interfaces_Interface_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_AdminStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

type Ifm_Interfaces_Interface_LinkProtocol int32

const (
	Ifm_Interfaces_Interface_LinkProtocol_ETHERNET Ifm_Interfaces_Interface_LinkProtocol = 0
	Ifm_Interfaces_Interface_LinkProtocol_PPP      Ifm_Interfaces_Interface_LinkProtocol = 1
	Ifm_Interfaces_Interface_LinkProtocol_HDLC     Ifm_Interfaces_Interface_LinkProtocol = 2
	Ifm_Interfaces_Interface_LinkProtocol_FR       Ifm_Interfaces_Interface_LinkProtocol = 3
	Ifm_Interfaces_Interface_LinkProtocol_ATM      Ifm_Interfaces_Interface_LinkProtocol = 6
	Ifm_Interfaces_Interface_LinkProtocol_TDM      Ifm_Interfaces_Interface_LinkProtocol = 7
)

// Enum value maps for Ifm_Interfaces_Interface_LinkProtocol.
var (
	Ifm_Interfaces_Interface_LinkProtocol_name = map[int32]string{
		0: "LinkProtocol_ETHERNET",
		1: "LinkProtocol_PPP",
		2: "LinkProtocol_HDLC",
		3: "LinkProtocol_FR",
		6: "LinkProtocol_ATM",
		7: "LinkProtocol_TDM",
	}
	Ifm_Interfaces_Interface_LinkProtocol_value = map[string]int32{
		"LinkProtocol_ETHERNET": 0,
		"LinkProtocol_PPP":      1,
		"LinkProtocol_HDLC":     2,
		"LinkProtocol_FR":       3,
		"LinkProtocol_ATM":      6,
		"LinkProtocol_TDM":      7,
	}
)

func (x Ifm_Interfaces_Interface_LinkProtocol) Enum() *Ifm_Interfaces_Interface_LinkProtocol {
	p := new(Ifm_Interfaces_Interface_LinkProtocol)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_LinkProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_LinkProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[8].Descriptor()
}

func (Ifm_Interfaces_Interface_LinkProtocol) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[8]
}

func (x Ifm_Interfaces_Interface_LinkProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_LinkProtocol.Descriptor instead.
func (Ifm_Interfaces_Interface_LinkProtocol) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

type Ifm_Interfaces_Interface_RouterType int32

const (
	Ifm_Interfaces_Interface_RouterType_PTOP      Ifm_Interfaces_Interface_RouterType = 0
	Ifm_Interfaces_Interface_RouterType_PTOMP     Ifm_Interfaces_Interface_RouterType = 1
	Ifm_Interfaces_Interface_RouterType_BROADCAST Ifm_Interfaces_Interface_RouterType = 2
	Ifm_Interfaces_Interface_RouterType_NBMA      Ifm_Interfaces_Interface_RouterType = 3
	Ifm_Interfaces_Interface_RouterType_INVALID   Ifm_Interfaces_Interface_RouterType = 255
)

// Enum value maps for Ifm_Interfaces_Interface_RouterType.
var (
	Ifm_Interfaces_Interface_RouterType_name = map[int32]string{
		0:   "RouterType_PTOP",
		1:   "RouterType_PTOMP",
		2:   "RouterType_BROADCAST",
		3:   "RouterType_NBMA",
		255: "RouterType_INVALID",
	}
	Ifm_Interfaces_Interface_RouterType_value = map[string]int32{
		"RouterType_PTOP":      0,
		"RouterType_PTOMP":     1,
		"RouterType_BROADCAST": 2,
		"RouterType_NBMA":      3,
		"RouterType_INVALID":   255,
	}
)

func (x Ifm_Interfaces_Interface_RouterType) Enum() *Ifm_Interfaces_Interface_RouterType {
	p := new(Ifm_Interfaces_Interface_RouterType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_RouterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_RouterType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[9].Descriptor()
}

func (Ifm_Interfaces_Interface_RouterType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[9]
}

func (x Ifm_Interfaces_Interface_RouterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_RouterType.Descriptor instead.
func (Ifm_Interfaces_Interface_RouterType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 4}
}

type Ifm_Interfaces_Interface_StatisticMode int32

const (
	Ifm_Interfaces_Interface_INVALID_ENUM_VALUE_StatisticMode Ifm_Interfaces_Interface_StatisticMode = 0
	Ifm_Interfaces_Interface_StatisticMode_INTERFACEX_BASED   Ifm_Interfaces_Interface_StatisticMode = 1
	Ifm_Interfaces_Interface_StatisticMode_VLANX_GROUPX_BASED Ifm_Interfaces_Interface_StatisticMode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_StatisticMode.
var (
	Ifm_Interfaces_Interface_StatisticMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_StatisticMode",
		1: "StatisticMode_INTERFACEX_BASED",
		2: "StatisticMode_VLANX_GROUPX_BASED",
	}
	Ifm_Interfaces_Interface_StatisticMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_StatisticMode": 0,
		"StatisticMode_INTERFACEX_BASED":   1,
		"StatisticMode_VLANX_GROUPX_BASED": 2,
	}
)

func (x Ifm_Interfaces_Interface_StatisticMode) Enum() *Ifm_Interfaces_Interface_StatisticMode {
	p := new(Ifm_Interfaces_Interface_StatisticMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_StatisticMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_StatisticMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[10].Descriptor()
}

func (Ifm_Interfaces_Interface_StatisticMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[10]
}

func (x Ifm_Interfaces_Interface_StatisticMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_StatisticMode.Descriptor instead.
func (Ifm_Interfaces_Interface_StatisticMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5}
}

type Ifm_Interfaces_Interface_ServiceType int32

const (
	Ifm_Interfaces_Interface_ServiceType_NONE                Ifm_Interfaces_Interface_ServiceType = 0
	Ifm_Interfaces_Interface_ServiceType_TRUNKX_MEMBER       Ifm_Interfaces_Interface_ServiceType = 2
	Ifm_Interfaces_Interface_ServiceType_STACKX_MEMBER       Ifm_Interfaces_Interface_ServiceType = 6
	Ifm_Interfaces_Interface_ServiceType_MPX_MEMBER          Ifm_Interfaces_Interface_ServiceType = 7
	Ifm_Interfaces_Interface_ServiceType_VBRIDGEX_MEMBER     Ifm_Interfaces_Interface_ServiceType = 8
	Ifm_Interfaces_Interface_ServiceType_IMAX_MEMBER         Ifm_Interfaces_Interface_ServiceType = 9
	Ifm_Interfaces_Interface_ServiceType_BUNDLEX_MEMBER      Ifm_Interfaces_Interface_ServiceType = 10
	Ifm_Interfaces_Interface_ServiceType_FABRICX_MEMBER      Ifm_Interfaces_Interface_ServiceType = 11
	Ifm_Interfaces_Interface_ServiceType_LAGX_MASTERX_MEMBER Ifm_Interfaces_Interface_ServiceType = 12
	Ifm_Interfaces_Interface_ServiceType_LAGX_SLAVEX_MEMBER  Ifm_Interfaces_Interface_ServiceType = 13
	Ifm_Interfaces_Interface_ServiceType_CPOSX_TRUNKX_MEMBER Ifm_Interfaces_Interface_ServiceType = 15
	Ifm_Interfaces_Interface_ServiceType_POSX_TRUNKX_MEMBER  Ifm_Interfaces_Interface_ServiceType = 16
	Ifm_Interfaces_Interface_ServiceType_GLOBALX_MPX_MEMBER  Ifm_Interfaces_Interface_ServiceType = 17
	Ifm_Interfaces_Interface_ServiceType_GLOBALX_IMAX_MEMBER Ifm_Interfaces_Interface_ServiceType = 18
)

// Enum value maps for Ifm_Interfaces_Interface_ServiceType.
var (
	Ifm_Interfaces_Interface_ServiceType_name = map[int32]string{
		0:  "ServiceType_NONE",
		2:  "ServiceType_TRUNKX_MEMBER",
		6:  "ServiceType_STACKX_MEMBER",
		7:  "ServiceType_MPX_MEMBER",
		8:  "ServiceType_VBRIDGEX_MEMBER",
		9:  "ServiceType_IMAX_MEMBER",
		10: "ServiceType_BUNDLEX_MEMBER",
		11: "ServiceType_FABRICX_MEMBER",
		12: "ServiceType_LAGX_MASTERX_MEMBER",
		13: "ServiceType_LAGX_SLAVEX_MEMBER",
		15: "ServiceType_CPOSX_TRUNKX_MEMBER",
		16: "ServiceType_POSX_TRUNKX_MEMBER",
		17: "ServiceType_GLOBALX_MPX_MEMBER",
		18: "ServiceType_GLOBALX_IMAX_MEMBER",
	}
	Ifm_Interfaces_Interface_ServiceType_value = map[string]int32{
		"ServiceType_NONE":                0,
		"ServiceType_TRUNKX_MEMBER":       2,
		"ServiceType_STACKX_MEMBER":       6,
		"ServiceType_MPX_MEMBER":          7,
		"ServiceType_VBRIDGEX_MEMBER":     8,
		"ServiceType_IMAX_MEMBER":         9,
		"ServiceType_BUNDLEX_MEMBER":      10,
		"ServiceType_FABRICX_MEMBER":      11,
		"ServiceType_LAGX_MASTERX_MEMBER": 12,
		"ServiceType_LAGX_SLAVEX_MEMBER":  13,
		"ServiceType_CPOSX_TRUNKX_MEMBER": 15,
		"ServiceType_POSX_TRUNKX_MEMBER":  16,
		"ServiceType_GLOBALX_MPX_MEMBER":  17,
		"ServiceType_GLOBALX_IMAX_MEMBER": 18,
	}
)

func (x Ifm_Interfaces_Interface_ServiceType) Enum() *Ifm_Interfaces_Interface_ServiceType {
	p := new(Ifm_Interfaces_Interface_ServiceType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[11].Descriptor()
}

func (Ifm_Interfaces_Interface_ServiceType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[11]
}

func (x Ifm_Interfaces_Interface_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ServiceType.Descriptor instead.
func (Ifm_Interfaces_Interface_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6}
}

type Ifm_Interfaces_Interface_EncapsulationType int32

const (
	Ifm_Interfaces_Interface_EncapsulationType_VLANX_TYPE           Ifm_Interfaces_Interface_EncapsulationType = 0
	Ifm_Interfaces_Interface_EncapsulationType_DOT1Q                Ifm_Interfaces_Interface_EncapsulationType = 1
	Ifm_Interfaces_Interface_EncapsulationType_QINQ                 Ifm_Interfaces_Interface_EncapsulationType = 2
	Ifm_Interfaces_Interface_EncapsulationType_P2P                  Ifm_Interfaces_Interface_EncapsulationType = 3
	Ifm_Interfaces_Interface_EncapsulationType_P2MP                 Ifm_Interfaces_Interface_EncapsulationType = 4
	Ifm_Interfaces_Interface_EncapsulationType_L2VE                 Ifm_Interfaces_Interface_EncapsulationType = 5
	Ifm_Interfaces_Interface_EncapsulationType_L3VE                 Ifm_Interfaces_Interface_EncapsulationType = 6
	Ifm_Interfaces_Interface_EncapsulationType_VLANX_TYPEX_POLICY   Ifm_Interfaces_Interface_EncapsulationType = 7
	Ifm_Interfaces_Interface_EncapsulationType_DOT1QX_POLICY        Ifm_Interfaces_Interface_EncapsulationType = 8
	Ifm_Interfaces_Interface_EncapsulationType_STACKINGX_POLICY     Ifm_Interfaces_Interface_EncapsulationType = 9
	Ifm_Interfaces_Interface_EncapsulationType_UNTAGX_POLICY        Ifm_Interfaces_Interface_EncapsulationType = 10
	Ifm_Interfaces_Interface_EncapsulationType_QINQX_MAPPING        Ifm_Interfaces_Interface_EncapsulationType = 11
	Ifm_Interfaces_Interface_EncapsulationType_L2VC                 Ifm_Interfaces_Interface_EncapsulationType = 12
	Ifm_Interfaces_Interface_EncapsulationType_L3VC                 Ifm_Interfaces_Interface_EncapsulationType = 13
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_UNTAG           Ifm_Interfaces_Interface_EncapsulationType = 14
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_DOT1Q           Ifm_Interfaces_Interface_EncapsulationType = 15
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_QINQ            Ifm_Interfaces_Interface_EncapsulationType = 16
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_DEFAULT         Ifm_Interfaces_Interface_EncapsulationType = 17
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_DOT1QX_POLICY   Ifm_Interfaces_Interface_EncapsulationType = 18
	Ifm_Interfaces_Interface_EncapsulationType_IETF                 Ifm_Interfaces_Interface_EncapsulationType = 19
	Ifm_Interfaces_Interface_EncapsulationType_NONSTANDARD          Ifm_Interfaces_Interface_EncapsulationType = 20
	Ifm_Interfaces_Interface_EncapsulationType_USERX_VLAN           Ifm_Interfaces_Interface_EncapsulationType = 21
	Ifm_Interfaces_Interface_EncapsulationType_USERX_VLANX_ANYOTHER Ifm_Interfaces_Interface_EncapsulationType = 22
	Ifm_Interfaces_Interface_EncapsulationType_QINX_LINK            Ifm_Interfaces_Interface_EncapsulationType = 23
	Ifm_Interfaces_Interface_EncapsulationType_SOFTX_GREX_VE        Ifm_Interfaces_Interface_EncapsulationType = 24
	Ifm_Interfaces_Interface_EncapsulationType_L3VEX_TER            Ifm_Interfaces_Interface_EncapsulationType = 25
	Ifm_Interfaces_Interface_EncapsulationType_L3VEX_ACC            Ifm_Interfaces_Interface_EncapsulationType = 26
	Ifm_Interfaces_Interface_EncapsulationType_INVALID              Ifm_Interfaces_Interface_EncapsulationType = 255
)

// Enum value maps for Ifm_Interfaces_Interface_EncapsulationType.
var (
	Ifm_Interfaces_Interface_EncapsulationType_name = map[int32]string{
		0:   "EncapsulationType_VLANX_TYPE",
		1:   "EncapsulationType_DOT1Q",
		2:   "EncapsulationType_QINQ",
		3:   "EncapsulationType_P2P",
		4:   "EncapsulationType_P2MP",
		5:   "EncapsulationType_L2VE",
		6:   "EncapsulationType_L3VE",
		7:   "EncapsulationType_VLANX_TYPEX_POLICY",
		8:   "EncapsulationType_DOT1QX_POLICY",
		9:   "EncapsulationType_STACKINGX_POLICY",
		10:  "EncapsulationType_UNTAGX_POLICY",
		11:  "EncapsulationType_QINQX_MAPPING",
		12:  "EncapsulationType_L2VC",
		13:  "EncapsulationType_L3VC",
		14:  "EncapsulationType_EVCX_UNTAG",
		15:  "EncapsulationType_EVCX_DOT1Q",
		16:  "EncapsulationType_EVCX_QINQ",
		17:  "EncapsulationType_EVCX_DEFAULT",
		18:  "EncapsulationType_EVCX_DOT1QX_POLICY",
		19:  "EncapsulationType_IETF",
		20:  "EncapsulationType_NONSTANDARD",
		21:  "EncapsulationType_USERX_VLAN",
		22:  "EncapsulationType_USERX_VLANX_ANYOTHER",
		23:  "EncapsulationType_QINX_LINK",
		24:  "EncapsulationType_SOFTX_GREX_VE",
		25:  "EncapsulationType_L3VEX_TER",
		26:  "EncapsulationType_L3VEX_ACC",
		255: "EncapsulationType_INVALID",
	}
	Ifm_Interfaces_Interface_EncapsulationType_value = map[string]int32{
		"EncapsulationType_VLANX_TYPE":           0,
		"EncapsulationType_DOT1Q":                1,
		"EncapsulationType_QINQ":                 2,
		"EncapsulationType_P2P":                  3,
		"EncapsulationType_P2MP":                 4,
		"EncapsulationType_L2VE":                 5,
		"EncapsulationType_L3VE":                 6,
		"EncapsulationType_VLANX_TYPEX_POLICY":   7,
		"EncapsulationType_DOT1QX_POLICY":        8,
		"EncapsulationType_STACKINGX_POLICY":     9,
		"EncapsulationType_UNTAGX_POLICY":        10,
		"EncapsulationType_QINQX_MAPPING":        11,
		"EncapsulationType_L2VC":                 12,
		"EncapsulationType_L3VC":                 13,
		"EncapsulationType_EVCX_UNTAG":           14,
		"EncapsulationType_EVCX_DOT1Q":           15,
		"EncapsulationType_EVCX_QINQ":            16,
		"EncapsulationType_EVCX_DEFAULT":         17,
		"EncapsulationType_EVCX_DOT1QX_POLICY":   18,
		"EncapsulationType_IETF":                 19,
		"EncapsulationType_NONSTANDARD":          20,
		"EncapsulationType_USERX_VLAN":           21,
		"EncapsulationType_USERX_VLANX_ANYOTHER": 22,
		"EncapsulationType_QINX_LINK":            23,
		"EncapsulationType_SOFTX_GREX_VE":        24,
		"EncapsulationType_L3VEX_TER":            25,
		"EncapsulationType_L3VEX_ACC":            26,
		"EncapsulationType_INVALID":              255,
	}
)

func (x Ifm_Interfaces_Interface_EncapsulationType) Enum() *Ifm_Interfaces_Interface_EncapsulationType {
	p := new(Ifm_Interfaces_Interface_EncapsulationType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_EncapsulationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_EncapsulationType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[12].Descriptor()
}

func (Ifm_Interfaces_Interface_EncapsulationType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[12]
}

func (x Ifm_Interfaces_Interface_EncapsulationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_EncapsulationType.Descriptor instead.
func (Ifm_Interfaces_Interface_EncapsulationType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 7}
}

type Ifm_Interfaces_Interface_NetworkLayerStatus int32

const (
	Ifm_Interfaces_Interface_NetworkLayerStatus_IPV4X_IPV6X_UP   Ifm_Interfaces_Interface_NetworkLayerStatus = 0
	Ifm_Interfaces_Interface_NetworkLayerStatus_IPV4X_IPV6X_DOWN Ifm_Interfaces_Interface_NetworkLayerStatus = 196608
)

// Enum value maps for Ifm_Interfaces_Interface_NetworkLayerStatus.
var (
	Ifm_Interfaces_Interface_NetworkLayerStatus_name = map[int32]string{
		0:      "NetworkLayerStatus_IPV4X_IPV6X_UP",
		196608: "NetworkLayerStatus_IPV4X_IPV6X_DOWN",
	}
	Ifm_Interfaces_Interface_NetworkLayerStatus_value = map[string]int32{
		"NetworkLayerStatus_IPV4X_IPV6X_UP":   0,
		"NetworkLayerStatus_IPV4X_IPV6X_DOWN": 196608,
	}
)

func (x Ifm_Interfaces_Interface_NetworkLayerStatus) Enum() *Ifm_Interfaces_Interface_NetworkLayerStatus {
	p := new(Ifm_Interfaces_Interface_NetworkLayerStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_NetworkLayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_NetworkLayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[13].Descriptor()
}

func (Ifm_Interfaces_Interface_NetworkLayerStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[13]
}

func (x Ifm_Interfaces_Interface_NetworkLayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NetworkLayerStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_NetworkLayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8}
}

type Ifm_Interfaces_Interface_Dynamic_OperStatus int32

const (
	Ifm_Interfaces_Interface_Dynamic_OperStatus_DOWN Ifm_Interfaces_Interface_Dynamic_OperStatus = 0
	Ifm_Interfaces_Interface_Dynamic_OperStatus_UP   Ifm_Interfaces_Interface_Dynamic_OperStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_OperStatus.
var (
	Ifm_Interfaces_Interface_Dynamic_OperStatus_name = map[int32]string{
		0: "OperStatus_DOWN",
		1: "OperStatus_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_OperStatus_value = map[string]int32{
		"OperStatus_DOWN": 0,
		"OperStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_OperStatus) Enum() *Ifm_Interfaces_Interface_Dynamic_OperStatus {
	p := new(Ifm_Interfaces_Interface_Dynamic_OperStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[14].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_OperStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[14]
}

func (x Ifm_Interfaces_Interface_Dynamic_OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_OperStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Dynamic_PhysicalStatus int32

const (
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_DOWN Ifm_Interfaces_Interface_Dynamic_PhysicalStatus = 0
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_UP   Ifm_Interfaces_Interface_Dynamic_PhysicalStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_PhysicalStatus.
var (
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_name = map[int32]string{
		0: "PhysicalStatus_DOWN",
		1: "PhysicalStatus_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_value = map[string]int32{
		"PhysicalStatus_DOWN": 0,
		"PhysicalStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Enum() *Ifm_Interfaces_Interface_Dynamic_PhysicalStatus {
	p := new(Ifm_Interfaces_Interface_Dynamic_PhysicalStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[15].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[15]
}

func (x Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_PhysicalStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Dynamic_LinkStatus int32

const (
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_DOWN Ifm_Interfaces_Interface_Dynamic_LinkStatus = 0
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_UP   Ifm_Interfaces_Interface_Dynamic_LinkStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_LinkStatus.
var (
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_name = map[int32]string{
		0: "LinkStatus_DOWN",
		1: "LinkStatus_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_value = map[string]int32{
		"LinkStatus_DOWN": 0,
		"LinkStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_LinkStatus) Enum() *Ifm_Interfaces_Interface_Dynamic_LinkStatus {
	p := new(Ifm_Interfaces_Interface_Dynamic_LinkStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[16].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_LinkStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[16]
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_LinkStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Dynamic_Ipv4Status int32

const (
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_DOWN Ifm_Interfaces_Interface_Dynamic_Ipv4Status = 0
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_UP   Ifm_Interfaces_Interface_Dynamic_Ipv4Status = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_Ipv4Status.
var (
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_name = map[int32]string{
		0: "Ipv4Status_DOWN",
		1: "Ipv4Status_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_value = map[string]int32{
		"Ipv4Status_DOWN": 0,
		"Ipv4Status_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Enum() *Ifm_Interfaces_Interface_Dynamic_Ipv4Status {
	p := new(Ifm_Interfaces_Interface_Dynamic_Ipv4Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv4Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[17].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[17]
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_Ipv4Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_Ipv4Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3}
}

type Ifm_Interfaces_Interface_Dynamic_Ipv6Status int32

const (
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_DOWN Ifm_Interfaces_Interface_Dynamic_Ipv6Status = 0
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_UP   Ifm_Interfaces_Interface_Dynamic_Ipv6Status = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_Ipv6Status.
var (
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_name = map[int32]string{
		0: "Ipv6Status_DOWN",
		1: "Ipv6Status_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_value = map[string]int32{
		"Ipv6Status_DOWN": 0,
		"Ipv6Status_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Enum() *Ifm_Interfaces_Interface_Dynamic_Ipv6Status {
	p := new(Ifm_Interfaces_Interface_Dynamic_Ipv6Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv6Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[18].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[18]
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_Ipv6Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_Ipv6Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4}
}

type Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade int32

const (
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_GOOD   Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 0
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_HIGH   Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 1
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_MIDDLE Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 2
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_LOW    Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade.
var (
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_name = map[int32]string{
		0: "LinkQualityGrade_GOOD",
		1: "LinkQualityGrade_HIGH",
		2: "LinkQualityGrade_MIDDLE",
		4: "LinkQualityGrade_LOW",
	}
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_value = map[string]int32{
		"LinkQualityGrade_GOOD":   0,
		"LinkQualityGrade_HIGH":   1,
		"LinkQualityGrade_MIDDLE": 2,
		"LinkQualityGrade_LOW":    4,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Enum() *Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade {
	p := new(Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[19].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[19]
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 5}
}

type Ifm_Interfaces_Interface_DampState_SuppressStatus int32

const (
	Ifm_Interfaces_Interface_DampState_SuppressStatus_SUPPRESSED   Ifm_Interfaces_Interface_DampState_SuppressStatus = 0
	Ifm_Interfaces_Interface_DampState_SuppressStatus_UNSUPPRESSED Ifm_Interfaces_Interface_DampState_SuppressStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DampState_SuppressStatus.
var (
	Ifm_Interfaces_Interface_DampState_SuppressStatus_name = map[int32]string{
		0: "SuppressStatus_SUPPRESSED",
		1: "SuppressStatus_UNSUPPRESSED",
	}
	Ifm_Interfaces_Interface_DampState_SuppressStatus_value = map[string]int32{
		"SuppressStatus_SUPPRESSED":   0,
		"SuppressStatus_UNSUPPRESSED": 1,
	}
)

func (x Ifm_Interfaces_Interface_DampState_SuppressStatus) Enum() *Ifm_Interfaces_Interface_DampState_SuppressStatus {
	p := new(Ifm_Interfaces_Interface_DampState_SuppressStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DampState_SuppressStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DampState_SuppressStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[20].Descriptor()
}

func (Ifm_Interfaces_Interface_DampState_SuppressStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[20]
}

func (x Ifm_Interfaces_Interface_DampState_SuppressStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DampState_SuppressStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_DampState_SuppressStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5, 0}
}

type Ifm_Interfaces_Interface_ErrorDown_Cause int32

const (
	Ifm_Interfaces_Interface_ErrorDown_Cause_BPDUX_PROTECTION                   Ifm_Interfaces_Interface_ErrorDown_Cause = 0
	Ifm_Interfaces_Interface_ErrorDown_Cause_AUTOX_DEFEND                       Ifm_Interfaces_Interface_ErrorDown_Cause = 1
	Ifm_Interfaces_Interface_ErrorDown_Cause_MONITORX_LINK                      Ifm_Interfaces_Interface_ErrorDown_Cause = 2
	Ifm_Interfaces_Interface_ErrorDown_Cause_PORTSECX_REACHEDX_LIMIT            Ifm_Interfaces_Interface_ErrorDown_Cause = 65
	Ifm_Interfaces_Interface_ErrorDown_Cause_STORMX_CONTROL                     Ifm_Interfaces_Interface_ErrorDown_Cause = 66
	Ifm_Interfaces_Interface_ErrorDown_Cause_LOOPBACKX_DETECT                   Ifm_Interfaces_Interface_ErrorDown_Cause = 67
	Ifm_Interfaces_Interface_ErrorDown_Cause_DUALX_ACTIVE                       Ifm_Interfaces_Interface_ErrorDown_Cause = 68
	Ifm_Interfaces_Interface_ErrorDown_Cause_MACX_ADDRESSX_FLAPPING             Ifm_Interfaces_Interface_ErrorDown_Cause = 69
	Ifm_Interfaces_Interface_ErrorDown_Cause_NOX_STACKX_LINK                    Ifm_Interfaces_Interface_ErrorDown_Cause = 70
	Ifm_Interfaces_Interface_ErrorDown_Cause_CRCX_STATISTICS                    Ifm_Interfaces_Interface_ErrorDown_Cause = 71
	Ifm_Interfaces_Interface_ErrorDown_Cause_TRANSCEIVERX_POWERX_LOW            Ifm_Interfaces_Interface_ErrorDown_Cause = 72
	Ifm_Interfaces_Interface_ErrorDown_Cause_LINKX_FLAP                         Ifm_Interfaces_Interface_ErrorDown_Cause = 73
	Ifm_Interfaces_Interface_ErrorDown_Cause_L2X_LOOPX_OCCURED                  Ifm_Interfaces_Interface_ErrorDown_Cause = 74
	Ifm_Interfaces_Interface_ErrorDown_Cause_STACKX_MEMBERX_EXCEEDX_LIMIT       Ifm_Interfaces_Interface_ErrorDown_Cause = 75
	Ifm_Interfaces_Interface_ErrorDown_Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT       Ifm_Interfaces_Interface_ErrorDown_Cause = 76
	Ifm_Interfaces_Interface_ErrorDown_Cause_RESOURCEX_MISMATCH                 Ifm_Interfaces_Interface_ErrorDown_Cause = 77
	Ifm_Interfaces_Interface_ErrorDown_Cause_LEAFX_MSTP                         Ifm_Interfaces_Interface_ErrorDown_Cause = 78
	Ifm_Interfaces_Interface_ErrorDown_Cause_MX_LAG                             Ifm_Interfaces_Interface_ErrorDown_Cause = 79
	Ifm_Interfaces_Interface_ErrorDown_Cause_FABRICX_UPLINKX_THRESHOLD          Ifm_Interfaces_Interface_ErrorDown_Cause = 80
	Ifm_Interfaces_Interface_ErrorDown_Cause_STACKX_CONFIGX_CONFLICT            Ifm_Interfaces_Interface_ErrorDown_Cause = 81
	Ifm_Interfaces_Interface_ErrorDown_Cause_SPINEX_TYPEX_UNSUPPORTED           Ifm_Interfaces_Interface_ErrorDown_Cause = 82
	Ifm_Interfaces_Interface_ErrorDown_Cause_STACKX_PACKETX_DEFENSIVE           Ifm_Interfaces_Interface_ErrorDown_Cause = 83
	Ifm_Interfaces_Interface_ErrorDown_Cause_FORWARDX_ENGINEX_BUFFERX_FAILED    Ifm_Interfaces_Interface_ErrorDown_Cause = 85
	Ifm_Interfaces_Interface_ErrorDown_Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED Ifm_Interfaces_Interface_ErrorDown_Cause = 86
	Ifm_Interfaces_Interface_ErrorDown_Cause_FABRICX_LINKX_FAILURE              Ifm_Interfaces_Interface_ErrorDown_Cause = 87
	Ifm_Interfaces_Interface_ErrorDown_Cause_MX_LAGX_CONSISTENCYX_CHECK         Ifm_Interfaces_Interface_ErrorDown_Cause = 88
	Ifm_Interfaces_Interface_ErrorDown_Cause_PFCX_DEADLOCK                      Ifm_Interfaces_Interface_ErrorDown_Cause = 89
)

// Enum value maps for Ifm_Interfaces_Interface_ErrorDown_Cause.
var (
	Ifm_Interfaces_Interface_ErrorDown_Cause_name = map[int32]string{
		0:  "Cause_BPDUX_PROTECTION",
		1:  "Cause_AUTOX_DEFEND",
		2:  "Cause_MONITORX_LINK",
		65: "Cause_PORTSECX_REACHEDX_LIMIT",
		66: "Cause_STORMX_CONTROL",
		67: "Cause_LOOPBACKX_DETECT",
		68: "Cause_DUALX_ACTIVE",
		69: "Cause_MACX_ADDRESSX_FLAPPING",
		70: "Cause_NOX_STACKX_LINK",
		71: "Cause_CRCX_STATISTICS",
		72: "Cause_TRANSCEIVERX_POWERX_LOW",
		73: "Cause_LINKX_FLAP",
		74: "Cause_L2X_LOOPX_OCCURED",
		75: "Cause_STACKX_MEMBERX_EXCEEDX_LIMIT",
		76: "Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT",
		77: "Cause_RESOURCEX_MISMATCH",
		78: "Cause_LEAFX_MSTP",
		79: "Cause_MX_LAG",
		80: "Cause_FABRICX_UPLINKX_THRESHOLD",
		81: "Cause_STACKX_CONFIGX_CONFLICT",
		82: "Cause_SPINEX_TYPEX_UNSUPPORTED",
		83: "Cause_STACKX_PACKETX_DEFENSIVE",
		85: "Cause_FORWARDX_ENGINEX_BUFFERX_FAILED",
		86: "Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED",
		87: "Cause_FABRICX_LINKX_FAILURE",
		88: "Cause_MX_LAGX_CONSISTENCYX_CHECK",
		89: "Cause_PFCX_DEADLOCK",
	}
	Ifm_Interfaces_Interface_ErrorDown_Cause_value = map[string]int32{
		"Cause_BPDUX_PROTECTION":                   0,
		"Cause_AUTOX_DEFEND":                       1,
		"Cause_MONITORX_LINK":                      2,
		"Cause_PORTSECX_REACHEDX_LIMIT":            65,
		"Cause_STORMX_CONTROL":                     66,
		"Cause_LOOPBACKX_DETECT":                   67,
		"Cause_DUALX_ACTIVE":                       68,
		"Cause_MACX_ADDRESSX_FLAPPING":             69,
		"Cause_NOX_STACKX_LINK":                    70,
		"Cause_CRCX_STATISTICS":                    71,
		"Cause_TRANSCEIVERX_POWERX_LOW":            72,
		"Cause_LINKX_FLAP":                         73,
		"Cause_L2X_LOOPX_OCCURED":                  74,
		"Cause_STACKX_MEMBERX_EXCEEDX_LIMIT":       75,
		"Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT":       76,
		"Cause_RESOURCEX_MISMATCH":                 77,
		"Cause_LEAFX_MSTP":                         78,
		"Cause_MX_LAG":                             79,
		"Cause_FABRICX_UPLINKX_THRESHOLD":          80,
		"Cause_STACKX_CONFIGX_CONFLICT":            81,
		"Cause_SPINEX_TYPEX_UNSUPPORTED":           82,
		"Cause_STACKX_PACKETX_DEFENSIVE":           83,
		"Cause_FORWARDX_ENGINEX_BUFFERX_FAILED":    85,
		"Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED": 86,
		"Cause_FABRICX_LINKX_FAILURE":              87,
		"Cause_MX_LAGX_CONSISTENCYX_CHECK":         88,
		"Cause_PFCX_DEADLOCK":                      89,
	}
)

func (x Ifm_Interfaces_Interface_ErrorDown_Cause) Enum() *Ifm_Interfaces_Interface_ErrorDown_Cause {
	p := new(Ifm_Interfaces_Interface_ErrorDown_Cause)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ErrorDown_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ErrorDown_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[21].Descriptor()
}

func (Ifm_Interfaces_Interface_ErrorDown_Cause) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[21]
}

func (x Ifm_Interfaces_Interface_ErrorDown_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ErrorDown_Cause.Descriptor instead.
func (Ifm_Interfaces_Interface_ErrorDown_Cause) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 0}
}

type Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type int32

const (
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 0
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_MAIN               Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 1
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_UNNUMBER           Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 2
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_NEG                Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 4
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_SUB                Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 32
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_DHCP               Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 256
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type.
var (
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_Type",
		1:   "Type_MAIN",
		2:   "Type_UNNUMBER",
		4:   "Type_NEG",
		32:  "Type_SUB",
		256: "Type_DHCP",
	}
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_MAIN":               1,
		"Type_UNNUMBER":           2,
		"Type_NEG":                4,
		"Type_SUB":                32,
		"Type_DHCP":               256,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Enum() *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type {
	p := new(Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[22].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[22]
}

func (x Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_NONE         Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_SIMPLE       Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_MD5          Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 2
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_HMACX_SHA256 Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_name = map[int32]string{
		0: "AuthenticationMode_NONE",
		1: "AuthenticationMode_SIMPLE",
		2: "AuthenticationMode_MD5",
		3: "AuthenticationMode_HMACX_SHA256",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_value = map[string]int32{
		"AuthenticationMode_NONE":         0,
		"AuthenticationMode_SIMPLE":       1,
		"AuthenticationMode_MD5":          2,
		"AuthenticationMode_HMACX_SHA256": 3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[23].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[23]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V3X_ONLY   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V2V3X_BOTH Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V2X_ONLY   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_name = map[int32]string{
		0: "V3Sendmode_V3X_ONLY",
		1: "V3Sendmode_V2V3X_BOTH",
		2: "V3Sendmode_V2X_ONLY",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_value = map[string]int32{
		"V3Sendmode_V3X_ONLY":   0,
		"V3Sendmode_V2V3X_BOTH": 1,
		"V3Sendmode_V2X_ONLY":   2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[24].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[24]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_NORMAL         Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_ADMIN          Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_MEMBER         Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 2
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_LBRG           Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 3
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_LBRGX_MEM      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 4
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_MEMX_LBRG      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 5
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_MEMX_LBRGX_MEM Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 6
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_UNICAST        Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_name = map[int32]string{
		0: "Type_NORMAL",
		1: "Type_ADMIN",
		2: "Type_MEMBER",
		3: "Type_LBRG",
		4: "Type_LBRGX_MEM",
		5: "Type_MEMX_LBRG",
		6: "Type_MEMX_LBRGX_MEM",
		7: "Type_UNICAST",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_value = map[string]int32{
		"Type_NORMAL":         0,
		"Type_ADMIN":          1,
		"Type_MEMBER":         2,
		"Type_LBRG":           3,
		"Type_LBRGX_MEM":      4,
		"Type_MEMX_LBRG":      5,
		"Type_MEMX_LBRGX_MEM": 6,
		"Type_UNICAST":        7,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[25].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[25]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_INITIALIZE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_BACKUP     Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_MASTER     Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_name = map[int32]string{
		0: "State_INITIALIZE",
		1: "State_BACKUP",
		2: "State_MASTER",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_value = map[string]int32{
		"State_INITIALIZE": 0,
		"State_BACKUP":     1,
		"State_MASTER":     2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[26].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[26]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 3}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_INCREASE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_REDUCE   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_name = map[int32]string{
		0: "TrackMode_INCREASE",
		1: "TrackMode_REDUCE",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_value = map[string]int32{
		"TrackMode_INCREASE": 0,
		"TrackMode_REDUCE":   1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[27].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[27]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 2, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_NORMAL Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_LINK   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_PEER   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_name = map[int32]string{
		0: "SessionType_NORMAL",
		1: "SessionType_LINK",
		2: "SessionType_PEER",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_value = map[string]int32{
		"SessionType_NORMAL": 0,
		"SessionType_LINK":   1,
		"SessionType_PEER":   2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[28].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[28]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 3, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_INCREASE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_REDUCE   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_name = map[int32]string{
		0: "TrackMode_INCREASE",
		1: "TrackMode_REDUCE",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_value = map[string]int32{
		"TrackMode_INCREASE": 0,
		"TrackMode_REDUCE":   1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[29].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[29]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 3, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_DOWN        Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_UP          Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_ADMINX_DOWN Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 2
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_UNKNOW      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_name = map[int32]string{
		0: "SessionState_DOWN",
		1: "SessionState_UP",
		2: "SessionState_ADMINX_DOWN",
		3: "SessionState_UNKNOW",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_value = map[string]int32{
		"SessionState_DOWN":        0,
		"SessionState_UP":          1,
		"SessionState_ADMINX_DOWN": 2,
		"SessionState_UNKNOW":      3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[30].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[30]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 3, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_LINK   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_REDUCE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_name = map[int32]string{
		0: "TrackMode_LINK",
		1: "TrackMode_REDUCE",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_value = map[string]int32{
		"TrackMode_LINK":   0,
		"TrackMode_REDUCE": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[31].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[31]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 4, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type int32

const (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 0
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_GLOBAL             Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 1
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_LINKX_LOCAL        Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 2
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_AUTOX_LINKX_LOCAL  Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 3
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_ANYCAST            Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 6
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type.
var (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_GLOBAL",
		2: "Type_LINKX_LOCAL",
		3: "Type_AUTOX_LINKX_LOCAL",
		6: "Type_ANYCAST",
	}
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_GLOBAL":             1,
		"Type_LINKX_LOCAL":        2,
		"Type_AUTOX_LINKX_LOCAL":  3,
		"Type_ANYCAST":            6,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Enum() *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type {
	p := new(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[32].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[32]
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType int32

const (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_NONE  Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType = 0
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_CGA   Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType = 1
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_EUI64 Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType.
var (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_name = map[int32]string{
		0: "AlgorithmType_NONE",
		1: "AlgorithmType_CGA",
		2: "AlgorithmType_EUI64",
	}
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_value = map[string]int32{
		"AlgorithmType_NONE":  0,
		"AlgorithmType_CGA":   1,
		"AlgorithmType_EUI64": 2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Enum() *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType {
	p := new(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[33].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[33]
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status int32

const (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Status Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 0
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_PREFERRED          Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 1
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_INACCESSIBLE       Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 4
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_UNKNOWN            Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 5
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_TENTATIVE          Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 6
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_DUPLICATE          Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status.
var (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Status",
		1: "Status_PREFERRED",
		4: "Status_INACCESSIBLE",
		5: "Status_UNKNOWN",
		6: "Status_TENTATIVE",
		7: "Status_DUPLICATE",
	}
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_value = map[string]int32{
		"INVALID_ENUM_VALUE_Status": 0,
		"Status_PREFERRED":          1,
		"Status_INACCESSIBLE":       4,
		"Status_UNKNOWN":            5,
		"Status_TENTATIVE":          6,
		"Status_DUPLICATE":          7,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Enum() *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status {
	p := new(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[34].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[34]
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_name = map[int32]string{
		0: "NsMcastFlag_OFF",
		1: "NsMcastFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_value = map[string]int32{
		"NsMcastFlag_OFF": 0,
		"NsMcastFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[35].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[35]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_name = map[int32]string{
		0: "NaGlean_OFF",
		1: "NaGlean_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_value = map[string]int32{
		"NaGlean_OFF": 0,
		"NaGlean_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[36].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[36]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_name = map[int32]string{
		0: "MaFlag_OFF",
		1: "MaFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_value = map[string]int32{
		"MaFlag_OFF": 0,
		"MaFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[37].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[37]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_name = map[int32]string{
		0: "OFlag_OFF",
		1: "OFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_value = map[string]int32{
		"OFlag_OFF": 0,
		"OFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[38].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[38]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 3}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_name = map[int32]string{
		0: "RaHaltFlag_OFF",
		1: "RaHaltFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_value = map[string]int32{
		"RaHaltFlag_OFF": 0,
		"RaHaltFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[39].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[39]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 4}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_MEDIUM Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_HIGH   Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference = 1
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_LOW    Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_name = map[int32]string{
		0: "RaPreference_MEDIUM",
		1: "RaPreference_HIGH",
		3: "RaPreference_LOW",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_value = map[string]int32{
		"RaPreference_MEDIUM": 0,
		"RaPreference_HIGH":   1,
		"RaPreference_LOW":    3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[40].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[40]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 5}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_name = map[int32]string{
		0: "RaPrefixFlag_OFF",
		1: "RaPrefixFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_value = map[string]int32{
		"RaPrefixFlag_OFF": 0,
		"RaPrefixFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[41].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[41]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 6}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_name = map[int32]string{
		0: "RaMtuFlag_OFF",
		1: "RaMtuFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_value = map[string]int32{
		"RaMtuFlag_OFF": 0,
		"RaMtuFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[42].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[42]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 7}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_name = map[int32]string{
		0: "CollectHostFlag_OFF",
		1: "CollectHostFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_value = map[string]int32{
		"CollectHostFlag_OFF": 0,
		"CollectHostFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[43].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[43]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 8}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_name = map[int32]string{
		0: "GenerateRdEnable_OFF",
		1: "GenerateRdEnable_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_value = map[string]int32{
		"GenerateRdEnable_OFF": 0,
		"GenerateRdEnable_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[44].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[44]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0, 9}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_name = map[int32]string{
		0: "RouteProxy_OFF",
		1: "RouteProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_value = map[string]int32{
		"RouteProxy_OFF": 0,
		"RouteProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[45].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[45]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 1, 0}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_name = map[int32]string{
		0: "InnerVlanProxy_OFF",
		1: "InnerVlanProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_value = map[string]int32{
		"InnerVlanProxy_OFF": 0,
		"InnerVlanProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[46].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[46]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 1, 1}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_name = map[int32]string{
		0: "InterVlanProxy_OFF",
		1: "InterVlanProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_value = map[string]int32{
		"InterVlanProxy_OFF": 0,
		"InterVlanProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[47].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[47]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 1, 2}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_name = map[int32]string{
		0: "AnywayProxy_OFF",
		1: "AnywayProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_value = map[string]int32{
		"AnywayProxy_OFF": 0,
		"AnywayProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[48].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[48]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 1, 3}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_RS     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_RA     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 1
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_NS     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 2
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_NA     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 3
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_NDMISS Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_name = map[int32]string{
		0: "Type_RS",
		1: "Type_RA",
		2: "Type_NS",
		3: "Type_NA",
		4: "Type_NDMISS",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_value = map[string]int32{
		"Type_RS":     0,
		"Type_RA":     1,
		"Type_NS":     2,
		"Type_NA":     3,
		"Type_NDMISS": 4,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[49].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[49]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_RS Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_RA Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 1
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_NS Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 2
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_NA Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_name = map[int32]string{
		0: "PacketType_RS",
		1: "PacketType_RA",
		2: "PacketType_NS",
		3: "PacketType_NA",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_value = map[string]int32{
		"PacketType_RS": 0,
		"PacketType_RA": 1,
		"PacketType_NS": 2,
		"PacketType_NA": 3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[50].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[50]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_name = map[int32]string{
		0: "AllOptions_DENY",
		1: "AllOptions_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_value = map[string]int32{
		"AllOptions_DENY":   0,
		"AllOptions_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[51].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[51]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[52].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[52]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_name = map[int32]string{
		0: "AllOptions_DENY",
		1: "AllOptions_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_value = map[string]int32{
		"AllOptions_DENY":   0,
		"AllOptions_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[53].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[53]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 1, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[54].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[54]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_name = map[int32]string{
		0: "AllOptions_DENY",
		1: "AllOptions_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_value = map[string]int32{
		"AllOptions_DENY":   0,
		"AllOptions_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[55].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[55]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 2, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[56].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[56]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 2, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_INVALID_ENUM_VALUE_ExhType Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_FRAGMENT           Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 44
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_ESP                Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 50
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_AH                 Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 51
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_ExhType",
		44: "ExhType_FRAGMENT",
		50: "ExhType_ESP",
		51: "ExhType_AH",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ExhType": 0,
		"ExhType_FRAGMENT":           44,
		"ExhType_ESP":                50,
		"ExhType_AH":                 51,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[57].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[57]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 3, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[58].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[58]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 3, 0, 1}
}

type Ifm_Interfaces_Interface_Trunk_Type int32

const (
	Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_Trunk_Type = 0
	Ifm_Interfaces_Interface_Trunk_Type_ETHX_TRUNK         Ifm_Interfaces_Interface_Trunk_Type = 1
	Ifm_Interfaces_Interface_Trunk_Type_IPX_TRUNK          Ifm_Interfaces_Interface_Trunk_Type = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Type.
var (
	Ifm_Interfaces_Interface_Trunk_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_ETHX_TRUNK",
		2: "Type_IPX_TRUNK",
	}
	Ifm_Interfaces_Interface_Trunk_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_ETHX_TRUNK":         1,
		"Type_IPX_TRUNK":          2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Type) Enum() *Ifm_Interfaces_Interface_Trunk_Type {
	p := new(Ifm_Interfaces_Interface_Trunk_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[59].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[59]
}

func (x Ifm_Interfaces_Interface_Trunk_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0}
}

type Ifm_Interfaces_Interface_Trunk_HashType int32

const (
	Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_HashType    Ifm_Interfaces_Interface_Trunk_HashType = 0
	Ifm_Interfaces_Interface_Trunk_HashType_IP                    Ifm_Interfaces_Interface_Trunk_HashType = 1
	Ifm_Interfaces_Interface_Trunk_HashType_MAC                   Ifm_Interfaces_Interface_Trunk_HashType = 2
	Ifm_Interfaces_Interface_Trunk_HashType_PACKETX_ALL           Ifm_Interfaces_Interface_Trunk_HashType = 3
	Ifm_Interfaces_Interface_Trunk_HashType_DESX_IP               Ifm_Interfaces_Interface_Trunk_HashType = 4
	Ifm_Interfaces_Interface_Trunk_HashType_DESX_MAC              Ifm_Interfaces_Interface_Trunk_HashType = 5
	Ifm_Interfaces_Interface_Trunk_HashType_SRCX_IP               Ifm_Interfaces_Interface_Trunk_HashType = 6
	Ifm_Interfaces_Interface_Trunk_HashType_SRCX_MAC              Ifm_Interfaces_Interface_Trunk_HashType = 7
	Ifm_Interfaces_Interface_Trunk_HashType_ENHANCED              Ifm_Interfaces_Interface_Trunk_HashType = 8
	Ifm_Interfaces_Interface_Trunk_HashType_RESILIENT             Ifm_Interfaces_Interface_Trunk_HashType = 9
	Ifm_Interfaces_Interface_Trunk_HashType_INVALID               Ifm_Interfaces_Interface_Trunk_HashType = 10
	Ifm_Interfaces_Interface_Trunk_HashType_L4                    Ifm_Interfaces_Interface_Trunk_HashType = 11
	Ifm_Interfaces_Interface_Trunk_HashType_RANDOM                Ifm_Interfaces_Interface_Trunk_HashType = 12
	Ifm_Interfaces_Interface_Trunk_HashType_ROUNDX_ROBIN          Ifm_Interfaces_Interface_Trunk_HashType = 13
	Ifm_Interfaces_Interface_Trunk_HashType_SYMMETRIC             Ifm_Interfaces_Interface_Trunk_HashType = 14
	Ifm_Interfaces_Interface_Trunk_HashType_SYMMETRICX_COMPLEMENT Ifm_Interfaces_Interface_Trunk_HashType = 15
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_HashType.
var (
	Ifm_Interfaces_Interface_Trunk_HashType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_HashType",
		1:  "HashType_IP",
		2:  "HashType_MAC",
		3:  "HashType_PACKETX_ALL",
		4:  "HashType_DESX_IP",
		5:  "HashType_DESX_MAC",
		6:  "HashType_SRCX_IP",
		7:  "HashType_SRCX_MAC",
		8:  "HashType_ENHANCED",
		9:  "HashType_RESILIENT",
		10: "HashType_INVALID",
		11: "HashType_L4",
		12: "HashType_RANDOM",
		13: "HashType_ROUNDX_ROBIN",
		14: "HashType_SYMMETRIC",
		15: "HashType_SYMMETRICX_COMPLEMENT",
	}
	Ifm_Interfaces_Interface_Trunk_HashType_value = map[string]int32{
		"INVALID_ENUM_VALUE_HashType":    0,
		"HashType_IP":                    1,
		"HashType_MAC":                   2,
		"HashType_PACKETX_ALL":           3,
		"HashType_DESX_IP":               4,
		"HashType_DESX_MAC":              5,
		"HashType_SRCX_IP":               6,
		"HashType_SRCX_MAC":              7,
		"HashType_ENHANCED":              8,
		"HashType_RESILIENT":             9,
		"HashType_INVALID":               10,
		"HashType_L4":                    11,
		"HashType_RANDOM":                12,
		"HashType_ROUNDX_ROBIN":          13,
		"HashType_SYMMETRIC":             14,
		"HashType_SYMMETRICX_COMPLEMENT": 15,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_HashType) Enum() *Ifm_Interfaces_Interface_Trunk_HashType {
	p := new(Ifm_Interfaces_Interface_Trunk_HashType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[60].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_HashType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[60]
}

func (x Ifm_Interfaces_Interface_Trunk_HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_HashType.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_HashType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 1}
}

type Ifm_Interfaces_Interface_Trunk_WorkMode int32

const (
	Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_WorkMode Ifm_Interfaces_Interface_Trunk_WorkMode = 0
	Ifm_Interfaces_Interface_Trunk_WorkMode_MANUAL             Ifm_Interfaces_Interface_Trunk_WorkMode = 1
	Ifm_Interfaces_Interface_Trunk_WorkMode_DYNAMIC            Ifm_Interfaces_Interface_Trunk_WorkMode = 2
	Ifm_Interfaces_Interface_Trunk_WorkMode_STATIC             Ifm_Interfaces_Interface_Trunk_WorkMode = 3
	Ifm_Interfaces_Interface_Trunk_WorkMode_BACKUP             Ifm_Interfaces_Interface_Trunk_WorkMode = 4
	Ifm_Interfaces_Interface_Trunk_WorkMode_INVALID            Ifm_Interfaces_Interface_Trunk_WorkMode = 5
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_WorkMode.
var (
	Ifm_Interfaces_Interface_Trunk_WorkMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_WorkMode",
		1: "WorkMode_MANUAL",
		2: "WorkMode_DYNAMIC",
		3: "WorkMode_STATIC",
		4: "WorkMode_BACKUP",
		5: "WorkMode_INVALID",
	}
	Ifm_Interfaces_Interface_Trunk_WorkMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_WorkMode": 0,
		"WorkMode_MANUAL":             1,
		"WorkMode_DYNAMIC":            2,
		"WorkMode_STATIC":             3,
		"WorkMode_BACKUP":             4,
		"WorkMode_INVALID":            5,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_WorkMode) Enum() *Ifm_Interfaces_Interface_Trunk_WorkMode {
	p := new(Ifm_Interfaces_Interface_Trunk_WorkMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[61].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_WorkMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[61]
}

func (x Ifm_Interfaces_Interface_Trunk_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_WorkMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 2}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Status int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_DOWN Ifm_Interfaces_Interface_Trunk_Members_Member_Status = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_UP   Ifm_Interfaces_Interface_Trunk_Members_Member_Status = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Status.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_name = map[int32]string{
		0: "Status_DOWN",
		1: "Status_UP",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_value = map[string]int32{
		"Status_DOWN": 0,
		"Status_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Status {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[62].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[62]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Role int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_SLAVE  Ifm_Interfaces_Interface_Trunk_Members_Member_Role = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_MASTER Ifm_Interfaces_Interface_Trunk_Members_Member_Role = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_COMMON Ifm_Interfaces_Interface_Trunk_Members_Member_Role = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Role.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_name = map[int32]string{
		0: "Role_SLAVE",
		1: "Role_MASTER",
		3: "Role_COMMON",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_value = map[string]int32{
		"Role_SLAVE":  0,
		"Role_MASTER": 1,
		"Role_COMMON": 3,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Role {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Role)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[63].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[63]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Role.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Role) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_INVALID_ENUM_VALUE_LacpNegotiationMode Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_ACTIVE             Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_PASSIVE            Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_LacpNegotiationMode",
		1: "LacpNegotiationMode_ACTIVE",
		2: "LacpNegotiationMode_PASSIVE",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_LacpNegotiationMode": 0,
		"LacpNegotiationMode_ACTIVE":             1,
		"LacpNegotiationMode_PASSIVE":            2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[64].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[64]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_NONE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_MASTER Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_SLAVE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_name = map[int32]string{
		0: "Role_NONE",
		1: "Role_MASTER",
		2: "Role_SLAVE",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_value = map[string]int32{
		"Role_NONE":   0,
		"Role_MASTER": 1,
		"Role_SLAVE":  2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[65].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[65]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_UNSELECTED Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_SELECTED   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_INDEP      Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 2
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_FORCEX_UP  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_name = map[int32]string{
		0: "Status_UNSELECTED",
		1: "Status_SELECTED",
		2: "Status_INDEP",
		3: "Status_FORCEX_UP",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_value = map[string]int32{
		"Status_UNSELECTED": 0,
		"Status_SELECTED":   1,
		"Status_INDEP":      2,
		"Status_FORCEX_UP":  3,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[66].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[66]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1, 1, 0}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_NULL     Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_10M    Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_100M   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 2
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_1GE    Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 3
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_10GE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 4
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_100GE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 5
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_1TE    Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 6
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_10TE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 7
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_100TE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 8
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_1000TE Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 9
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_40GE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 10
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_400GE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 11
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_25GE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 12
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_200GE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 13
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_50GE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 14
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_FLEXE    Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 10002
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_name = map[int32]string{
		0:     "PortType_NULL",
		1:     "PortType_X_10M",
		2:     "PortType_X_100M",
		3:     "PortType_X_1GE",
		4:     "PortType_X_10GE",
		5:     "PortType_X_100GE",
		6:     "PortType_X_1TE",
		7:     "PortType_X_10TE",
		8:     "PortType_X_100TE",
		9:     "PortType_X_1000TE",
		10:    "PortType_X_40GE",
		11:    "PortType_X_400GE",
		12:    "PortType_X_25GE",
		13:    "PortType_X_200GE",
		14:    "PortType_X_50GE",
		10002: "PortType_FLEXE",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_value = map[string]int32{
		"PortType_NULL":     0,
		"PortType_X_10M":    1,
		"PortType_X_100M":   2,
		"PortType_X_1GE":    3,
		"PortType_X_10GE":   4,
		"PortType_X_100GE":  5,
		"PortType_X_1TE":    6,
		"PortType_X_10TE":   7,
		"PortType_X_100TE":  8,
		"PortType_X_1000TE": 9,
		"PortType_X_40GE":   10,
		"PortType_X_400GE":  11,
		"PortType_X_25GE":   12,
		"PortType_X_200GE":  13,
		"PortType_X_50GE":   14,
		"PortType_FLEXE":    10002,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[67].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[67]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1, 1, 1}
}

type Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType int32

const (
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType_CRC32X_1   Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType = 0
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType_CRC32X_2   Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType = 1
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType_XORX_16BIT Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType = 2
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType_XORX_8BIT  Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType.
var (
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType_name = map[int32]string{
		0: "TrunkHashType_CRC32X_1",
		1: "TrunkHashType_CRC32X_2",
		2: "TrunkHashType_XORX_16BIT",
		3: "TrunkHashType_XORX_8BIT",
	}
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType_value = map[string]int32{
		"TrunkHashType_CRC32X_1":   0,
		"TrunkHashType_CRC32X_2":   1,
		"TrunkHashType_XORX_16BIT": 2,
		"TrunkHashType_XORX_8BIT":  3,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType) Enum() *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType {
	p := new(Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[68].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[68]
}

func (x Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 2, 0}
}

type Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable int32

const (
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable_DISABLE Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable = 0
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable_ENABLE  Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable.
var (
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable_name = map[int32]string{
		0: "DualReceiveEnable_DISABLE",
		1: "DualReceiveEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable_value = map[string]int32{
		"DualReceiveEnable_DISABLE": 0,
		"DualReceiveEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable) Enum() *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable {
	p := new(Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[69].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[69]
}

func (x Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 2, 1}
}

type Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType int32

const (
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_SLOW Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType = 0
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_FAST Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType.
var (
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_name = map[int32]string{
		0: "ReceiveTimeoutType_SLOW",
		1: "ReceiveTimeoutType_FAST",
	}
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_value = map[string]int32{
		"ReceiveTimeoutType_SLOW": 0,
		"ReceiveTimeoutType_FAST": 1,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Enum() *Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType {
	p := new(Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[70].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[70]
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 3, 0}
}

type Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd int32

const (
	Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SelectPortStd Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd = 0
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_SPEED              Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd = 1
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_PRIORITY           Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd.
var (
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SelectPortStd",
		1: "SelectPortStd_SPEED",
		3: "SelectPortStd_PRIORITY",
	}
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_value = map[string]int32{
		"INVALID_ENUM_VALUE_SelectPortStd": 0,
		"SelectPortStd_SPEED":              1,
		"SelectPortStd_PRIORITY":           3,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Enum() *Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd {
	p := new(Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[71].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[71]
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 3, 1}
}

type Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource int32

const (
	Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SysmacSource Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource = 0
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_LOCAL              Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource = 1
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_REMOTE             Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource.
var (
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SysmacSource",
		1: "SysmacSource_LOCAL",
		2: "SysmacSource_REMOTE",
	}
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_value = map[string]int32{
		"INVALID_ENUM_VALUE_SysmacSource": 0,
		"SysmacSource_LOCAL":              1,
		"SysmacSource_REMOTE":             2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Enum() *Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource {
	p := new(Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[72].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[72]
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 3, 2}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_DISABLE Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_ENABLE  Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_name = map[int32]string{
		0: "VlanSwap_DISABLE",
		1: "VlanSwap_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_value = map[string]int32{
		"VlanSwap_DISABLE": 0,
		"VlanSwap_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[73].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[73]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_INVALID_ENUM_VALUE_LinkType Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_ACCESS             Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_TRUNK              Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_HYBRID             Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 3
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_DOT1QTUNNEL        Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_LinkType",
		1: "LinkType_ACCESS",
		2: "LinkType_TRUNK",
		3: "LinkType_HYBRID",
		4: "LinkType_DOT1QTUNNEL",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_value = map[string]int32{
		"INVALID_ENUM_VALUE_LinkType": 0,
		"LinkType_ACCESS":             1,
		"LinkType_TRUNK":              2,
		"LinkType_HYBRID":             3,
		"LinkType_DOT1QTUNNEL":        4,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[74].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[74]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_INVALID_ENUM_VALUE_PointToPoint Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint_FORCEX_TRUE        Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint_FORCEX_FALSE       Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint_AUTO               Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PointToPoint",
		1: "PointToPoint_FORCEX_TRUE",
		2: "PointToPoint_FORCEX_FALSE",
		3: "PointToPoint_AUTO",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint_value = map[string]int32{
		"INVALID_ENUM_VALUE_PointToPoint": 0,
		"PointToPoint_FORCEX_TRUE":        1,
		"PointToPoint_FORCEX_FALSE":       2,
		"PointToPoint_AUTO":               3,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[75].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[75]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 3, 0}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_INVALID_ENUM_VALUE_BpduFilter Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter_DISABLE            Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter_ENABLE             Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter_DEFAULT            Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_BpduFilter",
		1: "BpduFilter_DISABLE",
		2: "BpduFilter_ENABLE",
		3: "BpduFilter_DEFAULT",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter_value = map[string]int32{
		"INVALID_ENUM_VALUE_BpduFilter": 0,
		"BpduFilter_DISABLE":            1,
		"BpduFilter_ENABLE":             2,
		"BpduFilter_DEFAULT":            3,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[76].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[76]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 3, 1}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_INVALID_ENUM_VALUE_EdgePort Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort_DISABLE            Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort_ENABLE             Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort_DEFAULT            Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_EdgePort",
		1: "EdgePort_DISABLE",
		2: "EdgePort_ENABLE",
		3: "EdgePort_DEFAULT",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort_value = map[string]int32{
		"INVALID_ENUM_VALUE_EdgePort": 0,
		"EdgePort_DISABLE":            1,
		"EdgePort_ENABLE":             2,
		"EdgePort_DEFAULT":            3,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[77].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[77]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 3, 2}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_ProtocolType Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType_LACP               Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ProtocolType",
		1: "ProtocolType_LACP",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ProtocolType": 0,
		"ProtocolType_LACP":               1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[78].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[78]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 4, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_Action Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action_FORWARDING         Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Action",
		1: "Action_FORWARDING",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action_value = map[string]int32{
		"INVALID_ENUM_VALUE_Action": 0,
		"Action_FORWARDING":         1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[79].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[79]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 4, 0, 1}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_INVALID_ENUM_VALUE_PointToPoint Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint_FORCEX_TRUE        Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint_FORCEX_FALSE       Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint_AUTO               Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PointToPoint",
		1: "PointToPoint_FORCEX_TRUE",
		2: "PointToPoint_FORCEX_FALSE",
		3: "PointToPoint_AUTO",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint_value = map[string]int32{
		"INVALID_ENUM_VALUE_PointToPoint": 0,
		"PointToPoint_FORCEX_TRUE":        1,
		"PointToPoint_FORCEX_FALSE":       2,
		"PointToPoint_AUTO":               3,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[80].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[80]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 1, 0}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_INVALID_ENUM_VALUE_BpduFilter Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter_DISABLE            Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter_ENABLE             Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter_DEFAULT            Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_BpduFilter",
		1: "BpduFilter_DISABLE",
		2: "BpduFilter_ENABLE",
		3: "BpduFilter_DEFAULT",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter_value = map[string]int32{
		"INVALID_ENUM_VALUE_BpduFilter": 0,
		"BpduFilter_DISABLE":            1,
		"BpduFilter_ENABLE":             2,
		"BpduFilter_DEFAULT":            3,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[81].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[81]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 1, 1}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_INVALID_ENUM_VALUE_EdgePort Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort_DISABLE            Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort_ENABLE             Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort_DEFAULT            Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_EdgePort",
		1: "EdgePort_DISABLE",
		2: "EdgePort_ENABLE",
		3: "EdgePort_DEFAULT",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort_value = map[string]int32{
		"INVALID_ENUM_VALUE_EdgePort": 0,
		"EdgePort_DISABLE":            1,
		"EdgePort_ENABLE":             2,
		"EdgePort_DEFAULT":            3,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[82].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[82]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 1, 2}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable_DISABLE Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable_ENABLE  Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable_name = map[int32]string{
		0: "OuterVlanEnable_DISABLE",
		1: "OuterVlanEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable_value = map[string]int32{
		"OuterVlanEnable_DISABLE": 0,
		"OuterVlanEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[83].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[83]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 2, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode int32

const (
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode = 0
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_MULTIPLE           Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode = 1
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_SINGLE             Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode.
var (
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_MULTIPLE",
		2: "Mode_SINGLE",
	}
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_MULTIPLE":           1,
		"Mode_SINGLE":             2,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Enum() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode {
	p := new(Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[84].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[84]
}

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable int32

const (
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable_DISABLE Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable = 0
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable_ENABLE  Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable.
var (
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable_name = map[int32]string{
		0: "ModeChannelEnable_DISABLE",
		1: "ModeChannelEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable_value = map[string]int32{
		"ModeChannelEnable_DISABLE": 0,
		"ModeChannelEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable) Enum() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable {
	p := new(Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[85].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[85]
}

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 1, 1, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch int32

const (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_DISABLE Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch = 0
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_ENABLE  Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch.
var (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_name = map[int32]string{
		0: "LocalSwitch_DISABLE",
		1: "LocalSwitch_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_value = map[string]int32{
		"LocalSwitch_DISABLE": 0,
		"LocalSwitch_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Enum() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch {
	p := new(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[86].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[86]
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 2, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType int32

const (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_POPX_OUTER            Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 0
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_PUSH1X_LAYER          Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 1
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_SWAP                  Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 2
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_OFFSETX_INCREASE Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 3
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_1X_TOX_1         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 4
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_2X_TOX_1         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 5
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_1X_TOX_2         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 6
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_2X_TOX_2         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 7
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_POPX_DOUBLE           Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 8
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_PUSH2X_LAYER          Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 9
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_OFFSETX_DECREASE Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 10
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType.
var (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_name = map[int32]string{
		0:  "ActionType_POPX_OUTER",
		1:  "ActionType_PUSH1X_LAYER",
		2:  "ActionType_SWAP",
		3:  "ActionType_MAPX_OFFSETX_INCREASE",
		4:  "ActionType_MAPX_1X_TOX_1",
		5:  "ActionType_MAPX_2X_TOX_1",
		6:  "ActionType_MAPX_1X_TOX_2",
		7:  "ActionType_MAPX_2X_TOX_2",
		8:  "ActionType_POPX_DOUBLE",
		9:  "ActionType_PUSH2X_LAYER",
		10: "ActionType_MAPX_OFFSETX_DECREASE",
	}
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_value = map[string]int32{
		"ActionType_POPX_OUTER":            0,
		"ActionType_PUSH1X_LAYER":          1,
		"ActionType_SWAP":                  2,
		"ActionType_MAPX_OFFSETX_INCREASE": 3,
		"ActionType_MAPX_1X_TOX_1":         4,
		"ActionType_MAPX_2X_TOX_1":         5,
		"ActionType_MAPX_1X_TOX_2":         6,
		"ActionType_MAPX_2X_TOX_2":         7,
		"ActionType_POPX_DOUBLE":           8,
		"ActionType_PUSH2X_LAYER":          9,
		"ActionType_MAPX_OFFSETX_DECREASE": 10,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Enum() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType {
	p := new(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[87].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[87]
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 2, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter int32

const (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter_DISABLE Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter = 0
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter_ENABLE  Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter.
var (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter_name = map[int32]string{
		0: "EgressStrictFilter_DISABLE",
		1: "EgressStrictFilter_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter_value = map[string]int32{
		"EgressStrictFilter_DISABLE": 0,
		"EgressStrictFilter_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter) Enum() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter {
	p := new(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[88].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[88]
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 2, 1, 0}
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type int32

const (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_BROADCAST        Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type = 0
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_MULTICAST        Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type = 1
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_UNKNOWNX_UNICAST Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type.
var (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_name = map[int32]string{
		0: "Type_BROADCAST",
		1: "Type_MULTICAST",
		2: "Type_UNKNOWNX_UNICAST",
	}
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_value = map[string]int32{
		"Type_BROADCAST":        0,
		"Type_MULTICAST":        1,
		"Type_UNKNOWNX_UNICAST": 2,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Enum() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type {
	p := new(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[89].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[89]
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 3, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction int32

const (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_INBOUND  Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction = 0
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_OUTBOUND Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction.
var (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Enum() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction {
	p := new(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[90].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[90]
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 3, 1, 0, 1}
}

type Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict int32

const (
	Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_ArpLearnStrict Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 0
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_FORCEX_DISABLE     Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 1
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_FORCEX_ENABLE      Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 2
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_TRUST              Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 3
)

// Enum value maps for Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict.
var (
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ArpLearnStrict",
		1: "ArpLearnStrict_FORCEX_DISABLE",
		2: "ArpLearnStrict_FORCEX_ENABLE",
		3: "ArpLearnStrict_TRUST",
	}
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_value = map[string]int32{
		"INVALID_ENUM_VALUE_ArpLearnStrict": 0,
		"ArpLearnStrict_FORCEX_DISABLE":     1,
		"ArpLearnStrict_FORCEX_ENABLE":      2,
		"ArpLearnStrict_TRUST":              3,
	}
)

func (x Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Enum() *Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict {
	p := new(Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[91].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[91]
}

func (x Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 14, 0}
}

type Ifm_Interfaces_Interface_ArpEntry_GratuitousSend int32

const (
	Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_GratuitousSend Ifm_Interfaces_Interface_ArpEntry_GratuitousSend = 0
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_ENABLE             Ifm_Interfaces_Interface_ArpEntry_GratuitousSend = 2
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_DISABLE            Ifm_Interfaces_Interface_ArpEntry_GratuitousSend = 3
)

// Enum value maps for Ifm_Interfaces_Interface_ArpEntry_GratuitousSend.
var (
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GratuitousSend",
		2: "GratuitousSend_ENABLE",
		3: "GratuitousSend_DISABLE",
	}
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_value = map[string]int32{
		"INVALID_ENUM_VALUE_GratuitousSend": 0,
		"GratuitousSend_ENABLE":             2,
		"GratuitousSend_DISABLE":            3,
	}
)

func (x Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Enum() *Ifm_Interfaces_Interface_ArpEntry_GratuitousSend {
	p := new(Ifm_Interfaces_Interface_ArpEntry_GratuitousSend)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[92].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[92]
}

func (x Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpEntry_GratuitousSend.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 14, 1}
}

type Ifm_Interfaces_Interface_ArpStatusDetect_Mode int32

const (
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_LOOSE  Ifm_Interfaces_Interface_ArpStatusDetect_Mode = 0
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_STRICT Ifm_Interfaces_Interface_ArpStatusDetect_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_ArpStatusDetect_Mode.
var (
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_name = map[int32]string{
		0: "Mode_LOOSE",
		1: "Mode_STRICT",
	}
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_value = map[string]int32{
		"Mode_LOOSE":  0,
		"Mode_STRICT": 1,
	}
)

func (x Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Enum() *Ifm_Interfaces_Interface_ArpStatusDetect_Mode {
	p := new(Ifm_Interfaces_Interface_ArpStatusDetect_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpStatusDetect_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[93].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[93]
}

func (x Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpStatusDetect_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpStatusDetect_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 15, 0}
}

type Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type int32

const (
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type_IPX_DSCP     Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type = 0
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type_X_8021P      Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type = 1
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type_OUTERX_8021P Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type = 2
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type_INNERX_8021P Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type.
var (
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type_name = map[int32]string{
		0: "Type_IPX_DSCP",
		1: "Type_X_8021P",
		2: "Type_OUTERX_8021P",
		3: "Type_INNERX_8021P",
	}
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type_value = map[string]int32{
		"Type_IPX_DSCP":     0,
		"Type_X_8021P":      1,
		"Type_OUTERX_8021P": 2,
		"Type_INNERX_8021P": 3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type) Enum() *Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type {
	p := new(Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[94].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[94]
}

func (x Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction_INX_OUTBOUND Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction = 0
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction_INBOUND      Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction = 1
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction_OUTBOUND     Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction.
var (
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction_name = map[int32]string{
		0: "Direction_INX_OUTBOUND",
		1: "Direction_INBOUND",
		2: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction_value = map[string]int32{
		"Direction_INX_OUTBOUND": 0,
		"Direction_INBOUND":      1,
		"Direction_OUTBOUND":     2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction) Enum() *Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[95].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[95]
}

func (x Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction = 0
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction.
var (
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction) Enum() *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[96].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[96]
}

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer int32

const (
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_NONE  Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer = 0
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_LINK  Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer = 1
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_ALL   Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer = 2
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_MPLS  Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer = 3
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_VXLAN Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer.
var (
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_name = map[int32]string{
		0: "Layer_NONE",
		1: "Layer_LINK",
		2: "Layer_ALL",
		3: "Layer_MPLS",
		4: "Layer_VXLAN",
	}
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_value = map[string]int32{
		"Layer_NONE":  0,
		"Layer_LINK":  1,
		"Layer_ALL":   2,
		"Layer_MPLS":  3,
		"Layer_VXLAN": 4,
	}
)

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer) Enum() *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer {
	p := new(Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[97].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[97]
}

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier int32

const (
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_NO           Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier = 0
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_NONE         Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier = 1
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_VID          Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier = 2
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_CEX_VID      Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier = 3
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_VIDX_CEX_VID Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier.
var (
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_name = map[int32]string{
		0: "Identifier_NO",
		1: "Identifier_NONE",
		2: "Identifier_VID",
		3: "Identifier_CEX_VID",
		4: "Identifier_VIDX_CEX_VID",
	}
	Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_value = map[string]int32{
		"Identifier_NO":           0,
		"Identifier_NONE":         1,
		"Identifier_VID":          2,
		"Identifier_CEX_VID":      3,
		"Identifier_VIDX_CEX_VID": 4,
	}
)

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier) Enum() *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier {
	p := new(Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[98].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[98]
}

func (x Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 1, 0, 2}
}

type Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction = 0
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction.
var (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction) Enum() *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[99].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[99]
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 2, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type int32

const (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type_INTERFACE Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type = 0
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type_VLAN      Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type = 1
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type_PE        Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type.
var (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type_name = map[int32]string{
		0: "Type_INTERFACE",
		1: "Type_VLAN",
		2: "Type_PE",
	}
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type_value = map[string]int32{
		"Type_INTERFACE": 0,
		"Type_VLAN":      1,
		"Type_PE":        2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type) Enum() *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type {
	p := new(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[100].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[100]
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 2, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType int32

const (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_NONE         Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 0
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_VLAN         Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 1
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_PEX_VID      Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 2
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_CEX_VID      Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 3
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_PEX_CEX_VID  Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 4
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_VID          Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 5
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_EVCX_CEX_VID Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 6
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_VIDX_CEX_VID Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType.
var (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_name = map[int32]string{
		0: "IdentifyType_NONE",
		1: "IdentifyType_VLAN",
		2: "IdentifyType_PEX_VID",
		3: "IdentifyType_CEX_VID",
		4: "IdentifyType_PEX_CEX_VID",
		5: "IdentifyType_VID",
		6: "IdentifyType_EVCX_CEX_VID",
		7: "IdentifyType_VIDX_CEX_VID",
	}
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_value = map[string]int32{
		"IdentifyType_NONE":         0,
		"IdentifyType_VLAN":         1,
		"IdentifyType_PEX_VID":      2,
		"IdentifyType_CEX_VID":      3,
		"IdentifyType_PEX_CEX_VID":  4,
		"IdentifyType_VID":          5,
		"IdentifyType_EVCX_CEX_VID": 6,
		"IdentifyType_VIDX_CEX_VID": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType) Enum() *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType {
	p := new(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[101].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[101]
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 2, 0, 2}
}

type Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth int32

const (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth_DISABLE Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth = 0
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth_ENABLE  Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth.
var (
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth_name = map[int32]string{
		0: "LinkageBandwidth_DISABLE",
		1: "LinkageBandwidth_ENABLE",
	}
	Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth_value = map[string]int32{
		"LinkageBandwidth_DISABLE": 0,
		"LinkageBandwidth_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth) Enum() *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth {
	p := new(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[102].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[102]
}

func (x Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 2, 0, 3}
}

type Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction = 0
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction.
var (
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction) Enum() *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[103].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[103]
}

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 3, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard int32

const (
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard_DISABLE Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard = 0
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard_ENABLE  Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard.
var (
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard_name = map[int32]string{
		0: "AdjustOnCard_DISABLE",
		1: "AdjustOnCard_ENABLE",
	}
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard_value = map[string]int32{
		"AdjustOnCard_DISABLE": 0,
		"AdjustOnCard_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard) Enum() *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard {
	p := new(Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[104].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[104]
}

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 3, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_BE    Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_AF1   Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_AF2   Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_AF3   Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_AF4   Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_EF    Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_CS6   Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_CS7   Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 7
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_TOTAL Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 8
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_COS0  Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 9
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_COS1  Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 10
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_COS2  Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 11
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_COS3  Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass = 12
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_name = map[int32]string{
		0:  "ServiceClass_BE",
		1:  "ServiceClass_AF1",
		2:  "ServiceClass_AF2",
		3:  "ServiceClass_AF3",
		4:  "ServiceClass_AF4",
		5:  "ServiceClass_EF",
		6:  "ServiceClass_CS6",
		7:  "ServiceClass_CS7",
		8:  "ServiceClass_TOTAL",
		9:  "ServiceClass_COS0",
		10: "ServiceClass_COS1",
		11: "ServiceClass_COS2",
		12: "ServiceClass_COS3",
	}
	Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
		"ServiceClass_COS0":  9,
		"ServiceClass_COS1":  10,
		"ServiceClass_COS2":  11,
		"ServiceClass_COS3":  12,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[105].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[105]
}

func (x Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 3, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[106].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[106]
}

func (x Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 4, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[107].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[107]
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 5, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[108].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[108]
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 7, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[109].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[109]
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 8, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[110].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[110]
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 9, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type int32

const (
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_INVALID_ENUM_VALUE_Type     Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type = 0
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type_DISCARDX_PACKET        Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type = 1
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type_DISCARDX_BYTE          Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type = 2
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type_DISCARDX_PACKETX_RATIO Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type.
var (
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_DISCARDX_PACKET",
		2: "Type_DISCARDX_BYTE",
		3: "Type_DISCARDX_PACKETX_RATIO",
	}
	Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type":     0,
		"Type_DISCARDX_PACKET":        1,
		"Type_DISCARDX_BYTE":          2,
		"Type_DISCARDX_PACKETX_RATIO": 3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type) Enum() *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type {
	p := new(Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[111].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[111]
}

func (x Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 9, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval int32

const (
	Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_INVALID_ENUM_VALUE_Interval Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval = 0
	Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval_X_5S               Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval = 5
	Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval_X_30S              Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval = 30
	Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval_X_300S             Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval = 300
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval.
var (
	Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_Interval",
		5:   "Interval_X_5S",
		30:  "Interval_X_30S",
		300: "Interval_X_300S",
	}
	Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval_value = map[string]int32{
		"INVALID_ENUM_VALUE_Interval": 0,
		"Interval_X_5S":               5,
		"Interval_X_30S":              30,
		"Interval_X_300S":             300,
	}
)

func (x Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval) Enum() *Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval {
	p := new(Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[112].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[112]
}

func (x Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 10, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode int32

const (
	Ifm_Interfaces_Interface_Qos_LinkAdjustment_INVALID_ENUM_VALUE_ShapingMode Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode = 0
	Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode_CELL               Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode.
var (
	Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ShapingMode",
		1: "ShapingMode_CELL",
	}
	Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_ShapingMode": 0,
		"ShapingMode_CELL":               1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode) Enum() *Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode {
	p := new(Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[113].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[113]
}

func (x Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 11, 0}
}

type Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[114].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[114]
}

func (x Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 12, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority int32

const (
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority_PQ  Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority = 0
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority_WFQ Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority = 1
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority_LPQ Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority.
var (
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority_name = map[int32]string{
		0: "Priority_PQ",
		1: "Priority_WFQ",
		2: "Priority_LPQ",
	}
	Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority_value = map[string]int32{
		"Priority_PQ":  0,
		"Priority_WFQ": 1,
		"Priority_LPQ": 2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority) Enum() *Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority {
	p := new(Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[115].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[115]
}

func (x Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 12, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[116].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[116]
}

func (x Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 17, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction = 0
	Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction_OUTBOUND           Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction.
var (
	Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction) Enum() *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[117].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[117]
}

func (x Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 18, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction = 0
	Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction_OUTBOUND           Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction.
var (
	Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction) Enum() *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[118].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[118]
}

func (x Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 19, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode int32

const (
	Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_INVALID_ENUM_VALUE_WeightMode Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode = 0
	Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode_ENABLE             Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode.
var (
	Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_WeightMode",
		1: "WeightMode_ENABLE",
	}
	Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_WeightMode": 0,
		"WeightMode_ENABLE":             1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode) Enum() *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode {
	p := new(Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[119].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[119]
}

func (x Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 20, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType int32

const (
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_INVALID_ENUM_VALUE_MapType Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType = 0
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType_NONE               Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType = 1
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType_INNERX_8021P       Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType = 2
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType_OUTERX_8021P       Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType = 4
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType_DSCP               Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType = 8
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType_MPLSX_EXP          Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType = 16
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType.
var (
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_MapType",
		1:  "MapType_NONE",
		2:  "MapType_INNERX_8021P",
		4:  "MapType_OUTERX_8021P",
		8:  "MapType_DSCP",
		16: "MapType_MPLSX_EXP",
	}
	Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType_value = map[string]int32{
		"INVALID_ENUM_VALUE_MapType": 0,
		"MapType_NONE":               1,
		"MapType_INNERX_8021P":       2,
		"MapType_OUTERX_8021P":       4,
		"MapType_DSCP":               8,
		"MapType_MPLSX_EXP":          16,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType) Enum() *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType {
	p := new(Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[120].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[120]
}

func (x Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 21, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable int32

const (
	Ifm_Interfaces_Interface_Qos_PerHopBehavior_INVALID_ENUM_VALUE_Enable Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable = 0
	Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable_ENABLE             Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable.
var (
	Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Enable",
		1: "Enable_ENABLE",
	}
	Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable_value = map[string]int32{
		"INVALID_ENUM_VALUE_Enable": 0,
		"Enable_ENABLE":             1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable) Enum() *Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable {
	p := new(Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[121].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[121]
}

func (x Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 24, 0}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_Cars_Car_Direction = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_Cars_Car_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_Direction.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_Direction) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[122].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[122]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction_PASS    Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction_DISCARD Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction_name = map[int32]string{
		0: "GreenAction_PASS",
		2: "GreenAction_DISCARD",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction_value = map[string]int32{
		"GreenAction_PASS":    0,
		"GreenAction_DISCARD": 2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[123].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[123]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_BE  Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_AF1 Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 1
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_AF2 Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 2
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_AF3 Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 3
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_AF4 Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 4
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_EF  Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 5
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_CS6 Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 6
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_CS7 Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_name = map[int32]string{
		0: "GreenServiceClass_BE",
		1: "GreenServiceClass_AF1",
		2: "GreenServiceClass_AF2",
		3: "GreenServiceClass_AF3",
		4: "GreenServiceClass_AF4",
		5: "GreenServiceClass_EF",
		6: "GreenServiceClass_CS6",
		7: "GreenServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_value = map[string]int32{
		"GreenServiceClass_BE":  0,
		"GreenServiceClass_AF1": 1,
		"GreenServiceClass_AF2": 2,
		"GreenServiceClass_AF3": 3,
		"GreenServiceClass_AF4": 4,
		"GreenServiceClass_EF":  5,
		"GreenServiceClass_CS6": 6,
		"GreenServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[124].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[124]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 2}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor_GREEN  Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor_YELLOW Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor = 1
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor_RED    Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor_name = map[int32]string{
		0: "GreenColor_GREEN",
		1: "GreenColor_YELLOW",
		2: "GreenColor_RED",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor_value = map[string]int32{
		"GreenColor_GREEN":  0,
		"GreenColor_YELLOW": 1,
		"GreenColor_RED":    2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[125].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[125]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 3}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction_PASS    Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction_DISCARD Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction_name = map[int32]string{
		0: "YellowAction_PASS",
		2: "YellowAction_DISCARD",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction_value = map[string]int32{
		"YellowAction_PASS":    0,
		"YellowAction_DISCARD": 2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[126].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[126]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 4}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_BE  Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_AF1 Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 1
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_AF2 Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 2
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_AF3 Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 3
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_AF4 Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 4
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_EF  Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 5
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_CS6 Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 6
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_CS7 Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_name = map[int32]string{
		0: "YellowServiceClass_BE",
		1: "YellowServiceClass_AF1",
		2: "YellowServiceClass_AF2",
		3: "YellowServiceClass_AF3",
		4: "YellowServiceClass_AF4",
		5: "YellowServiceClass_EF",
		6: "YellowServiceClass_CS6",
		7: "YellowServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_value = map[string]int32{
		"YellowServiceClass_BE":  0,
		"YellowServiceClass_AF1": 1,
		"YellowServiceClass_AF2": 2,
		"YellowServiceClass_AF3": 3,
		"YellowServiceClass_AF4": 4,
		"YellowServiceClass_EF":  5,
		"YellowServiceClass_CS6": 6,
		"YellowServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[127].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[127]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 5}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor_GREEN  Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor_YELLOW Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor = 1
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor_RED    Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor_name = map[int32]string{
		0: "YellowColor_GREEN",
		1: "YellowColor_YELLOW",
		2: "YellowColor_RED",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor_value = map[string]int32{
		"YellowColor_GREEN":  0,
		"YellowColor_YELLOW": 1,
		"YellowColor_RED":    2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[128].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[128]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 6}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction_PASS    Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction_DISCARD Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction_name = map[int32]string{
		0: "RedAction_PASS",
		2: "RedAction_DISCARD",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction_value = map[string]int32{
		"RedAction_PASS":    0,
		"RedAction_DISCARD": 2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[129].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[129]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 7}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_BE  Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_AF1 Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 1
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_AF2 Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 2
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_AF3 Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 3
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_AF4 Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 4
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_EF  Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 5
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_CS6 Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 6
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_CS7 Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_name = map[int32]string{
		0: "RedServiceClass_BE",
		1: "RedServiceClass_AF1",
		2: "RedServiceClass_AF2",
		3: "RedServiceClass_AF3",
		4: "RedServiceClass_AF4",
		5: "RedServiceClass_EF",
		6: "RedServiceClass_CS6",
		7: "RedServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_value = map[string]int32{
		"RedServiceClass_BE":  0,
		"RedServiceClass_AF1": 1,
		"RedServiceClass_AF2": 2,
		"RedServiceClass_AF3": 3,
		"RedServiceClass_AF4": 4,
		"RedServiceClass_EF":  5,
		"RedServiceClass_CS6": 6,
		"RedServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[130].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[130]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 8}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor_GREEN  Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor_YELLOW Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor = 1
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor_RED    Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor_name = map[int32]string{
		0: "RedColor_GREEN",
		1: "RedColor_YELLOW",
		2: "RedColor_RED",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor_value = map[string]int32{
		"RedColor_GREEN":  0,
		"RedColor_YELLOW": 1,
		"RedColor_RED":    2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[131].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[131]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 9}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_INVALID_ENUM_VALUE_ColorAware Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware_ENABLE             Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ColorAware",
		1: "ColorAware_ENABLE",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware_value = map[string]int32{
		"INVALID_ENUM_VALUE_ColorAware": 0,
		"ColorAware_ENABLE":             1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[132].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[132]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 10}
}

type Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier int32

const (
	Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_NO           Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier = 0
	Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_NONE         Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier = 1
	Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_VID          Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier = 2
	Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_CEX_VID      Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier = 3
	Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_VIDX_CEX_VID Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier.
var (
	Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_name = map[int32]string{
		0: "Identifier_NO",
		1: "Identifier_NONE",
		2: "Identifier_VID",
		3: "Identifier_CEX_VID",
		4: "Identifier_VIDX_CEX_VID",
	}
	Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_value = map[string]int32{
		"Identifier_NO":           0,
		"Identifier_NONE":         1,
		"Identifier_VID":          2,
		"Identifier_CEX_VID":      3,
		"Identifier_VIDX_CEX_VID": 4,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier) Enum() *Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier {
	p := new(Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[133].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[133]
}

func (x Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0, 11}
}

type Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType int32

const (
	Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_INVALID_ENUM_VALUE_PriorityType Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType = 0
	Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType_HIGH               Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType.
var (
	Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PriorityType",
		1: "PriorityType_HIGH",
	}
	Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType_value = map[string]int32{
		"INVALID_ENUM_VALUE_PriorityType": 0,
		"PriorityType_HIGH":               1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType) Enum() *Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType {
	p := new(Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[134].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[134]
}

func (x Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 26, 0}
}

type Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable int32

const (
	Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_INVALID_ENUM_VALUE_Enable Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable = 0
	Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable_ENABLE             Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable.
var (
	Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Enable",
		2: "Enable_ENABLE",
	}
	Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable_value = map[string]int32{
		"INVALID_ENUM_VALUE_Enable": 0,
		"Enable_ENABLE":             2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable) Enum() *Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable {
	p := new(Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[135].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[135]
}

func (x Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 29, 0}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Be int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Be_TRUE Ifm_Interfaces_Interface_Qos_ShareShaping_Be = 0
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Be.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Be_name = map[int32]string{
		0: "Be_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Be_value = map[string]int32{
		"Be_TRUE": 0,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Be) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Be {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Be)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Be) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Be) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[136].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Be) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[136]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Be) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Be.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Be) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 0}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Af1 int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af1 Ifm_Interfaces_Interface_Qos_ShareShaping_Af1 = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af1_TRUE               Ifm_Interfaces_Interface_Qos_ShareShaping_Af1 = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Af1.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af1_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af1",
		1: "Af1_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af1_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af1": 0,
		"Af1_TRUE":               1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af1) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Af1 {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Af1)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af1) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[137].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af1) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[137]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Af1.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af1) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 1}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Af2 int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af2 Ifm_Interfaces_Interface_Qos_ShareShaping_Af2 = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af2_TRUE               Ifm_Interfaces_Interface_Qos_ShareShaping_Af2 = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Af2.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af2_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af2",
		2: "Af2_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af2_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af2": 0,
		"Af2_TRUE":               2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af2) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Af2 {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Af2)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af2) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[138].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af2) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[138]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Af2.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af2) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 2}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Af3 int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af3 Ifm_Interfaces_Interface_Qos_ShareShaping_Af3 = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af3_TRUE               Ifm_Interfaces_Interface_Qos_ShareShaping_Af3 = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Af3.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af3_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af3",
		3: "Af3_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af3_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af3": 0,
		"Af3_TRUE":               3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af3) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Af3 {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Af3)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af3) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[139].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af3) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[139]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Af3.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af3) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 3}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Af4 int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af4 Ifm_Interfaces_Interface_Qos_ShareShaping_Af4 = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af4_TRUE               Ifm_Interfaces_Interface_Qos_ShareShaping_Af4 = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Af4.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af4_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af4",
		4: "Af4_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Af4_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af4": 0,
		"Af4_TRUE":               4,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af4) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Af4 {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Af4)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af4) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[140].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af4) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[140]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Af4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Af4.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Af4) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 4}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Ef int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Ef Ifm_Interfaces_Interface_Qos_ShareShaping_Ef = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_Ef_TRUE               Ifm_Interfaces_Interface_Qos_ShareShaping_Ef = 5
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Ef.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Ef_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ef",
		5: "Ef_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Ef_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ef": 0,
		"Ef_TRUE":               5,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Ef) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Ef {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Ef)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Ef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Ef) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[141].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Ef) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[141]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Ef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Ef.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Ef) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 5}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6 int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Cs6 Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6 = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6_TRUE               Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6 = 6
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs6",
		6: "Cs6_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs6": 0,
		"Cs6_TRUE":               6,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6 {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[142].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[142]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 6}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7 int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Cs7 Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7 = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7_TRUE               Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7 = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs7",
		7: "Cs7_TRUE",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs7": 0,
		"Cs7_TRUE":               7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7 {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[143].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[143]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 7}
}

type Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode int32

const (
	Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode_PQ  Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode = 0
	Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode_WFQ Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode = 1
	Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode_LPQ Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode.
var (
	Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode_name = map[int32]string{
		0: "QueueScheduleMode_PQ",
		1: "QueueScheduleMode_WFQ",
		2: "QueueScheduleMode_LPQ",
	}
	Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode_value = map[string]int32{
		"QueueScheduleMode_PQ":  0,
		"QueueScheduleMode_WFQ": 1,
		"QueueScheduleMode_LPQ": 2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode) Enum() *Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode {
	p := new(Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[144].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[144]
}

func (x Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31, 8}
}

type Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction = 0
	Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction_OUTBOUND           Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction.
var (
	Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction) Enum() *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[145].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[145]
}

func (x Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 32, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction = 0
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction.
var (
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction) Enum() *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[146].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[146]
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 33, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType int32

const (
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_NONE        Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType = 0
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_VLANX_ID    Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType = 1
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_PEX_VID     Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType = 2
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_CEX_VID     Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType = 3
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_PEX_CEX_VID Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType.
var (
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_name = map[int32]string{
		0: "IdentifierType_NONE",
		1: "IdentifierType_VLANX_ID",
		2: "IdentifierType_PEX_VID",
		3: "IdentifierType_CEX_VID",
		4: "IdentifierType_PEX_CEX_VID",
	}
	Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_value = map[string]int32{
		"IdentifierType_NONE":        0,
		"IdentifierType_VLANX_ID":    1,
		"IdentifierType_PEX_VID":     2,
		"IdentifierType_CEX_VID":     3,
		"IdentifierType_PEX_CEX_VID": 4,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType) Enum() *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType {
	p := new(Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[147].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[147]
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 33, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType int32

const (
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_INVALID_ENUM_VALUE_UserAccessType   Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType = 0
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType_LEASEDX_LINEX_ACCESS Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType = 10
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType_SUBSCRIBERX_ACCESS   Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType = 13
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType.
var (
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_UserAccessType",
		10: "UserAccessType_LEASEDX_LINEX_ACCESS",
		13: "UserAccessType_SUBSCRIBERX_ACCESS",
	}
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType_value = map[string]int32{
		"INVALID_ENUM_VALUE_UserAccessType":   0,
		"UserAccessType_LEASEDX_LINEX_ACCESS": 10,
		"UserAccessType_SUBSCRIBERX_ACCESS":   13,
	}
)

func (x Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType) Enum() *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType {
	p := new(Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[148].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[148]
}

func (x Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 34, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction = 0
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction.
var (
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction) Enum() *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[149].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[149]
}

func (x Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 34, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction = 0
	Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction_OUTBOUND           Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction.
var (
	Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction) Enum() *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[150].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[150]
}

func (x Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 35, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction = 0
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction.
var (
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction) Enum() *Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[151].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[151]
}

func (x Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 37, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId int32

const (
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId_POOLX_0 Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId = 0
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId_POOLX_1 Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId.
var (
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId_name = map[int32]string{
		0: "PoolId_POOLX_0",
		1: "PoolId_POOLX_1",
	}
	Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId_value = map[string]int32{
		"PoolId_POOLX_0": 0,
		"PoolId_POOLX_1": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId) Enum() *Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId {
	p := new(Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[152].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[152]
}

func (x Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 37, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction = 0
	Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction.
var (
	Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction) Enum() *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[153].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[153]
}

func (x Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 38, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType int32

const (
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_INVALID_ENUM_VALUE_MemberLinkSchedulerType Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 0
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_TRAFFICX_CAR       Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 1
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_QOSX_CAR           Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 2
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_PORTX_SHAPING      Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 3
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_HARDX_PIPE         Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 4
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_USERX_QUEUE        Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 5
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_PROFILEX_CAR       Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 7
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_HQOSX_OUTBOUND     Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 8
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_MPLSX_TE           Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType = 9
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType.
var (
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_MemberLinkSchedulerType",
		1: "MemberLinkSchedulerType_TRAFFICX_CAR",
		2: "MemberLinkSchedulerType_QOSX_CAR",
		3: "MemberLinkSchedulerType_PORTX_SHAPING",
		4: "MemberLinkSchedulerType_HARDX_PIPE",
		5: "MemberLinkSchedulerType_USERX_QUEUE",
		7: "MemberLinkSchedulerType_PROFILEX_CAR",
		8: "MemberLinkSchedulerType_HQOSX_OUTBOUND",
		9: "MemberLinkSchedulerType_MPLSX_TE",
	}
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType_value = map[string]int32{
		"INVALID_ENUM_VALUE_MemberLinkSchedulerType": 0,
		"MemberLinkSchedulerType_TRAFFICX_CAR":       1,
		"MemberLinkSchedulerType_QOSX_CAR":           2,
		"MemberLinkSchedulerType_PORTX_SHAPING":      3,
		"MemberLinkSchedulerType_HARDX_PIPE":         4,
		"MemberLinkSchedulerType_USERX_QUEUE":        5,
		"MemberLinkSchedulerType_PROFILEX_CAR":       7,
		"MemberLinkSchedulerType_HQOSX_OUTBOUND":     8,
		"MemberLinkSchedulerType_MPLSX_TE":           9,
	}
)

func (x Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType) Enum() *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType {
	p := new(Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[154].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[154]
}

func (x Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 40, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction = 0
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction_OUTBOUND           Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction.
var (
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction) Enum() *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[155].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[155]
}

func (x Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 40, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType int32

const (
	Ifm_Interfaces_Interface_Qos_LdpTraffic_INVALID_ENUM_VALUE_TrafficType Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType = 0
	Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType_LDPX_TRAFFIC       Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType.
var (
	Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_TrafficType",
		1: "TrafficType_LDPX_TRAFFIC",
	}
	Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType_value = map[string]int32{
		"INVALID_ENUM_VALUE_TrafficType": 0,
		"TrafficType_LDPX_TRAFFIC":       1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType) Enum() *Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType {
	p := new(Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[156].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[156]
}

func (x Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 42, 0}
}

type Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode int32

const (
	Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode_NORMAL Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode = 0
	Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode_LARGE  Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode.
var (
	Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode_name = map[int32]string{
		0: "BufferMode_NORMAL",
		1: "BufferMode_LARGE",
	}
	Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode_value = map[string]int32{
		"BufferMode_NORMAL": 0,
		"BufferMode_LARGE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode) Enum() *Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode {
	p := new(Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[157].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[157]
}

func (x Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 43, 0}
}

type Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode int32

const (
	Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode_SHAREX_MODE     Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode = 0
	Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode_EXCLUSIVEX_MODE Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode.
var (
	Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode_name = map[int32]string{
		0: "Mode_SHAREX_MODE",
		1: "Mode_EXCLUSIVEX_MODE",
	}
	Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode_value = map[string]int32{
		"Mode_SHAREX_MODE":     0,
		"Mode_EXCLUSIVEX_MODE": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode) Enum() *Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode {
	p := new(Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[158].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[158]
}

func (x Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 44, 0}
}

type Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction = 0
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction.
var (
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction) Enum() *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[159].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[159]
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 46, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan int32

const (
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan_NO  Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan = 0
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan_YES Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan.
var (
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan_name = map[int32]string{
		0: "EachVlan_NO",
		1: "EachVlan_YES",
	}
	Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan_value = map[string]int32{
		"EachVlan_NO":  0,
		"EachVlan_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan) Enum() *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan {
	p := new(Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[160].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[160]
}

func (x Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 46, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[161].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[161]
}

func (x Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 47, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[162].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[162]
}

func (x Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 48, 0}
}

type Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type int32

const (
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type_IPX_DSCP Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type = 0
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type_X_8021P  Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type.
var (
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type_name = map[int32]string{
		0: "Type_IPX_DSCP",
		1: "Type_X_8021P",
	}
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type_value = map[string]int32{
		"Type_IPX_DSCP": 0,
		"Type_X_8021P":  1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type) Enum() *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type {
	p := new(Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[163].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[163]
}

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 49, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction = 0
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction_INBOUND            Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction.
var (
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_INBOUND",
	}
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INBOUND":            1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction) Enum() *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[164].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[164]
}

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 49, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P int32

const (
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_INVALID_ENUM_VALUE_Type8021P Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P = 0
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P_X_8021P            Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P = 1
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P_OUTERX_8021P       Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P = 2
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P_INNERX_8021P       Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P.
var (
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type8021P",
		1: "Type8021P_X_8021P",
		2: "Type8021P_OUTERX_8021P",
		3: "Type8021P_INNERX_8021P",
	}
	Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type8021P": 0,
		"Type8021P_X_8021P":            1,
		"Type8021P_OUTERX_8021P":       2,
		"Type8021P_INNERX_8021P":       3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P) Enum() *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P {
	p := new(Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[165].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[165]
}

func (x Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 49, 0, 2}
}

type Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit int32

const (
	Ifm_Interfaces_Interface_Qos_DeficitUnit_INVALID_ENUM_VALUE_Unit Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit = 0
	Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit_X_1K               Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit = 4
	Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit_X_2K               Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit = 5
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit.
var (
	Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Unit",
		4: "Unit_X_1K",
		5: "Unit_X_2K",
	}
	Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit_value = map[string]int32{
		"INVALID_ENUM_VALUE_Unit": 0,
		"Unit_X_1K":               4,
		"Unit_X_2K":               5,
	}
)

func (x Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit) Enum() *Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit {
	p := new(Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[166].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[166]
}

func (x Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 52, 0}
}

type Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_DefaultUserQueue_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction = 0
	Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction_OUTBOUND           Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction.
var (
	Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction) Enum() *Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[167].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[167]
}

func (x Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 53, 0}
}

type Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction_INBOUND  Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction = 0
	Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction_OUTBOUND Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction.
var (
	Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction) Enum() *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[168].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[168]
}

func (x Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 54, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode int32

const (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_INVALID_ENUM_VALUE_PipeMode Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode = 0
	Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode_PIPE               Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode = 1
	Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode_SHORTPIPE          Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode = 2
	Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode_UNIFORM            Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode.
var (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PipeMode",
		1: "PipeMode_PIPE",
		2: "PipeMode_SHORTPIPE",
		3: "PipeMode_UNIFORM",
	}
	Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_PipeMode": 0,
		"PipeMode_PIPE":               1,
		"PipeMode_SHORTPIPE":          2,
		"PipeMode_UNIFORM":            3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode) Enum() *Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode {
	p := new(Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[169].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[169]
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 55, 0}
}

type Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode int32

const (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_INVALID_ENUM_VALUE_IngressPipeMode Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode = 0
	Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode_PIPE               Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode = 1
	Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode_SHORTPIPE          Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode = 2
	Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode_UNIFORM            Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode.
var (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_IngressPipeMode",
		1: "IngressPipeMode_PIPE",
		2: "IngressPipeMode_SHORTPIPE",
		3: "IngressPipeMode_UNIFORM",
	}
	Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_IngressPipeMode": 0,
		"IngressPipeMode_PIPE":               1,
		"IngressPipeMode_SHORTPIPE":          2,
		"IngressPipeMode_UNIFORM":            3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode) Enum() *Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode {
	p := new(Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[170].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[170]
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 55, 1}
}

type Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode int32

const (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_INVALID_ENUM_VALUE_EgressPipeMode Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode = 0
	Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode_PIPE               Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode = 1
	Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode_SHORTPIPE          Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode = 2
	Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode_UNIFORM            Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode.
var (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_EgressPipeMode",
		1: "EgressPipeMode_PIPE",
		2: "EgressPipeMode_SHORTPIPE",
		3: "EgressPipeMode_UNIFORM",
	}
	Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_EgressPipeMode": 0,
		"EgressPipeMode_PIPE":               1,
		"EgressPipeMode_SHORTPIPE":          2,
		"EgressPipeMode_UNIFORM":            3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode) Enum() *Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode {
	p := new(Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[171].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[171]
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 55, 2}
}

type Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass int32

const (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_BE  Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 0
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_AF1 Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 1
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_AF2 Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 2
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_AF3 Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 3
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_AF4 Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 4
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_EF  Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 5
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_CS6 Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 6
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_CS7 Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass.
var (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass) Enum() *Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass {
	p := new(Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[172].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[172]
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 55, 3}
}

type Ifm_Interfaces_Interface_Qos_QosVllPipe_Color int32

const (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_Color_GREEN  Ifm_Interfaces_Interface_Qos_QosVllPipe_Color = 0
	Ifm_Interfaces_Interface_Qos_QosVllPipe_Color_YELLOW Ifm_Interfaces_Interface_Qos_QosVllPipe_Color = 1
	Ifm_Interfaces_Interface_Qos_QosVllPipe_Color_RED    Ifm_Interfaces_Interface_Qos_QosVllPipe_Color = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosVllPipe_Color.
var (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Ifm_Interfaces_Interface_Qos_QosVllPipe_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_Color) Enum() *Ifm_Interfaces_Interface_Qos_QosVllPipe_Color {
	p := new(Ifm_Interfaces_Interface_Qos_QosVllPipe_Color)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[173].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[173]
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosVllPipe_Color.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosVllPipe_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 55, 4}
}

type Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType int32

const (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType_OUTPRI Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType = 0
	Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType_INPRI  Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType = 1
	Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType_IPDSCP Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType.
var (
	Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType_name = map[int32]string{
		0: "TrustType_OUTPRI",
		1: "TrustType_INPRI",
		2: "TrustType_IPDSCP",
	}
	Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType_value = map[string]int32{
		"TrustType_OUTPRI": 0,
		"TrustType_INPRI":  1,
		"TrustType_IPDSCP": 2,
	}
)

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType) Enum() *Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType {
	p := new(Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[174].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[174]
}

func (x Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 55, 5}
}

type Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode int32

const (
	Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode_SOURCE      Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode = 0
	Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode_DESTINATION Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode.
var (
	Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode_name = map[int32]string{
		0: "Mode_SOURCE",
		1: "Mode_DESTINATION",
	}
	Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode_value = map[string]int32{
		"Mode_SOURCE":      0,
		"Mode_DESTINATION": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode) Enum() *Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode {
	p := new(Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[175].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[175]
}

func (x Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 56, 0}
}

type Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction int32

const (
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_INVALID_ENUM_VALUE_Direction Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction = 0
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction_INBOUND            Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction = 2
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction_OUTBOUND           Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction.
var (
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		2: "Direction_INBOUND",
		3: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INBOUND":            2,
		"Direction_OUTBOUND":           3,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction) Enum() *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction {
	p := new(Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[176].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[176]
}

func (x Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 57, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode int32

const (
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode_SOURCE      Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode = 0
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode_DESTINATION Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode.
var (
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode_name = map[int32]string{
		0: "Mode_SOURCE",
		1: "Mode_DESTINATION",
	}
	Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode_value = map[string]int32{
		"Mode_SOURCE":      0,
		"Mode_DESTINATION": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode) Enum() *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode {
	p := new(Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[177].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[177]
}

func (x Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 57, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode int32

const (
	Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode_SOURCE      Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode = 0
	Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode_DESTINATION Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode.
var (
	Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode_name = map[int32]string{
		0: "Mode_SOURCE",
		1: "Mode_DESTINATION",
	}
	Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode_value = map[string]int32{
		"Mode_SOURCE":      0,
		"Mode_DESTINATION": 1,
	}
)

func (x Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode) Enum() *Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode {
	p := new(Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[178].Descriptor()
}

func (Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[178]
}

func (x Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 57, 1, 0}
}

type Ifm_Interfaces_Interface_ArpSending_Type int32

const (
	Ifm_Interfaces_Interface_ArpSending_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_ArpSending_Type = 0
	Ifm_Interfaces_Interface_ArpSending_Type_DUALX_SEND         Ifm_Interfaces_Interface_ArpSending_Type = 1
	Ifm_Interfaces_Interface_ArpSending_Type_SINGLEX_SEND       Ifm_Interfaces_Interface_ArpSending_Type = 2
)

// Enum value maps for Ifm_Interfaces_Interface_ArpSending_Type.
var (
	Ifm_Interfaces_Interface_ArpSending_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_DUALX_SEND",
		2: "Type_SINGLEX_SEND",
	}
	Ifm_Interfaces_Interface_ArpSending_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_DUALX_SEND":         1,
		"Type_SINGLEX_SEND":       2,
	}
)

func (x Ifm_Interfaces_Interface_ArpSending_Type) Enum() *Ifm_Interfaces_Interface_ArpSending_Type {
	p := new(Ifm_Interfaces_Interface_ArpSending_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpSending_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpSending_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[179].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpSending_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[179]
}

func (x Ifm_Interfaces_Interface_ArpSending_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpSending_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpSending_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0}
}

type Ifm_Interfaces_Interface_NdSending_Type int32

const (
	Ifm_Interfaces_Interface_NdSending_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_NdSending_Type = 0
	Ifm_Interfaces_Interface_NdSending_Type_DUALX_SEND         Ifm_Interfaces_Interface_NdSending_Type = 1
)

// Enum value maps for Ifm_Interfaces_Interface_NdSending_Type.
var (
	Ifm_Interfaces_Interface_NdSending_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_DUALX_SEND",
	}
	Ifm_Interfaces_Interface_NdSending_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_DUALX_SEND":         1,
	}
)

func (x Ifm_Interfaces_Interface_NdSending_Type) Enum() *Ifm_Interfaces_Interface_NdSending_Type {
	p := new(Ifm_Interfaces_Interface_NdSending_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_NdSending_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_NdSending_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[180].Descriptor()
}

func (Ifm_Interfaces_Interface_NdSending_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[180]
}

func (x Ifm_Interfaces_Interface_NdSending_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NdSending_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_NdSending_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 21, 0}
}

type Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode int32

const (
	Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode_USERX_MODE       Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode = 0
	Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode_FLOWX_MODE       Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode = 1
	Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode_REALX_FLOWX_MODE Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode.
var (
	Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode_name = map[int32]string{
		0: "Mode_USERX_MODE",
		1: "Mode_FLOWX_MODE",
		2: "Mode_REALX_FLOWX_MODE",
	}
	Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode_value = map[string]int32{
		"Mode_USERX_MODE":       0,
		"Mode_FLOWX_MODE":       1,
		"Mode_REALX_FLOWX_MODE": 2,
	}
)

func (x Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode) Enum() *Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode {
	p := new(Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[181].Descriptor()
}

func (Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[181]
}

func (x Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 0, 0}
}

type Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority int32

const (
	Ifm_Interfaces_Interface_PppoeVt_INVALID_ENUM_VALUE_AuthenModePriority Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority = 0
	Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority_PAP                Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority = 1
	Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority_CHAP               Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority = 2
	Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority_MSCHAPV1           Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority = 3
	Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority_MSCHAPV2           Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority = 4
)

// Enum value maps for Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority.
var (
	Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AuthenModePriority",
		1: "AuthenModePriority_PAP",
		2: "AuthenModePriority_CHAP",
		3: "AuthenModePriority_MSCHAPV1",
		4: "AuthenModePriority_MSCHAPV2",
	}
	Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority_value = map[string]int32{
		"INVALID_ENUM_VALUE_AuthenModePriority": 0,
		"AuthenModePriority_PAP":                1,
		"AuthenModePriority_CHAP":               2,
		"AuthenModePriority_MSCHAPV1":           3,
		"AuthenModePriority_MSCHAPV2":           4,
	}
)

func (x Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority) Enum() *Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority {
	p := new(Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[182].Descriptor()
}

func (Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[182]
}

func (x Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority.Descriptor instead.
func (Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 27, 0}
}

type Ifm_Interfaces_Interface_PppoeVt_PadnSend int32

const (
	Ifm_Interfaces_Interface_PppoeVt_INVALID_ENUM_VALUE_PadnSend Ifm_Interfaces_Interface_PppoeVt_PadnSend = 0
	Ifm_Interfaces_Interface_PppoeVt_PadnSend_IPCP               Ifm_Interfaces_Interface_PppoeVt_PadnSend = 1
	Ifm_Interfaces_Interface_PppoeVt_PadnSend_IPV6CP             Ifm_Interfaces_Interface_PppoeVt_PadnSend = 2
	Ifm_Interfaces_Interface_PppoeVt_PadnSend_FIRSTNCP           Ifm_Interfaces_Interface_PppoeVt_PadnSend = 3
	Ifm_Interfaces_Interface_PppoeVt_PadnSend_LASTNCP            Ifm_Interfaces_Interface_PppoeVt_PadnSend = 4
	Ifm_Interfaces_Interface_PppoeVt_PadnSend_ALLNCP             Ifm_Interfaces_Interface_PppoeVt_PadnSend = 5
)

// Enum value maps for Ifm_Interfaces_Interface_PppoeVt_PadnSend.
var (
	Ifm_Interfaces_Interface_PppoeVt_PadnSend_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PadnSend",
		1: "PadnSend_IPCP",
		2: "PadnSend_IPV6CP",
		3: "PadnSend_FIRSTNCP",
		4: "PadnSend_LASTNCP",
		5: "PadnSend_ALLNCP",
	}
	Ifm_Interfaces_Interface_PppoeVt_PadnSend_value = map[string]int32{
		"INVALID_ENUM_VALUE_PadnSend": 0,
		"PadnSend_IPCP":               1,
		"PadnSend_IPV6CP":             2,
		"PadnSend_FIRSTNCP":           3,
		"PadnSend_LASTNCP":            4,
		"PadnSend_ALLNCP":             5,
	}
)

func (x Ifm_Interfaces_Interface_PppoeVt_PadnSend) Enum() *Ifm_Interfaces_Interface_PppoeVt_PadnSend {
	p := new(Ifm_Interfaces_Interface_PppoeVt_PadnSend)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PppoeVt_PadnSend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PppoeVt_PadnSend) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[183].Descriptor()
}

func (Ifm_Interfaces_Interface_PppoeVt_PadnSend) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[183]
}

func (x Ifm_Interfaces_Interface_PppoeVt_PadnSend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PppoeVt_PadnSend.Descriptor instead.
func (Ifm_Interfaces_Interface_PppoeVt_PadnSend) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 27, 1}
}

type Ifm_Interfaces_Interface_PppoeVt_PadmSend int32

const (
	Ifm_Interfaces_Interface_PppoeVt_INVALID_ENUM_VALUE_PadmSend Ifm_Interfaces_Interface_PppoeVt_PadmSend = 0
	Ifm_Interfaces_Interface_PppoeVt_PadmSend_IPCP               Ifm_Interfaces_Interface_PppoeVt_PadmSend = 1
	Ifm_Interfaces_Interface_PppoeVt_PadmSend_IPV6CP             Ifm_Interfaces_Interface_PppoeVt_PadmSend = 2
	Ifm_Interfaces_Interface_PppoeVt_PadmSend_FIRSTNCP           Ifm_Interfaces_Interface_PppoeVt_PadmSend = 3
	Ifm_Interfaces_Interface_PppoeVt_PadmSend_LASTNCP            Ifm_Interfaces_Interface_PppoeVt_PadmSend = 4
	Ifm_Interfaces_Interface_PppoeVt_PadmSend_ALLNCP             Ifm_Interfaces_Interface_PppoeVt_PadmSend = 5
)

// Enum value maps for Ifm_Interfaces_Interface_PppoeVt_PadmSend.
var (
	Ifm_Interfaces_Interface_PppoeVt_PadmSend_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PadmSend",
		1: "PadmSend_IPCP",
		2: "PadmSend_IPV6CP",
		3: "PadmSend_FIRSTNCP",
		4: "PadmSend_LASTNCP",
		5: "PadmSend_ALLNCP",
	}
	Ifm_Interfaces_Interface_PppoeVt_PadmSend_value = map[string]int32{
		"INVALID_ENUM_VALUE_PadmSend": 0,
		"PadmSend_IPCP":               1,
		"PadmSend_IPV6CP":             2,
		"PadmSend_FIRSTNCP":           3,
		"PadmSend_LASTNCP":            4,
		"PadmSend_ALLNCP":             5,
	}
)

func (x Ifm_Interfaces_Interface_PppoeVt_PadmSend) Enum() *Ifm_Interfaces_Interface_PppoeVt_PadmSend {
	p := new(Ifm_Interfaces_Interface_PppoeVt_PadmSend)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PppoeVt_PadmSend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PppoeVt_PadmSend) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[184].Descriptor()
}

func (Ifm_Interfaces_Interface_PppoeVt_PadmSend) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[184]
}

func (x Ifm_Interfaces_Interface_PppoeVt_PadmSend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PppoeVt_PadmSend.Descriptor instead.
func (Ifm_Interfaces_Interface_PppoeVt_PadmSend) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 27, 2}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PortState int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_SLAVE        Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_UNCALIBRATED Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 1
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_PASSIVE      Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 2
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_MASTER       Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 3
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_PREMASTER    Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 4
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_LISTENING    Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 5
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_FAULTY       Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 6
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_DISABLED     Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 7
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_INITIALIZING Ifm_Interfaces_Interface_PtpPortSrcs_PortState = 8
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PortState.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_name = map[int32]string{
		0: "PortState_SLAVE",
		1: "PortState_UNCALIBRATED",
		2: "PortState_PASSIVE",
		3: "PortState_MASTER",
		4: "PortState_PREMASTER",
		5: "PortState_LISTENING",
		6: "PortState_FAULTY",
		7: "PortState_DISABLED",
		8: "PortState_INITIALIZING",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PortState_value = map[string]int32{
		"PortState_SLAVE":        0,
		"PortState_UNCALIBRATED": 1,
		"PortState_PASSIVE":      2,
		"PortState_MASTER":       3,
		"PortState_PREMASTER":    4,
		"PortState_LISTENING":    5,
		"PortState_FAULTY":       6,
		"PortState_DISABLED":     7,
		"PortState_INITIALIZING": 8,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PortState) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PortState {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PortState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PortState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PortState) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[185].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PortState) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[185]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PortState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PortState.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PortState) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_NONE  Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_OC    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet = 1
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_BC    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet = 2
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_TC    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet = 3
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_TCOC  Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet = 4
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_TX_BC Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet = 5
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_TX_TC Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet = 6
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_name = map[int32]string{
		0: "PortTypeSet_NONE",
		1: "PortTypeSet_OC",
		2: "PortTypeSet_BC",
		3: "PortTypeSet_TC",
		4: "PortTypeSet_TCOC",
		5: "PortTypeSet_TX_BC",
		6: "PortTypeSet_TX_TC",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_value = map[string]int32{
		"PortTypeSet_NONE":  0,
		"PortTypeSet_OC":    1,
		"PortTypeSet_BC":    2,
		"PortTypeSet_TC":    3,
		"PortTypeSet_TCOC":  4,
		"PortTypeSet_TX_BC": 5,
		"PortTypeSet_TX_TC": 6,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[186].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[186]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0, 0}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_NONE  Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_OC    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType = 1
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_BC    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType = 2
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_TC    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType = 3
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_TCOC  Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType = 4
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_TX_BC Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType = 5
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_TX_TC Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType = 6
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_name = map[int32]string{
		0: "PortType_NONE",
		1: "PortType_OC",
		2: "PortType_BC",
		3: "PortType_TC",
		4: "PortType_TCOC",
		5: "PortType_TX_BC",
		6: "PortType_TX_TC",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_value = map[string]int32{
		"PortType_NONE":  0,
		"PortType_OC":    1,
		"PortType_BC":    2,
		"PortType_TC":    3,
		"PortType_TCOC":  4,
		"PortType_TX_BC": 5,
		"PortType_TX_TC": 6,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[187].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[187]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0, 1}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism_DELAY  Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism_PDELAY Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism = 1
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism_name = map[int32]string{
		0: "DelayMechanism_DELAY",
		1: "DelayMechanism_PDELAY",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism_value = map[string]int32{
		"DelayMechanism_DELAY":  0,
		"DelayMechanism_PDELAY": 1,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[188].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[188]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0, 2}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_SLAVE        Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_UNCALIBRATED Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 1
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_PASSIVE      Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 2
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_MASTER       Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 3
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_PREMASTER    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 4
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_LISTENING    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 5
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_FAULTY       Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 6
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_DISABLED     Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 7
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_INITIALIZING Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState = 8
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_name = map[int32]string{
		0: "PortCfgState_SLAVE",
		1: "PortCfgState_UNCALIBRATED",
		2: "PortCfgState_PASSIVE",
		3: "PortCfgState_MASTER",
		4: "PortCfgState_PREMASTER",
		5: "PortCfgState_LISTENING",
		6: "PortCfgState_FAULTY",
		7: "PortCfgState_DISABLED",
		8: "PortCfgState_INITIALIZING",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_value = map[string]int32{
		"PortCfgState_SLAVE":        0,
		"PortCfgState_UNCALIBRATED": 1,
		"PortCfgState_PASSIVE":      2,
		"PortCfgState_MASTER":       3,
		"PortCfgState_PREMASTER":    4,
		"PortCfgState_LISTENING":    5,
		"PortCfgState_FAULTY":       6,
		"PortCfgState_DISABLED":     7,
		"PortCfgState_INITIALIZING": 8,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[189].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[189]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0, 3}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep_ONESTEP Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep_TWOSTEP Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep = 1
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep_name = map[int32]string{
		0: "ClkStep_ONESTEP",
		1: "ClkStep_TWOSTEP",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep_value = map[string]int32{
		"ClkStep_ONESTEP": 0,
		"ClkStep_TWOSTEP": 1,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[190].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[190]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0, 4}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType_MAC  Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType_UDP  Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType = 1
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType_NONE Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType_name = map[int32]string{
		0: "PktPackType_MAC",
		1: "PktPackType_UDP",
		2: "PktPackType_NONE",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType_value = map[string]int32{
		"PktPackType_MAC":  0,
		"PktPackType_UDP":  1,
		"PktPackType_NONE": 2,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[191].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[191]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 1, 0}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag_NEGATIVE Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag_POSITIVE Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag_name = map[int32]string{
		0: "CorrectionFlag_NEGATIVE",
		1: "CorrectionFlag_POSITIVE",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag_value = map[string]int32{
		"CorrectionFlag_NEGATIVE": 0,
		"CorrectionFlag_POSITIVE": 1,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[192].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[192]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 4, 0}
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag int32

const (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag_NEGATIVE Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag = 0
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag_POSITIVE Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag.
var (
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag_name = map[int32]string{
		0: "ChangeValueFlag_NEGATIVE",
		1: "ChangeValueFlag_POSITIVE",
	}
	Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag_value = map[string]int32{
		"ChangeValueFlag_NEGATIVE": 0,
		"ChangeValueFlag_POSITIVE": 1,
	}
)

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag) Enum() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag {
	p := new(Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[193].Descriptor()
}

func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[193]
}

func (x Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 6, 0}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri1 Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1_GPS                Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1_GLONASS            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 = 2
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1_BEIDOU             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 = 3
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1_GPSX_GLONASS       Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 = 4
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1_GPSX_BEIDOU        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 = 5
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GnssModelPri1",
		1: "GnssModelPri1_GPS",
		2: "GnssModelPri1_GLONASS",
		3: "GnssModelPri1_BEIDOU",
		4: "GnssModelPri1_GPSX_GLONASS",
		5: "GnssModelPri1_GPSX_BEIDOU",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1_value = map[string]int32{
		"INVALID_ENUM_VALUE_GnssModelPri1": 0,
		"GnssModelPri1_GPS":                1,
		"GnssModelPri1_GLONASS":            2,
		"GnssModelPri1_BEIDOU":             3,
		"GnssModelPri1_GPSX_GLONASS":       4,
		"GnssModelPri1_GPSX_BEIDOU":        5,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[194].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[194]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 0}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri2 Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2_GPS                Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2_GLONASS            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 = 2
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2_BEIDOU             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 = 3
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2_GPSX_GLONASS       Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 = 4
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2_GPSX_BEIDOU        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 = 5
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GnssModelPri2",
		1: "GnssModelPri2_GPS",
		2: "GnssModelPri2_GLONASS",
		3: "GnssModelPri2_BEIDOU",
		4: "GnssModelPri2_GPSX_GLONASS",
		5: "GnssModelPri2_GPSX_BEIDOU",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2_value = map[string]int32{
		"INVALID_ENUM_VALUE_GnssModelPri2": 0,
		"GnssModelPri2_GPS":                1,
		"GnssModelPri2_GLONASS":            2,
		"GnssModelPri2_BEIDOU":             3,
		"GnssModelPri2_GPSX_GLONASS":       4,
		"GnssModelPri2_GPSX_BEIDOU":        5,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[195].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[195]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 1}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri3 Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3_GPS                Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3_GLONASS            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 = 2
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3_BEIDOU             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 = 3
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3_GPSX_GLONASS       Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 = 4
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3_GPSX_BEIDOU        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 = 5
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GnssModelPri3",
		1: "GnssModelPri3_GPS",
		2: "GnssModelPri3_GLONASS",
		3: "GnssModelPri3_BEIDOU",
		4: "GnssModelPri3_GPSX_GLONASS",
		5: "GnssModelPri3_GPSX_BEIDOU",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3_value = map[string]int32{
		"INVALID_ENUM_VALUE_GnssModelPri3": 0,
		"GnssModelPri3_GPS":                1,
		"GnssModelPri3_GLONASS":            2,
		"GnssModelPri3_BEIDOU":             3,
		"GnssModelPri3_GPSX_GLONASS":       4,
		"GnssModelPri3_GPSX_BEIDOU":        5,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[196].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[196]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 2}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri4 Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4_GPS                Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4_GLONASS            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 = 2
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4_BEIDOU             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 = 3
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4_GPSX_GLONASS       Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 = 4
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4_GPSX_BEIDOU        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 = 5
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GnssModelPri4",
		1: "GnssModelPri4_GPS",
		2: "GnssModelPri4_GLONASS",
		3: "GnssModelPri4_BEIDOU",
		4: "GnssModelPri4_GPSX_GLONASS",
		5: "GnssModelPri4_GPSX_BEIDOU",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4_value = map[string]int32{
		"INVALID_ENUM_VALUE_GnssModelPri4": 0,
		"GnssModelPri4_GPS":                1,
		"GnssModelPri4_GLONASS":            2,
		"GnssModelPri4_BEIDOU":             3,
		"GnssModelPri4_GPSX_GLONASS":       4,
		"GnssModelPri4_GPSX_BEIDOU":        5,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[197].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[197]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 3}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri5 Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5_GPS                Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5_GLONASS            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 = 2
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5_BEIDOU             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 = 3
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5_GPSX_GLONASS       Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 = 4
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5_GPSX_BEIDOU        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 = 5
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GnssModelPri5",
		1: "GnssModelPri5_GPS",
		2: "GnssModelPri5_GLONASS",
		3: "GnssModelPri5_BEIDOU",
		4: "GnssModelPri5_GPSX_GLONASS",
		5: "GnssModelPri5_GPSX_BEIDOU",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5_value = map[string]int32{
		"INVALID_ENUM_VALUE_GnssModelPri5": 0,
		"GnssModelPri5_GPS":                1,
		"GnssModelPri5_GLONASS":            2,
		"GnssModelPri5_BEIDOU":             3,
		"GnssModelPri5_GPSX_GLONASS":       4,
		"GnssModelPri5_GPSX_BEIDOU":        5,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[198].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[198]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 4}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode_POSITION Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode_HOLD     Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode_AUTO     Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode_name = map[int32]string{
		0: "GpsWorkMode_POSITION",
		1: "GpsWorkMode_HOLD",
		2: "GpsWorkMode_AUTO",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode_value = map[string]int32{
		"GpsWorkMode_POSITION": 0,
		"GpsWorkMode_HOLD":     1,
		"GpsWorkMode_AUTO":     2,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[199].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[199]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 1, 0}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus_NOFIXSTATUS Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus_FIXSTATUS   Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus_HOLDSTATUS  Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus = 2
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus_name = map[int32]string{
		0: "GpsFixStatus_NOFIXSTATUS",
		1: "GpsFixStatus_FIXSTATUS",
		2: "GpsFixStatus_HOLDSTATUS",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus_value = map[string]int32{
		"GpsFixStatus_NOFIXSTATUS": 0,
		"GpsFixStatus_FIXSTATUS":   1,
		"GpsFixStatus_HOLDSTATUS":  2,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[200].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[200]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 1, 1}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_INVALID_ENUM_VALUE_GnssModel Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel_GPS                Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel = 1
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel_GLONASS            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel = 2
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel_BEIDOU             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel = 3
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel_GPSX_GLONASS       Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel = 4
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel_GPSX_BEIDOU        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel = 5
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GnssModel",
		1: "GnssModel_GPS",
		2: "GnssModel_GLONASS",
		3: "GnssModel_BEIDOU",
		4: "GnssModel_GPSX_GLONASS",
		5: "GnssModel_GPSX_BEIDOU",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel_value = map[string]int32{
		"INVALID_ENUM_VALUE_GnssModel": 0,
		"GnssModel_GPS":                1,
		"GnssModel_GLONASS":            2,
		"GnssModel_BEIDOU":             3,
		"GnssModel_GPSX_GLONASS":       4,
		"GnssModel_GPSX_BEIDOU":        5,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[201].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[201]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 1, 2}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat_DISABLE Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat_ENABLE  Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat = 1
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat_name = map[int32]string{
		0: "LeapManualmodeEnStat_DISABLE",
		1: "LeapManualmodeEnStat_ENABLE",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat_value = map[string]int32{
		"LeapManualmodeEnStat_DISABLE": 0,
		"LeapManualmodeEnStat_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[202].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[202]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 1, 3}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_INVALID_ENUM_VALUE_LeapAdjustdirStat Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat_LEAP59             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat = 59
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat_LEAP61             Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat = 61
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_LeapAdjustdirStat",
		59: "LeapAdjustdirStat_LEAP59",
		61: "LeapAdjustdirStat_LEAP61",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat_value = map[string]int32{
		"INVALID_ENUM_VALUE_LeapAdjustdirStat": 0,
		"LeapAdjustdirStat_LEAP59":             59,
		"LeapAdjustdirStat_LEAP61":             61,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[203].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[203]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 1, 4}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism_DELAY  Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism_PDELAY Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism = 1
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism_name = map[int32]string{
		0: "GpsPtpDelayMechanism_DELAY",
		1: "GpsPtpDelayMechanism_PDELAY",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism_value = map[string]int32{
		"GpsPtpDelayMechanism_DELAY":  0,
		"GpsPtpDelayMechanism_PDELAY": 1,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[204].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[204]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 2, 0}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep_ONESTEP Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep_TWOSTEP Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep = 1
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep_name = map[int32]string{
		0: "GpsPtpClkStep_ONESTEP",
		1: "GpsPtpClkStep_TWOSTEP",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep_value = map[string]int32{
		"GpsPtpClkStep_ONESTEP": 0,
		"GpsPtpClkStep_TWOSTEP": 1,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[205].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[205]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 2, 1}
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm int32

const (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_UNK  Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm = 0
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_PRC  Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm = 2
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_SSUA Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm = 4
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_SSUB Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm = 8
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_SEC  Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm = 11
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_DNU  Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm = 15
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_NONE Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm = 16
)

// Enum value maps for Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm.
var (
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_name = map[int32]string{
		0:  "GpsClockSsm_UNK",
		2:  "GpsClockSsm_PRC",
		4:  "GpsClockSsm_SSUA",
		8:  "GpsClockSsm_SSUB",
		11: "GpsClockSsm_SEC",
		15: "GpsClockSsm_DNU",
		16: "GpsClockSsm_NONE",
	}
	Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_value = map[string]int32{
		"GpsClockSsm_UNK":  0,
		"GpsClockSsm_PRC":  2,
		"GpsClockSsm_SSUA": 4,
		"GpsClockSsm_SSUB": 8,
		"GpsClockSsm_SEC":  11,
		"GpsClockSsm_DNU":  15,
		"GpsClockSsm_NONE": 16,
	}
)

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm) Enum() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm {
	p := new(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[206].Descriptor()
}

func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[206]
}

func (x Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm.Descriptor instead.
func (Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 2, 2}
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_State int32

const (
	Ifm_Interfaces_Interface_ClockPortSources_Source_State_INITIAL  Ifm_Interfaces_Interface_ClockPortSources_Source_State = 0
	Ifm_Interfaces_Interface_ClockPortSources_Source_State_NORMAL   Ifm_Interfaces_Interface_ClockPortSources_Source_State = 1
	Ifm_Interfaces_Interface_ClockPortSources_Source_State_ABNORMAL Ifm_Interfaces_Interface_ClockPortSources_Source_State = 2
	Ifm_Interfaces_Interface_ClockPortSources_Source_State_WAITWTR  Ifm_Interfaces_Interface_ClockPortSources_Source_State = 3
	Ifm_Interfaces_Interface_ClockPortSources_Source_State_HOLDOFF  Ifm_Interfaces_Interface_ClockPortSources_Source_State = 4
)

// Enum value maps for Ifm_Interfaces_Interface_ClockPortSources_Source_State.
var (
	Ifm_Interfaces_Interface_ClockPortSources_Source_State_name = map[int32]string{
		0: "State_INITIAL",
		1: "State_NORMAL",
		2: "State_ABNORMAL",
		3: "State_WAITWTR",
		4: "State_HOLDOFF",
	}
	Ifm_Interfaces_Interface_ClockPortSources_Source_State_value = map[string]int32{
		"State_INITIAL":  0,
		"State_NORMAL":   1,
		"State_ABNORMAL": 2,
		"State_WAITWTR":  3,
		"State_HOLDOFF":  4,
	}
)

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_State) Enum() *Ifm_Interfaces_Interface_ClockPortSources_Source_State {
	p := new(Ifm_Interfaces_Interface_ClockPortSources_Source_State)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_State) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[207].Descriptor()
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_State) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[207]
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_State.Descriptor instead.
func (Ifm_Interfaces_Interface_ClockPortSources_Source_State) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 0}
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState int32

const (
	Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState_DOWN Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState = 0
	Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState_UP   Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState = 1
	Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState_NA   Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState = 2
)

// Enum value maps for Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState.
var (
	Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState_name = map[int32]string{
		0: "PhyState_DOWN",
		1: "PhyState_UP",
		2: "PhyState_NA",
	}
	Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState_value = map[string]int32{
		"PhyState_DOWN": 0,
		"PhyState_UP":   1,
		"PhyState_NA":   2,
	}
)

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState) Enum() *Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState {
	p := new(Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[208].Descriptor()
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[208]
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState.Descriptor instead.
func (Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 1}
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit int32

const (
	Ifm_Interfaces_Interface_ClockPortSources_Source_INVALID_ENUM_VALUE_E1Sabit Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit = 0
	Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit_SA4                Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit = 4
	Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit_SA5                Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit = 5
	Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit_SA6                Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit = 6
	Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit_SA7                Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit = 7
	Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit_SA8                Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit = 8
)

// Enum value maps for Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit.
var (
	Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_E1Sabit",
		4: "E1Sabit_SA4",
		5: "E1Sabit_SA5",
		6: "E1Sabit_SA6",
		7: "E1Sabit_SA7",
		8: "E1Sabit_SA8",
	}
	Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit_value = map[string]int32{
		"INVALID_ENUM_VALUE_E1Sabit": 0,
		"E1Sabit_SA4":                4,
		"E1Sabit_SA5":                5,
		"E1Sabit_SA6":                6,
		"E1Sabit_SA7":                7,
		"E1Sabit_SA8":                8,
	}
)

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit) Enum() *Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit {
	p := new(Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[209].Descriptor()
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[209]
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit.Descriptor instead.
func (Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 2}
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured int32

const (
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_UNK  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured = 0
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_PRC  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured = 2
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_SSUA Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured = 4
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_SSUB Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured = 8
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_SEC  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured = 11
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_DNU  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured = 15
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_NONE Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured = 16
)

// Enum value maps for Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured.
var (
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_name = map[int32]string{
		0:  "SsmConfigured_UNK",
		2:  "SsmConfigured_PRC",
		4:  "SsmConfigured_SSUA",
		8:  "SsmConfigured_SSUB",
		11: "SsmConfigured_SEC",
		15: "SsmConfigured_DNU",
		16: "SsmConfigured_NONE",
	}
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_value = map[string]int32{
		"SsmConfigured_UNK":  0,
		"SsmConfigured_PRC":  2,
		"SsmConfigured_SSUA": 4,
		"SsmConfigured_SSUB": 8,
		"SsmConfigured_SEC":  11,
		"SsmConfigured_DNU":  15,
		"SsmConfigured_NONE": 16,
	}
)

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured) Enum() *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured {
	p := new(Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[210].Descriptor()
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[210]
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured.Descriptor instead.
func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 1, 0}
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn int32

const (
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_UNK  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn = 0
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_PRC  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn = 2
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_SSUA Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn = 4
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_SSUB Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn = 8
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_SEC  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn = 11
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_DNU  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn = 15
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_NONE Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn = 16
)

// Enum value maps for Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn.
var (
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_name = map[int32]string{
		0:  "SsmLearn_UNK",
		2:  "SsmLearn_PRC",
		4:  "SsmLearn_SSUA",
		8:  "SsmLearn_SSUB",
		11: "SsmLearn_SEC",
		15: "SsmLearn_DNU",
		16: "SsmLearn_NONE",
	}
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_value = map[string]int32{
		"SsmLearn_UNK":  0,
		"SsmLearn_PRC":  2,
		"SsmLearn_SSUA": 4,
		"SsmLearn_SSUB": 8,
		"SsmLearn_SEC":  11,
		"SsmLearn_DNU":  15,
		"SsmLearn_NONE": 16,
	}
)

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn) Enum() *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn {
	p := new(Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[211].Descriptor()
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[211]
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn.Descriptor instead.
func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 1, 1}
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput int32

const (
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_UNK  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput = 0
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_PRC  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput = 2
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_SSUA Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput = 4
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_SSUB Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput = 8
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_SEC  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput = 11
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_DNU  Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput = 15
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_NONE Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput = 16
)

// Enum value maps for Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput.
var (
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_name = map[int32]string{
		0:  "SsmOutput_UNK",
		2:  "SsmOutput_PRC",
		4:  "SsmOutput_SSUA",
		8:  "SsmOutput_SSUB",
		11: "SsmOutput_SEC",
		15: "SsmOutput_DNU",
		16: "SsmOutput_NONE",
	}
	Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_value = map[string]int32{
		"SsmOutput_UNK":  0,
		"SsmOutput_PRC":  2,
		"SsmOutput_SSUA": 4,
		"SsmOutput_SSUB": 8,
		"SsmOutput_SEC":  11,
		"SsmOutput_DNU":  15,
		"SsmOutput_NONE": 16,
	}
)

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput) Enum() *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput {
	p := new(Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[212].Descriptor()
}

func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[212]
}

func (x Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput.Descriptor instead.
func (Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 1, 2}
}

type Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type int32

const (
	Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type = 0
	Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type_NA                 Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type = 1
	Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type_NSX_UNICAST        Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type = 2
	Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type_NSX_MULTICAST      Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type.
var (
	Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_NA",
		2: "Type_NSX_UNICAST",
		3: "Type_NSX_MULTICAST",
	}
	Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_NA":                 1,
		"Type_NSX_UNICAST":        2,
		"Type_NSX_MULTICAST":      3,
	}
)

func (x Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type) Enum() *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type {
	p := new(Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[213].Descriptor()
}

func (Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[213]
}

func (x Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 5, 0, 0}
}

type Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol int32

const (
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_INVALID_ENUM_VALUE_Protocol Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 0
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_ARP                Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 1
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_DHCP               Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 2
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_SNMP               Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 3
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_TELNET             Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 4
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_ICMP               Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 5
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_SSH                Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 6
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_ICMPX_ND           Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 7
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_ICMPV6             Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 8
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_PORT               Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol = 9
)

// Enum value maps for Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol.
var (
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Protocol",
		1: "Protocol_ARP",
		2: "Protocol_DHCP",
		3: "Protocol_SNMP",
		4: "Protocol_TELNET",
		5: "Protocol_ICMP",
		6: "Protocol_SSH",
		7: "Protocol_ICMPX_ND",
		8: "Protocol_ICMPV6",
		9: "Protocol_PORT",
	}
	Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol_value = map[string]int32{
		"INVALID_ENUM_VALUE_Protocol": 0,
		"Protocol_ARP":                1,
		"Protocol_DHCP":               2,
		"Protocol_SNMP":               3,
		"Protocol_TELNET":             4,
		"Protocol_ICMP":               5,
		"Protocol_SSH":                6,
		"Protocol_ICMPX_ND":           7,
		"Protocol_ICMPV6":             8,
		"Protocol_PORT":               9,
	}
)

func (x Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol) Enum() *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol {
	p := new(Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[214].Descriptor()
}

func (Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[214]
}

func (x Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol.Descriptor instead.
func (Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 6, 0, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy int32

const (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_INVALID_ENUM_VALUE_ReplyPacketPolicy Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy = 0
	Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy_BROADCASTX_ALWAYS  Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy.
var (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ReplyPacketPolicy",
		1: "ReplyPacketPolicy_BROADCASTX_ALWAYS",
	}
	Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy_value = map[string]int32{
		"INVALID_ENUM_VALUE_ReplyPacketPolicy": 0,
		"ReplyPacketPolicy_BROADCASTX_ALWAYS":  1,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Enum() *Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy {
	p := new(Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[215].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[215]
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode int32

const (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_INVALID_ENUM_VALUE_SubscriberIdMode Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode = 0
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode_SELFX_DEFINE       Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode.
var (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SubscriberIdMode",
		1: "SubscriberIdMode_SELFX_DEFINE",
	}
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_SubscriberIdMode": 0,
		"SubscriberIdMode_SELFX_DEFINE":       1,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Enum() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode {
	p := new(Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[216].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[216]
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat int32

const (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_SOURCEX_IPX_ADDRESS Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat = 0
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat.
var (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_name = map[int32]string{
		0: "SubOptionFormat_SOURCEX_IPX_ADDRESS",
	}
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_value = map[string]int32{
		"SubOptionFormat_SOURCEX_IPX_ADDRESS": 0,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Enum() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat {
	p := new(Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[217].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[217]
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 5, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable int32

const (
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_INVALID_ENUM_VALUE_ServerEnable Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable = 0
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_ENABLE             Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable = 1
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_DISABLE            Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable = 2
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable.
var (
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ServerEnable",
		1: "ServerEnable_ENABLE",
		2: "ServerEnable_DISABLE",
	}
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_value = map[string]int32{
		"INVALID_ENUM_VALUE_ServerEnable": 0,
		"ServerEnable_ENABLE":             1,
		"ServerEnable_DISABLE":            2,
	}
)

func (x Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Enum() *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable {
	p := new(Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[218].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[218]
}

func (x Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType int32

const (
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_INVALID_ENUM_VALUE_SubOptionType Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 0
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_CIRCUITX_ID        Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 1
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_REMOTEX_ID         Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 2
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_CIRCUITX_REMOTE    Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType.
var (
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SubOptionType",
		1: "SubOptionType_CIRCUITX_ID",
		2: "SubOptionType_REMOTEX_ID",
		3: "SubOptionType_CIRCUITX_REMOTE",
	}
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_value = map[string]int32{
		"INVALID_ENUM_VALUE_SubOptionType": 0,
		"SubOptionType_CIRCUITX_ID":        1,
		"SubOptionType_REMOTEX_ID":         2,
		"SubOptionType_CIRCUITX_REMOTE":    3,
	}
)

func (x Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Enum() *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType {
	p := new(Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[219].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[219]
}

func (x Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41, 1, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState int32

const (
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_INIT       Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 0
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_SELECTING  Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 1
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_REQUESTING Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 2
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_BOUND      Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 3
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_RENEWING   Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 4
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_REBINDING  Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 5
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState.
var (
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_name = map[int32]string{
		0: "FsmState_INIT",
		1: "FsmState_SELECTING",
		2: "FsmState_REQUESTING",
		3: "FsmState_BOUND",
		4: "FsmState_RENEWING",
		5: "FsmState_REBINDING",
	}
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_value = map[string]int32{
		"FsmState_INIT":       0,
		"FsmState_SELECTING":  1,
		"FsmState_REQUESTING": 2,
		"FsmState_BOUND":      3,
		"FsmState_RENEWING":   4,
		"FsmState_REBINDING":  5,
	}
)

func (x Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Enum() *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState {
	p := new(Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[220].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[220]
}

func (x Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 0, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_State int32

const (
	Ifm_Interfaces_Interface_Efm_Session_State_DISABLE Ifm_Interfaces_Interface_Efm_Session_State = 0
	Ifm_Interfaces_Interface_Efm_Session_State_ENABLE  Ifm_Interfaces_Interface_Efm_Session_State = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_State.
var (
	Ifm_Interfaces_Interface_Efm_Session_State_name = map[int32]string{
		0: "State_DISABLE",
		1: "State_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_State_value = map[string]int32{
		"State_DISABLE": 0,
		"State_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_State) Enum() *Ifm_Interfaces_Interface_Efm_Session_State {
	p := new(Ifm_Interfaces_Interface_Efm_Session_State)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_State) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[221].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_State) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[221]
}

func (x Ifm_Interfaces_Interface_Efm_Session_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_State.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_State) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_Mode int32

const (
	Ifm_Interfaces_Interface_Efm_Session_Mode_PASSIVE Ifm_Interfaces_Interface_Efm_Session_Mode = 0
	Ifm_Interfaces_Interface_Efm_Session_Mode_ACTIVE  Ifm_Interfaces_Interface_Efm_Session_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_Mode.
var (
	Ifm_Interfaces_Interface_Efm_Session_Mode_name = map[int32]string{
		0: "Mode_PASSIVE",
		1: "Mode_ACTIVE",
	}
	Ifm_Interfaces_Interface_Efm_Session_Mode_value = map[string]int32{
		"Mode_PASSIVE": 0,
		"Mode_ACTIVE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_Mode) Enum() *Ifm_Interfaces_Interface_Efm_Session_Mode {
	p := new(Ifm_Interfaces_Interface_Efm_Session_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[222].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[222]
}

func (x Ifm_Interfaces_Interface_Efm_Session_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 1}
}

type Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest int32

const (
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_DISABLE Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest = 0
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_ENABLE  Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest.
var (
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_name = map[int32]string{
		0: "IgnoreLoopbackRequest_DISABLE",
		1: "IgnoreLoopbackRequest_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_value = map[string]int32{
		"IgnoreLoopbackRequest_DISABLE": 0,
		"IgnoreLoopbackRequest_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Enum() *Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest {
	p := new(Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[223].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[223]
}

func (x Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 2}
}

type Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown int32

const (
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_DISABLE Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown = 0
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_ENABLE  Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown.
var (
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_name = map[int32]string{
		0: "TriggerIfDown_DISABLE",
		1: "TriggerIfDown_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_value = map[string]int32{
		"TriggerIfDown_DISABLE": 0,
		"TriggerIfDown_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Enum() *Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown {
	p := new(Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[224].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[224]
}

func (x Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 3}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[225].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[225]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_SECOND      Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_MILLISECOND Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_name = map[int32]string{
		0: "PeriodUnit_SECOND",
		1: "PeriodUnit_MILLISECOND",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_value = map[string]int32{
		"PeriodUnit_SECOND":      0,
		"PeriodUnit_MILLISECOND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[226].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[226]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[227].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[227]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 1, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[228].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[228]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 2, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[229].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[229]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 3, 0}
}

type Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType int32

const (
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_ProtocolType Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType = 0
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType_LACP               Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType = 1
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType_LLDP               Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType = 2
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType_BPDU               Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType = 4
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType_CDP                Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType = 5
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType_UDLD               Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType = 6
)

// Enum value maps for Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType.
var (
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ProtocolType",
		1: "ProtocolType_LACP",
		2: "ProtocolType_LLDP",
		4: "ProtocolType_BPDU",
		5: "ProtocolType_CDP",
		6: "ProtocolType_UDLD",
	}
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ProtocolType": 0,
		"ProtocolType_LACP":               1,
		"ProtocolType_LLDP":               2,
		"ProtocolType_BPDU":               4,
		"ProtocolType_CDP":                5,
		"ProtocolType_UDLD":               6,
	}
)

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType) Enum() *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType {
	p := new(Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[230].Descriptor()
}

func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[230]
}

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType.Descriptor instead.
func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 46, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action int32

const (
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_Action Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action = 0
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action_FORWARDING         Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action = 1
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action_DISCARD            Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action = 2
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action_TRANSPORT          Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action = 3
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action_TRANSPORTX_TAGGED  Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action.
var (
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Action",
		1: "Action_FORWARDING",
		2: "Action_DISCARD",
		3: "Action_TRANSPORT",
		4: "Action_TRANSPORTX_TAGGED",
	}
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action_value = map[string]int32{
		"INVALID_ENUM_VALUE_Action": 0,
		"Action_FORWARDING":         1,
		"Action_DISCARD":            2,
		"Action_TRANSPORT":          3,
		"Action_TRANSPORTX_TAGGED":  4,
	}
)

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action) Enum() *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action {
	p := new(Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[231].Descriptor()
}

func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[231]
}

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action.Descriptor instead.
func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 46, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode int32

const (
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode_NORMAL Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode = 0
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode_UNTAG  Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode.
var (
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode_name = map[int32]string{
		0: "Mode_NORMAL",
		1: "Mode_UNTAG",
	}
	Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode_value = map[string]int32{
		"Mode_NORMAL": 0,
		"Mode_UNTAG":  1,
	}
)

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode) Enum() *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode {
	p := new(Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[232].Descriptor()
}

func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[232]
}

func (x Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 46, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Fim_StatisticEnable int32

const (
	Ifm_Interfaces_Interface_Fim_StatisticEnable_DISABLE Ifm_Interfaces_Interface_Fim_StatisticEnable = 0
	Ifm_Interfaces_Interface_Fim_StatisticEnable_ENABLE  Ifm_Interfaces_Interface_Fim_StatisticEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Fim_StatisticEnable.
var (
	Ifm_Interfaces_Interface_Fim_StatisticEnable_name = map[int32]string{
		0: "StatisticEnable_DISABLE",
		1: "StatisticEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_Fim_StatisticEnable_value = map[string]int32{
		"StatisticEnable_DISABLE": 0,
		"StatisticEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Fim_StatisticEnable) Enum() *Ifm_Interfaces_Interface_Fim_StatisticEnable {
	p := new(Ifm_Interfaces_Interface_Fim_StatisticEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Fim_StatisticEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Fim_StatisticEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[233].Descriptor()
}

func (Ifm_Interfaces_Interface_Fim_StatisticEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[233]
}

func (x Ifm_Interfaces_Interface_Fim_StatisticEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fim_StatisticEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_Fim_StatisticEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 47, 0}
}

type Ifm_Interfaces_Interface_Fim_StatisticMode int32

const (
	Ifm_Interfaces_Interface_Fim_StatisticMode_MAC     Ifm_Interfaces_Interface_Fim_StatisticMode = 0
	Ifm_Interfaces_Interface_Fim_StatisticMode_FORWARD Ifm_Interfaces_Interface_Fim_StatisticMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Fim_StatisticMode.
var (
	Ifm_Interfaces_Interface_Fim_StatisticMode_name = map[int32]string{
		0: "StatisticMode_MAC",
		1: "StatisticMode_FORWARD",
	}
	Ifm_Interfaces_Interface_Fim_StatisticMode_value = map[string]int32{
		"StatisticMode_MAC":     0,
		"StatisticMode_FORWARD": 1,
	}
)

func (x Ifm_Interfaces_Interface_Fim_StatisticMode) Enum() *Ifm_Interfaces_Interface_Fim_StatisticMode {
	p := new(Ifm_Interfaces_Interface_Fim_StatisticMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Fim_StatisticMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Fim_StatisticMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[234].Descriptor()
}

func (Ifm_Interfaces_Interface_Fim_StatisticMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[234]
}

func (x Ifm_Interfaces_Interface_Fim_StatisticMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fim_StatisticMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Fim_StatisticMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 47, 1}
}

type Ifm_Interfaces_Interface_Fim_MacStatisticEnable int32

const (
	Ifm_Interfaces_Interface_Fim_MacStatisticEnable_DISABLE Ifm_Interfaces_Interface_Fim_MacStatisticEnable = 0
	Ifm_Interfaces_Interface_Fim_MacStatisticEnable_ENABLE  Ifm_Interfaces_Interface_Fim_MacStatisticEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Fim_MacStatisticEnable.
var (
	Ifm_Interfaces_Interface_Fim_MacStatisticEnable_name = map[int32]string{
		0: "MacStatisticEnable_DISABLE",
		1: "MacStatisticEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_Fim_MacStatisticEnable_value = map[string]int32{
		"MacStatisticEnable_DISABLE": 0,
		"MacStatisticEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Fim_MacStatisticEnable) Enum() *Ifm_Interfaces_Interface_Fim_MacStatisticEnable {
	p := new(Ifm_Interfaces_Interface_Fim_MacStatisticEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Fim_MacStatisticEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Fim_MacStatisticEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[235].Descriptor()
}

func (Ifm_Interfaces_Interface_Fim_MacStatisticEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[235]
}

func (x Ifm_Interfaces_Interface_Fim_MacStatisticEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fim_MacStatisticEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_Fim_MacStatisticEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 47, 2}
}

type Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable int32

const (
	Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable_DISABLE Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable = 0
	Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable_ENABLE  Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable.
var (
	Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable_name = map[int32]string{
		0: "MruStatisticEnable_DISABLE",
		1: "MruStatisticEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable_value = map[string]int32{
		"MruStatisticEnable_DISABLE": 0,
		"MruStatisticEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable) Enum() *Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable {
	p := new(Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[236].Descriptor()
}

func (Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[236]
}

func (x Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 48, 0}
}

type Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode int32

const (
	Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode_LOOPBACK      Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode = 0
	Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode_THROUGH       Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode = 1
	Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode_HALFX_THROUGH Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode.
var (
	Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode_name = map[int32]string{
		0: "VeForwardMode_LOOPBACK",
		1: "VeForwardMode_THROUGH",
		3: "VeForwardMode_HALFX_THROUGH",
	}
	Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode_value = map[string]int32{
		"VeForwardMode_LOOPBACK":      0,
		"VeForwardMode_THROUGH":       1,
		"VeForwardMode_HALFX_THROUGH": 3,
	}
)

func (x Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode) Enum() *Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode {
	p := new(Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[237].Descriptor()
}

func (Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[237]
}

func (x Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode.Descriptor instead.
func (Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 51, 0}
}

type Ifm_Interfaces_Interface_VeGroup_Type int32

const (
	Ifm_Interfaces_Interface_VeGroup_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_VeGroup_Type = 0
	Ifm_Interfaces_Interface_VeGroup_Type_L2VE               Ifm_Interfaces_Interface_VeGroup_Type = 1
	Ifm_Interfaces_Interface_VeGroup_Type_L3VE               Ifm_Interfaces_Interface_VeGroup_Type = 2
	Ifm_Interfaces_Interface_VeGroup_Type_TERMINATEX_VE      Ifm_Interfaces_Interface_VeGroup_Type = 7
)

// Enum value maps for Ifm_Interfaces_Interface_VeGroup_Type.
var (
	Ifm_Interfaces_Interface_VeGroup_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_L2VE",
		2: "Type_L3VE",
		7: "Type_TERMINATEX_VE",
	}
	Ifm_Interfaces_Interface_VeGroup_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_L2VE":               1,
		"Type_L3VE":               2,
		"Type_TERMINATEX_VE":      7,
	}
)

func (x Ifm_Interfaces_Interface_VeGroup_Type) Enum() *Ifm_Interfaces_Interface_VeGroup_Type {
	p := new(Ifm_Interfaces_Interface_VeGroup_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_VeGroup_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_VeGroup_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[238].Descriptor()
}

func (Ifm_Interfaces_Interface_VeGroup_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[238]
}

func (x Ifm_Interfaces_Interface_VeGroup_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VeGroup_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_VeGroup_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 52, 0}
}

type Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction int32

const (
	Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction_INBOUND Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction = 0
)

// Enum value maps for Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction.
var (
	Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
	}
	Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction_value = map[string]int32{
		"Direction_INBOUND": 0,
	}
)

func (x Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction) Enum() *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction {
	p := new(Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[239].Descriptor()
}

func (Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[239]
}

func (x Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 55, 0, 0, 0}
}

type Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType int32

const (
	Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_INVALID_ENUM_VALUE_FlowType Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType = 0
	Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType_IPV4               Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType = 1
	Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType_IPV6               Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType.
var (
	Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_FlowType",
		1: "FlowType_IPV4",
		2: "FlowType_IPV6",
	}
	Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType_value = map[string]int32{
		"INVALID_ENUM_VALUE_FlowType": 0,
		"FlowType_IPV4":               1,
		"FlowType_IPV6":               2,
	}
)

func (x Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType) Enum() *Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType {
	p := new(Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[240].Descriptor()
}

func (Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[240]
}

func (x Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType.Descriptor instead.
func (Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 56, 2, 0, 0}
}

type Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType int32

const (
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_ProtocolType Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 0
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_CX_STP             Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 2
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_SX_STP             Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 3
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_ELMI               Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 4
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_LACP               Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 5
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_LAMP               Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 6
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_MRP                Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 7
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_EAPOL              Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 8
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_ESMC               Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 9
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_LLDP               Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 10
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_BPDU               Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 13
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_LINKX_OAM          Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 14
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_PTP                Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType = 15
)

// Enum value maps for Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType.
var (
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_ProtocolType",
		2:  "ProtocolType_CX_STP",
		3:  "ProtocolType_SX_STP",
		4:  "ProtocolType_ELMI",
		5:  "ProtocolType_LACP",
		6:  "ProtocolType_LAMP",
		7:  "ProtocolType_MRP",
		8:  "ProtocolType_EAPOL",
		9:  "ProtocolType_ESMC",
		10: "ProtocolType_LLDP",
		13: "ProtocolType_BPDU",
		14: "ProtocolType_LINKX_OAM",
		15: "ProtocolType_PTP",
	}
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ProtocolType": 0,
		"ProtocolType_CX_STP":             2,
		"ProtocolType_SX_STP":             3,
		"ProtocolType_ELMI":               4,
		"ProtocolType_LACP":               5,
		"ProtocolType_LAMP":               6,
		"ProtocolType_MRP":                7,
		"ProtocolType_EAPOL":              8,
		"ProtocolType_ESMC":               9,
		"ProtocolType_LLDP":               10,
		"ProtocolType_BPDU":               13,
		"ProtocolType_LINKX_OAM":          14,
		"ProtocolType_PTP":                15,
	}
)

func (x Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType) Enum() *Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType {
	p := new(Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[241].Descriptor()
}

func (Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[241]
}

func (x Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType.Descriptor instead.
func (Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 61, 0, 0}
}

type Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action int32

const (
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action_TRANSPORT  Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action = 0
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action_FORWARDING Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action = 1
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action_DISCARD    Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action = 2
)

// Enum value maps for Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action.
var (
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action_name = map[int32]string{
		0: "Action_TRANSPORT",
		1: "Action_FORWARDING",
		2: "Action_DISCARD",
	}
	Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action_value = map[string]int32{
		"Action_TRANSPORT":  0,
		"Action_FORWARDING": 1,
		"Action_DISCARD":    2,
	}
)

func (x Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action) Enum() *Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action {
	p := new(Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[242].Descriptor()
}

func (Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[242]
}

func (x Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action.Descriptor instead.
func (Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 61, 0, 1}
}

type Ifm_Interfaces_Interface_Lldp_Session_AdminStatus int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_INVALID_ENUM_VALUE_AdminStatus Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 0
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_TXX_ONLY           Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 1
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_RXX_ONLY           Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 2
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_TXX_RX             Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 3
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_DISABLED           Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_AdminStatus.
var (
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AdminStatus",
		1: "AdminStatus_TXX_ONLY",
		2: "AdminStatus_RXX_ONLY",
		3: "AdminStatus_TXX_RX",
		4: "AdminStatus_DISABLED",
	}
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_value = map[string]int32{
		"INVALID_ENUM_VALUE_AdminStatus": 0,
		"AdminStatus_TXX_ONLY":           1,
		"AdminStatus_RXX_ONLY":           2,
		"AdminStatus_TXX_RX":             3,
		"AdminStatus_DISABLED":           4,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Enum() *Ifm_Interfaces_Interface_Lldp_Session_AdminStatus {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_AdminStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[243].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[243]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_AdminStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_OTHER              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_CHASSISX_COMPONENT Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_INTERFACEX_ALIAS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_PORTX_COMPONENT    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_MACX_ADDRESS       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_NETWORKX_ADDRESS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_INTERFACEX_NAME    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_LOCAL              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_name = map[int32]string{
		0: "ChassisIdSubType_OTHER",
		1: "ChassisIdSubType_CHASSISX_COMPONENT",
		2: "ChassisIdSubType_INTERFACEX_ALIAS",
		3: "ChassisIdSubType_PORTX_COMPONENT",
		4: "ChassisIdSubType_MACX_ADDRESS",
		5: "ChassisIdSubType_NETWORKX_ADDRESS",
		6: "ChassisIdSubType_INTERFACEX_NAME",
		7: "ChassisIdSubType_LOCAL",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_value = map[string]int32{
		"ChassisIdSubType_OTHER":              0,
		"ChassisIdSubType_CHASSISX_COMPONENT": 1,
		"ChassisIdSubType_INTERFACEX_ALIAS":   2,
		"ChassisIdSubType_PORTX_COMPONENT":    3,
		"ChassisIdSubType_MACX_ADDRESS":       4,
		"ChassisIdSubType_NETWORKX_ADDRESS":   5,
		"ChassisIdSubType_INTERFACEX_NAME":    6,
		"ChassisIdSubType_LOCAL":              7,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[244].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[244]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_OTHER              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_INTERFACEX_ALIAS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_PORTX_COMPONENT    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_MACX_ADDRESS       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_NETWORKX_ADDRESS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_INTERFACEX_NAME    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_AGENTX_CIRCUITX_ID Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_LOCAL              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_name = map[int32]string{
		0: "PortIdSubType_OTHER",
		1: "PortIdSubType_INTERFACEX_ALIAS",
		2: "PortIdSubType_PORTX_COMPONENT",
		3: "PortIdSubType_MACX_ADDRESS",
		4: "PortIdSubType_NETWORKX_ADDRESS",
		5: "PortIdSubType_INTERFACEX_NAME",
		6: "PortIdSubType_AGENTX_CIRCUITX_ID",
		7: "PortIdSubType_LOCAL",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_value = map[string]int32{
		"PortIdSubType_OTHER":              0,
		"PortIdSubType_INTERFACEX_ALIAS":   1,
		"PortIdSubType_PORTX_COMPONENT":    2,
		"PortIdSubType_MACX_ADDRESS":       3,
		"PortIdSubType_NETWORKX_ADDRESS":   4,
		"PortIdSubType_INTERFACEX_NAME":    5,
		"PortIdSubType_AGENTX_CIRCUITX_ID": 6,
		"PortIdSubType_LOCAL":              7,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[245].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[245]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_name = map[int32]string{
		0: "AutoNegotiationSupported_NO",
		1: "AutoNegotiationSupported_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_value = map[string]int32{
		"AutoNegotiationSupported_NO":  0,
		"AutoNegotiationSupported_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[246].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[246]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 2}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_name = map[int32]string{
		0: "AutoNegotiationEnabled_NO",
		1: "AutoNegotiationEnabled_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_value = map[string]int32{
		"AutoNegotiationEnabled_NO":  0,
		"AutoNegotiationEnabled_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[247].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[247]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 3}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_UNKNOWN                             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_AUI                Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_FOIRL              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 7
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 8
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 9
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 10
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 11
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 12
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 13
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 14
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 15
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 16
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 17
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 18
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 19
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 20
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 21
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 22
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 23
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 24
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 25
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 26
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 27
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 28
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 29
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 30
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 31
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 32
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 33
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 34
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 35
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 36
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 37
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 38
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 39
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 40
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 70
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 71
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 72
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 73
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 74
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10 Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 75
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10 Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 76
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 77
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 78
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_name = map[int32]string{
		0:  "OperMauType_UNKNOWN",
		1:  "OperMauType_DOT3X_MAUX_TYPEX_AUI",
		2:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5",
		3:  "OperMauType_DOT3X_MAUX_TYPEX_FOIRL",
		4:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2",
		5:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T",
		6:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP",
		7:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB",
		8:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL",
		9:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36",
		10: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD",
		11: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD",
		12: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD",
		13: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD",
		14: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4",
		15: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD",
		16: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD",
		17: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD",
		18: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD",
		19: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD",
		20: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD",
		21: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD",
		22: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD",
		23: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD",
		24: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD",
		25: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD",
		26: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD",
		27: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD",
		28: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD",
		29: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD",
		30: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD",
		31: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X",
		32: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4",
		33: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R",
		34: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER",
		35: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR",
		36: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR",
		37: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W",
		38: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW",
		39: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW",
		40: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW",
		70: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4",
		71: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4",
		72: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4",
		73: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR",
		74: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4",
		75: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10",
		76: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10",
		77: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4",
		78: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_value = map[string]int32{
		"OperMauType_UNKNOWN":                             0,
		"OperMauType_DOT3X_MAUX_TYPEX_AUI":                1,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5":        2,
		"OperMauType_DOT3X_MAUX_TYPEX_FOIRL":              3,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2":        4,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T":        5,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP":       6,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB":       7,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL":       8,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36":       9,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD":      10,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD":      11,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD":     12,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD":     13,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4":      14,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD":    15,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD":    16,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD":    17,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD":    18,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD":    19,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD":    20,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD":    21,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD":    22,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD":   23,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD":   24,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD":   25,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD":   26,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD":   27,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD":   28,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD":    29,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD":    30,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X":     31,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4":   32,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R":     33,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER":    34,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR":    35,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR":    36,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W":     37,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW":    38,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW":    39,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW":    40,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4":   70,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4":   71,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4":   72,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR":    73,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4":   74,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10": 75,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10": 76,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4":  77,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4":  78,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[248].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[248]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 4}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_name = map[int32]string{
		0: "LinkAggregationSupported_NO",
		1: "LinkAggregationSupported_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_value = map[string]int32{
		"LinkAggregationSupported_NO":  0,
		"LinkAggregationSupported_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[249].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[249]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 5}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_name = map[int32]string{
		0: "LinkAggregationEnabled_NO",
		1: "LinkAggregationEnabled_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_value = map[string]int32{
		"LinkAggregationEnabled_NO":  0,
		"LinkAggregationEnabled_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[250].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[250]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 6}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_OTHER                  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_IPV4                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_IPV6                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_NSAP                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_HDLC                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_BBN1822                Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_MAC                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_E163                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 7
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_E164                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 8
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_F69                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 9
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_X121                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 10
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_IPX                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 11
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_APPLEX_TALK            Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 12
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_DECNETX_IV             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 13
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_BANYANX_VINES          Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 14
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_E164X_WITHX_NSAP       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 15
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_DNS                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 16
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_DISTINGUISHEDX_NAME    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 17
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_ASX_NUMBER             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 18
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_XTPX_OVERX_IPV4        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 19
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_XTPX_OVERX_IPV6        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 20
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_XTPX_NATIVEX_MODEX_XTP Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 21
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_FIBREX_CHANNELX_WWPN   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 22
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_FIBREX_CHANNELX_WWN    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 23
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_GWID                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 24
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_name = map[int32]string{
		0:  "Type_OTHER",
		1:  "Type_IPV4",
		2:  "Type_IPV6",
		3:  "Type_NSAP",
		4:  "Type_HDLC",
		5:  "Type_BBN1822",
		6:  "Type_MAC",
		7:  "Type_E163",
		8:  "Type_E164",
		9:  "Type_F69",
		10: "Type_X121",
		11: "Type_IPX",
		12: "Type_APPLEX_TALK",
		13: "Type_DECNETX_IV",
		14: "Type_BANYANX_VINES",
		15: "Type_E164X_WITHX_NSAP",
		16: "Type_DNS",
		17: "Type_DISTINGUISHEDX_NAME",
		18: "Type_ASX_NUMBER",
		19: "Type_XTPX_OVERX_IPV4",
		20: "Type_XTPX_OVERX_IPV6",
		21: "Type_XTPX_NATIVEX_MODEX_XTP",
		22: "Type_FIBREX_CHANNELX_WWPN",
		23: "Type_FIBREX_CHANNELX_WWN",
		24: "Type_GWID",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_value = map[string]int32{
		"Type_OTHER":                  0,
		"Type_IPV4":                   1,
		"Type_IPV6":                   2,
		"Type_NSAP":                   3,
		"Type_HDLC":                   4,
		"Type_BBN1822":                5,
		"Type_MAC":                    6,
		"Type_E163":                   7,
		"Type_E164":                   8,
		"Type_F69":                    9,
		"Type_X121":                   10,
		"Type_IPX":                    11,
		"Type_APPLEX_TALK":            12,
		"Type_DECNETX_IV":             13,
		"Type_BANYANX_VINES":          14,
		"Type_E164X_WITHX_NSAP":       15,
		"Type_DNS":                    16,
		"Type_DISTINGUISHEDX_NAME":    17,
		"Type_ASX_NUMBER":             18,
		"Type_XTPX_OVERX_IPV4":        19,
		"Type_XTPX_OVERX_IPV6":        20,
		"Type_XTPX_NATIVEX_MODEX_XTP": 21,
		"Type_FIBREX_CHANNELX_WWPN":   22,
		"Type_FIBREX_CHANNELX_WWN":    23,
		"Type_GWID":                   24,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[251].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[251]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_OTHER                Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_UNKNOWN              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_IFX_INDEX            Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_SYSTEMX_PORTX_NUMBER Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_name = map[int32]string{
		0: "IfSubType_OTHER",
		1: "IfSubType_UNKNOWN",
		2: "IfSubType_IFX_INDEX",
		3: "IfSubType_SYSTEMX_PORTX_NUMBER",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_value = map[string]int32{
		"IfSubType_OTHER":                0,
		"IfSubType_UNKNOWN":              1,
		"IfSubType_IFX_INDEX":            2,
		"IfSubType_SYSTEMX_PORTX_NUMBER": 3,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[252].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[252]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_name = map[int32]string{
		0: "Supported_NO",
		1: "Supported_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_value = map[string]int32{
		"Supported_NO":  0,
		"Supported_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[253].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[253]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_name = map[int32]string{
		0: "Enabled_NO",
		1: "Enabled_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_value = map[string]int32{
		"Enabled_NO":  0,
		"Enabled_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[254].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[254]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType int32

const (
	Ifm_Interfaces_Interface_Loopdetect_LoopDetect_INVALID_ENUM_VALUE_BlockTimeType Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType = 0
	Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType_PERPX_BLOCKX_TIME  Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType = 1
	Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType_NORMX_BLOCKX_TIME  Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType.
var (
	Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_BlockTimeType",
		1: "BlockTimeType_PERPX_BLOCKX_TIME",
		2: "BlockTimeType_NORMX_BLOCKX_TIME",
	}
	Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType_value = map[string]int32{
		"INVALID_ENUM_VALUE_BlockTimeType": 0,
		"BlockTimeType_PERPX_BLOCKX_TIME":  1,
		"BlockTimeType_NORMX_BLOCKX_TIME":  2,
	}
)

func (x Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType) Enum() *Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType {
	p := new(Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[255].Descriptor()
}

func (Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[255]
}

func (x Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType.Descriptor instead.
func (Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 66, 2, 0}
}

type Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType int32

const (
	Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_INVALID_ENUM_VALUE_CakType Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType = 0
	Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType_SIMPLE             Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType = 1
	Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType_CIPHER             Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType.
var (
	Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_CakType",
		1: "CakType_SIMPLE",
		2: "CakType_CIPHER",
	}
	Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType_value = map[string]int32{
		"INVALID_ENUM_VALUE_CakType": 0,
		"CakType_SIMPLE":             1,
		"CakType_CIPHER":             2,
	}
)

func (x Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType) Enum() *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType {
	p := new(Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[256].Descriptor()
}

func (Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[256]
}

func (x Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType.Descriptor instead.
func (Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode int32

const (
	Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode = 0
	Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode_NORMAL             Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode = 1
	Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode_INTEGRITYX_ONLY    Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode.
var (
	Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_NORMAL",
		2: "Mode_INTEGRITYX_ONLY",
	}
	Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_NORMAL":             1,
		"Mode_INTEGRITYX_ONLY":    2,
	}
)

func (x Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode) Enum() *Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode {
	p := new(Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[257].Descriptor()
}

func (Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[257]
}

func (x Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 5, 0, 0}
}

type Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite int32

const (
	Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_INVALID_ENUM_VALUE_Suite Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite = 0
	Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite_GCMX_AESX_128      Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite = 1
	Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite_GCMX_AESX_XPNX_128 Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite.
var (
	Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Suite",
		1: "Suite_GCMX_AESX_128",
		2: "Suite_GCMX_AESX_XPNX_128",
	}
	Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite_value = map[string]int32{
		"INVALID_ENUM_VALUE_Suite": 0,
		"Suite_GCMX_AESX_128":      1,
		"Suite_GCMX_AESX_XPNX_128": 2,
	}
)

func (x Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite) Enum() *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite {
	p := new(Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[258].Descriptor()
}

func (Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[258]
}

func (x Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite.Descriptor instead.
func (Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 6, 0, 0}
}

type Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType int32

const (
	Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_INVALID_ENUM_VALUE_ClearType Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType = 0
	Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType_DOT1QX_INX_CLEAR   Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType = 1
	Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType_QINQX_INX_CLEAR    Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType.
var (
	Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ClearType",
		1: "ClearType_DOT1QX_INX_CLEAR",
		2: "ClearType_QINQX_INX_CLEAR",
	}
	Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ClearType": 0,
		"ClearType_DOT1QX_INX_CLEAR":   1,
		"ClearType_QINQX_INX_CLEAR":    2,
	}
)

func (x Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType) Enum() *Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType {
	p := new(Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[259].Descriptor()
}

func (Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[259]
}

func (x Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType.Descriptor instead.
func (Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 7, 0, 0}
}

type Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction int32

const (
	Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction_INBOUND  Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction = 0
	Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction_OUTBOUND Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction.
var (
	Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction) Enum() *Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction {
	p := new(Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[260].Descriptor()
}

func (Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[260]
}

func (x Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction int32

const (
	Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction_INBOUND  Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction = 0
	Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction_OUTBOUND Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction.
var (
	Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction) Enum() *Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction {
	p := new(Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[261].Descriptor()
}

func (Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[261]
}

func (x Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 5, 0, 0}
}

type Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction int32

const (
	Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction_INBOUND  Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction = 0
	Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction_OUTBOUND Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction.
var (
	Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction) Enum() *Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction {
	p := new(Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[262].Descriptor()
}

func (Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[262]
}

func (x Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 6, 0, 0}
}

type Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction int32

const (
	Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction_INBOUND  Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction = 0
	Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction_OUTBOUND Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction.
var (
	Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction) Enum() *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction {
	p := new(Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[263].Descriptor()
}

func (Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[263]
}

func (x Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 7, 0, 0}
}

type Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter int32

const (
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter_FALSE Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter = 0
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter_TRUE  Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter.
var (
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter_name = map[int32]string{
		0: "WithoutFilter_FALSE",
		1: "WithoutFilter_TRUE",
	}
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter_value = map[string]int32{
		"WithoutFilter_FALSE": 0,
		"WithoutFilter_TRUE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter) Enum() *Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter {
	p := new(Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[264].Descriptor()
}

func (Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[264]
}

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter.Descriptor instead.
func (Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 9, 0}
}

type Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel int32

const (
	Ifm_Interfaces_Interface_Mirror_PortObserve_INVALID_ENUM_VALUE_PopLabel Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel = 0
	Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel_ONE                Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel = 1
	Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel_TWO                Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel = 2
	Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel_ALL                Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel.
var (
	Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PopLabel",
		1: "PopLabel_ONE",
		2: "PopLabel_TWO",
		3: "PopLabel_ALL",
	}
	Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel_value = map[string]int32{
		"INVALID_ENUM_VALUE_PopLabel": 0,
		"PopLabel_ONE":                1,
		"PopLabel_TWO":                2,
		"PopLabel_ALL":                3,
	}
)

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel) Enum() *Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel {
	p := new(Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[265].Descriptor()
}

func (Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[265]
}

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel.Descriptor instead.
func (Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 9, 1}
}

type Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader int32

const (
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader_FALSE Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader = 0
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader_TRUE  Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader.
var (
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader_name = map[int32]string{
		0: "WithLinklayerHeader_FALSE",
		1: "WithLinklayerHeader_TRUE",
	}
	Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader_value = map[string]int32{
		"WithLinklayerHeader_FALSE": 0,
		"WithLinklayerHeader_TRUE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader) Enum() *Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader {
	p := new(Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[266].Descriptor()
}

func (Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[266]
}

func (x Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader.Descriptor instead.
func (Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 9, 2}
}

type Ifm_Interfaces_Interface_Deephashcfg_FragmentField int32

const (
	Ifm_Interfaces_Interface_Deephashcfg_INVALID_ENUM_VALUE_FragmentField Ifm_Interfaces_Interface_Deephashcfg_FragmentField = 0
	Ifm_Interfaces_Interface_Deephashcfg_FragmentField_IP                 Ifm_Interfaces_Interface_Deephashcfg_FragmentField = 1
	Ifm_Interfaces_Interface_Deephashcfg_FragmentField_DISABLE            Ifm_Interfaces_Interface_Deephashcfg_FragmentField = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Deephashcfg_FragmentField.
var (
	Ifm_Interfaces_Interface_Deephashcfg_FragmentField_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_FragmentField",
		1: "FragmentField_IP",
		3: "FragmentField_DISABLE",
	}
	Ifm_Interfaces_Interface_Deephashcfg_FragmentField_value = map[string]int32{
		"INVALID_ENUM_VALUE_FragmentField": 0,
		"FragmentField_IP":                 1,
		"FragmentField_DISABLE":            3,
	}
)

func (x Ifm_Interfaces_Interface_Deephashcfg_FragmentField) Enum() *Ifm_Interfaces_Interface_Deephashcfg_FragmentField {
	p := new(Ifm_Interfaces_Interface_Deephashcfg_FragmentField)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Deephashcfg_FragmentField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Deephashcfg_FragmentField) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[267].Descriptor()
}

func (Ifm_Interfaces_Interface_Deephashcfg_FragmentField) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[267]
}

func (x Ifm_Interfaces_Interface_Deephashcfg_FragmentField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Deephashcfg_FragmentField.Descriptor instead.
func (Ifm_Interfaces_Interface_Deephashcfg_FragmentField) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 70, 0}
}

type Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash int32

const (
	Ifm_Interfaces_Interface_Deephashcfg_INVALID_ENUM_VALUE_Deepmplshash Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash = 0
	Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash_L3                 Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash.
var (
	Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Deepmplshash",
		1: "Deepmplshash_L3",
	}
	Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash_value = map[string]int32{
		"INVALID_ENUM_VALUE_Deepmplshash": 0,
		"Deepmplshash_L3":                 1,
	}
)

func (x Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash) Enum() *Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash {
	p := new(Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[268].Descriptor()
}

func (Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[268]
}

func (x Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash.Descriptor instead.
func (Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 70, 1}
}

type Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable int32

const (
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable_DISABLE Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable = 0
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable_ENABLE  Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable.
var (
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable_name = map[int32]string{
		0: "LoadbanlanceEnable_DISABLE",
		1: "LoadbanlanceEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable_value = map[string]int32{
		"LoadbanlanceEnable_DISABLE": 0,
		"LoadbanlanceEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable) Enum() *Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable {
	p := new(Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[269].Descriptor()
}

func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[269]
}

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 72, 0}
}

type Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable int32

const (
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable_DISABLE Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable = 0
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable_ENABLE  Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable.
var (
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable_name = map[int32]string{
		0: "RootLoadbanlanceEnable_DISABLE",
		1: "RootLoadbanlanceEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable_value = map[string]int32{
		"RootLoadbanlanceEnable_DISABLE": 0,
		"RootLoadbanlanceEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable) Enum() *Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable {
	p := new(Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[270].Descriptor()
}

func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[270]
}

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 72, 1}
}

type Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis int32

const (
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis_DISABLE Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis = 0
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis_ENABLE  Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis.
var (
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis_name = map[int32]string{
		0: "RootLoadbanlanceSpmsidis_DISABLE",
		1: "RootLoadbanlanceSpmsidis_ENABLE",
	}
	Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis_value = map[string]int32{
		"RootLoadbanlanceSpmsidis_DISABLE": 0,
		"RootLoadbanlanceSpmsidis_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis) Enum() *Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis {
	p := new(Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[271].Descriptor()
}

func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[271]
}

func (x Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis.Descriptor instead.
func (Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 72, 2}
}

type Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable int32

const (
	Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable_DISABLE Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable = 0
	Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable_ENABLE  Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable.
var (
	Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable_name = map[int32]string{
		0: "LocalifnetEnable_DISABLE",
		1: "LocalifnetEnable_ENABLE",
	}
	Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable_value = map[string]int32{
		"LocalifnetEnable_DISABLE": 0,
		"LocalifnetEnable_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable) Enum() *Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable {
	p := new(Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[272].Descriptor()
}

func (Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[272]
}

func (x Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 73, 0}
}

type Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType int32

const (
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType_IPX_FLOW   Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType = 0
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType_IPV6X_FLOW Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType.
var (
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType_name = map[int32]string{
		0: "FlowType_IPX_FLOW",
		1: "FlowType_IPV6X_FLOW",
	}
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType_value = map[string]int32{
		"FlowType_IPX_FLOW":   0,
		"FlowType_IPV6X_FLOW": 1,
	}
)

func (x Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType) Enum() *Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType {
	p := new(Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[273].Descriptor()
}

func (Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[273]
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType.Descriptor instead.
func (Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction int32

const (
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction_INBOUND  Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction = 0
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction_OUTBOUND Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction.
var (
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction) Enum() *Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction {
	p := new(Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[274].Descriptor()
}

func (Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[274]
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType int32

const (
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType_IPX_FLOW   Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType = 0
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType_IPV6X_FLOW Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType.
var (
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType_name = map[int32]string{
		0: "FlowType_IPX_FLOW",
		1: "FlowType_IPV6X_FLOW",
	}
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType_value = map[string]int32{
		"FlowType_IPX_FLOW":   0,
		"FlowType_IPV6X_FLOW": 1,
	}
)

func (x Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType) Enum() *Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType {
	p := new(Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[275].Descriptor()
}

func (Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[275]
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType.Descriptor instead.
func (Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction int32

const (
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction_INBOUND  Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction = 0
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction_OUTBOUND Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction.
var (
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction) Enum() *Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction {
	p := new(Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[276].Descriptor()
}

func (Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[276]
}

func (x Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode int32

const (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_L2   Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode = 0
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_L3   Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode = 1
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_BOTH Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode.
var (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_name = map[int32]string{
		0: "Mode_L2",
		1: "Mode_L3",
		2: "Mode_BOTH",
	}
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_value = map[string]int32{
		"Mode_L2":   0,
		"Mode_L3":   1,
		"Mode_BOTH": 2,
	}
)

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Enum() *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode {
	p := new(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[277].Descriptor()
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[277]
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 76, 0, 0}
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction int32

const (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_INBOUND     Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction = 0
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_OUTBOUND    Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction = 1
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_BIDIRECTION Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction.
var (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_BIDIRECTION",
	}
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_value = map[string]int32{
		"Direction_INBOUND":     0,
		"Direction_OUTBOUND":    1,
		"Direction_BIDIRECTION": 2,
	}
)

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Enum() *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction {
	p := new(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[278].Descriptor()
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[278]
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 76, 0, 1}
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action int32

const (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_RECEIVEX_PKT Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action = 0
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_SENDX_PKT    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action.
var (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_name = map[int32]string{
		0: "Action_RECEIVEX_PKT",
		1: "Action_SENDX_PKT",
	}
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_value = map[string]int32{
		"Action_RECEIVEX_PKT": 0,
		"Action_SENDX_PKT":    1,
	}
)

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Enum() *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action {
	p := new(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[279].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[279]
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 77, 0, 0}
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName int32

const (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_USERX_DEFINED         Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 0
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_ECHO                  Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 1
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_ECHOX_REPLY           Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 2
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_FRAGMENTNEEDX_DFSET   Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 3
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_HOSTX_REDIRECT        Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 4
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_HOSTX_TOSX_REDIRECT   Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 5
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_HOSTX_UNREACHABLE     Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 6
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_INFORMATIONX_REPLY    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 7
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_INFORMATIONX_REQUEST  Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 8
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_NETX_REDIRECT         Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 9
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_NETX_TOSX_REDIRECT    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 10
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_NETX_UNREACHABLE      Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 11
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_PARAMETERX_PROBLEM    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 12
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_PORTX_UNREACHABLE     Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 13
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_PROTOCOLX_UNREACHABLE Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 14
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_REASSEMBLYX_TIMEOUT   Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 15
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_SOURCEX_QUENCH        Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 16
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_SOURCEX_ROUTEX_FAILED Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 17
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_TIMESTAMPX_REPLY      Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 18
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_TIMESTAMPX_REQUEST    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 19
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_TTLX_EXCEEDED         Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 20
)

// Enum value maps for Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName.
var (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_name = map[int32]string{
		0:  "IcmpName_USERX_DEFINED",
		1:  "IcmpName_ECHO",
		2:  "IcmpName_ECHOX_REPLY",
		3:  "IcmpName_FRAGMENTNEEDX_DFSET",
		4:  "IcmpName_HOSTX_REDIRECT",
		5:  "IcmpName_HOSTX_TOSX_REDIRECT",
		6:  "IcmpName_HOSTX_UNREACHABLE",
		7:  "IcmpName_INFORMATIONX_REPLY",
		8:  "IcmpName_INFORMATIONX_REQUEST",
		9:  "IcmpName_NETX_REDIRECT",
		10: "IcmpName_NETX_TOSX_REDIRECT",
		11: "IcmpName_NETX_UNREACHABLE",
		12: "IcmpName_PARAMETERX_PROBLEM",
		13: "IcmpName_PORTX_UNREACHABLE",
		14: "IcmpName_PROTOCOLX_UNREACHABLE",
		15: "IcmpName_REASSEMBLYX_TIMEOUT",
		16: "IcmpName_SOURCEX_QUENCH",
		17: "IcmpName_SOURCEX_ROUTEX_FAILED",
		18: "IcmpName_TIMESTAMPX_REPLY",
		19: "IcmpName_TIMESTAMPX_REQUEST",
		20: "IcmpName_TTLX_EXCEEDED",
	}
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_value = map[string]int32{
		"IcmpName_USERX_DEFINED":         0,
		"IcmpName_ECHO":                  1,
		"IcmpName_ECHOX_REPLY":           2,
		"IcmpName_FRAGMENTNEEDX_DFSET":   3,
		"IcmpName_HOSTX_REDIRECT":        4,
		"IcmpName_HOSTX_TOSX_REDIRECT":   5,
		"IcmpName_HOSTX_UNREACHABLE":     6,
		"IcmpName_INFORMATIONX_REPLY":    7,
		"IcmpName_INFORMATIONX_REQUEST":  8,
		"IcmpName_NETX_REDIRECT":         9,
		"IcmpName_NETX_TOSX_REDIRECT":    10,
		"IcmpName_NETX_UNREACHABLE":      11,
		"IcmpName_PARAMETERX_PROBLEM":    12,
		"IcmpName_PORTX_UNREACHABLE":     13,
		"IcmpName_PROTOCOLX_UNREACHABLE": 14,
		"IcmpName_REASSEMBLYX_TIMEOUT":   15,
		"IcmpName_SOURCEX_QUENCH":        16,
		"IcmpName_SOURCEX_ROUTEX_FAILED": 17,
		"IcmpName_TIMESTAMPX_REPLY":      18,
		"IcmpName_TIMESTAMPX_REQUEST":    19,
		"IcmpName_TTLX_EXCEEDED":         20,
	}
)

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Enum() *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName {
	p := new(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[280].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[280]
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 77, 0, 1}
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation int32

const (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_ENABLE  Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation = 0
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_DISABLE Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation.
var (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_name = map[int32]string{
		0: "SwitchOperation_ENABLE",
		1: "SwitchOperation_DISABLE",
	}
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_value = map[string]int32{
		"SwitchOperation_ENABLE":  0,
		"SwitchOperation_DISABLE": 1,
	}
)

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Enum() *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation {
	p := new(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[281].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[281]
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 77, 0, 2}
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType int32

const (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_ROUTEX_ALERT  Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 0
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_ROUTEX_RECORD Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 1
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_SOURCEX_ROUTE Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 2
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_TIMEX_STAMP   Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType.
var (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_name = map[int32]string{
		0: "OptionType_ROUTEX_ALERT",
		1: "OptionType_ROUTEX_RECORD",
		2: "OptionType_SOURCEX_ROUTE",
		3: "OptionType_TIMEX_STAMP",
	}
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_value = map[string]int32{
		"OptionType_ROUTEX_ALERT":  0,
		"OptionType_ROUTEX_RECORD": 1,
		"OptionType_SOURCEX_ROUTE": 2,
		"OptionType_TIMEX_STAMP":   3,
	}
)

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Enum() *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType {
	p := new(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[282].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[282]
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 78, 0, 0}
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch int32

const (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_ENABLE  Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch = 0
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_DISABLE Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch.
var (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_name = map[int32]string{
		0: "Switch_ENABLE",
		1: "Switch_DISABLE",
	}
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_value = map[string]int32{
		"Switch_ENABLE":  0,
		"Switch_DISABLE": 1,
	}
)

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Enum() *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch {
	p := new(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[283].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[283]
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 78, 0, 1}
}

type Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType int32

const (
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_BPDUX_PROTECTION                   Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 0
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_AUTOX_DEFEND                       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 1
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MONITORX_LINK                      Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 2
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_PORTSECX_REACHEDX_LIMIT            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 65
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STORMX_CONTROL                     Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 66
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LOOPBACKX_DETECT                   Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 67
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_DUALX_ACTIVE                       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 68
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MACX_ADDRESSX_FLAPPING             Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 69
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_NOX_STACKX_LINK                    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 70
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_CRCX_STATISTICS                    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 71
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_TRANSCEIVERX_POWERX_LOW            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 72
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LINKX_FLAP                         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 73
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_L2X_LOOPX_OCCURED                  Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 74
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 75
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 76
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_RESOURCEX_MISMATCH                 Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 77
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LEAFX_MSTP                         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 78
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MX_LAG                             Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 79
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FABRICX_UPLINKX_THRESHOLD          Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 80
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_CONFIGX_CONFLICT            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 81
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_SPINEX_TYPEX_UNSUPPORTED           Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 82
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_PACKETX_DEFENSIVE           Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 83
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 85
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 86
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FABRICX_LINKX_FAILURE              Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 87
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 88
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_PFCX_DEADLOCK                      Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 89
)

// Enum value maps for Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType.
var (
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_name = map[int32]string{
		0:  "ErrorDownType_BPDUX_PROTECTION",
		1:  "ErrorDownType_AUTOX_DEFEND",
		2:  "ErrorDownType_MONITORX_LINK",
		65: "ErrorDownType_PORTSECX_REACHEDX_LIMIT",
		66: "ErrorDownType_STORMX_CONTROL",
		67: "ErrorDownType_LOOPBACKX_DETECT",
		68: "ErrorDownType_DUALX_ACTIVE",
		69: "ErrorDownType_MACX_ADDRESSX_FLAPPING",
		70: "ErrorDownType_NOX_STACKX_LINK",
		71: "ErrorDownType_CRCX_STATISTICS",
		72: "ErrorDownType_TRANSCEIVERX_POWERX_LOW",
		73: "ErrorDownType_LINKX_FLAP",
		74: "ErrorDownType_L2X_LOOPX_OCCURED",
		75: "ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT",
		76: "ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT",
		77: "ErrorDownType_RESOURCEX_MISMATCH",
		78: "ErrorDownType_LEAFX_MSTP",
		79: "ErrorDownType_MX_LAG",
		80: "ErrorDownType_FABRICX_UPLINKX_THRESHOLD",
		81: "ErrorDownType_STACKX_CONFIGX_CONFLICT",
		82: "ErrorDownType_SPINEX_TYPEX_UNSUPPORTED",
		83: "ErrorDownType_STACKX_PACKETX_DEFENSIVE",
		85: "ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED",
		86: "ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED",
		87: "ErrorDownType_FABRICX_LINKX_FAILURE",
		88: "ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK",
		89: "ErrorDownType_PFCX_DEADLOCK",
	}
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_value = map[string]int32{
		"ErrorDownType_BPDUX_PROTECTION":                   0,
		"ErrorDownType_AUTOX_DEFEND":                       1,
		"ErrorDownType_MONITORX_LINK":                      2,
		"ErrorDownType_PORTSECX_REACHEDX_LIMIT":            65,
		"ErrorDownType_STORMX_CONTROL":                     66,
		"ErrorDownType_LOOPBACKX_DETECT":                   67,
		"ErrorDownType_DUALX_ACTIVE":                       68,
		"ErrorDownType_MACX_ADDRESSX_FLAPPING":             69,
		"ErrorDownType_NOX_STACKX_LINK":                    70,
		"ErrorDownType_CRCX_STATISTICS":                    71,
		"ErrorDownType_TRANSCEIVERX_POWERX_LOW":            72,
		"ErrorDownType_LINKX_FLAP":                         73,
		"ErrorDownType_L2X_LOOPX_OCCURED":                  74,
		"ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT":       75,
		"ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT":       76,
		"ErrorDownType_RESOURCEX_MISMATCH":                 77,
		"ErrorDownType_LEAFX_MSTP":                         78,
		"ErrorDownType_MX_LAG":                             79,
		"ErrorDownType_FABRICX_UPLINKX_THRESHOLD":          80,
		"ErrorDownType_STACKX_CONFIGX_CONFLICT":            81,
		"ErrorDownType_SPINEX_TYPEX_UNSUPPORTED":           82,
		"ErrorDownType_STACKX_PACKETX_DEFENSIVE":           83,
		"ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED":    85,
		"ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED": 86,
		"ErrorDownType_FABRICX_LINKX_FAILURE":              87,
		"ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK":         88,
		"ErrorDownType_PFCX_DEADLOCK":                      89,
	}
)

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Enum() *Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType {
	p := new(Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType)
	*p = x
	return p
}

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[284].Descriptor()
}

func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[284]
}

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType.Descriptor instead.
func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

type Ifm_StaticDimensionRanges_StaticDimensionRange_Type int32

const (
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ETHERNET           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 0
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GIGABITETHERNET    Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 2
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ETHX_TRUNK         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 4
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_IPX_TRUNK          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 5
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_ETHERNET  Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 6
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_SERIAL             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 8
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_POS                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 9
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_CPOS               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 10
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ATM                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 11
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_TUNNEL             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 14
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VLANIF             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 15
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_NULL               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 18
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_LOOPBACK           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 19
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_100GE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 20
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_LMPIF              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 21
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_MTUNNEL            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 22
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_40GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 23
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_10GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 24
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GEBRIEF            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 25
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_METH               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 26
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_STACKX_PORT        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 27
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_SIP                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 28
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_E1                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 30
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_MPX_GROUP          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 31
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_IMAX_GROUP         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 32
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VMETH              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 33
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_REMOTEX_AP         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 35
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VBRIDGE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 36
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ATMX_BUNDLE        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 37
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FIBERX_CHANNEL     Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 38
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_INFINIBAND         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 39
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VBDIF              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 40
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_T1                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 41
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_T3                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 42
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VC4                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 43
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VC12               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 44
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GLOBALX_VE         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 45
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FABRICX_PORT       Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 46
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_E3                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 48
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VP                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 49
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_DCNINTERFACE       Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 50
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_CPOSX_TRUNK        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 51
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_TRUNKX_SERIAL      Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 52
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GLOBALX_MPX_GROUP  Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 53
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_OTN                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 55
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GLOBALX_IMAX_GROUP Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 57
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_POSX_TRUNK         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 59
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GMPLSX_UNI         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 63
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_WDM                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 64
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_NVE                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 65
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FCOEX_PORT         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 67
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_TEMPLATE  Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 68
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FC                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 70
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_4X10GE           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 71
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_10X10GE          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 72
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_3X40GE           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 73
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_4X25GE           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 74
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_25GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 75
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_IMETH              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 79
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_PWX_VE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 88
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VXX_TUNNEL         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 89
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_SERVICEIF          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 90
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_XGIGABITETHERNET   Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 91
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_200GE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 92
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_ODUK      Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 94
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXE              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 95
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_200GE       Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 96
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_50X_100GE        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 101
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_50GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 102
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_50G         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 103
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_100G        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 104
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_50X_100G    Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 105
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_SERIAL    Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 107
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_400GE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 108
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_HPGE               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 114
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_IF        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 116
)

// Enum value maps for Ifm_StaticDimensionRanges_StaticDimensionRange_Type.
var (
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_name = map[int32]string{
		0:   "Type_ETHERNET",
		2:   "Type_GIGABITETHERNET",
		4:   "Type_ETHX_TRUNK",
		5:   "Type_IPX_TRUNK",
		6:   "Type_VIRTUALX_ETHERNET",
		8:   "Type_SERIAL",
		9:   "Type_POS",
		10:  "Type_CPOS",
		11:  "Type_ATM",
		14:  "Type_TUNNEL",
		15:  "Type_VLANIF",
		18:  "Type_NULL",
		19:  "Type_LOOPBACK",
		20:  "Type_X_100GE",
		21:  "Type_LMPIF",
		22:  "Type_MTUNNEL",
		23:  "Type_X_40GE",
		24:  "Type_X_10GE",
		25:  "Type_GEBRIEF",
		26:  "Type_METH",
		27:  "Type_STACKX_PORT",
		28:  "Type_SIP",
		30:  "Type_E1",
		31:  "Type_MPX_GROUP",
		32:  "Type_IMAX_GROUP",
		33:  "Type_VMETH",
		35:  "Type_REMOTEX_AP",
		36:  "Type_VBRIDGE",
		37:  "Type_ATMX_BUNDLE",
		38:  "Type_FIBERX_CHANNEL",
		39:  "Type_INFINIBAND",
		40:  "Type_VBDIF",
		41:  "Type_T1",
		42:  "Type_T3",
		43:  "Type_VC4",
		44:  "Type_VC12",
		45:  "Type_GLOBALX_VE",
		46:  "Type_FABRICX_PORT",
		48:  "Type_E3",
		49:  "Type_VP",
		50:  "Type_DCNINTERFACE",
		51:  "Type_CPOSX_TRUNK",
		52:  "Type_TRUNKX_SERIAL",
		53:  "Type_GLOBALX_MPX_GROUP",
		55:  "Type_OTN",
		57:  "Type_GLOBALX_IMAX_GROUP",
		59:  "Type_POSX_TRUNK",
		63:  "Type_GMPLSX_UNI",
		64:  "Type_WDM",
		65:  "Type_NVE",
		67:  "Type_FCOEX_PORT",
		68:  "Type_VIRTUALX_TEMPLATE",
		70:  "Type_FC",
		71:  "Type_X_4X10GE",
		72:  "Type_X_10X10GE",
		73:  "Type_X_3X40GE",
		74:  "Type_X_4X25GE",
		75:  "Type_X_25GE",
		79:  "Type_IMETH",
		88:  "Type_PWX_VE",
		89:  "Type_VXX_TUNNEL",
		90:  "Type_SERVICEIF",
		91:  "Type_XGIGABITETHERNET",
		92:  "Type_X_200GE",
		94:  "Type_VIRTUALX_ODUK",
		95:  "Type_FLEXE",
		96:  "Type_FLEXEX_200GE",
		101: "Type_X_50X_100GE",
		102: "Type_X_50GE",
		103: "Type_FLEXEX_50G",
		104: "Type_FLEXEX_100G",
		105: "Type_FLEXEX_50X_100G",
		107: "Type_VIRTUALX_SERIAL",
		108: "Type_X_400GE",
		114: "Type_HPGE",
		116: "Type_VIRTUALX_IF",
	}
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_value = map[string]int32{
		"Type_ETHERNET":           0,
		"Type_GIGABITETHERNET":    2,
		"Type_ETHX_TRUNK":         4,
		"Type_IPX_TRUNK":          5,
		"Type_VIRTUALX_ETHERNET":  6,
		"Type_SERIAL":             8,
		"Type_POS":                9,
		"Type_CPOS":               10,
		"Type_ATM":                11,
		"Type_TUNNEL":             14,
		"Type_VLANIF":             15,
		"Type_NULL":               18,
		"Type_LOOPBACK":           19,
		"Type_X_100GE":            20,
		"Type_LMPIF":              21,
		"Type_MTUNNEL":            22,
		"Type_X_40GE":             23,
		"Type_X_10GE":             24,
		"Type_GEBRIEF":            25,
		"Type_METH":               26,
		"Type_STACKX_PORT":        27,
		"Type_SIP":                28,
		"Type_E1":                 30,
		"Type_MPX_GROUP":          31,
		"Type_IMAX_GROUP":         32,
		"Type_VMETH":              33,
		"Type_REMOTEX_AP":         35,
		"Type_VBRIDGE":            36,
		"Type_ATMX_BUNDLE":        37,
		"Type_FIBERX_CHANNEL":     38,
		"Type_INFINIBAND":         39,
		"Type_VBDIF":              40,
		"Type_T1":                 41,
		"Type_T3":                 42,
		"Type_VC4":                43,
		"Type_VC12":               44,
		"Type_GLOBALX_VE":         45,
		"Type_FABRICX_PORT":       46,
		"Type_E3":                 48,
		"Type_VP":                 49,
		"Type_DCNINTERFACE":       50,
		"Type_CPOSX_TRUNK":        51,
		"Type_TRUNKX_SERIAL":      52,
		"Type_GLOBALX_MPX_GROUP":  53,
		"Type_OTN":                55,
		"Type_GLOBALX_IMAX_GROUP": 57,
		"Type_POSX_TRUNK":         59,
		"Type_GMPLSX_UNI":         63,
		"Type_WDM":                64,
		"Type_NVE":                65,
		"Type_FCOEX_PORT":         67,
		"Type_VIRTUALX_TEMPLATE":  68,
		"Type_FC":                 70,
		"Type_X_4X10GE":           71,
		"Type_X_10X10GE":          72,
		"Type_X_3X40GE":           73,
		"Type_X_4X25GE":           74,
		"Type_X_25GE":             75,
		"Type_IMETH":              79,
		"Type_PWX_VE":             88,
		"Type_VXX_TUNNEL":         89,
		"Type_SERVICEIF":          90,
		"Type_XGIGABITETHERNET":   91,
		"Type_X_200GE":            92,
		"Type_VIRTUALX_ODUK":      94,
		"Type_FLEXE":              95,
		"Type_FLEXEX_200GE":       96,
		"Type_X_50X_100GE":        101,
		"Type_X_50GE":             102,
		"Type_FLEXEX_50G":         103,
		"Type_FLEXEX_100G":        104,
		"Type_FLEXEX_50X_100G":    105,
		"Type_VIRTUALX_SERIAL":    107,
		"Type_X_400GE":            108,
		"Type_HPGE":               114,
		"Type_VIRTUALX_IF":        116,
	}
)

func (x Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Enum() *Ifm_StaticDimensionRanges_StaticDimensionRange_Type {
	p := new(Ifm_StaticDimensionRanges_StaticDimensionRange_Type)
	*p = x
	return p
}

func (x Ifm_StaticDimensionRanges_StaticDimensionRange_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[285].Descriptor()
}

func (Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[285]
}

func (x Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_StaticDimensionRanges_StaticDimensionRange_Type.Descriptor instead.
func (Ifm_StaticDimensionRanges_StaticDimensionRange_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

type Ifm_HdlcDamp_DampLevel int32

const (
	Ifm_HdlcDamp_DampLevel_LIGHT  Ifm_HdlcDamp_DampLevel = 0
	Ifm_HdlcDamp_DampLevel_MIDDLE Ifm_HdlcDamp_DampLevel = 1
	Ifm_HdlcDamp_DampLevel_HEAVY  Ifm_HdlcDamp_DampLevel = 2
	Ifm_HdlcDamp_DampLevel_MANUAL Ifm_HdlcDamp_DampLevel = 3
)

// Enum value maps for Ifm_HdlcDamp_DampLevel.
var (
	Ifm_HdlcDamp_DampLevel_name = map[int32]string{
		0: "DampLevel_LIGHT",
		1: "DampLevel_MIDDLE",
		2: "DampLevel_HEAVY",
		3: "DampLevel_MANUAL",
	}
	Ifm_HdlcDamp_DampLevel_value = map[string]int32{
		"DampLevel_LIGHT":  0,
		"DampLevel_MIDDLE": 1,
		"DampLevel_HEAVY":  2,
		"DampLevel_MANUAL": 3,
	}
)

func (x Ifm_HdlcDamp_DampLevel) Enum() *Ifm_HdlcDamp_DampLevel {
	p := new(Ifm_HdlcDamp_DampLevel)
	*p = x
	return p
}

func (x Ifm_HdlcDamp_DampLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_HdlcDamp_DampLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_ifm_proto_enumTypes[286].Descriptor()
}

func (Ifm_HdlcDamp_DampLevel) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_ifm_proto_enumTypes[286]
}

func (x Ifm_HdlcDamp_DampLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_HdlcDamp_DampLevel.Descriptor instead.
func (Ifm_HdlcDamp_DampLevel) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 7, 0}
}

type Ifm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global                *Ifm_Global                `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	Interfaces            *Ifm_Interfaces            `protobuf:"bytes,2,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	Damp                  *Ifm_Damp                  `protobuf:"bytes,3,opt,name=damp,proto3" json:"damp,omitempty"`
	AutoRecoveryTimes     *Ifm_AutoRecoveryTimes     `protobuf:"bytes,4,opt,name=auto_recovery_times,json=auto-recovery-times,proto3" json:"auto_recovery_times,omitempty"`
	StaticDimensionRanges *Ifm_StaticDimensionRanges `protobuf:"bytes,5,opt,name=static_dimension_ranges,json=static-dimension-ranges,proto3" json:"static_dimension_ranges,omitempty"`
	Ipv4InterfaceCount    *Ifm_Ipv4InterfaceCount    `protobuf:"bytes,6,opt,name=ipv4_interface_count,json=ipv4-interface-count,proto3" json:"ipv4_interface_count,omitempty"`
	RemoteInterfaces      *Ifm_RemoteInterfaces      `protobuf:"bytes,7,opt,name=remote_interfaces,json=remote-interfaces,proto3" json:"remote_interfaces,omitempty"`
	HdlcDamp              *Ifm_HdlcDamp              `protobuf:"bytes,8,opt,name=hdlc_damp,json=hdlc-damp,proto3" json:"hdlc_damp,omitempty"`
}

func (x *Ifm) Reset() {
	*x = Ifm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm) ProtoMessage() {}

func (x *Ifm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm.ProtoReflect.Descriptor instead.
func (*Ifm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0}
}

func (x *Ifm) GetGlobal() *Ifm_Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Ifm) GetInterfaces() *Ifm_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Ifm) GetDamp() *Ifm_Damp {
	if x != nil {
		return x.Damp
	}
	return nil
}

func (x *Ifm) GetAutoRecoveryTimes() *Ifm_AutoRecoveryTimes {
	if x != nil {
		return x.AutoRecoveryTimes
	}
	return nil
}

func (x *Ifm) GetStaticDimensionRanges() *Ifm_StaticDimensionRanges {
	if x != nil {
		return x.StaticDimensionRanges
	}
	return nil
}

func (x *Ifm) GetIpv4InterfaceCount() *Ifm_Ipv4InterfaceCount {
	if x != nil {
		return x.Ipv4InterfaceCount
	}
	return nil
}

func (x *Ifm) GetRemoteInterfaces() *Ifm_RemoteInterfaces {
	if x != nil {
		return x.RemoteInterfaces
	}
	return nil
}

func (x *Ifm) GetHdlcDamp() *Ifm_HdlcDamp {
	if x != nil {
		return x.HdlcDamp
	}
	return nil
}

type Ifm_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticInterval          uint32                         `protobuf:"varint,1,opt,name=statistic_interval,json=statistic-interval,proto3" json:"statistic_interval,omitempty"`
	Ipv4IgnorePrimarySub       bool                           `protobuf:"varint,2,opt,name=ipv4_ignore_primary_sub,json=ipv4-ignore-primary-sub,proto3" json:"ipv4_ignore_primary_sub,omitempty"`
	SubInterfaceLinkTrapEnable bool                           `protobuf:"varint,3,opt,name=sub_interface_link_trap_enable,json=sub-interface-link-trap-enable,proto3" json:"sub_interface_link_trap_enable,omitempty"`
	Ipv4ConflictEnable         *Ifm_Global_Ipv4ConflictEnable `protobuf:"bytes,4,opt,name=ipv4_conflict_enable,json=ipv4-conflict-enable,proto3" json:"ipv4_conflict_enable,omitempty"`
	Ipv6ConflictEnable         *Ifm_Global_Ipv6ConflictEnable `protobuf:"bytes,5,opt,name=ipv6_conflict_enable,json=ipv6-conflict-enable,proto3" json:"ipv6_conflict_enable,omitempty"`
	FimIfmGlobal               *Ifm_Global_FimIfmGlobal       `protobuf:"bytes,6,opt,name=fim_ifm_global,json=fim-ifm-global,proto3" json:"fim_ifm_global,omitempty"`
	FimTrunkLocalfwd           *Ifm_Global_FimTrunkLocalfwd   `protobuf:"bytes,7,opt,name=fim_trunk_localfwd,json=fim-trunk-localfwd,proto3" json:"fim_trunk_localfwd,omitempty"`
	VeGroups                   *Ifm_Global_VeGroups           `protobuf:"bytes,8,opt,name=ve_groups,json=ve-groups,proto3" json:"ve_groups,omitempty"`
}

func (x *Ifm_Global) Reset() {
	*x = Ifm_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global) ProtoMessage() {}

func (x *Ifm_Global) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global.ProtoReflect.Descriptor instead.
func (*Ifm_Global) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ifm_Global) GetStatisticInterval() uint32 {
	if x != nil {
		return x.StatisticInterval
	}
	return 0
}

func (x *Ifm_Global) GetIpv4IgnorePrimarySub() bool {
	if x != nil {
		return x.Ipv4IgnorePrimarySub
	}
	return false
}

func (x *Ifm_Global) GetSubInterfaceLinkTrapEnable() bool {
	if x != nil {
		return x.SubInterfaceLinkTrapEnable
	}
	return false
}

func (x *Ifm_Global) GetIpv4ConflictEnable() *Ifm_Global_Ipv4ConflictEnable {
	if x != nil {
		return x.Ipv4ConflictEnable
	}
	return nil
}

func (x *Ifm_Global) GetIpv6ConflictEnable() *Ifm_Global_Ipv6ConflictEnable {
	if x != nil {
		return x.Ipv6ConflictEnable
	}
	return nil
}

func (x *Ifm_Global) GetFimIfmGlobal() *Ifm_Global_FimIfmGlobal {
	if x != nil {
		return x.FimIfmGlobal
	}
	return nil
}

func (x *Ifm_Global) GetFimTrunkLocalfwd() *Ifm_Global_FimTrunkLocalfwd {
	if x != nil {
		return x.FimTrunkLocalfwd
	}
	return nil
}

func (x *Ifm_Global) GetVeGroups() *Ifm_Global_VeGroups {
	if x != nil {
		return x.VeGroups
	}
	return nil
}

type Ifm_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Ifm_Interfaces_Interface `protobuf:"bytes,1,rep,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Ifm_Interfaces) Reset() {
	*x = Ifm_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces) ProtoMessage() {}

func (x *Ifm_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ifm_Interfaces) GetInterface() []*Ifm_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Ifm_Damp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxOff bool `protobuf:"varint,1,opt,name=tx_off,json=tx-off,proto3" json:"tx_off,omitempty"`
}

func (x *Ifm_Damp) Reset() {
	*x = Ifm_Damp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Damp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Damp) ProtoMessage() {}

func (x *Ifm_Damp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Damp.ProtoReflect.Descriptor instead.
func (*Ifm_Damp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ifm_Damp) GetTxOff() bool {
	if x != nil {
		return x.TxOff
	}
	return false
}

type Ifm_AutoRecoveryTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoRecoveryTime []*Ifm_AutoRecoveryTimes_AutoRecoveryTime `protobuf:"bytes,1,rep,name=auto_recovery_time,json=auto-recovery-time,proto3" json:"auto_recovery_time,omitempty"`
}

func (x *Ifm_AutoRecoveryTimes) Reset() {
	*x = Ifm_AutoRecoveryTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_AutoRecoveryTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_AutoRecoveryTimes) ProtoMessage() {}

func (x *Ifm_AutoRecoveryTimes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes.ProtoReflect.Descriptor instead.
func (*Ifm_AutoRecoveryTimes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Ifm_AutoRecoveryTimes) GetAutoRecoveryTime() []*Ifm_AutoRecoveryTimes_AutoRecoveryTime {
	if x != nil {
		return x.AutoRecoveryTime
	}
	return nil
}

type Ifm_StaticDimensionRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticDimensionRange []*Ifm_StaticDimensionRanges_StaticDimensionRange `protobuf:"bytes,1,rep,name=static_dimension_range,json=static-dimension-range,proto3" json:"static_dimension_range,omitempty"`
}

func (x *Ifm_StaticDimensionRanges) Reset() {
	*x = Ifm_StaticDimensionRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_StaticDimensionRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_StaticDimensionRanges) ProtoMessage() {}

func (x *Ifm_StaticDimensionRanges) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_StaticDimensionRanges.ProtoReflect.Descriptor instead.
func (*Ifm_StaticDimensionRanges) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Ifm_StaticDimensionRanges) GetStaticDimensionRange() []*Ifm_StaticDimensionRanges_StaticDimensionRange {
	if x != nil {
		return x.StaticDimensionRange
	}
	return nil
}

type Ifm_Ipv4InterfaceCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalUpCount   uint32 `protobuf:"varint,1,opt,name=physical_up_count,json=physical-up-count,proto3" json:"physical_up_count,omitempty"`
	PhysicalDownCount uint32 `protobuf:"varint,2,opt,name=physical_down_count,json=physical-down-count,proto3" json:"physical_down_count,omitempty"`
	ProtocolUpCount   uint32 `protobuf:"varint,3,opt,name=protocol_up_count,json=protocol-up-count,proto3" json:"protocol_up_count,omitempty"`
	ProtocolDownCount uint32 `protobuf:"varint,4,opt,name=protocol_down_count,json=protocol-down-count,proto3" json:"protocol_down_count,omitempty"`
}

func (x *Ifm_Ipv4InterfaceCount) Reset() {
	*x = Ifm_Ipv4InterfaceCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Ipv4InterfaceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Ipv4InterfaceCount) ProtoMessage() {}

func (x *Ifm_Ipv4InterfaceCount) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Ipv4InterfaceCount.ProtoReflect.Descriptor instead.
func (*Ifm_Ipv4InterfaceCount) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Ifm_Ipv4InterfaceCount) GetPhysicalUpCount() uint32 {
	if x != nil {
		return x.PhysicalUpCount
	}
	return 0
}

func (x *Ifm_Ipv4InterfaceCount) GetPhysicalDownCount() uint32 {
	if x != nil {
		return x.PhysicalDownCount
	}
	return 0
}

func (x *Ifm_Ipv4InterfaceCount) GetProtocolUpCount() uint32 {
	if x != nil {
		return x.ProtocolUpCount
	}
	return 0
}

func (x *Ifm_Ipv4InterfaceCount) GetProtocolDownCount() uint32 {
	if x != nil {
		return x.ProtocolDownCount
	}
	return 0
}

type Ifm_RemoteInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteInterface []*Ifm_RemoteInterfaces_RemoteInterface `protobuf:"bytes,1,rep,name=remote_interface,json=remote-interface,proto3" json:"remote_interface,omitempty"`
}

func (x *Ifm_RemoteInterfaces) Reset() {
	*x = Ifm_RemoteInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_RemoteInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Ifm_RemoteInterfaces) GetRemoteInterface() []*Ifm_RemoteInterfaces_RemoteInterface {
	if x != nil {
		return x.RemoteInterface
	}
	return nil
}

type Ifm_HdlcDamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          bool                   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	DampLevel       Ifm_HdlcDamp_DampLevel `protobuf:"varint,2,opt,name=damp_level,json=damp-level,proto3,enum=huaweiV8R12_ifm.Ifm_HdlcDamp_DampLevel" json:"damp_level,omitempty"`
	Suppress        uint32                 `protobuf:"varint,3,opt,name=suppress,proto3" json:"suppress,omitempty"`
	Reuse           uint32                 `protobuf:"varint,4,opt,name=reuse,proto3" json:"reuse,omitempty"`
	MaxSuppressTime uint32                 `protobuf:"varint,5,opt,name=max_suppress_time,json=max-suppress-time,proto3" json:"max_suppress_time,omitempty"`
	HalfLifeperiod  uint32                 `protobuf:"varint,6,opt,name=half_lifeperiod,json=half-lifeperiod,proto3" json:"half_lifeperiod,omitempty"`
}

func (x *Ifm_HdlcDamp) Reset() {
	*x = Ifm_HdlcDamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_HdlcDamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_HdlcDamp) ProtoMessage() {}

func (x *Ifm_HdlcDamp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_HdlcDamp.ProtoReflect.Descriptor instead.
func (*Ifm_HdlcDamp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Ifm_HdlcDamp) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Ifm_HdlcDamp) GetDampLevel() Ifm_HdlcDamp_DampLevel {
	if x != nil {
		return x.DampLevel
	}
	return Ifm_HdlcDamp_DampLevel_LIGHT
}

func (x *Ifm_HdlcDamp) GetSuppress() uint32 {
	if x != nil {
		return x.Suppress
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetReuse() uint32 {
	if x != nil {
		return x.Reuse
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetMaxSuppressTime() uint32 {
	if x != nil {
		return x.MaxSuppressTime
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetHalfLifeperiod() uint32 {
	if x != nil {
		return x.HalfLifeperiod
	}
	return 0
}

type Ifm_Global_Ipv4ConflictEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreemptEnable bool `protobuf:"varint,1,opt,name=preempt_enable,json=preempt-enable,proto3" json:"preempt_enable,omitempty"`
}

func (x *Ifm_Global_Ipv4ConflictEnable) Reset() {
	*x = Ifm_Global_Ipv4ConflictEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_Ipv4ConflictEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_Ipv4ConflictEnable) ProtoMessage() {}

func (x *Ifm_Global_Ipv4ConflictEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_Ipv4ConflictEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Global_Ipv4ConflictEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Ifm_Global_Ipv4ConflictEnable) GetPreemptEnable() bool {
	if x != nil {
		return x.PreemptEnable
	}
	return false
}

type Ifm_Global_Ipv6ConflictEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreemptEnable bool `protobuf:"varint,1,opt,name=preempt_enable,json=preempt-enable,proto3" json:"preempt_enable,omitempty"`
}

func (x *Ifm_Global_Ipv6ConflictEnable) Reset() {
	*x = Ifm_Global_Ipv6ConflictEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_Ipv6ConflictEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_Ipv6ConflictEnable) ProtoMessage() {}

func (x *Ifm_Global_Ipv6ConflictEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_Ipv6ConflictEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Global_Ipv6ConflictEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Ifm_Global_Ipv6ConflictEnable) GetPreemptEnable() bool {
	if x != nil {
		return x.PreemptEnable
	}
	return false
}

type Ifm_Global_FimIfmGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalStrictFilter  Ifm_Global_FimIfmGlobal_GlobalStrictFilter  `protobuf:"varint,1,opt,name=global_strict_filter,json=global-strict-filter,proto3,enum=huaweiV8R12_ifm.Ifm_Global_FimIfmGlobal_GlobalStrictFilter" json:"global_strict_filter,omitempty"`
	DualStatEnable      Ifm_Global_FimIfmGlobal_DualStatEnable      `protobuf:"varint,2,opt,name=dual_stat_enable,json=dual-stat-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Global_FimIfmGlobal_DualStatEnable" json:"dual_stat_enable,omitempty"`
	TrunkDelaysendTime  uint32                                      `protobuf:"varint,3,opt,name=trunk_delaysend_time,json=trunk-delaysend-time,proto3" json:"trunk_delaysend_time,omitempty"`
	TrunkAdjustEnable   Ifm_Global_FimIfmGlobal_TrunkAdjustEnable   `protobuf:"varint,4,opt,name=trunk_adjust_enable,json=trunk-adjust-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Global_FimIfmGlobal_TrunkAdjustEnable" json:"trunk_adjust_enable,omitempty"`
	QinqTransportEnable Ifm_Global_FimIfmGlobal_QinqTransportEnable `protobuf:"varint,5,opt,name=qinq_transport_enable,json=qinq-transport-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Global_FimIfmGlobal_QinqTransportEnable" json:"qinq_transport_enable,omitempty"`
}

func (x *Ifm_Global_FimIfmGlobal) Reset() {
	*x = Ifm_Global_FimIfmGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_FimIfmGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_FimIfmGlobal) ProtoMessage() {}

func (x *Ifm_Global_FimIfmGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_FimIfmGlobal.ProtoReflect.Descriptor instead.
func (*Ifm_Global_FimIfmGlobal) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Ifm_Global_FimIfmGlobal) GetGlobalStrictFilter() Ifm_Global_FimIfmGlobal_GlobalStrictFilter {
	if x != nil {
		return x.GlobalStrictFilter
	}
	return Ifm_Global_FimIfmGlobal_GlobalStrictFilter_DISABLE
}

func (x *Ifm_Global_FimIfmGlobal) GetDualStatEnable() Ifm_Global_FimIfmGlobal_DualStatEnable {
	if x != nil {
		return x.DualStatEnable
	}
	return Ifm_Global_FimIfmGlobal_DualStatEnable_DISABLE
}

func (x *Ifm_Global_FimIfmGlobal) GetTrunkDelaysendTime() uint32 {
	if x != nil {
		return x.TrunkDelaysendTime
	}
	return 0
}

func (x *Ifm_Global_FimIfmGlobal) GetTrunkAdjustEnable() Ifm_Global_FimIfmGlobal_TrunkAdjustEnable {
	if x != nil {
		return x.TrunkAdjustEnable
	}
	return Ifm_Global_FimIfmGlobal_TrunkAdjustEnable_DISABLE
}

func (x *Ifm_Global_FimIfmGlobal) GetQinqTransportEnable() Ifm_Global_FimIfmGlobal_QinqTransportEnable {
	if x != nil {
		return x.QinqTransportEnable
	}
	return Ifm_Global_FimIfmGlobal_QinqTransportEnable_DISABLE
}

type Ifm_Global_FimTrunkLocalfwd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable Ifm_Global_FimTrunkLocalfwd_Enable `protobuf:"varint,1,opt,name=enable,proto3,enum=huaweiV8R12_ifm.Ifm_Global_FimTrunkLocalfwd_Enable" json:"enable,omitempty"`
}

func (x *Ifm_Global_FimTrunkLocalfwd) Reset() {
	*x = Ifm_Global_FimTrunkLocalfwd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_FimTrunkLocalfwd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_FimTrunkLocalfwd) ProtoMessage() {}

func (x *Ifm_Global_FimTrunkLocalfwd) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_FimTrunkLocalfwd.ProtoReflect.Descriptor instead.
func (*Ifm_Global_FimTrunkLocalfwd) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Ifm_Global_FimTrunkLocalfwd) GetEnable() Ifm_Global_FimTrunkLocalfwd_Enable {
	if x != nil {
		return x.Enable
	}
	return Ifm_Global_FimTrunkLocalfwd_Enable_DISABLE
}

type Ifm_Global_VeGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VeGroup []*Ifm_Global_VeGroups_VeGroup `protobuf:"bytes,1,rep,name=ve_group,json=ve-group,proto3" json:"ve_group,omitempty"`
}

func (x *Ifm_Global_VeGroups) Reset() {
	*x = Ifm_Global_VeGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_VeGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_VeGroups) ProtoMessage() {}

func (x *Ifm_Global_VeGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_VeGroups.ProtoReflect.Descriptor instead.
func (*Ifm_Global_VeGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *Ifm_Global_VeGroups) GetVeGroup() []*Ifm_Global_VeGroups_VeGroup {
	if x != nil {
		return x.VeGroup
	}
	return nil
}

type Ifm_Global_VeGroups_VeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VeGroupId  uint32 `protobuf:"varint,1,opt,name=ve_group_id,json=ve-group-id,proto3" json:"ve_group_id,omitempty"`
	SlotId     string `protobuf:"bytes,2,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	L2VeIfname string `protobuf:"bytes,3,opt,name=l2_ve_ifname,json=l2-ve-ifname,proto3" json:"l2_ve_ifname,omitempty"`
	L3VeIfname string `protobuf:"bytes,4,opt,name=l3_ve_ifname,json=l3-ve-ifname,proto3" json:"l3_ve_ifname,omitempty"`
}

func (x *Ifm_Global_VeGroups_VeGroup) Reset() {
	*x = Ifm_Global_VeGroups_VeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_VeGroups_VeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_VeGroups_VeGroup) ProtoMessage() {}

func (x *Ifm_Global_VeGroups_VeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_VeGroups_VeGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Global_VeGroups_VeGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

func (x *Ifm_Global_VeGroups_VeGroup) GetVeGroupId() uint32 {
	if x != nil {
		return x.VeGroupId
	}
	return 0
}

func (x *Ifm_Global_VeGroups_VeGroup) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Ifm_Global_VeGroups_VeGroup) GetL2VeIfname() string {
	if x != nil {
		return x.L2VeIfname
	}
	return ""
}

func (x *Ifm_Global_VeGroups_VeGroup) GetL3VeIfname() string {
	if x != nil {
		return x.L3VeIfname
	}
	return ""
}

type Ifm_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Index                   uint32                                            `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Class                   Ifm_Interfaces_Interface_Class                    `protobuf:"varint,3,opt,name=class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Class" json:"class,omitempty"`
	Type                    Ifm_Interfaces_Interface_Type                     `protobuf:"varint,4,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Type" json:"type,omitempty"`
	Position                string                                            `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	ParentName              string                                            `protobuf:"bytes,6,opt,name=parent_name,json=parent-name,proto3" json:"parent_name,omitempty"`
	Number                  string                                            `protobuf:"bytes,7,opt,name=number,proto3" json:"number,omitempty"`
	Description             string                                            `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	AggregationName         string                                            `protobuf:"bytes,9,opt,name=aggregation_name,json=aggregation-name,proto3" json:"aggregation_name,omitempty"`
	IsL2Switch              bool                                              `protobuf:"varint,10,opt,name=is_l2_switch,json=is-l2-switch,proto3" json:"is_l2_switch,omitempty"`
	AdminStatus             Ifm_Interfaces_Interface_AdminStatus              `protobuf:"varint,11,opt,name=admin_status,json=admin-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_AdminStatus" json:"admin_status,omitempty"`
	LinkProtocol            Ifm_Interfaces_Interface_LinkProtocol             `protobuf:"varint,12,opt,name=link_protocol,json=link-protocol,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_LinkProtocol" json:"link_protocol,omitempty"`
	RouterType              Ifm_Interfaces_Interface_RouterType               `protobuf:"varint,13,opt,name=router_type,json=router-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_RouterType" json:"router_type,omitempty"`
	ClearIpDf               bool                                              `protobuf:"varint,14,opt,name=clear_ip_df,json=clear-ip-df,proto3" json:"clear_ip_df,omitempty"`
	LinkUpDownTrapEnable    bool                                              `protobuf:"varint,15,opt,name=link_up_down_trap_enable,json=link-up-down-trap-enable,proto3" json:"link_up_down_trap_enable,omitempty"`
	StatisticEnable         bool                                              `protobuf:"varint,16,opt,name=statistic_enable,json=statistic-enable,proto3" json:"statistic_enable,omitempty"`
	StatisticMode           Ifm_Interfaces_Interface_StatisticMode            `protobuf:"varint,17,opt,name=statistic_mode,json=statistic-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_StatisticMode" json:"statistic_mode,omitempty"`
	Bandwidth               uint32                                            `protobuf:"varint,18,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Mtu                     uint32                                            `protobuf:"varint,19,opt,name=mtu,proto3" json:"mtu,omitempty"`
	SpreadMtuFlag           bool                                              `protobuf:"varint,20,opt,name=spread_mtu_flag,json=spread-mtu-flag,proto3" json:"spread_mtu_flag,omitempty"`
	StatisticInterval       uint32                                            `protobuf:"varint,21,opt,name=statistic_interval,json=statistic-interval,proto3" json:"statistic_interval,omitempty"`
	VrfName                 string                                            `protobuf:"bytes,22,opt,name=vrf_name,json=vrf-name,proto3" json:"vrf_name,omitempty"`
	L2ModeEnable            bool                                              `protobuf:"varint,23,opt,name=l2_mode_enable,json=l2-mode-enable,proto3" json:"l2_mode_enable,omitempty"`
	DownDelayTime           uint32                                            `protobuf:"varint,24,opt,name=down_delay_time,json=down-delay-time,proto3" json:"down_delay_time,omitempty"`
	MacAddress              string                                            `protobuf:"bytes,25,opt,name=mac_address,json=mac-address,proto3" json:"mac_address,omitempty"`
	Dynamic                 *Ifm_Interfaces_Interface_Dynamic                 `protobuf:"bytes,26,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	MibStatistics           *Ifm_Interfaces_Interface_MibStatistics           `protobuf:"bytes,27,opt,name=mib_statistics,json=mib-statistics,proto3" json:"mib_statistics,omitempty"`
	CommonStatistics        *Ifm_Interfaces_Interface_CommonStatistics        `protobuf:"bytes,28,opt,name=common_statistics,json=common-statistics,proto3" json:"common_statistics,omitempty"`
	VsName                  string                                            `protobuf:"bytes,29,opt,name=vs_name,json=vs-name,proto3" json:"vs_name,omitempty"`
	L2SwitchPortIndex       uint32                                            `protobuf:"varint,30,opt,name=l2_switch_port_index,json=l2-switch-port-index,proto3" json:"l2_switch_port_index,omitempty"`
	ServiceType             Ifm_Interfaces_Interface_ServiceType              `protobuf:"varint,31,opt,name=service_type,json=service-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ServiceType" json:"service_type,omitempty"`
	EncapsulationType       Ifm_Interfaces_Interface_EncapsulationType        `protobuf:"varint,32,opt,name=encapsulation_type,json=encapsulation-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_EncapsulationType" json:"encapsulation_type,omitempty"`
	NetworkLayerStatus      Ifm_Interfaces_Interface_NetworkLayerStatus       `protobuf:"varint,33,opt,name=network_layer_status,json=network-layer-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_NetworkLayerStatus" json:"network_layer_status,omitempty"`
	ProtocolUpDelayTime     uint32                                            `protobuf:"varint,34,opt,name=protocol_up_delay_time,json=protocol-up-delay-time,proto3" json:"protocol_up_delay_time,omitempty"`
	ControlFlap             *Ifm_Interfaces_Interface_ControlFlap             `protobuf:"bytes,35,opt,name=control_flap,json=control-flap,proto3" json:"control_flap,omitempty"`
	TrapThreshold           *Ifm_Interfaces_Interface_TrapThreshold           `protobuf:"bytes,36,opt,name=trap_threshold,json=trap-threshold,proto3" json:"trap_threshold,omitempty"`
	DampState               *Ifm_Interfaces_Interface_DampState               `protobuf:"bytes,37,opt,name=damp_state,json=damp-state,proto3" json:"damp_state,omitempty"`
	ErrorDown               *Ifm_Interfaces_Interface_ErrorDown               `protobuf:"bytes,38,opt,name=error_down,json=error-down,proto3" json:"error_down,omitempty"`
	TunnelProtocol          *Ifm_Interfaces_Interface_TunnelProtocol          `protobuf:"bytes,39,opt,name=tunnel_protocol,json=tunnel-protocol,proto3" json:"tunnel_protocol,omitempty"`
	BdifAttribute           *Ifm_Interfaces_Interface_BdifAttribute           `protobuf:"bytes,40,opt,name=bdif_attribute,json=bdif-attribute,proto3" json:"bdif_attribute,omitempty"`
	Ipv4                    *Ifm_Interfaces_Interface_Ipv4                    `protobuf:"bytes,41,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                    *Ifm_Interfaces_Interface_Ipv6                    `protobuf:"bytes,42,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Trunk                   *Ifm_Interfaces_Interface_Trunk                   `protobuf:"bytes,43,opt,name=trunk,proto3" json:"trunk,omitempty"`
	VlanifAttribute         *Ifm_Interfaces_Interface_VlanifAttribute         `protobuf:"bytes,44,opt,name=vlanif_attribute,json=vlanif-attribute,proto3" json:"vlanif_attribute,omitempty"`
	Ethernet                *Ifm_Interfaces_Interface_Ethernet                `protobuf:"bytes,45,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	ArpEntry                *Ifm_Interfaces_Interface_ArpEntry                `protobuf:"bytes,46,opt,name=arp_entry,json=arp-entry,proto3" json:"arp_entry,omitempty"`
	ArpStatusDetect         *Ifm_Interfaces_Interface_ArpStatusDetect         `protobuf:"bytes,47,opt,name=arp_status_detect,json=arp-status-detect,proto3" json:"arp_status_detect,omitempty"`
	ArpPortSecurity         *Ifm_Interfaces_Interface_ArpPortSecurity         `protobuf:"bytes,48,opt,name=arp_port_security,json=arp-port-security,proto3" json:"arp_port_security,omitempty"`
	Bfd                     *Ifm_Interfaces_Interface_Bfd                     `protobuf:"bytes,49,opt,name=bfd,proto3" json:"bfd,omitempty"`
	Qos                     *Ifm_Interfaces_Interface_Qos                     `protobuf:"bytes,50,opt,name=qos,proto3" json:"qos,omitempty"`
	BfdExt                  *Ifm_Interfaces_Interface_BfdExt                  `protobuf:"bytes,51,opt,name=bfd_ext,json=bfd-ext,proto3" json:"bfd_ext,omitempty"`
	ArpSending              *Ifm_Interfaces_Interface_ArpSending              `protobuf:"bytes,52,opt,name=arp_sending,json=arp-sending,proto3" json:"arp_sending,omitempty"`
	NdSending               *Ifm_Interfaces_Interface_NdSending               `protobuf:"bytes,53,opt,name=nd_sending,json=nd-sending,proto3" json:"nd_sending,omitempty"`
	Nve                     *Ifm_Interfaces_Interface_Nve                     `protobuf:"bytes,54,opt,name=nve,proto3" json:"nve,omitempty"`
	Nvo3Gateway             *Ifm_Interfaces_Interface_Nvo3Gateway             `protobuf:"bytes,55,opt,name=nvo3_gateway,json=nvo3-gateway,proto3" json:"nvo3_gateway,omitempty"`
	Bas                     *Ifm_Interfaces_Interface_Bas                     `protobuf:"bytes,56,opt,name=bas,proto3" json:"bas,omitempty"`
	Bras                    *Ifm_Interfaces_Interface_Bras                    `protobuf:"bytes,57,opt,name=bras,proto3" json:"bras,omitempty"`
	PppoeBindVt             *Ifm_Interfaces_Interface_PppoeBindVt             `protobuf:"bytes,58,opt,name=pppoe_bind_vt,json=pppoe-bind-vt,proto3" json:"pppoe_bind_vt,omitempty"`
	PppoeVt                 *Ifm_Interfaces_Interface_PppoeVt                 `protobuf:"bytes,59,opt,name=pppoe_vt,json=pppoe-vt,proto3" json:"pppoe_vt,omitempty"`
	TcpMssValue             *Ifm_Interfaces_Interface_TcpMssValue             `protobuf:"bytes,60,opt,name=tcp_mss_value,json=tcp-mss-value,proto3" json:"tcp_mss_value,omitempty"`
	Ipv4Urpf                *Ifm_Interfaces_Interface_Ipv4Urpf                `protobuf:"bytes,61,opt,name=ipv4_urpf,json=ipv4-urpf,proto3" json:"ipv4_urpf,omitempty"`
	Ipv6Urpf                *Ifm_Interfaces_Interface_Ipv6Urpf                `protobuf:"bytes,62,opt,name=ipv6_urpf,json=ipv6-urpf,proto3" json:"ipv6_urpf,omitempty"`
	RoamDomain              *Ifm_Interfaces_Interface_RoamDomain              `protobuf:"bytes,63,opt,name=roam_domain,json=roam-domain,proto3" json:"roam_domain,omitempty"`
	PtpPortSrcs             *Ifm_Interfaces_Interface_PtpPortSrcs             `protobuf:"bytes,64,opt,name=ptp_port_srcs,json=ptp-port-srcs,proto3" json:"ptp_port_srcs,omitempty"`
	VinterLinks             *Ifm_Interfaces_Interface_VinterLinks             `protobuf:"bytes,65,opt,name=vinter_links,json=vinter-links,proto3" json:"vinter_links,omitempty"`
	ClocksyncFlexe          *Ifm_Interfaces_Interface_ClocksyncFlexe          `protobuf:"bytes,66,opt,name=clocksync_flexe,json=clocksync-flexe,proto3" json:"clocksync_flexe,omitempty"`
	GpsPortSrcs             *Ifm_Interfaces_Interface_GpsPortSrcs             `protobuf:"bytes,67,opt,name=gps_port_srcs,json=gps-port-srcs,proto3" json:"gps_port_srcs,omitempty"`
	ClockPortSources        *Ifm_Interfaces_Interface_ClockPortSources        `protobuf:"bytes,68,opt,name=clock_port_sources,json=clock-port-sources,proto3" json:"clock_port_sources,omitempty"`
	PtpaPorts               *Ifm_Interfaces_Interface_PtpaPorts               `protobuf:"bytes,69,opt,name=ptpa_ports,json=ptpa-ports,proto3" json:"ptpa_ports,omitempty"`
	Cpudefend               *Ifm_Interfaces_Interface_Cpudefend               `protobuf:"bytes,70,opt,name=cpudefend,proto3" json:"cpudefend,omitempty"`
	Dcn                     *Ifm_Interfaces_Interface_Dcn                     `protobuf:"bytes,71,opt,name=dcn,proto3" json:"dcn,omitempty"`
	DhcpRelayAttribute      *Ifm_Interfaces_Interface_DhcpRelayAttribute      `protobuf:"bytes,72,opt,name=dhcp_relay_attribute,json=dhcp-relay-attribute,proto3" json:"dhcp_relay_attribute,omitempty"`
	DhcpIf                  *Ifm_Interfaces_Interface_DhcpIf                  `protobuf:"bytes,73,opt,name=dhcp_if,json=dhcp-if,proto3" json:"dhcp_if,omitempty"`
	DhcpClientIf            *Ifm_Interfaces_Interface_DhcpClientIf            `protobuf:"bytes,74,opt,name=dhcp_client_if,json=dhcp-client-if,proto3" json:"dhcp_client_if,omitempty"`
	DhcpSnoopingIf          *Ifm_Interfaces_Interface_DhcpSnoopingIf          `protobuf:"bytes,75,opt,name=dhcp_snooping_if,json=dhcp-snooping-if,proto3" json:"dhcp_snooping_if,omitempty"`
	Dhcpv6RelayAttribute    *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute    `protobuf:"bytes,76,opt,name=dhcpv6_relay_attribute,json=dhcpv6-relay-attribute,proto3" json:"dhcpv6_relay_attribute,omitempty"`
	Efm                     *Ifm_Interfaces_Interface_Efm                     `protobuf:"bytes,77,opt,name=efm,proto3" json:"efm,omitempty"`
	Evpn                    *Ifm_Interfaces_Interface_Evpn                    `protobuf:"bytes,78,opt,name=evpn,proto3" json:"evpn,omitempty"`
	Fim                     *Ifm_Interfaces_Interface_Fim                     `protobuf:"bytes,79,opt,name=fim,proto3" json:"fim,omitempty"`
	FimIfmMru               *Ifm_Interfaces_Interface_FimIfmMru               `protobuf:"bytes,80,opt,name=fim_ifm_mru,json=fim-ifm-mru,proto3" json:"fim_ifm_mru,omitempty"`
	FimTcpMss               *Ifm_Interfaces_Interface_FimTcpMss               `protobuf:"bytes,81,opt,name=fim_tcp_mss,json=fim-tcp-mss,proto3" json:"fim_tcp_mss,omitempty"`
	FimIfmBdifint           *Ifm_Interfaces_Interface_FimIfmBdifint           `protobuf:"bytes,82,opt,name=fim_ifm_bdifint,json=fim-ifm-bdifint,proto3" json:"fim_ifm_bdifint,omitempty"`
	FimIfmVeint             *Ifm_Interfaces_Interface_FimIfmVeint             `protobuf:"bytes,83,opt,name=fim_ifm_veint,json=fim-ifm-veint,proto3" json:"fim_ifm_veint,omitempty"`
	VeGroup                 *Ifm_Interfaces_Interface_VeGroup                 `protobuf:"bytes,84,opt,name=ve_group,json=ve-group,proto3" json:"ve_group,omitempty"`
	MruDiscardStatistic     *Ifm_Interfaces_Interface_MruDiscardStatistic     `protobuf:"bytes,85,opt,name=mru_discard_statistic,json=mru-discard-statistic,proto3" json:"mru_discard_statistic,omitempty"`
	MacmtuDiscardStat       *Ifm_Interfaces_Interface_MacmtuDiscardStat       `protobuf:"bytes,86,opt,name=macmtu_discard_stat,json=macmtu-discard-stat,proto3" json:"macmtu_discard_stat,omitempty"`
	FlowRecognition         *Ifm_Interfaces_Interface_FlowRecognition         `protobuf:"bytes,87,opt,name=flow_recognition,json=flow-recognition,proto3" json:"flow_recognition,omitempty"`
	FlowspecForward         *Ifm_Interfaces_Interface_FlowspecForward         `protobuf:"bytes,88,opt,name=flowspec_forward,json=flowspec-forward,proto3" json:"flowspec_forward,omitempty"`
	If_8021PPriority        *Ifm_Interfaces_Interface_If8021PPriority         `protobuf:"bytes,89,opt,name=if_8021p_priority,json=if-8021p-priority,proto3" json:"if_8021p_priority,omitempty"`
	ManagementPlaneDefendIf *Ifm_Interfaces_Interface_ManagementPlaneDefendIf `protobuf:"bytes,90,opt,name=management_plane_defend_if,json=management-plane-defend-if,proto3" json:"management_plane_defend_if,omitempty"`
	IgmpSnooping            *Ifm_Interfaces_Interface_IgmpSnooping            `protobuf:"bytes,91,opt,name=igmp_snooping,json=igmp-snooping,proto3" json:"igmp_snooping,omitempty"`
	HwmcIfEnable            *Ifm_Interfaces_Interface_HwmcIfEnable            `protobuf:"bytes,92,opt,name=hwmc_if_enable,json=hwmc-if-enable,proto3" json:"hwmc_if_enable,omitempty"`
	ProtocolActions         *Ifm_Interfaces_Interface_ProtocolActions         `protobuf:"bytes,93,opt,name=protocol_actions,json=protocol-actions,proto3" json:"protocol_actions,omitempty"`
	VllPwLoopCheck          *Ifm_Interfaces_Interface_VllPwLoopCheck          `protobuf:"bytes,94,opt,name=vll_pw_loop_check,json=vll-pw-loop-check,proto3" json:"vll_pw_loop_check,omitempty"`
	EncapsulationVlan       *Ifm_Interfaces_Interface_EncapsulationVlan       `protobuf:"bytes,95,opt,name=encapsulation_vlan,json=encapsulation-vlan,proto3" json:"encapsulation_vlan,omitempty"`
	Lldp                    *Ifm_Interfaces_Interface_Lldp                    `protobuf:"bytes,96,opt,name=lldp,proto3" json:"lldp,omitempty"`
	Loadbalance             *Ifm_Interfaces_Interface_Loadbalance             `protobuf:"bytes,97,opt,name=loadbalance,proto3" json:"loadbalance,omitempty"`
	Loopdetect              *Ifm_Interfaces_Interface_Loopdetect              `protobuf:"bytes,98,opt,name=loopdetect,proto3" json:"loopdetect,omitempty"`
	Macsec                  *Ifm_Interfaces_Interface_Macsec                  `protobuf:"bytes,99,opt,name=macsec,proto3" json:"macsec,omitempty"`
	Mirror                  *Ifm_Interfaces_Interface_Mirror                  `protobuf:"bytes,100,opt,name=mirror,proto3" json:"mirror,omitempty"`
	TrackMonitorGroup       *Ifm_Interfaces_Interface_TrackMonitorGroup       `protobuf:"bytes,101,opt,name=track_monitor_group,json=track-monitor-group,proto3" json:"track_monitor_group,omitempty"`
	Deephashcfg             *Ifm_Interfaces_Interface_Deephashcfg             `protobuf:"bytes,102,opt,name=deephashcfg,proto3" json:"deephashcfg,omitempty"`
	IfPoisonReverse         *Ifm_Interfaces_Interface_IfPoisonReverse         `protobuf:"bytes,103,opt,name=if_poison_reverse,json=if-poison-reverse,proto3" json:"if_poison_reverse,omitempty"`
	IfP2MpLoadBalance       *Ifm_Interfaces_Interface_IfP2MpLoadBalance       `protobuf:"bytes,104,opt,name=if_p2mp_load_balance,json=if-p2mp-load-balance,proto3" json:"if_p2mp_load_balance,omitempty"`
	BgpLocalifnetTraffic    *Ifm_Interfaces_Interface_BgpLocalifnetTraffic    `protobuf:"bytes,105,opt,name=bgp_localifnet_traffic,json=bgp-localifnet-traffic,proto3" json:"bgp_localifnet_traffic,omitempty"`
	MulticastForward        *Ifm_Interfaces_Interface_MulticastForward        `protobuf:"bytes,106,opt,name=multicast_forward,json=multicast-forward,proto3" json:"multicast_forward,omitempty"`
	Netstream               *Ifm_Interfaces_Interface_Netstream               `protobuf:"bytes,107,opt,name=netstream,proto3" json:"netstream,omitempty"`
	Nvo3VtepStatistics      *Ifm_Interfaces_Interface_Nvo3VtepStatistics      `protobuf:"bytes,108,opt,name=nvo3_vtep_statistics,json=nvo3-vtep-statistics,proto3" json:"nvo3_vtep_statistics,omitempty"`
	IfIcmpSecuritys         *Ifm_Interfaces_Interface_IfIcmpSecuritys         `protobuf:"bytes,109,opt,name=if_icmp_securitys,json=if-icmp-securitys,proto3" json:"if_icmp_securitys,omitempty"`
	IfIpOptSecuritys        *Ifm_Interfaces_Interface_IfIpOptSecuritys        `protobuf:"bytes,110,opt,name=if_ip_opt_securitys,json=if-ip-opt-securitys,proto3" json:"if_ip_opt_securitys,omitempty"`
	IpVerifySrcAddr         *Ifm_Interfaces_Interface_IpVerifySrcAddr         `protobuf:"bytes,111,opt,name=ip_verify_src_addr,json=ip-verify-src-addr,proto3" json:"ip_verify_src_addr,omitempty"`
	IpFwdBroadcast          *Ifm_Interfaces_Interface_IpFwdBroadcast          `protobuf:"bytes,112,opt,name=ip_fwd_broadcast,json=ip-fwd-broadcast,proto3" json:"ip_fwd_broadcast,omitempty"`
	Rbs                     *Ifm_Interfaces_Interface_Rbs                     `protobuf:"bytes,113,opt,name=rbs,proto3" json:"rbs,omitempty"`
	Vrrp                    *Ifm_Interfaces_Interface_Vrrp                    `protobuf:"bytes,114,opt,name=vrrp,proto3" json:"vrrp,omitempty"`
	UnicastForward          *Ifm_Interfaces_Interface_UnicastForward          `protobuf:"bytes,115,opt,name=unicast_forward,json=unicast-forward,proto3" json:"unicast_forward,omitempty"`
	UnknowUnicastThreshold  *Ifm_Interfaces_Interface_UnknowUnicastThreshold  `protobuf:"bytes,116,opt,name=unknow_unicast_threshold,json=unknow-unicast-threshold,proto3" json:"unknow_unicast_threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface) Reset() {
	*x = Ifm_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Ifm_Interfaces_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetClass() Ifm_Interfaces_Interface_Class {
	if x != nil {
		return x.Class
	}
	return Ifm_Interfaces_Interface_Class_MAINX_INTERFACE
}

func (x *Ifm_Interfaces_Interface) GetType() Ifm_Interfaces_Interface_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Type_ETHERNET
}

func (x *Ifm_Interfaces_Interface) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIsL2Switch() bool {
	if x != nil {
		return x.IsL2Switch
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetAdminStatus() Ifm_Interfaces_Interface_AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return Ifm_Interfaces_Interface_AdminStatus_DOWN
}

func (x *Ifm_Interfaces_Interface) GetLinkProtocol() Ifm_Interfaces_Interface_LinkProtocol {
	if x != nil {
		return x.LinkProtocol
	}
	return Ifm_Interfaces_Interface_LinkProtocol_ETHERNET
}

func (x *Ifm_Interfaces_Interface) GetRouterType() Ifm_Interfaces_Interface_RouterType {
	if x != nil {
		return x.RouterType
	}
	return Ifm_Interfaces_Interface_RouterType_PTOP
}

func (x *Ifm_Interfaces_Interface) GetClearIpDf() bool {
	if x != nil {
		return x.ClearIpDf
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetLinkUpDownTrapEnable() bool {
	if x != nil {
		return x.LinkUpDownTrapEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetStatisticEnable() bool {
	if x != nil {
		return x.StatisticEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetStatisticMode() Ifm_Interfaces_Interface_StatisticMode {
	if x != nil {
		return x.StatisticMode
	}
	return Ifm_Interfaces_Interface_INVALID_ENUM_VALUE_StatisticMode
}

func (x *Ifm_Interfaces_Interface) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetSpreadMtuFlag() bool {
	if x != nil {
		return x.SpreadMtuFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetStatisticInterval() uint32 {
	if x != nil {
		return x.StatisticInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetL2ModeEnable() bool {
	if x != nil {
		return x.L2ModeEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetDownDelayTime() uint32 {
	if x != nil {
		return x.DownDelayTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetDynamic() *Ifm_Interfaces_Interface_Dynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMibStatistics() *Ifm_Interfaces_Interface_MibStatistics {
	if x != nil {
		return x.MibStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetCommonStatistics() *Ifm_Interfaces_Interface_CommonStatistics {
	if x != nil {
		return x.CommonStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVsName() string {
	if x != nil {
		return x.VsName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetL2SwitchPortIndex() uint32 {
	if x != nil {
		return x.L2SwitchPortIndex
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetServiceType() Ifm_Interfaces_Interface_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return Ifm_Interfaces_Interface_ServiceType_NONE
}

func (x *Ifm_Interfaces_Interface) GetEncapsulationType() Ifm_Interfaces_Interface_EncapsulationType {
	if x != nil {
		return x.EncapsulationType
	}
	return Ifm_Interfaces_Interface_EncapsulationType_VLANX_TYPE
}

func (x *Ifm_Interfaces_Interface) GetNetworkLayerStatus() Ifm_Interfaces_Interface_NetworkLayerStatus {
	if x != nil {
		return x.NetworkLayerStatus
	}
	return Ifm_Interfaces_Interface_NetworkLayerStatus_IPV4X_IPV6X_UP
}

func (x *Ifm_Interfaces_Interface) GetProtocolUpDelayTime() uint32 {
	if x != nil {
		return x.ProtocolUpDelayTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetControlFlap() *Ifm_Interfaces_Interface_ControlFlap {
	if x != nil {
		return x.ControlFlap
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTrapThreshold() *Ifm_Interfaces_Interface_TrapThreshold {
	if x != nil {
		return x.TrapThreshold
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDampState() *Ifm_Interfaces_Interface_DampState {
	if x != nil {
		return x.DampState
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetErrorDown() *Ifm_Interfaces_Interface_ErrorDown {
	if x != nil {
		return x.ErrorDown
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTunnelProtocol() *Ifm_Interfaces_Interface_TunnelProtocol {
	if x != nil {
		return x.TunnelProtocol
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBdifAttribute() *Ifm_Interfaces_Interface_BdifAttribute {
	if x != nil {
		return x.BdifAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv4() *Ifm_Interfaces_Interface_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv6() *Ifm_Interfaces_Interface_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTrunk() *Ifm_Interfaces_Interface_Trunk {
	if x != nil {
		return x.Trunk
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVlanifAttribute() *Ifm_Interfaces_Interface_VlanifAttribute {
	if x != nil {
		return x.VlanifAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetEthernet() *Ifm_Interfaces_Interface_Ethernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpEntry() *Ifm_Interfaces_Interface_ArpEntry {
	if x != nil {
		return x.ArpEntry
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpStatusDetect() *Ifm_Interfaces_Interface_ArpStatusDetect {
	if x != nil {
		return x.ArpStatusDetect
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpPortSecurity() *Ifm_Interfaces_Interface_ArpPortSecurity {
	if x != nil {
		return x.ArpPortSecurity
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBfd() *Ifm_Interfaces_Interface_Bfd {
	if x != nil {
		return x.Bfd
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetQos() *Ifm_Interfaces_Interface_Qos {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBfdExt() *Ifm_Interfaces_Interface_BfdExt {
	if x != nil {
		return x.BfdExt
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpSending() *Ifm_Interfaces_Interface_ArpSending {
	if x != nil {
		return x.ArpSending
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNdSending() *Ifm_Interfaces_Interface_NdSending {
	if x != nil {
		return x.NdSending
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNve() *Ifm_Interfaces_Interface_Nve {
	if x != nil {
		return x.Nve
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNvo3Gateway() *Ifm_Interfaces_Interface_Nvo3Gateway {
	if x != nil {
		return x.Nvo3Gateway
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBas() *Ifm_Interfaces_Interface_Bas {
	if x != nil {
		return x.Bas
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBras() *Ifm_Interfaces_Interface_Bras {
	if x != nil {
		return x.Bras
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPppoeBindVt() *Ifm_Interfaces_Interface_PppoeBindVt {
	if x != nil {
		return x.PppoeBindVt
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPppoeVt() *Ifm_Interfaces_Interface_PppoeVt {
	if x != nil {
		return x.PppoeVt
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTcpMssValue() *Ifm_Interfaces_Interface_TcpMssValue {
	if x != nil {
		return x.TcpMssValue
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv4Urpf() *Ifm_Interfaces_Interface_Ipv4Urpf {
	if x != nil {
		return x.Ipv4Urpf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv6Urpf() *Ifm_Interfaces_Interface_Ipv6Urpf {
	if x != nil {
		return x.Ipv6Urpf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetRoamDomain() *Ifm_Interfaces_Interface_RoamDomain {
	if x != nil {
		return x.RoamDomain
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPtpPortSrcs() *Ifm_Interfaces_Interface_PtpPortSrcs {
	if x != nil {
		return x.PtpPortSrcs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVinterLinks() *Ifm_Interfaces_Interface_VinterLinks {
	if x != nil {
		return x.VinterLinks
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetClocksyncFlexe() *Ifm_Interfaces_Interface_ClocksyncFlexe {
	if x != nil {
		return x.ClocksyncFlexe
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetGpsPortSrcs() *Ifm_Interfaces_Interface_GpsPortSrcs {
	if x != nil {
		return x.GpsPortSrcs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetClockPortSources() *Ifm_Interfaces_Interface_ClockPortSources {
	if x != nil {
		return x.ClockPortSources
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPtpaPorts() *Ifm_Interfaces_Interface_PtpaPorts {
	if x != nil {
		return x.PtpaPorts
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetCpudefend() *Ifm_Interfaces_Interface_Cpudefend {
	if x != nil {
		return x.Cpudefend
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDcn() *Ifm_Interfaces_Interface_Dcn {
	if x != nil {
		return x.Dcn
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpRelayAttribute() *Ifm_Interfaces_Interface_DhcpRelayAttribute {
	if x != nil {
		return x.DhcpRelayAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpIf() *Ifm_Interfaces_Interface_DhcpIf {
	if x != nil {
		return x.DhcpIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpClientIf() *Ifm_Interfaces_Interface_DhcpClientIf {
	if x != nil {
		return x.DhcpClientIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpSnoopingIf() *Ifm_Interfaces_Interface_DhcpSnoopingIf {
	if x != nil {
		return x.DhcpSnoopingIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpv6RelayAttribute() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute {
	if x != nil {
		return x.Dhcpv6RelayAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetEfm() *Ifm_Interfaces_Interface_Efm {
	if x != nil {
		return x.Efm
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetEvpn() *Ifm_Interfaces_Interface_Evpn {
	if x != nil {
		return x.Evpn
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFim() *Ifm_Interfaces_Interface_Fim {
	if x != nil {
		return x.Fim
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFimIfmMru() *Ifm_Interfaces_Interface_FimIfmMru {
	if x != nil {
		return x.FimIfmMru
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFimTcpMss() *Ifm_Interfaces_Interface_FimTcpMss {
	if x != nil {
		return x.FimTcpMss
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFimIfmBdifint() *Ifm_Interfaces_Interface_FimIfmBdifint {
	if x != nil {
		return x.FimIfmBdifint
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFimIfmVeint() *Ifm_Interfaces_Interface_FimIfmVeint {
	if x != nil {
		return x.FimIfmVeint
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVeGroup() *Ifm_Interfaces_Interface_VeGroup {
	if x != nil {
		return x.VeGroup
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMruDiscardStatistic() *Ifm_Interfaces_Interface_MruDiscardStatistic {
	if x != nil {
		return x.MruDiscardStatistic
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMacmtuDiscardStat() *Ifm_Interfaces_Interface_MacmtuDiscardStat {
	if x != nil {
		return x.MacmtuDiscardStat
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFlowRecognition() *Ifm_Interfaces_Interface_FlowRecognition {
	if x != nil {
		return x.FlowRecognition
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFlowspecForward() *Ifm_Interfaces_Interface_FlowspecForward {
	if x != nil {
		return x.FlowspecForward
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIf_8021PPriority() *Ifm_Interfaces_Interface_If8021PPriority {
	if x != nil {
		return x.If_8021PPriority
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetManagementPlaneDefendIf() *Ifm_Interfaces_Interface_ManagementPlaneDefendIf {
	if x != nil {
		return x.ManagementPlaneDefendIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIgmpSnooping() *Ifm_Interfaces_Interface_IgmpSnooping {
	if x != nil {
		return x.IgmpSnooping
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetHwmcIfEnable() *Ifm_Interfaces_Interface_HwmcIfEnable {
	if x != nil {
		return x.HwmcIfEnable
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetProtocolActions() *Ifm_Interfaces_Interface_ProtocolActions {
	if x != nil {
		return x.ProtocolActions
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVllPwLoopCheck() *Ifm_Interfaces_Interface_VllPwLoopCheck {
	if x != nil {
		return x.VllPwLoopCheck
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetEncapsulationVlan() *Ifm_Interfaces_Interface_EncapsulationVlan {
	if x != nil {
		return x.EncapsulationVlan
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetLldp() *Ifm_Interfaces_Interface_Lldp {
	if x != nil {
		return x.Lldp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetLoadbalance() *Ifm_Interfaces_Interface_Loadbalance {
	if x != nil {
		return x.Loadbalance
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetLoopdetect() *Ifm_Interfaces_Interface_Loopdetect {
	if x != nil {
		return x.Loopdetect
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMacsec() *Ifm_Interfaces_Interface_Macsec {
	if x != nil {
		return x.Macsec
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMirror() *Ifm_Interfaces_Interface_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTrackMonitorGroup() *Ifm_Interfaces_Interface_TrackMonitorGroup {
	if x != nil {
		return x.TrackMonitorGroup
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDeephashcfg() *Ifm_Interfaces_Interface_Deephashcfg {
	if x != nil {
		return x.Deephashcfg
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfPoisonReverse() *Ifm_Interfaces_Interface_IfPoisonReverse {
	if x != nil {
		return x.IfPoisonReverse
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfP2MpLoadBalance() *Ifm_Interfaces_Interface_IfP2MpLoadBalance {
	if x != nil {
		return x.IfP2MpLoadBalance
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBgpLocalifnetTraffic() *Ifm_Interfaces_Interface_BgpLocalifnetTraffic {
	if x != nil {
		return x.BgpLocalifnetTraffic
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMulticastForward() *Ifm_Interfaces_Interface_MulticastForward {
	if x != nil {
		return x.MulticastForward
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNetstream() *Ifm_Interfaces_Interface_Netstream {
	if x != nil {
		return x.Netstream
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNvo3VtepStatistics() *Ifm_Interfaces_Interface_Nvo3VtepStatistics {
	if x != nil {
		return x.Nvo3VtepStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfIcmpSecuritys() *Ifm_Interfaces_Interface_IfIcmpSecuritys {
	if x != nil {
		return x.IfIcmpSecuritys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfIpOptSecuritys() *Ifm_Interfaces_Interface_IfIpOptSecuritys {
	if x != nil {
		return x.IfIpOptSecuritys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpVerifySrcAddr() *Ifm_Interfaces_Interface_IpVerifySrcAddr {
	if x != nil {
		return x.IpVerifySrcAddr
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpFwdBroadcast() *Ifm_Interfaces_Interface_IpFwdBroadcast {
	if x != nil {
		return x.IpFwdBroadcast
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetRbs() *Ifm_Interfaces_Interface_Rbs {
	if x != nil {
		return x.Rbs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVrrp() *Ifm_Interfaces_Interface_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetUnicastForward() *Ifm_Interfaces_Interface_UnicastForward {
	if x != nil {
		return x.UnicastForward
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetUnknowUnicastThreshold() *Ifm_Interfaces_Interface_UnknowUnicastThreshold {
	if x != nil {
		return x.UnknowUnicastThreshold
	}
	return nil
}

type Ifm_Interfaces_Interface_Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperStatus         Ifm_Interfaces_Interface_Dynamic_OperStatus       `protobuf:"varint,1,opt,name=oper_status,json=oper-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Dynamic_OperStatus" json:"oper_status,omitempty"`
	PhysicalStatus     Ifm_Interfaces_Interface_Dynamic_PhysicalStatus   `protobuf:"varint,2,opt,name=physical_status,json=physical-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Dynamic_PhysicalStatus" json:"physical_status,omitempty"`
	LinkStatus         Ifm_Interfaces_Interface_Dynamic_LinkStatus       `protobuf:"varint,3,opt,name=link_status,json=link-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Dynamic_LinkStatus" json:"link_status,omitempty"`
	Mtu                uint32                                            `protobuf:"varint,4,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Bandwidth          uint64                                            `protobuf:"varint,5,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Ipv4Status         Ifm_Interfaces_Interface_Dynamic_Ipv4Status       `protobuf:"varint,6,opt,name=ipv4_status,json=ipv4-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Dynamic_Ipv4Status" json:"ipv4_status,omitempty"`
	Ipv6Status         Ifm_Interfaces_Interface_Dynamic_Ipv6Status       `protobuf:"varint,7,opt,name=ipv6_status,json=ipv6-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Dynamic_Ipv6Status" json:"ipv6_status,omitempty"`
	IsControlFlapDamp  bool                                              `protobuf:"varint,8,opt,name=is_control_flap_damp,json=is-control-flap-damp,proto3" json:"is_control_flap_damp,omitempty"`
	MacAddress         string                                            `protobuf:"bytes,9,opt,name=mac_address,json=mac-address,proto3" json:"mac_address,omitempty"`
	LineProtocolUpTime string                                            `protobuf:"bytes,10,opt,name=line_protocol_up_time,json=line-protocol-up-time,proto3" json:"line_protocol_up_time,omitempty"`
	IsOffline          bool                                              `protobuf:"varint,11,opt,name=is_offline,json=is-offline,proto3" json:"is_offline,omitempty"`
	LinkQualityGrade   Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade `protobuf:"varint,12,opt,name=link_quality_grade,json=link-quality-grade,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade" json:"link_quality_grade,omitempty"`
	SubIfCounts        uint32                                            `protobuf:"varint,13,opt,name=sub_if_counts,json=sub-if-counts,proto3" json:"sub_if_counts,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dynamic) Reset() {
	*x = Ifm_Interfaces_Interface_Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dynamic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dynamic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetOperStatus() Ifm_Interfaces_Interface_Dynamic_OperStatus {
	if x != nil {
		return x.OperStatus
	}
	return Ifm_Interfaces_Interface_Dynamic_OperStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetPhysicalStatus() Ifm_Interfaces_Interface_Dynamic_PhysicalStatus {
	if x != nil {
		return x.PhysicalStatus
	}
	return Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetLinkStatus() Ifm_Interfaces_Interface_Dynamic_LinkStatus {
	if x != nil {
		return x.LinkStatus
	}
	return Ifm_Interfaces_Interface_Dynamic_LinkStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIpv4Status() Ifm_Interfaces_Interface_Dynamic_Ipv4Status {
	if x != nil {
		return x.Ipv4Status
	}
	return Ifm_Interfaces_Interface_Dynamic_Ipv4Status_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIpv6Status() Ifm_Interfaces_Interface_Dynamic_Ipv6Status {
	if x != nil {
		return x.Ipv6Status
	}
	return Ifm_Interfaces_Interface_Dynamic_Ipv6Status_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIsControlFlapDamp() bool {
	if x != nil {
		return x.IsControlFlapDamp
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetLineProtocolUpTime() string {
	if x != nil {
		return x.LineProtocolUpTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetLinkQualityGrade() Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade {
	if x != nil {
		return x.LinkQualityGrade
	}
	return Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_GOOD
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetSubIfCounts() uint32 {
	if x != nil {
		return x.SubIfCounts
	}
	return 0
}

type Ifm_Interfaces_Interface_MibStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveByte            uint64                                                `protobuf:"varint,1,opt,name=receive_byte,json=receive-byte,proto3" json:"receive_byte,omitempty"`
	SendByte               uint64                                                `protobuf:"varint,2,opt,name=send_byte,json=send-byte,proto3" json:"send_byte,omitempty"`
	ReceivePacket          uint64                                                `protobuf:"varint,3,opt,name=receive_packet,json=receive-packet,proto3" json:"receive_packet,omitempty"`
	SendPacket             uint64                                                `protobuf:"varint,4,opt,name=send_packet,json=send-packet,proto3" json:"send_packet,omitempty"`
	ReceiveUnicastPacket   uint64                                                `protobuf:"varint,5,opt,name=receive_unicast_packet,json=receive-unicast-packet,proto3" json:"receive_unicast_packet,omitempty"`
	ReceiveMulticastPacket uint64                                                `protobuf:"varint,6,opt,name=receive_multicast_packet,json=receive-multicast-packet,proto3" json:"receive_multicast_packet,omitempty"`
	ReceiveBroadPacket     uint64                                                `protobuf:"varint,7,opt,name=receive_broad_packet,json=receive-broad-packet,proto3" json:"receive_broad_packet,omitempty"`
	SendUnicastPacket      uint64                                                `protobuf:"varint,8,opt,name=send_unicast_packet,json=send-unicast-packet,proto3" json:"send_unicast_packet,omitempty"`
	SendMulticastPacket    uint64                                                `protobuf:"varint,9,opt,name=send_multicast_packet,json=send-multicast-packet,proto3" json:"send_multicast_packet,omitempty"`
	SendBroadPacket        uint64                                                `protobuf:"varint,10,opt,name=send_broad_packet,json=send-broad-packet,proto3" json:"send_broad_packet,omitempty"`
	ReceiveErrorPacket     uint64                                                `protobuf:"varint,11,opt,name=receive_error_packet,json=receive-error-packet,proto3" json:"receive_error_packet,omitempty"`
	ReceiveDropPacket      uint64                                                `protobuf:"varint,12,opt,name=receive_drop_packet,json=receive-drop-packet,proto3" json:"receive_drop_packet,omitempty"`
	SendErrorPacket        uint64                                                `protobuf:"varint,13,opt,name=send_error_packet,json=send-error-packet,proto3" json:"send_error_packet,omitempty"`
	SendDropPacket         uint64                                                `protobuf:"varint,14,opt,name=send_drop_packet,json=send-drop-packet,proto3" json:"send_drop_packet,omitempty"`
	EthPortErrSts          *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts `protobuf:"bytes,15,opt,name=eth_port_err_sts,json=eth-port-err-sts,proto3" json:"eth_port_err_sts,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MibStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_MibStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MibStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MibStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MibStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MibStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MibStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveByte() uint64 {
	if x != nil {
		return x.ReceiveByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendByte() uint64 {
	if x != nil {
		return x.SendByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceivePacket() uint64 {
	if x != nil {
		return x.ReceivePacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendPacket() uint64 {
	if x != nil {
		return x.SendPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveUnicastPacket() uint64 {
	if x != nil {
		return x.ReceiveUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveMulticastPacket() uint64 {
	if x != nil {
		return x.ReceiveMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveBroadPacket() uint64 {
	if x != nil {
		return x.ReceiveBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendUnicastPacket() uint64 {
	if x != nil {
		return x.SendUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendMulticastPacket() uint64 {
	if x != nil {
		return x.SendMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendBroadPacket() uint64 {
	if x != nil {
		return x.SendBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveErrorPacket() uint64 {
	if x != nil {
		return x.ReceiveErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveDropPacket() uint64 {
	if x != nil {
		return x.ReceiveDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendErrorPacket() uint64 {
	if x != nil {
		return x.SendErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendDropPacket() uint64 {
	if x != nil {
		return x.SendDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetEthPortErrSts() *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts {
	if x != nil {
		return x.EthPortErrSts
	}
	return nil
}

type Ifm_Interfaces_Interface_CommonStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatiInterval              uint32 `protobuf:"varint,1,opt,name=stati_interval,json=stati-interval,proto3" json:"stati_interval,omitempty"`
	InByteRate                 uint64 `protobuf:"varint,2,opt,name=in_byte_rate,json=in-byte-rate,proto3" json:"in_byte_rate,omitempty"`
	InBitRate                  uint64 `protobuf:"varint,3,opt,name=in_bit_rate,json=in-bit-rate,proto3" json:"in_bit_rate,omitempty"`
	InPacketRate               uint64 `protobuf:"varint,4,opt,name=in_packet_rate,json=in-packet-rate,proto3" json:"in_packet_rate,omitempty"`
	InUseRate                  string `protobuf:"bytes,5,opt,name=in_use_rate,json=in-use-rate,proto3" json:"in_use_rate,omitempty"`
	OutByteRate                uint64 `protobuf:"varint,6,opt,name=out_byte_rate,json=out-byte-rate,proto3" json:"out_byte_rate,omitempty"`
	OutBitRate                 uint64 `protobuf:"varint,7,opt,name=out_bit_rate,json=out-bit-rate,proto3" json:"out_bit_rate,omitempty"`
	OutPacketRate              uint64 `protobuf:"varint,8,opt,name=out_packet_rate,json=out-packet-rate,proto3" json:"out_packet_rate,omitempty"`
	OutUseRate                 string `protobuf:"bytes,9,opt,name=out_use_rate,json=out-use-rate,proto3" json:"out_use_rate,omitempty"`
	ReceiveByte                uint64 `protobuf:"varint,10,opt,name=receive_byte,json=receive-byte,proto3" json:"receive_byte,omitempty"`
	SendByte                   uint64 `protobuf:"varint,11,opt,name=send_byte,json=send-byte,proto3" json:"send_byte,omitempty"`
	ReceivePacket              uint64 `protobuf:"varint,12,opt,name=receive_packet,json=receive-packet,proto3" json:"receive_packet,omitempty"`
	SendPacket                 uint64 `protobuf:"varint,13,opt,name=send_packet,json=send-packet,proto3" json:"send_packet,omitempty"`
	ReceiveUnicastPacket       uint64 `protobuf:"varint,14,opt,name=receive_unicast_packet,json=receive-unicast-packet,proto3" json:"receive_unicast_packet,omitempty"`
	ReceiveMulticastPacket     uint64 `protobuf:"varint,15,opt,name=receive_multicast_packet,json=receive-multicast-packet,proto3" json:"receive_multicast_packet,omitempty"`
	ReceiveBroadPacket         uint64 `protobuf:"varint,16,opt,name=receive_broad_packet,json=receive-broad-packet,proto3" json:"receive_broad_packet,omitempty"`
	SendUnicastPacket          uint64 `protobuf:"varint,17,opt,name=send_unicast_packet,json=send-unicast-packet,proto3" json:"send_unicast_packet,omitempty"`
	SendMulticastPacket        uint64 `protobuf:"varint,18,opt,name=send_multicast_packet,json=send-multicast-packet,proto3" json:"send_multicast_packet,omitempty"`
	SendBroadPacket            uint64 `protobuf:"varint,19,opt,name=send_broad_packet,json=send-broad-packet,proto3" json:"send_broad_packet,omitempty"`
	ReceiveErrorPacket         uint64 `protobuf:"varint,20,opt,name=receive_error_packet,json=receive-error-packet,proto3" json:"receive_error_packet,omitempty"`
	ReceiveDropPacket          uint64 `protobuf:"varint,21,opt,name=receive_drop_packet,json=receive-drop-packet,proto3" json:"receive_drop_packet,omitempty"`
	SendErrorPacket            uint64 `protobuf:"varint,22,opt,name=send_error_packet,json=send-error-packet,proto3" json:"send_error_packet,omitempty"`
	SendDropPacket             uint64 `protobuf:"varint,23,opt,name=send_drop_packet,json=send-drop-packet,proto3" json:"send_drop_packet,omitempty"`
	SendUnicastBit             uint64 `protobuf:"varint,24,opt,name=send_unicast_bit,json=send-unicast-bit,proto3" json:"send_unicast_bit,omitempty"`
	ReceiveUnicastBit          uint64 `protobuf:"varint,25,opt,name=receive_unicast_bit,json=receive-unicast-bit,proto3" json:"receive_unicast_bit,omitempty"`
	SendMulticastBit           uint64 `protobuf:"varint,26,opt,name=send_multicast_bit,json=send-multicast-bit,proto3" json:"send_multicast_bit,omitempty"`
	ReceiveMulticastBit        uint64 `protobuf:"varint,27,opt,name=receive_multicast_bit,json=receive-multicast-bit,proto3" json:"receive_multicast_bit,omitempty"`
	SendBroadBit               uint64 `protobuf:"varint,28,opt,name=send_broad_bit,json=send-broad-bit,proto3" json:"send_broad_bit,omitempty"`
	ReceiveBroadBit            uint64 `protobuf:"varint,29,opt,name=receive_broad_bit,json=receive-broad-bit,proto3" json:"receive_broad_bit,omitempty"`
	SendUnicastBitRate         uint64 `protobuf:"varint,30,opt,name=send_unicast_bit_rate,json=send-unicast-bit-rate,proto3" json:"send_unicast_bit_rate,omitempty"`
	ReceiveUnicastBitRate      uint64 `protobuf:"varint,31,opt,name=receive_unicast_bit_rate,json=receive-unicast-bit-rate,proto3" json:"receive_unicast_bit_rate,omitempty"`
	SendMulticastBitRate       uint64 `protobuf:"varint,32,opt,name=send_multicast_bit_rate,json=send-multicast-bit-rate,proto3" json:"send_multicast_bit_rate,omitempty"`
	ReceiveMulticastBitRate    uint64 `protobuf:"varint,33,opt,name=receive_multicast_bit_rate,json=receive-multicast-bit-rate,proto3" json:"receive_multicast_bit_rate,omitempty"`
	SendBroadBitRate           uint64 `protobuf:"varint,34,opt,name=send_broad_bit_rate,json=send-broad-bit-rate,proto3" json:"send_broad_bit_rate,omitempty"`
	ReceiveBroadBitRate        uint64 `protobuf:"varint,35,opt,name=receive_broad_bit_rate,json=receive-broad-bit-rate,proto3" json:"receive_broad_bit_rate,omitempty"`
	SendUnicastPacketRate      uint64 `protobuf:"varint,36,opt,name=send_unicast_packet_rate,json=send-unicast-packet-rate,proto3" json:"send_unicast_packet_rate,omitempty"`
	ReceiveUnicastPacketRate   uint64 `protobuf:"varint,37,opt,name=receive_unicast_packet_rate,json=receive-unicast-packet-rate,proto3" json:"receive_unicast_packet_rate,omitempty"`
	SendMulticastPacketRate    uint64 `protobuf:"varint,38,opt,name=send_multicast_packet_rate,json=send-multicast-packet-rate,proto3" json:"send_multicast_packet_rate,omitempty"`
	ReceiveMulticastPacketRate uint64 `protobuf:"varint,39,opt,name=receive_multicast_packet_rate,json=receive-multicast-packet-rate,proto3" json:"receive_multicast_packet_rate,omitempty"`
	SendBroadcastPacketRate    uint64 `protobuf:"varint,40,opt,name=send_broadcast_packet_rate,json=send-broadcast-packet-rate,proto3" json:"send_broadcast_packet_rate,omitempty"`
	ReceiveBroadcastPacketRate uint64 `protobuf:"varint,41,opt,name=receive_broadcast_packet_rate,json=receive-broadcast-packet-rate,proto3" json:"receive_broadcast_packet_rate,omitempty"`
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_CommonStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_CommonStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_CommonStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_CommonStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_CommonStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetStatiInterval() uint32 {
	if x != nil {
		return x.StatiInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInByteRate() uint64 {
	if x != nil {
		return x.InByteRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInBitRate() uint64 {
	if x != nil {
		return x.InBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInPacketRate() uint64 {
	if x != nil {
		return x.InPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInUseRate() string {
	if x != nil {
		return x.InUseRate
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutByteRate() uint64 {
	if x != nil {
		return x.OutByteRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutBitRate() uint64 {
	if x != nil {
		return x.OutBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutPacketRate() uint64 {
	if x != nil {
		return x.OutPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutUseRate() string {
	if x != nil {
		return x.OutUseRate
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveByte() uint64 {
	if x != nil {
		return x.ReceiveByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendByte() uint64 {
	if x != nil {
		return x.SendByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceivePacket() uint64 {
	if x != nil {
		return x.ReceivePacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendPacket() uint64 {
	if x != nil {
		return x.SendPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastPacket() uint64 {
	if x != nil {
		return x.ReceiveUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastPacket() uint64 {
	if x != nil {
		return x.ReceiveMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadPacket() uint64 {
	if x != nil {
		return x.ReceiveBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastPacket() uint64 {
	if x != nil {
		return x.SendUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastPacket() uint64 {
	if x != nil {
		return x.SendMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadPacket() uint64 {
	if x != nil {
		return x.SendBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveErrorPacket() uint64 {
	if x != nil {
		return x.ReceiveErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveDropPacket() uint64 {
	if x != nil {
		return x.ReceiveDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendErrorPacket() uint64 {
	if x != nil {
		return x.SendErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendDropPacket() uint64 {
	if x != nil {
		return x.SendDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastBit() uint64 {
	if x != nil {
		return x.SendUnicastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastBit() uint64 {
	if x != nil {
		return x.ReceiveUnicastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastBit() uint64 {
	if x != nil {
		return x.SendMulticastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastBit() uint64 {
	if x != nil {
		return x.ReceiveMulticastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadBit() uint64 {
	if x != nil {
		return x.SendBroadBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadBit() uint64 {
	if x != nil {
		return x.ReceiveBroadBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastBitRate() uint64 {
	if x != nil {
		return x.SendUnicastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastBitRate() uint64 {
	if x != nil {
		return x.ReceiveUnicastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastBitRate() uint64 {
	if x != nil {
		return x.SendMulticastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastBitRate() uint64 {
	if x != nil {
		return x.ReceiveMulticastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadBitRate() uint64 {
	if x != nil {
		return x.SendBroadBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadBitRate() uint64 {
	if x != nil {
		return x.ReceiveBroadBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastPacketRate() uint64 {
	if x != nil {
		return x.SendUnicastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastPacketRate() uint64 {
	if x != nil {
		return x.ReceiveUnicastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastPacketRate() uint64 {
	if x != nil {
		return x.SendMulticastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastPacketRate() uint64 {
	if x != nil {
		return x.ReceiveMulticastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadcastPacketRate() uint64 {
	if x != nil {
		return x.SendBroadcastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadcastPacketRate() uint64 {
	if x != nil {
		return x.ReceiveBroadcastPacketRate
	}
	return 0
}

type Ifm_Interfaces_Interface_ControlFlap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suppress         uint32 `protobuf:"varint,1,opt,name=suppress,proto3" json:"suppress,omitempty"`
	Reuse            uint32 `protobuf:"varint,2,opt,name=reuse,proto3" json:"reuse,omitempty"`
	Ceiling          uint32 `protobuf:"varint,3,opt,name=ceiling,proto3" json:"ceiling,omitempty"`
	DecayOk          uint32 `protobuf:"varint,4,opt,name=decay_ok,json=decay-ok,proto3" json:"decay_ok,omitempty"`
	DecayNg          uint32 `protobuf:"varint,5,opt,name=decay_ng,json=decay-ng,proto3" json:"decay_ng,omitempty"`
	ControlFlapCount uint32 `protobuf:"varint,6,opt,name=control_flap_count,json=control-flap-count,proto3" json:"control_flap_count,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ControlFlap) Reset() {
	*x = Ifm_Interfaces_Interface_ControlFlap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ControlFlap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ControlFlap) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ControlFlap) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ControlFlap.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ControlFlap) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetSuppress() uint32 {
	if x != nil {
		return x.Suppress
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetReuse() uint32 {
	if x != nil {
		return x.Reuse
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetCeiling() uint32 {
	if x != nil {
		return x.Ceiling
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetDecayOk() uint32 {
	if x != nil {
		return x.DecayOk
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetDecayNg() uint32 {
	if x != nil {
		return x.DecayNg
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetControlFlapCount() uint32 {
	if x != nil {
		return x.ControlFlapCount
	}
	return 0
}

type Ifm_Interfaces_Interface_TrapThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputRisingRate  uint32 `protobuf:"varint,1,opt,name=input_rising_rate,json=input-rising-rate,proto3" json:"input_rising_rate,omitempty"`
	InputResumeRate  uint32 `protobuf:"varint,2,opt,name=input_resume_rate,json=input-resume-rate,proto3" json:"input_resume_rate,omitempty"`
	OutputRisingRate uint32 `protobuf:"varint,3,opt,name=output_rising_rate,json=output-rising-rate,proto3" json:"output_rising_rate,omitempty"`
	OutputResumeRate uint32 `protobuf:"varint,4,opt,name=output_resume_rate,json=output-resume-rate,proto3" json:"output_resume_rate,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) Reset() {
	*x = Ifm_Interfaces_Interface_TrapThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TrapThreshold) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TrapThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TrapThreshold.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TrapThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 4}
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetInputRisingRate() uint32 {
	if x != nil {
		return x.InputRisingRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetInputResumeRate() uint32 {
	if x != nil {
		return x.InputResumeRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetOutputRisingRate() uint32 {
	if x != nil {
		return x.OutputRisingRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetOutputResumeRate() uint32 {
	if x != nil {
		return x.OutputResumeRate
	}
	return 0
}

type Ifm_Interfaces_Interface_DampState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuppressStatus  Ifm_Interfaces_Interface_DampState_SuppressStatus `protobuf:"varint,1,opt,name=suppress_status,json=suppress-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_DampState_SuppressStatus" json:"suppress_status,omitempty"`
	Suppress        uint32                                            `protobuf:"varint,2,opt,name=suppress,proto3" json:"suppress,omitempty"`
	Reuse           uint32                                            `protobuf:"varint,3,opt,name=reuse,proto3" json:"reuse,omitempty"`
	MaxSuppressTime uint32                                            `protobuf:"varint,4,opt,name=max_suppress_time,json=max-suppress-time,proto3" json:"max_suppress_time,omitempty"`
	HalfLifePeriod  uint32                                            `protobuf:"varint,5,opt,name=half_life_period,json=half-life-period,proto3" json:"half_life_period,omitempty"`
	DampReuseTime   uint32                                            `protobuf:"varint,6,opt,name=damp_reuse_time,json=damp-reuse-time,proto3" json:"damp_reuse_time,omitempty"`
	CurrentPenalty  uint32                                            `protobuf:"varint,7,opt,name=current_penalty,json=current-penalty,proto3" json:"current_penalty,omitempty"`
	MaxPenalty      uint32                                            `protobuf:"varint,8,opt,name=max_penalty,json=max-penalty,proto3" json:"max_penalty,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DampState) Reset() {
	*x = Ifm_Interfaces_Interface_DampState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DampState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DampState) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DampState) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DampState.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DampState) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5}
}

func (x *Ifm_Interfaces_Interface_DampState) GetSuppressStatus() Ifm_Interfaces_Interface_DampState_SuppressStatus {
	if x != nil {
		return x.SuppressStatus
	}
	return Ifm_Interfaces_Interface_DampState_SuppressStatus_SUPPRESSED
}

func (x *Ifm_Interfaces_Interface_DampState) GetSuppress() uint32 {
	if x != nil {
		return x.Suppress
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetReuse() uint32 {
	if x != nil {
		return x.Reuse
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetMaxSuppressTime() uint32 {
	if x != nil {
		return x.MaxSuppressTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetHalfLifePeriod() uint32 {
	if x != nil {
		return x.HalfLifePeriod
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetDampReuseTime() uint32 {
	if x != nil {
		return x.DampReuseTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetCurrentPenalty() uint32 {
	if x != nil {
		return x.CurrentPenalty
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetMaxPenalty() uint32 {
	if x != nil {
		return x.MaxPenalty
	}
	return 0
}

type Ifm_Interfaces_Interface_ErrorDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause         Ifm_Interfaces_Interface_ErrorDown_Cause `protobuf:"varint,1,opt,name=cause,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ErrorDown_Cause" json:"cause,omitempty"`
	RecoveryTime  uint32                                   `protobuf:"varint,2,opt,name=recovery_time,json=recovery-time,proto3" json:"recovery_time,omitempty"`
	RemainderTime uint32                                   `protobuf:"varint,3,opt,name=remainder_time,json=remainder-time,proto3" json:"remainder_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ErrorDown) Reset() {
	*x = Ifm_Interfaces_Interface_ErrorDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ErrorDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ErrorDown) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ErrorDown) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ErrorDown.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ErrorDown) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6}
}

func (x *Ifm_Interfaces_Interface_ErrorDown) GetCause() Ifm_Interfaces_Interface_ErrorDown_Cause {
	if x != nil {
		return x.Cause
	}
	return Ifm_Interfaces_Interface_ErrorDown_Cause_BPDUX_PROTECTION
}

func (x *Ifm_Interfaces_Interface_ErrorDown) GetRecoveryTime() uint32 {
	if x != nil {
		return x.RecoveryTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ErrorDown) GetRemainderTime() uint32 {
	if x != nil {
		return x.RemainderTime
	}
	return 0
}

type Ifm_Interfaces_Interface_TunnelProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 7}
}

type Ifm_Interfaces_Interface_BdifAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DampingTime uint32 `protobuf:"varint,1,opt,name=damping_time,json=damping-time,proto3" json:"damping_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_BdifAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_BdifAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_BdifAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_BdifAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_BdifAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_BdifAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_BdifAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8}
}

func (x *Ifm_Interfaces_Interface_BdifAttribute) GetDampingTime() uint32 {
	if x != nil {
		return x.DampingTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      *Ifm_Interfaces_Interface_Ipv4_State      `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	StaticArps *Ifm_Interfaces_Interface_Ipv4_StaticArps `protobuf:"bytes,2,opt,name=static_arps,json=static-arps,proto3" json:"static_arps,omitempty"`
	Vrrp       *Ifm_Interfaces_Interface_Ipv4_Vrrp       `protobuf:"bytes,3,opt,name=vrrp,proto3" json:"vrrp,omitempty"`
	Rgm        *Ifm_Interfaces_Interface_Ipv4_Rgm        `protobuf:"bytes,4,opt,name=rgm,proto3" json:"rgm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9}
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetState() *Ifm_Interfaces_Interface_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetStaticArps() *Ifm_Interfaces_Interface_Ipv4_StaticArps {
	if x != nil {
		return x.StaticArps
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetVrrp() *Ifm_Interfaces_Interface_Ipv4_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetRgm() *Ifm_Interfaces_Interface_Ipv4_Rgm {
	if x != nil {
		return x.Rgm
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu6                  uint32                                               `protobuf:"varint,1,opt,name=mtu6,proto3" json:"mtu6,omitempty"`
	SpreadMtuFlag         bool                                                 `protobuf:"varint,2,opt,name=spread_mtu_flag,json=spread-mtu-flag,proto3" json:"spread_mtu_flag,omitempty"`
	AutoLinkLocal         bool                                                 `protobuf:"varint,3,opt,name=auto_link_local,json=auto-link-local,proto3" json:"auto_link_local,omitempty"`
	NdPrefixs             *Ifm_Interfaces_Interface_Ipv6_NdPrefixs             `protobuf:"bytes,4,opt,name=nd_prefixs,json=nd-prefixs,proto3" json:"nd_prefixs,omitempty"`
	State                 *Ifm_Interfaces_Interface_Ipv6_State                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Cgas                  *Ifm_Interfaces_Interface_Ipv6_Cgas                  `protobuf:"bytes,6,opt,name=cgas,proto3" json:"cgas,omitempty"`
	NdCollection          *Ifm_Interfaces_Interface_Ipv6_NdCollection          `protobuf:"bytes,7,opt,name=nd_collection,json=nd-collection,proto3" json:"nd_collection,omitempty"`
	Pp6Collection         *Ifm_Interfaces_Interface_Ipv6_Pp6Collection         `protobuf:"bytes,8,opt,name=pp6_collection,json=pp6-collection,proto3" json:"pp6_collection,omitempty"`
	ExtensionHeaderFilter *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter `protobuf:"bytes,9,opt,name=extension_header_filter,json=extension-header-filter,proto3" json:"extension_header_filter,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10}
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetMtu6() uint32 {
	if x != nil {
		return x.Mtu6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetSpreadMtuFlag() bool {
	if x != nil {
		return x.SpreadMtuFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetAutoLinkLocal() bool {
	if x != nil {
		return x.AutoLinkLocal
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetNdPrefixs() *Ifm_Interfaces_Interface_Ipv6_NdPrefixs {
	if x != nil {
		return x.NdPrefixs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetState() *Ifm_Interfaces_Interface_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetCgas() *Ifm_Interfaces_Interface_Ipv6_Cgas {
	if x != nil {
		return x.Cgas
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetNdCollection() *Ifm_Interfaces_Interface_Ipv6_NdCollection {
	if x != nil {
		return x.NdCollection
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetPp6Collection() *Ifm_Interfaces_Interface_Ipv6_Pp6Collection {
	if x != nil {
		return x.Pp6Collection
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetExtensionHeaderFilter() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter {
	if x != nil {
		return x.ExtensionHeaderFilter
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinUpNum                 uint32                                      `protobuf:"varint,1,opt,name=min_up_num,json=min-up-num,proto3" json:"min_up_num,omitempty"`
	MinUpBandwidth           uint32                                      `protobuf:"varint,2,opt,name=min_up_bandwidth,json=min-up-bandwidth,proto3" json:"min_up_bandwidth,omitempty"`
	MaxUpNum                 uint32                                      `protobuf:"varint,3,opt,name=max_up_num,json=max-up-num,proto3" json:"max_up_num,omitempty"`
	Type                     Ifm_Interfaces_Interface_Trunk_Type         `protobuf:"varint,4,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Type" json:"type,omitempty"`
	HashType                 Ifm_Interfaces_Interface_Trunk_HashType     `protobuf:"varint,5,opt,name=hash_type,json=hash-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_HashType" json:"hash_type,omitempty"`
	WorkMode                 Ifm_Interfaces_Interface_Trunk_WorkMode     `protobuf:"varint,6,opt,name=work_mode,json=work-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_WorkMode" json:"work_mode,omitempty"`
	SmartLinkFlushVlan       uint32                                      `protobuf:"varint,7,opt,name=smart_link_flush_vlan,json=smart-link-flush-vlan,proto3" json:"smart_link_flush_vlan,omitempty"`
	InactivePortShutdown     bool                                        `protobuf:"varint,8,opt,name=inactive_port_shutdown,json=inactive-port-shutdown,proto3" json:"inactive_port_shutdown,omitempty"`
	PreemptEnable            bool                                        `protobuf:"varint,9,opt,name=preempt_enable,json=preempt-enable,proto3" json:"preempt_enable,omitempty"`
	PreemptDelayMinutes      uint32                                      `protobuf:"varint,10,opt,name=preempt_delay_minutes,json=preempt-delay-minutes,proto3" json:"preempt_delay_minutes,omitempty"`
	PreemptDelaySeconds      uint32                                      `protobuf:"varint,11,opt,name=preempt_delay_seconds,json=preempt-delay-seconds,proto3" json:"preempt_delay_seconds,omitempty"`
	PreemptDelayMilliseconds uint32                                      `protobuf:"varint,12,opt,name=preempt_delay_milliseconds,json=preempt-delay-milliseconds,proto3" json:"preempt_delay_milliseconds,omitempty"`
	UpMemberNum              uint32                                      `protobuf:"varint,13,opt,name=up_member_num,json=up-member-num,proto3" json:"up_member_num,omitempty"`
	OnlineMemberNum          uint32                                      `protobuf:"varint,14,opt,name=online_member_num,json=online-member-num,proto3" json:"online_member_num,omitempty"`
	MemberNum                uint32                                      `protobuf:"varint,15,opt,name=member_num,json=member-num,proto3" json:"member_num,omitempty"`
	MaxBandwidth             uint64                                      `protobuf:"varint,16,opt,name=max_bandwidth,json=max-bandwidth,proto3" json:"max_bandwidth,omitempty"`
	Members                  *Ifm_Interfaces_Interface_Trunk_Members     `protobuf:"bytes,17,opt,name=members,proto3" json:"members,omitempty"`
	Forwardings              *Ifm_Interfaces_Interface_Trunk_Forwardings `protobuf:"bytes,18,opt,name=forwardings,proto3" json:"forwardings,omitempty"`
	FimIfmtrunk              *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk `protobuf:"bytes,19,opt,name=fim_ifmtrunk,json=fim-ifmtrunk,proto3" json:"fim_ifmtrunk,omitempty"`
	Lacp                     *Ifm_Interfaces_Interface_Trunk_Lacp        `protobuf:"bytes,20,opt,name=lacp,proto3" json:"lacp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11}
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMinUpNum() uint32 {
	if x != nil {
		return x.MinUpNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMinUpBandwidth() uint32 {
	if x != nil {
		return x.MinUpBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMaxUpNum() uint32 {
	if x != nil {
		return x.MaxUpNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetType() Ifm_Interfaces_Interface_Trunk_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Trunk) GetHashType() Ifm_Interfaces_Interface_Trunk_HashType {
	if x != nil {
		return x.HashType
	}
	return Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_HashType
}

func (x *Ifm_Interfaces_Interface_Trunk) GetWorkMode() Ifm_Interfaces_Interface_Trunk_WorkMode {
	if x != nil {
		return x.WorkMode
	}
	return Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_WorkMode
}

func (x *Ifm_Interfaces_Interface_Trunk) GetSmartLinkFlushVlan() uint32 {
	if x != nil {
		return x.SmartLinkFlushVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetInactivePortShutdown() bool {
	if x != nil {
		return x.InactivePortShutdown
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptEnable() bool {
	if x != nil {
		return x.PreemptEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptDelayMinutes() uint32 {
	if x != nil {
		return x.PreemptDelayMinutes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptDelaySeconds() uint32 {
	if x != nil {
		return x.PreemptDelaySeconds
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptDelayMilliseconds() uint32 {
	if x != nil {
		return x.PreemptDelayMilliseconds
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetUpMemberNum() uint32 {
	if x != nil {
		return x.UpMemberNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetOnlineMemberNum() uint32 {
	if x != nil {
		return x.OnlineMemberNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMemberNum() uint32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMaxBandwidth() uint64 {
	if x != nil {
		return x.MaxBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMembers() *Ifm_Interfaces_Interface_Trunk_Members {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk) GetForwardings() *Ifm_Interfaces_Interface_Trunk_Forwardings {
	if x != nil {
		return x.Forwardings
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk) GetFimIfmtrunk() *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk {
	if x != nil {
		return x.FimIfmtrunk
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk) GetLacp() *Ifm_Interfaces_Interface_Trunk_Lacp {
	if x != nil {
		return x.Lacp
	}
	return nil
}

type Ifm_Interfaces_Interface_VlanifAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DampingTime uint32 `protobuf:"varint,1,opt,name=damping_time,json=damping-time,proto3" json:"damping_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_VlanifAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VlanifAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VlanifAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VlanifAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 12}
}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) GetDampingTime() uint32 {
	if x != nil {
		return x.DampingTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainInterface  *Ifm_Interfaces_Interface_Ethernet_MainInterface  `protobuf:"bytes,1,opt,name=main_interface,json=main-interface,proto3" json:"main_interface,omitempty"`
	L3SubInterface *Ifm_Interfaces_Interface_Ethernet_L3SubInterface `protobuf:"bytes,2,opt,name=l3_sub_interface,json=l3-sub-interface,proto3" json:"l3_sub_interface,omitempty"`
	L2SubInterface *Ifm_Interfaces_Interface_Ethernet_L2SubInterface `protobuf:"bytes,3,opt,name=l2_sub_interface,json=l2-sub-interface,proto3" json:"l2_sub_interface,omitempty"`
	Mac            *Ifm_Interfaces_Interface_Ethernet_Mac            `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13}
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetMainInterface() *Ifm_Interfaces_Interface_Ethernet_MainInterface {
	if x != nil {
		return x.MainInterface
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetL3SubInterface() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface {
	if x != nil {
		return x.L3SubInterface
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetL2SubInterface() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface {
	if x != nil {
		return x.L2SubInterface
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetMac() *Ifm_Interfaces_Interface_Ethernet_Mac {
	if x != nil {
		return x.Mac
	}
	return nil
}

type Ifm_Interfaces_Interface_ArpEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime              uint32                                           `protobuf:"varint,1,opt,name=expire_time,json=expire-time,proto3" json:"expire_time,omitempty"`
	ProbeInterval           uint32                                           `protobuf:"varint,2,opt,name=probe_interval,json=probe-interval,proto3" json:"probe_interval,omitempty"`
	ProbeTimes              uint32                                           `protobuf:"varint,3,opt,name=probe_times,json=probe-times,proto3" json:"probe_times,omitempty"`
	ArpLearnDisable         bool                                             `protobuf:"varint,4,opt,name=arp_learn_disable,json=arp-learn-disable,proto3" json:"arp_learn_disable,omitempty"`
	ArpLearnStrict          Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict `protobuf:"varint,5,opt,name=arp_learn_strict,json=arp-learn-strict,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict" json:"arp_learn_strict,omitempty"`
	RouteProxyEnable        bool                                             `protobuf:"varint,6,opt,name=route_proxy_enable,json=route-proxy-enable,proto3" json:"route_proxy_enable,omitempty"`
	InnerProxyEnable        bool                                             `protobuf:"varint,7,opt,name=inner_proxy_enable,json=inner-proxy-enable,proto3" json:"inner_proxy_enable,omitempty"`
	InterProxyEnable        bool                                             `protobuf:"varint,8,opt,name=inter_proxy_enable,json=inter-proxy-enable,proto3" json:"inter_proxy_enable,omitempty"`
	LocalProxyEnable        bool                                             `protobuf:"varint,9,opt,name=local_proxy_enable,json=local-proxy-enable,proto3" json:"local_proxy_enable,omitempty"`
	FakeExpireTime          uint32                                           `protobuf:"varint,10,opt,name=fake_expire_time,json=fake-expire-time,proto3" json:"fake_expire_time,omitempty"`
	ProbeUnicast            bool                                             `protobuf:"varint,11,opt,name=probe_unicast,json=probe-unicast,proto3" json:"probe_unicast,omitempty"`
	DestMacCheck            bool                                             `protobuf:"varint,12,opt,name=dest_mac_check,json=dest-mac-check,proto3" json:"dest_mac_check,omitempty"`
	SrcMacCheck             bool                                             `protobuf:"varint,13,opt,name=src_mac_check,json=src-mac-check,proto3" json:"src_mac_check,omitempty"`
	DistributeEnable        bool                                             `protobuf:"varint,14,opt,name=distribute_enable,json=distribute-enable,proto3" json:"distribute_enable,omitempty"`
	GratuitousSend          Ifm_Interfaces_Interface_ArpEntry_GratuitousSend `protobuf:"varint,15,opt,name=gratuitous_send,json=gratuitous-send,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ArpEntry_GratuitousSend" json:"gratuitous_send,omitempty"`
	HostCollectEnable       bool                                             `protobuf:"varint,16,opt,name=host_collect_enable,json=host-collect-enable,proto3" json:"host_collect_enable,omitempty"`
	GenerateRdtblEnable     bool                                             `protobuf:"varint,17,opt,name=generate_rdtbl_enable,json=generate-rdtbl-enable,proto3" json:"generate_rdtbl_enable,omitempty"`
	BroadcastDetectInterval uint32                                           `protobuf:"varint,18,opt,name=broadcast_detect_interval,json=broadcast-detect-interval,proto3" json:"broadcast_detect_interval,omitempty"`
	BroadcastDetectTimes    uint32                                           `protobuf:"varint,19,opt,name=broadcast_detect_times,json=broadcast-detect-times,proto3" json:"broadcast_detect_times,omitempty"`
	BroadcastDetectEnable   bool                                             `protobuf:"varint,20,opt,name=broadcast_detect_enable,json=broadcast-detect-enable,proto3" json:"broadcast_detect_enable,omitempty"`
	FakePenaltyTime         uint32                                           `protobuf:"varint,21,opt,name=fake_penalty_time,json=fake-penalty-time,proto3" json:"fake_penalty_time,omitempty"`
	GratuitousArpDrop       bool                                             `protobuf:"varint,22,opt,name=gratuitous_arp_drop,json=gratuitous-arp-drop,proto3" json:"gratuitous_arp_drop,omitempty"`
	BroadcastMaxNum         uint32                                           `protobuf:"varint,23,opt,name=broadcast_max_num,json=broadcast-max-num,proto3" json:"broadcast_max_num,omitempty"`
	SmartDiscoverEnable     bool                                             `protobuf:"varint,24,opt,name=smart_discover_enable,json=smart-discover-enable,proto3" json:"smart_discover_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpEntry) Reset() {
	*x = Ifm_Interfaces_Interface_ArpEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpEntry) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpEntry) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpEntry.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpEntry) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 14}
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetProbeInterval() uint32 {
	if x != nil {
		return x.ProbeInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetProbeTimes() uint32 {
	if x != nil {
		return x.ProbeTimes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetArpLearnDisable() bool {
	if x != nil {
		return x.ArpLearnDisable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetArpLearnStrict() Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict {
	if x != nil {
		return x.ArpLearnStrict
	}
	return Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_ArpLearnStrict
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetRouteProxyEnable() bool {
	if x != nil {
		return x.RouteProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetInnerProxyEnable() bool {
	if x != nil {
		return x.InnerProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetInterProxyEnable() bool {
	if x != nil {
		return x.InterProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetLocalProxyEnable() bool {
	if x != nil {
		return x.LocalProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetFakeExpireTime() uint32 {
	if x != nil {
		return x.FakeExpireTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetProbeUnicast() bool {
	if x != nil {
		return x.ProbeUnicast
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetDestMacCheck() bool {
	if x != nil {
		return x.DestMacCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetSrcMacCheck() bool {
	if x != nil {
		return x.SrcMacCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetDistributeEnable() bool {
	if x != nil {
		return x.DistributeEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetGratuitousSend() Ifm_Interfaces_Interface_ArpEntry_GratuitousSend {
	if x != nil {
		return x.GratuitousSend
	}
	return Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_GratuitousSend
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetHostCollectEnable() bool {
	if x != nil {
		return x.HostCollectEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetGenerateRdtblEnable() bool {
	if x != nil {
		return x.GenerateRdtblEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastDetectInterval() uint32 {
	if x != nil {
		return x.BroadcastDetectInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastDetectTimes() uint32 {
	if x != nil {
		return x.BroadcastDetectTimes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastDetectEnable() bool {
	if x != nil {
		return x.BroadcastDetectEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetFakePenaltyTime() uint32 {
	if x != nil {
		return x.FakePenaltyTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetGratuitousArpDrop() bool {
	if x != nil {
		return x.GratuitousArpDrop
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastMaxNum() uint32 {
	if x != nil {
		return x.BroadcastMaxNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetSmartDiscoverEnable() bool {
	if x != nil {
		return x.SmartDiscoverEnable
	}
	return false
}

type Ifm_Interfaces_Interface_ArpStatusDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddr   string                                        `protobuf:"bytes,1,opt,name=ip_addr,json=ip-addr,proto3" json:"ip_addr,omitempty"`
	Mode     Ifm_Interfaces_Interface_ArpStatusDetect_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ArpStatusDetect_Mode" json:"mode,omitempty"`
	Times    uint32                                        `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	Interval uint32                                        `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) Reset() {
	*x = Ifm_Interfaces_Interface_ArpStatusDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpStatusDetect) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpStatusDetect.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpStatusDetect) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 15}
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetMode() Ifm_Interfaces_Interface_ArpStatusDetect_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_ArpStatusDetect_Mode_LOOSE
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type Ifm_Interfaces_Interface_ArpPortSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2SubInterface *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface `protobuf:"bytes,1,opt,name=l2_sub_interface,json=l2-sub-interface,proto3" json:"l2_sub_interface,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) Reset() {
	*x = Ifm_Interfaces_Interface_ArpPortSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpPortSecurity) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpPortSecurity.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpPortSecurity) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 16}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) GetL2SubInterface() *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface {
	if x != nil {
		return x.L2SubInterface
	}
	return nil
}

type Ifm_Interfaces_Interface_Bfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableTrunkCrcBitError bool `protobuf:"varint,1,opt,name=enable_trunk_crc_bit_error,json=enable-trunk-crc-bit-error,proto3" json:"enable_trunk_crc_bit_error,omitempty"`
	EnableTriggerIfDown    bool `protobuf:"varint,2,opt,name=enable_trigger_if_down,json=enable-trigger-if-down,proto3" json:"enable_trigger_if_down,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bfd) Reset() {
	*x = Ifm_Interfaces_Interface_Bfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bfd) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bfd) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bfd.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bfd) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 17}
}

func (x *Ifm_Interfaces_Interface_Bfd) GetEnableTrunkCrcBitError() bool {
	if x != nil {
		return x.EnableTrunkCrcBitError
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Bfd) GetEnableTriggerIfDown() bool {
	if x != nil {
		return x.EnableTriggerIfDown
	}
	return false
}

type Ifm_Interfaces_Interface_Qos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trusts                       *Ifm_Interfaces_Interface_Qos_Trusts                       `protobuf:"bytes,1,opt,name=trusts,proto3" json:"trusts,omitempty"`
	TrafficPolicyApplys          *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys          `protobuf:"bytes,2,opt,name=traffic_policy_applys,json=traffic-policy-applys,proto3" json:"traffic_policy_applys,omitempty"`
	ProfileApplys                *Ifm_Interfaces_Interface_Qos_ProfileApplys                `protobuf:"bytes,3,opt,name=profile_applys,json=profile-applys,proto3" json:"profile_applys,omitempty"`
	UserQueueApplys              *Ifm_Interfaces_Interface_Qos_UserQueueApplys              `protobuf:"bytes,4,opt,name=user_queue_applys,json=user-queue-applys,proto3" json:"user_queue_applys,omitempty"`
	PortQueues                   *Ifm_Interfaces_Interface_Qos_PortQueues                   `protobuf:"bytes,5,opt,name=port_queues,json=port-queues,proto3" json:"port_queues,omitempty"`
	PortQueueStates              *Ifm_Interfaces_Interface_Qos_PortQueueStates              `protobuf:"bytes,6,opt,name=port_queue_states,json=port-queue-states,proto3" json:"port_queue_states,omitempty"`
	PortQueueTemplateApplys      *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys      `protobuf:"bytes,7,opt,name=port_queue_template_applys,json=port-queue-template-applys,proto3" json:"port_queue_template_applys,omitempty"`
	PortQueueAlarms              *Ifm_Interfaces_Interface_Qos_PortQueueAlarms              `protobuf:"bytes,8,opt,name=port_queue_alarms,json=port-queue-alarms,proto3" json:"port_queue_alarms,omitempty"`
	PortQueueAlarmStates         *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates         `protobuf:"bytes,9,opt,name=port_queue_alarm_states,json=port-queue-alarm-states,proto3" json:"port_queue_alarm_states,omitempty"`
	PortQueueDiscardAlarms       *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms       `protobuf:"bytes,10,opt,name=port_queue_discard_alarms,json=port-queue-discard-alarms,proto3" json:"port_queue_discard_alarms,omitempty"`
	SetQueueStats                *Ifm_Interfaces_Interface_Qos_SetQueueStats                `protobuf:"bytes,11,opt,name=set_queue_stats,json=set-queue-stats,proto3" json:"set_queue_stats,omitempty"`
	LinkAdjustment               *Ifm_Interfaces_Interface_Qos_LinkAdjustment               `protobuf:"bytes,12,opt,name=link_adjustment,json=link-adjustment,proto3" json:"link_adjustment,omitempty"`
	QosQueues                    *Ifm_Interfaces_Interface_Qos_QosQueues                    `protobuf:"bytes,13,opt,name=qos_queues,json=qos-queues,proto3" json:"qos_queues,omitempty"`
	QueueTemplateApplys          *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys          `protobuf:"bytes,14,opt,name=queue_template_applys,json=queue-template-applys,proto3" json:"queue_template_applys,omitempty"`
	SoftPipeAlarms               *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms               `protobuf:"bytes,15,opt,name=soft_pipe_alarms,json=soft-pipe-alarms,proto3" json:"soft_pipe_alarms,omitempty"`
	FlowQueueTemplateApplys      *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys      `protobuf:"bytes,16,opt,name=flow_queue_template_applys,json=flow-queue-template-applys,proto3" json:"flow_queue_template_applys,omitempty"`
	ServiceTemplateApplys        *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys        `protobuf:"bytes,17,opt,name=service_template_applys,json=service-template-applys,proto3" json:"service_template_applys,omitempty"`
	DefaultServiceClasss         *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss         `protobuf:"bytes,18,opt,name=default_service_classs,json=default-service-classs,proto3" json:"default_service_classs,omitempty"`
	DefaultUserGroupQueues       *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues       `protobuf:"bytes,19,opt,name=default_user_group_queues,json=default-user-group-queues,proto3" json:"default_user_group_queues,omitempty"`
	DefaultSubPortQueues         *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues         `protobuf:"bytes,20,opt,name=default_sub_port_queues,json=default-sub-port-queues,proto3" json:"default_sub_port_queues,omitempty"`
	PortShapings                 *Ifm_Interfaces_Interface_Qos_PortShapings                 `protobuf:"bytes,21,opt,name=port_shapings,json=port-shapings,proto3" json:"port_shapings,omitempty"`
	PerHopBehaviorDisables       *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables       `protobuf:"bytes,22,opt,name=per_hop_behavior_disables,json=per-hop-behavior-disables,proto3" json:"per_hop_behavior_disables,omitempty"`
	PerHopBehaviorEnables        *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables        `protobuf:"bytes,23,opt,name=per_hop_behavior_enables,json=per-hop-behavior-enables,proto3" json:"per_hop_behavior_enables,omitempty"`
	PerHopBehaviorEnableVlans    *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans    `protobuf:"bytes,24,opt,name=per_hop_behavior_enable_vlans,json=per-hop-behavior-enable-vlans,proto3" json:"per_hop_behavior_enable_vlans,omitempty"`
	PerHopBehavior               *Ifm_Interfaces_Interface_Qos_PerHopBehavior               `protobuf:"bytes,25,opt,name=per_hop_behavior,json=per-hop-behavior,proto3" json:"per_hop_behavior,omitempty"`
	Cars                         *Ifm_Interfaces_Interface_Qos_Cars                         `protobuf:"bytes,26,opt,name=cars,proto3" json:"cars,omitempty"`
	ConvergentPrecedence         *Ifm_Interfaces_Interface_Qos_ConvergentPrecedence         `protobuf:"bytes,27,opt,name=convergent_precedence,json=convergent-precedence,proto3" json:"convergent_precedence,omitempty"`
	DropEligibleIndicatorVlan    *Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan    `protobuf:"bytes,28,opt,name=drop_eligible_indicator_vlan,json=drop-eligible-indicator-vlan,proto3" json:"drop_eligible_indicator_vlan,omitempty"`
	DropEligibleIndicator        *Ifm_Interfaces_Interface_Qos_DropEligibleIndicator        `protobuf:"bytes,29,opt,name=drop_eligible_indicator,json=drop-eligible-indicator,proto3" json:"drop_eligible_indicator,omitempty"`
	TrustUntagIpPrecedence       *Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence       `protobuf:"bytes,30,opt,name=trust_untag_ip_precedence,json=trust-untag-ip-precedence,proto3" json:"trust_untag_ip_precedence,omitempty"`
	TrustIpPrecedences           *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences           `protobuf:"bytes,31,opt,name=trust_ip_precedences,json=trust-ip-precedences,proto3" json:"trust_ip_precedences,omitempty"`
	ShareShaping                 *Ifm_Interfaces_Interface_Qos_ShareShaping                 `protobuf:"bytes,32,opt,name=share_shaping,json=share-shaping,proto3" json:"share_shaping,omitempty"`
	SubPortQueueApplys           *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys           `protobuf:"bytes,33,opt,name=sub_port_queue_applys,json=sub-port-queue-applys,proto3" json:"sub_port_queue_applys,omitempty"`
	UserVlanUserGroupQueueApplys *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys `protobuf:"bytes,34,opt,name=user_vlan_user_group_queue_applys,json=user-vlan-user-group-queue-applys,proto3" json:"user_vlan_user_group_queue_applys,omitempty"`
	BrasMemberLinkSchedulers     *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers     `protobuf:"bytes,35,opt,name=bras_member_link_schedulers,json=bras-member-link-schedulers,proto3" json:"bras_member_link_schedulers,omitempty"`
	ScheduleTreeDistributeModes  *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes  `protobuf:"bytes,36,opt,name=schedule_tree_distribute_modes,json=schedule-tree-distribute-modes,proto3" json:"schedule_tree_distribute_modes,omitempty"`
	LoopMode                     *Ifm_Interfaces_Interface_Qos_LoopMode                     `protobuf:"bytes,37,opt,name=loop_mode,json=loop-mode,proto3" json:"loop_mode,omitempty"`
	ResourcePools                *Ifm_Interfaces_Interface_Qos_ResourcePools                `protobuf:"bytes,38,opt,name=resource_pools,json=resource-pools,proto3" json:"resource_pools,omitempty"`
	UserGroupQueueApplys         *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys         `protobuf:"bytes,39,opt,name=user_group_queue_applys,json=user-group-queue-applys,proto3" json:"user_group_queue_applys,omitempty"`
	MplsL2Vc                     *Ifm_Interfaces_Interface_Qos_MplsL2Vc                     `protobuf:"bytes,40,opt,name=mpls_l2vc,json=mpls-l2vc,proto3" json:"mpls_l2vc,omitempty"`
	MemberLinkSchedulers         *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers         `protobuf:"bytes,41,opt,name=member_link_schedulers,json=member-link-schedulers,proto3" json:"member_link_schedulers,omitempty"`
	QosLr                        *Ifm_Interfaces_Interface_Qos_QosLr                        `protobuf:"bytes,42,opt,name=qos_lr,json=qos-lr,proto3" json:"qos_lr,omitempty"`
	LdpTraffic                   *Ifm_Interfaces_Interface_Qos_LdpTraffic                   `protobuf:"bytes,43,opt,name=ldp_traffic,json=ldp-traffic,proto3" json:"ldp_traffic,omitempty"`
	BufferPolicyMode             *Ifm_Interfaces_Interface_Qos_BufferPolicyMode             `protobuf:"bytes,44,opt,name=buffer_policy_mode,json=buffer-policy-mode,proto3" json:"buffer_policy_mode,omitempty"`
	HardPipeApply                *Ifm_Interfaces_Interface_Qos_HardPipeApply                `protobuf:"bytes,45,opt,name=hard_pipe_apply,json=hard-pipe-apply,proto3" json:"hard_pipe_apply,omitempty"`
	ChannelAdjustment            *Ifm_Interfaces_Interface_Qos_ChannelAdjustment            `protobuf:"bytes,46,opt,name=channel_adjustment,json=channel-adjustment,proto3" json:"channel_adjustment,omitempty"`
	UserVlanProfileApplys        *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys        `protobuf:"bytes,47,opt,name=user_vlan_profile_applys,json=user-vlan-profile-applys,proto3" json:"user_vlan_profile_applys,omitempty"`
	ServiceTemplateShaping       *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping       `protobuf:"bytes,48,opt,name=service_template_shaping,json=service-template-shaping,proto3" json:"service_template_shaping,omitempty"`
	DefaultServiceClassRemote    *Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote    `protobuf:"bytes,49,opt,name=default_service_class_remote,json=default-service-class-remote,proto3" json:"default_service_class_remote,omitempty"`
	TrustRemotes                 *Ifm_Interfaces_Interface_Qos_TrustRemotes                 `protobuf:"bytes,50,opt,name=trust_remotes,json=trust-remotes,proto3" json:"trust_remotes,omitempty"`
	WfqShaping                   *Ifm_Interfaces_Interface_Qos_WfqShaping                   `protobuf:"bytes,51,opt,name=wfq_shaping,json=wfq-shaping,proto3" json:"wfq_shaping,omitempty"`
	SourceBoardScheduleWeights   *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights   `protobuf:"bytes,52,opt,name=source_board_schedule_weights,json=source-board-schedule-weights,proto3" json:"source_board_schedule_weights,omitempty"`
	DeficitUnit                  *Ifm_Interfaces_Interface_Qos_DeficitUnit                  `protobuf:"bytes,53,opt,name=deficit_unit,json=deficit-unit,proto3" json:"deficit_unit,omitempty"`
	DefaultUserQueue             *Ifm_Interfaces_Interface_Qos_DefaultUserQueue             `protobuf:"bytes,54,opt,name=default_user_queue,json=default-user-queue,proto3" json:"default_user_queue,omitempty"`
	VniCfgPeers                  *Ifm_Interfaces_Interface_Qos_VniCfgPeers                  `protobuf:"bytes,55,opt,name=vni_cfg_peers,json=vni-cfg-peers,proto3" json:"vni_cfg_peers,omitempty"`
	QosVllPipe                   *Ifm_Interfaces_Interface_Qos_QosVllPipe                   `protobuf:"bytes,56,opt,name=qos_vll_pipe,json=qos-vll-pipe,proto3" json:"qos_vll_pipe,omitempty"`
	LocalIdEnable                *Ifm_Interfaces_Interface_Qos_LocalIdEnable                `protobuf:"bytes,57,opt,name=local_id_enable,json=local-id-enable,proto3" json:"local_id_enable,omitempty"`
	Qppb                         *Ifm_Interfaces_Interface_Qos_Qppb                         `protobuf:"bytes,58,opt,name=qppb,proto3" json:"qppb,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos) Reset() {
	*x = Ifm_Interfaces_Interface_Qos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18}
}

func (x *Ifm_Interfaces_Interface_Qos) GetTrusts() *Ifm_Interfaces_Interface_Qos_Trusts {
	if x != nil {
		return x.Trusts
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetTrafficPolicyApplys() *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys {
	if x != nil {
		return x.TrafficPolicyApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetProfileApplys() *Ifm_Interfaces_Interface_Qos_ProfileApplys {
	if x != nil {
		return x.ProfileApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetUserQueueApplys() *Ifm_Interfaces_Interface_Qos_UserQueueApplys {
	if x != nil {
		return x.UserQueueApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPortQueues() *Ifm_Interfaces_Interface_Qos_PortQueues {
	if x != nil {
		return x.PortQueues
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPortQueueStates() *Ifm_Interfaces_Interface_Qos_PortQueueStates {
	if x != nil {
		return x.PortQueueStates
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPortQueueTemplateApplys() *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys {
	if x != nil {
		return x.PortQueueTemplateApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPortQueueAlarms() *Ifm_Interfaces_Interface_Qos_PortQueueAlarms {
	if x != nil {
		return x.PortQueueAlarms
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPortQueueAlarmStates() *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates {
	if x != nil {
		return x.PortQueueAlarmStates
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPortQueueDiscardAlarms() *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms {
	if x != nil {
		return x.PortQueueDiscardAlarms
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetSetQueueStats() *Ifm_Interfaces_Interface_Qos_SetQueueStats {
	if x != nil {
		return x.SetQueueStats
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetLinkAdjustment() *Ifm_Interfaces_Interface_Qos_LinkAdjustment {
	if x != nil {
		return x.LinkAdjustment
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetQosQueues() *Ifm_Interfaces_Interface_Qos_QosQueues {
	if x != nil {
		return x.QosQueues
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetQueueTemplateApplys() *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys {
	if x != nil {
		return x.QueueTemplateApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetSoftPipeAlarms() *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms {
	if x != nil {
		return x.SoftPipeAlarms
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetFlowQueueTemplateApplys() *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys {
	if x != nil {
		return x.FlowQueueTemplateApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetServiceTemplateApplys() *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys {
	if x != nil {
		return x.ServiceTemplateApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDefaultServiceClasss() *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss {
	if x != nil {
		return x.DefaultServiceClasss
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDefaultUserGroupQueues() *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues {
	if x != nil {
		return x.DefaultUserGroupQueues
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDefaultSubPortQueues() *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues {
	if x != nil {
		return x.DefaultSubPortQueues
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPortShapings() *Ifm_Interfaces_Interface_Qos_PortShapings {
	if x != nil {
		return x.PortShapings
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPerHopBehaviorDisables() *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables {
	if x != nil {
		return x.PerHopBehaviorDisables
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPerHopBehaviorEnables() *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables {
	if x != nil {
		return x.PerHopBehaviorEnables
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPerHopBehaviorEnableVlans() *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans {
	if x != nil {
		return x.PerHopBehaviorEnableVlans
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetPerHopBehavior() *Ifm_Interfaces_Interface_Qos_PerHopBehavior {
	if x != nil {
		return x.PerHopBehavior
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetCars() *Ifm_Interfaces_Interface_Qos_Cars {
	if x != nil {
		return x.Cars
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetConvergentPrecedence() *Ifm_Interfaces_Interface_Qos_ConvergentPrecedence {
	if x != nil {
		return x.ConvergentPrecedence
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDropEligibleIndicatorVlan() *Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan {
	if x != nil {
		return x.DropEligibleIndicatorVlan
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDropEligibleIndicator() *Ifm_Interfaces_Interface_Qos_DropEligibleIndicator {
	if x != nil {
		return x.DropEligibleIndicator
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetTrustUntagIpPrecedence() *Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence {
	if x != nil {
		return x.TrustUntagIpPrecedence
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetTrustIpPrecedences() *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences {
	if x != nil {
		return x.TrustIpPrecedences
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetShareShaping() *Ifm_Interfaces_Interface_Qos_ShareShaping {
	if x != nil {
		return x.ShareShaping
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetSubPortQueueApplys() *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys {
	if x != nil {
		return x.SubPortQueueApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetUserVlanUserGroupQueueApplys() *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys {
	if x != nil {
		return x.UserVlanUserGroupQueueApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetBrasMemberLinkSchedulers() *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers {
	if x != nil {
		return x.BrasMemberLinkSchedulers
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetScheduleTreeDistributeModes() *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes {
	if x != nil {
		return x.ScheduleTreeDistributeModes
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetLoopMode() *Ifm_Interfaces_Interface_Qos_LoopMode {
	if x != nil {
		return x.LoopMode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetResourcePools() *Ifm_Interfaces_Interface_Qos_ResourcePools {
	if x != nil {
		return x.ResourcePools
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetUserGroupQueueApplys() *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys {
	if x != nil {
		return x.UserGroupQueueApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetMplsL2Vc() *Ifm_Interfaces_Interface_Qos_MplsL2Vc {
	if x != nil {
		return x.MplsL2Vc
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetMemberLinkSchedulers() *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers {
	if x != nil {
		return x.MemberLinkSchedulers
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetQosLr() *Ifm_Interfaces_Interface_Qos_QosLr {
	if x != nil {
		return x.QosLr
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetLdpTraffic() *Ifm_Interfaces_Interface_Qos_LdpTraffic {
	if x != nil {
		return x.LdpTraffic
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetBufferPolicyMode() *Ifm_Interfaces_Interface_Qos_BufferPolicyMode {
	if x != nil {
		return x.BufferPolicyMode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetHardPipeApply() *Ifm_Interfaces_Interface_Qos_HardPipeApply {
	if x != nil {
		return x.HardPipeApply
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetChannelAdjustment() *Ifm_Interfaces_Interface_Qos_ChannelAdjustment {
	if x != nil {
		return x.ChannelAdjustment
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetUserVlanProfileApplys() *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys {
	if x != nil {
		return x.UserVlanProfileApplys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetServiceTemplateShaping() *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping {
	if x != nil {
		return x.ServiceTemplateShaping
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDefaultServiceClassRemote() *Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote {
	if x != nil {
		return x.DefaultServiceClassRemote
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetTrustRemotes() *Ifm_Interfaces_Interface_Qos_TrustRemotes {
	if x != nil {
		return x.TrustRemotes
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetWfqShaping() *Ifm_Interfaces_Interface_Qos_WfqShaping {
	if x != nil {
		return x.WfqShaping
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetSourceBoardScheduleWeights() *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights {
	if x != nil {
		return x.SourceBoardScheduleWeights
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDeficitUnit() *Ifm_Interfaces_Interface_Qos_DeficitUnit {
	if x != nil {
		return x.DeficitUnit
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetDefaultUserQueue() *Ifm_Interfaces_Interface_Qos_DefaultUserQueue {
	if x != nil {
		return x.DefaultUserQueue
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetVniCfgPeers() *Ifm_Interfaces_Interface_Qos_VniCfgPeers {
	if x != nil {
		return x.VniCfgPeers
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetQosVllPipe() *Ifm_Interfaces_Interface_Qos_QosVllPipe {
	if x != nil {
		return x.QosVllPipe
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetLocalIdEnable() *Ifm_Interfaces_Interface_Qos_LocalIdEnable {
	if x != nil {
		return x.LocalIdEnable
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos) GetQppb() *Ifm_Interfaces_Interface_Qos_Qppb {
	if x != nil {
		return x.Qppb
	}
	return nil
}

type Ifm_Interfaces_Interface_BfdExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransparentTxFlag bool `protobuf:"varint,1,opt,name=transparent_tx_flag,json=transparent-tx-flag,proto3" json:"transparent_tx_flag,omitempty"`
}

func (x *Ifm_Interfaces_Interface_BfdExt) Reset() {
	*x = Ifm_Interfaces_Interface_BfdExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_BfdExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_BfdExt) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_BfdExt) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_BfdExt.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_BfdExt) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 19}
}

func (x *Ifm_Interfaces_Interface_BfdExt) GetTransparentTxFlag() bool {
	if x != nil {
		return x.TransparentTxFlag
	}
	return false
}

type Ifm_Interfaces_Interface_ArpSending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Ifm_Interfaces_Interface_ArpSending_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ArpSending_Type" json:"type,omitempty"`
	ExpireTime uint32                                   `protobuf:"varint,2,opt,name=expire_time,json=expire-time,proto3" json:"expire_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpSending) Reset() {
	*x = Ifm_Interfaces_Interface_ArpSending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpSending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpSending) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpSending) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpSending.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpSending) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20}
}

func (x *Ifm_Interfaces_Interface_ArpSending) GetType() Ifm_Interfaces_Interface_ArpSending_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_ArpSending_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_ArpSending) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type Ifm_Interfaces_Interface_NdSending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Ifm_Interfaces_Interface_NdSending_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_NdSending_Type" json:"type,omitempty"`
	ExpireTime uint32                                  `protobuf:"varint,2,opt,name=expire_time,json=expire-time,proto3" json:"expire_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_NdSending) Reset() {
	*x = Ifm_Interfaces_Interface_NdSending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_NdSending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_NdSending) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_NdSending) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NdSending.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_NdSending) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 21}
}

func (x *Ifm_Interfaces_Interface_NdSending) GetType() Ifm_Interfaces_Interface_NdSending_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_NdSending_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_NdSending) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Nve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute *Ifm_Interfaces_Interface_Nve_Attribute `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Pip       *Ifm_Interfaces_Interface_Nve_Pip       `protobuf:"bytes,2,opt,name=pip,proto3" json:"pip,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nve) Reset() {
	*x = Ifm_Interfaces_Interface_Nve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nve) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nve) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nve.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nve) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 22}
}

func (x *Ifm_Interfaces_Interface_Nve) GetAttribute() *Ifm_Interfaces_Interface_Nve_Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Nve) GetPip() *Ifm_Interfaces_Interface_Nve_Pip {
	if x != nil {
		return x.Pip
	}
	return nil
}

type Ifm_Interfaces_Interface_Nvo3Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VxlanAnycastGateway  bool `protobuf:"varint,1,opt,name=vxlan_anycast_gateway,json=vxlan-anycast-gateway,proto3" json:"vxlan_anycast_gateway,omitempty"`
	CommonAnycastGateway bool `protobuf:"varint,2,opt,name=common_anycast_gateway,json=common-anycast-gateway,proto3" json:"common_anycast_gateway,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3Gateway) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3Gateway.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3Gateway) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 23}
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) GetVxlanAnycastGateway() bool {
	if x != nil {
		return x.VxlanAnycastGateway
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) GetCommonAnycastGateway() bool {
	if x != nil {
		return x.CommonAnycastGateway
	}
	return false
}

type Ifm_Interfaces_Interface_Bas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EapAuthenticationDomainIndividual *Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual `protobuf:"bytes,1,opt,name=eap_authentication_domain_individual,json=eap-authentication-domain-individual,proto3" json:"eap_authentication_domain_individual,omitempty"`
	BasInterface                      *Ifm_Interfaces_Interface_Bas_BasInterface                      `protobuf:"bytes,2,opt,name=bas_interface,json=bas-interface,proto3" json:"bas_interface,omitempty"`
	PppoeBasStatics                   *Ifm_Interfaces_Interface_Bas_PppoeBasStatics                   `protobuf:"bytes,3,opt,name=pppoe_bas_statics,json=pppoe-bas-statics,proto3" json:"pppoe_bas_statics,omitempty"`
	PppBasStatistics                  *Ifm_Interfaces_Interface_Bas_PppBasStatistics                  `protobuf:"bytes,4,opt,name=ppp_bas_statistics,json=ppp-bas-statistics,proto3" json:"ppp_bas_statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas) Reset() {
	*x = Ifm_Interfaces_Interface_Bas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24}
}

func (x *Ifm_Interfaces_Interface_Bas) GetEapAuthenticationDomainIndividual() *Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual {
	if x != nil {
		return x.EapAuthenticationDomainIndividual
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Bas) GetBasInterface() *Ifm_Interfaces_Interface_Bas_BasInterface {
	if x != nil {
		return x.BasInterface
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Bas) GetPppoeBasStatics() *Ifm_Interfaces_Interface_Bas_PppoeBasStatics {
	if x != nil {
		return x.PppoeBasStatics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Bas) GetPppBasStatistics() *Ifm_Interfaces_Interface_Bas_PppBasStatistics {
	if x != nil {
		return x.PppBasStatistics
	}
	return nil
}

type Ifm_Interfaces_Interface_Bras struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalanceMode *Ifm_Interfaces_Interface_Bras_LoadBalanceMode `protobuf:"bytes,1,opt,name=load_balance_mode,json=load-balance-mode,proto3" json:"load_balance_mode,omitempty"`
	Multicast       *Ifm_Interfaces_Interface_Bras_Multicast       `protobuf:"bytes,2,opt,name=multicast,proto3" json:"multicast,omitempty"`
	BrasUserManage  *Ifm_Interfaces_Interface_Bras_BrasUserManage  `protobuf:"bytes,3,opt,name=bras_user_manage,json=bras-user-manage,proto3" json:"bras_user_manage,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bras) Reset() {
	*x = Ifm_Interfaces_Interface_Bras{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bras) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bras) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bras) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bras.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bras) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25}
}

func (x *Ifm_Interfaces_Interface_Bras) GetLoadBalanceMode() *Ifm_Interfaces_Interface_Bras_LoadBalanceMode {
	if x != nil {
		return x.LoadBalanceMode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Bras) GetMulticast() *Ifm_Interfaces_Interface_Bras_Multicast {
	if x != nil {
		return x.Multicast
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Bras) GetBrasUserManage() *Ifm_Interfaces_Interface_Bras_BrasUserManage {
	if x != nil {
		return x.BrasUserManage
	}
	return nil
}

type Ifm_Interfaces_Interface_PppoeBindVt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PppoeBindVt) Reset() {
	*x = Ifm_Interfaces_Interface_PppoeBindVt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PppoeBindVt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PppoeBindVt) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PppoeBindVt) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PppoeBindVt.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PppoeBindVt) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 26}
}

func (x *Ifm_Interfaces_Interface_PppoeBindVt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Ifm_Interfaces_Interface_PppoeVt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenModePriority        []Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority `protobuf:"varint,1,rep,packed,name=authen_mode_priority,json=authen-mode-priority,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority" json:"authen_mode_priority,omitempty"`
	KeepAliveInterval         uint32                                                `protobuf:"varint,2,opt,name=keep_alive_interval,json=keep-alive-interval,proto3" json:"keep_alive_interval,omitempty"`
	KeepAliveTimes            uint32                                                `protobuf:"varint,3,opt,name=keep_alive_times,json=keep-alive-times,proto3" json:"keep_alive_times,omitempty"`
	KeepAliveResponseInterval uint32                                                `protobuf:"varint,4,opt,name=keep_alive_response_interval,json=keep-alive-response-interval,proto3" json:"keep_alive_response_interval,omitempty"`
	KeepAliveDataCheck        bool                                                  `protobuf:"varint,5,opt,name=keep_alive_data_check,json=keep-alive-data-check,proto3" json:"keep_alive_data_check,omitempty"`
	Motm                      string                                                `protobuf:"bytes,6,opt,name=motm,proto3" json:"motm,omitempty"`
	MotmDelimiter             string                                                `protobuf:"bytes,7,opt,name=motm_delimiter,json=motm-delimiter,proto3" json:"motm_delimiter,omitempty"`
	NegotiateInterval         uint32                                                `protobuf:"varint,8,opt,name=negotiate_interval,json=negotiate-interval,proto3" json:"negotiate_interval,omitempty"`
	NegotiateTimes            uint32                                                `protobuf:"varint,9,opt,name=negotiate_times,json=negotiate-times,proto3" json:"negotiate_times,omitempty"`
	AcName                    string                                                `protobuf:"bytes,10,opt,name=ac_name,json=ac-name,proto3" json:"ac_name,omitempty"`
	ServiceName               []string                                              `protobuf:"bytes,11,rep,name=service_name,json=service-name,proto3" json:"service_name,omitempty"`
	ExactMatch                bool                                                  `protobuf:"varint,12,opt,name=exact_match,json=exact-match,proto3" json:"exact_match,omitempty"`
	PadnSend                  Ifm_Interfaces_Interface_PppoeVt_PadnSend             `protobuf:"varint,13,opt,name=padn_send,json=padn-send,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PppoeVt_PadnSend" json:"padn_send,omitempty"`
	PadmSend                  Ifm_Interfaces_Interface_PppoeVt_PadmSend             `protobuf:"varint,14,opt,name=padm_send,json=padm-send,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PppoeVt_PadmSend" json:"padm_send,omitempty"`
	KeepAliveAdjustSystem     bool                                                  `protobuf:"varint,15,opt,name=keep_alive_adjust_system,json=keep-alive-adjust-system,proto3" json:"keep_alive_adjust_system,omitempty"`
	KeepAliveAdjustRetransmit bool                                                  `protobuf:"varint,16,opt,name=keep_alive_adjust_retransmit,json=keep-alive-adjust-retransmit,proto3" json:"keep_alive_adjust_retransmit,omitempty"`
	Mru                       uint32                                                `protobuf:"varint,17,opt,name=mru,proto3" json:"mru,omitempty"`
	LcpDelay                  bool                                                  `protobuf:"varint,18,opt,name=lcp_delay,json=lcp-delay,proto3" json:"lcp_delay,omitempty"`
	LcpDelayForce             bool                                                  `protobuf:"varint,19,opt,name=lcp_delay_force,json=lcp-delay-force,proto3" json:"lcp_delay_force,omitempty"`
	ChapUserName              string                                                `protobuf:"bytes,20,opt,name=chap_user_name,json=chap-user-name,proto3" json:"chap_user_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PppoeVt) Reset() {
	*x = Ifm_Interfaces_Interface_PppoeVt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PppoeVt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PppoeVt) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PppoeVt) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PppoeVt.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PppoeVt) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 27}
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetAuthenModePriority() []Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority {
	if x != nil {
		return x.AuthenModePriority
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetKeepAliveInterval() uint32 {
	if x != nil {
		return x.KeepAliveInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetKeepAliveTimes() uint32 {
	if x != nil {
		return x.KeepAliveTimes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetKeepAliveResponseInterval() uint32 {
	if x != nil {
		return x.KeepAliveResponseInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetKeepAliveDataCheck() bool {
	if x != nil {
		return x.KeepAliveDataCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetMotm() string {
	if x != nil {
		return x.Motm
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetMotmDelimiter() string {
	if x != nil {
		return x.MotmDelimiter
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetNegotiateInterval() uint32 {
	if x != nil {
		return x.NegotiateInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetNegotiateTimes() uint32 {
	if x != nil {
		return x.NegotiateTimes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetAcName() string {
	if x != nil {
		return x.AcName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetServiceName() []string {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetExactMatch() bool {
	if x != nil {
		return x.ExactMatch
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetPadnSend() Ifm_Interfaces_Interface_PppoeVt_PadnSend {
	if x != nil {
		return x.PadnSend
	}
	return Ifm_Interfaces_Interface_PppoeVt_INVALID_ENUM_VALUE_PadnSend
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetPadmSend() Ifm_Interfaces_Interface_PppoeVt_PadmSend {
	if x != nil {
		return x.PadmSend
	}
	return Ifm_Interfaces_Interface_PppoeVt_INVALID_ENUM_VALUE_PadmSend
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetKeepAliveAdjustSystem() bool {
	if x != nil {
		return x.KeepAliveAdjustSystem
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetKeepAliveAdjustRetransmit() bool {
	if x != nil {
		return x.KeepAliveAdjustRetransmit
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetMru() uint32 {
	if x != nil {
		return x.Mru
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetLcpDelay() bool {
	if x != nil {
		return x.LcpDelay
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetLcpDelayForce() bool {
	if x != nil {
		return x.LcpDelayForce
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PppoeVt) GetChapUserName() string {
	if x != nil {
		return x.ChapUserName
	}
	return ""
}

type Ifm_Interfaces_Interface_TcpMssValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MssValue uint32 `protobuf:"varint,1,opt,name=mss_value,json=mss-value,proto3" json:"mss_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TcpMssValue) Reset() {
	*x = Ifm_Interfaces_Interface_TcpMssValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TcpMssValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TcpMssValue) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TcpMssValue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TcpMssValue.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TcpMssValue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 28}
}

func (x *Ifm_Interfaces_Interface_TcpMssValue) GetMssValue() uint32 {
	if x != nil {
		return x.MssValue
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4Urpf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrictCheck bool `protobuf:"varint,1,opt,name=strict_check,json=strict-check,proto3" json:"strict_check,omitempty"`
	SubnetCheck bool `protobuf:"varint,2,opt,name=subnet_check,json=subnet-check,proto3" json:"subnet_check,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4Urpf) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4Urpf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4Urpf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4Urpf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4Urpf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Urpf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4Urpf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 29}
}

func (x *Ifm_Interfaces_Interface_Ipv4Urpf) GetStrictCheck() bool {
	if x != nil {
		return x.StrictCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4Urpf) GetSubnetCheck() bool {
	if x != nil {
		return x.SubnetCheck
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv6Urpf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrictCheck bool `protobuf:"varint,1,opt,name=strict_check,json=strict-check,proto3" json:"strict_check,omitempty"`
	SubnetCheck bool `protobuf:"varint,2,opt,name=subnet_check,json=subnet-check,proto3" json:"subnet_check,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6Urpf) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Urpf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6Urpf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Urpf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Urpf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Urpf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Urpf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 30}
}

func (x *Ifm_Interfaces_Interface_Ipv6Urpf) GetStrictCheck() bool {
	if x != nil {
		return x.StrictCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6Urpf) GetSubnetCheck() bool {
	if x != nil {
		return x.SubnetCheck
	}
	return false
}

type Ifm_Interfaces_Interface_RoamDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoamDomainName string `protobuf:"bytes,1,opt,name=roam_domain_name,json=roam-domain-name,proto3" json:"roam_domain_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_RoamDomain) Reset() {
	*x = Ifm_Interfaces_Interface_RoamDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_RoamDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_RoamDomain) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_RoamDomain) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_RoamDomain.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_RoamDomain) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 31}
}

func (x *Ifm_Interfaces_Interface_RoamDomain) GetRoamDomainName() string {
	if x != nil {
		return x.RoamDomainName
	}
	return ""
}

type Ifm_Interfaces_Interface_PtpPortSrcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortEnable               bool                                                           `protobuf:"varint,1,opt,name=port_enable,json=port-enable,proto3" json:"port_enable,omitempty"`
	PortNum                  int32                                                          `protobuf:"varint,2,opt,name=port_num,json=port-num,proto3" json:"port_num,omitempty"`
	PortState                Ifm_Interfaces_Interface_PtpPortSrcs_PortState                 `protobuf:"varint,3,opt,name=port_state,json=port-state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PortState" json:"port_state,omitempty"`
	PermitDmac               string                                                         `protobuf:"bytes,4,opt,name=permit_dmac,json=permit-dmac,proto3" json:"permit_dmac,omitempty"`
	PtpPortAdvance           *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance           `protobuf:"bytes,5,opt,name=ptp_port_advance,json=ptp-port-advance,proto3" json:"ptp_port_advance,omitempty"`
	PtpPktPack               *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack               `protobuf:"bytes,6,opt,name=ptp_pkt_pack,json=ptp-pkt-pack,proto3" json:"ptp_pkt_pack,omitempty"`
	PtpPeerClock             *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock             `protobuf:"bytes,7,opt,name=ptp_peer_clock,json=ptp-peer-clock,proto3" json:"ptp_peer_clock,omitempty"`
	PtpPktControl            *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl            `protobuf:"bytes,8,opt,name=ptp_pkt_control,json=ptp-pkt-control,proto3" json:"ptp_pkt_control,omitempty"`
	PtpAsymmetryCorrection   *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection   `protobuf:"bytes,9,opt,name=ptp_asymmetry_correction,json=ptp-asymmetry-correction,proto3" json:"ptp_asymmetry_correction,omitempty"`
	PtpTcocStaticClockSrc    *Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc    `protobuf:"bytes,10,opt,name=ptp_tcoc_static_clock_src,json=ptp-tcoc-static-clock-src,proto3" json:"ptp_tcoc_static_clock_src,omitempty"`
	PtpRingFiberLengthChange *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange `protobuf:"bytes,11,opt,name=ptp_ring_fiber_length_change,json=ptp-ring-fiber-length-change,proto3" json:"ptp_ring_fiber_length_change,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPortEnable() bool {
	if x != nil {
		return x.PortEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPortNum() int32 {
	if x != nil {
		return x.PortNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPortState() Ifm_Interfaces_Interface_PtpPortSrcs_PortState {
	if x != nil {
		return x.PortState
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PortState_SLAVE
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPermitDmac() string {
	if x != nil {
		return x.PermitDmac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPtpPortAdvance() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance {
	if x != nil {
		return x.PtpPortAdvance
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPtpPktPack() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack {
	if x != nil {
		return x.PtpPktPack
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPtpPeerClock() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock {
	if x != nil {
		return x.PtpPeerClock
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPtpPktControl() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl {
	if x != nil {
		return x.PtpPktControl
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPtpAsymmetryCorrection() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection {
	if x != nil {
		return x.PtpAsymmetryCorrection
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPtpTcocStaticClockSrc() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc {
	if x != nil {
		return x.PtpTcocStaticClockSrc
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs) GetPtpRingFiberLengthChange() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange {
	if x != nil {
		return x.PtpRingFiberLengthChange
	}
	return nil
}

type Ifm_Interfaces_Interface_VinterLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcName string `protobuf:"bytes,1,opt,name=src_name,json=src-name,proto3" json:"src_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_VinterLinks) Reset() {
	*x = Ifm_Interfaces_Interface_VinterLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_VinterLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VinterLinks) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VinterLinks) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VinterLinks.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VinterLinks) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 33}
}

func (x *Ifm_Interfaces_Interface_VinterLinks) GetSrcName() string {
	if x != nil {
		return x.SrcName
	}
	return ""
}

type Ifm_Interfaces_Interface_ClocksyncFlexe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhyPorts *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts `protobuf:"bytes,1,opt,name=phy_ports,json=phy-ports,proto3" json:"phy_ports,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe) Reset() {
	*x = Ifm_Interfaces_Interface_ClocksyncFlexe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClocksyncFlexe) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClocksyncFlexe.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClocksyncFlexe) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34}
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe) GetPhyPorts() *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts {
	if x != nil {
		return x.PhyPorts
	}
	return nil
}

type Ifm_Interfaces_Interface_GpsPortSrcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsPortSrc *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc `protobuf:"bytes,1,opt,name=gps_port_src,json=gps-port-src,proto3" json:"gps_port_src,omitempty"`
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs) Reset() {
	*x = Ifm_Interfaces_Interface_GpsPortSrcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_GpsPortSrcs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_GpsPortSrcs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs) GetGpsPortSrc() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc {
	if x != nil {
		return x.GpsPortSrc
	}
	return nil
}

type Ifm_Interfaces_Interface_ClockPortSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Ifm_Interfaces_Interface_ClockPortSources_Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClockPortSources) Reset() {
	*x = Ifm_Interfaces_Interface_ClockPortSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClockPortSources) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClockPortSources) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClockPortSources) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources) GetSource() *Ifm_Interfaces_Interface_ClockPortSources_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type Ifm_Interfaces_Interface_PtpaPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtpaPort *Ifm_Interfaces_Interface_PtpaPorts_PtpaPort `protobuf:"bytes,1,opt,name=ptpa_port,json=ptpa-port,proto3" json:"ptpa_port,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpaPorts) Reset() {
	*x = Ifm_Interfaces_Interface_PtpaPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpaPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpaPorts) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpaPorts) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpaPorts.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpaPorts) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37}
}

func (x *Ifm_Interfaces_Interface_PtpaPorts) GetPtpaPort() *Ifm_Interfaces_Interface_PtpaPorts_PtpaPort {
	if x != nil {
		return x.PtpaPort
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArpSafeguards    *Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards    `protobuf:"bytes,1,opt,name=arp_safeguards,json=arp-safeguards,proto3" json:"arp_safeguards,omitempty"`
	HostCarQinqHashs *Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs `protobuf:"bytes,2,opt,name=host_car_qinq_hashs,json=host-car-qinq-hashs,proto3" json:"host_car_qinq_hashs,omitempty"`
	Ipv4Urpf         *Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf         `protobuf:"bytes,3,opt,name=ipv4_urpf,json=ipv4-urpf,proto3" json:"ipv4_urpf,omitempty"`
	Ipv6Urpf         *Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf         `protobuf:"bytes,4,opt,name=ipv6_urpf,json=ipv6-urpf,proto3" json:"ipv6_urpf,omitempty"`
	ArpVlanCar       *Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar       `protobuf:"bytes,5,opt,name=arp_vlan_car,json=arp-vlan-car,proto3" json:"arp_vlan_car,omitempty"`
	NdVlanCars       *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars       `protobuf:"bytes,6,opt,name=nd_vlan_cars,json=nd-vlan-cars,proto3" json:"nd_vlan_cars,omitempty"`
	ProtocolPortCar  *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar  `protobuf:"bytes,7,opt,name=protocol_port_car,json=protocol-port-car,proto3" json:"protocol_port_car,omitempty"`
	ArpCheck         *Ifm_Interfaces_Interface_Cpudefend_ArpCheck         `protobuf:"bytes,8,opt,name=arp_check,json=arp-check,proto3" json:"arp_check,omitempty"`
	ArpFilter        *Ifm_Interfaces_Interface_Cpudefend_ArpFilter        `protobuf:"bytes,9,opt,name=arp_filter,json=arp-filter,proto3" json:"arp_filter,omitempty"`
	CpRateLimit      *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit      `protobuf:"bytes,10,opt,name=cp_rate_limit,json=cp-rate-limit,proto3" json:"cp_rate_limit,omitempty"`
	MacFilter        *Ifm_Interfaces_Interface_Cpudefend_MacFilter        `protobuf:"bytes,11,opt,name=mac_filter,json=mac-filter,proto3" json:"mac_filter,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38}
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetArpSafeguards() *Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards {
	if x != nil {
		return x.ArpSafeguards
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetHostCarQinqHashs() *Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs {
	if x != nil {
		return x.HostCarQinqHashs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetIpv4Urpf() *Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf {
	if x != nil {
		return x.Ipv4Urpf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetIpv6Urpf() *Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf {
	if x != nil {
		return x.Ipv6Urpf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetArpVlanCar() *Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar {
	if x != nil {
		return x.ArpVlanCar
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetNdVlanCars() *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars {
	if x != nil {
		return x.NdVlanCars
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetProtocolPortCar() *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar {
	if x != nil {
		return x.ProtocolPortCar
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetArpCheck() *Ifm_Interfaces_Interface_Cpudefend_ArpCheck {
	if x != nil {
		return x.ArpCheck
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetArpFilter() *Ifm_Interfaces_Interface_Cpudefend_ArpFilter {
	if x != nil {
		return x.ArpFilter
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetCpRateLimit() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit {
	if x != nil {
		return x.CpRateLimit
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend) GetMacFilter() *Ifm_Interfaces_Interface_Cpudefend_MacFilter {
	if x != nil {
		return x.MacFilter
	}
	return nil
}

type Ifm_Interfaces_Interface_Dcn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dcnv4 *Ifm_Interfaces_Interface_Dcn_Dcnv4 `protobuf:"bytes,1,opt,name=dcnv4,proto3" json:"dcnv4,omitempty"`
	TcDcn *Ifm_Interfaces_Interface_Dcn_TcDcn `protobuf:"bytes,2,opt,name=tc_dcn,json=tc-dcn,proto3" json:"tc_dcn,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dcn) Reset() {
	*x = Ifm_Interfaces_Interface_Dcn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dcn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dcn) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dcn) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dcn.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dcn) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 39}
}

func (x *Ifm_Interfaces_Interface_Dcn) GetDcnv4() *Ifm_Interfaces_Interface_Dcn_Dcnv4 {
	if x != nil {
		return x.Dcnv4
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dcn) GetTcDcn() *Ifm_Interfaces_Interface_Dcn_TcDcn {
	if x != nil {
		return x.TcDcn
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                     bool                                                                    `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	ReplyPacketPolicy          Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy           `protobuf:"varint,2,opt,name=reply_packet_policy,json=reply-packet-policy,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy" json:"reply_packet_policy,omitempty"`
	Option82                   *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82                   `protobuf:"bytes,3,opt,name=option82,proto3" json:"option82,omitempty"`
	ServerAddresses            *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses            `protobuf:"bytes,4,opt,name=server_addresses,json=server-addresses,proto3" json:"server_addresses,omitempty"`
	GatewayAddresses           *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses           `protobuf:"bytes,5,opt,name=gateway_addresses,json=gateway-addresses,proto3" json:"gateway_addresses,omitempty"`
	RelaySourceAddress         *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress         `protobuf:"bytes,6,opt,name=relay_source_address,json=relay-source-address,proto3" json:"relay_source_address,omitempty"`
	RelaySourceOptionAddresses *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses `protobuf:"bytes,7,opt,name=relay_source_option_addresses,json=relay-source-option-addresses,proto3" json:"relay_source_option_addresses,omitempty"`
	Opt82VendorSpecifics       *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics       `protobuf:"bytes,8,opt,name=opt82_vendor_specifics,json=opt82-vendor-specifics,proto3" json:"opt82_vendor_specifics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetReplyPacketPolicy() Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy {
	if x != nil {
		return x.ReplyPacketPolicy
	}
	return Ifm_Interfaces_Interface_DhcpRelayAttribute_INVALID_ENUM_VALUE_ReplyPacketPolicy
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetOption82() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82 {
	if x != nil {
		return x.Option82
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetServerAddresses() *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses {
	if x != nil {
		return x.ServerAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetGatewayAddresses() *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses {
	if x != nil {
		return x.GatewayAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetRelaySourceAddress() *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress {
	if x != nil {
		return x.RelaySourceAddress
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetRelaySourceOptionAddresses() *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses {
	if x != nil {
		return x.RelaySourceOptionAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetOpt82VendorSpecifics() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics {
	if x != nil {
		return x.Opt82VendorSpecifics
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpPacketSetting     *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting     `protobuf:"bytes,1,opt,name=dhcp_packet_setting,json=dhcp-packet-setting,proto3" json:"dhcp_packet_setting,omitempty"`
	Option82Formats       *Ifm_Interfaces_Interface_DhcpIf_Option82Formats       `protobuf:"bytes,2,opt,name=option82_formats,json=option82-formats,proto3" json:"option82_formats,omitempty"`
	Option82InsertSetting *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting `protobuf:"bytes,3,opt,name=option82_insert_setting,json=option82-insert-setting,proto3" json:"option82_insert_setting,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41}
}

func (x *Ifm_Interfaces_Interface_DhcpIf) GetDhcpPacketSetting() *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting {
	if x != nil {
		return x.DhcpPacketSetting
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpIf) GetOption82Formats() *Ifm_Interfaces_Interface_DhcpIf_Option82Formats {
	if x != nil {
		return x.Option82Formats
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpIf) GetOption82InsertSetting() *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting {
	if x != nil {
		return x.Option82InsertSetting
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpClientIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressAllocation bool                                                    `protobuf:"varint,1,opt,name=address_allocation,json=address-allocation,proto3" json:"address_allocation,omitempty"`
	ExpectedLease     uint32                                                  `protobuf:"varint,2,opt,name=expected_lease,json=expected-lease,proto3" json:"expected_lease,omitempty"`
	Option60          string                                                  `protobuf:"bytes,3,opt,name=option60,proto3" json:"option60,omitempty"`
	ClientStatus      *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus     `protobuf:"bytes,4,opt,name=client_status,json=client-status,proto3" json:"client_status,omitempty"`
	ClientStatistics  *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics `protobuf:"bytes,5,opt,name=client_statistics,json=client-statistics,proto3" json:"client_statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpClientIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpClientIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpClientIf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetAddressAllocation() bool {
	if x != nil {
		return x.AddressAllocation
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetExpectedLease() uint32 {
	if x != nil {
		return x.ExpectedLease
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetOption60() string {
	if x != nil {
		return x.Option60
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetClientStatus() *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetClientStatistics() *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics {
	if x != nil {
		return x.ClientStatistics
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicAttribute *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute `protobuf:"bytes,1,opt,name=basic_attribute,json=basic-attribute,proto3" json:"basic_attribute,omitempty"`
	StaticBinds    *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds    `protobuf:"bytes,2,opt,name=static_binds,json=static-binds,proto3" json:"static_binds,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) GetBasicAttribute() *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute {
	if x != nil {
		return x.BasicAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) GetStaticBinds() *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds {
	if x != nil {
		return x.StaticBinds
	}
	return nil
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAddress        string                                                              `protobuf:"bytes,1,opt,name=source_address,json=source-address,proto3" json:"source_address,omitempty"`
	LinkAddress          string                                                              `protobuf:"bytes,2,opt,name=link_address,json=link-address,proto3" json:"link_address,omitempty"`
	StrictCheck          bool                                                                `protobuf:"varint,3,opt,name=strict_check,json=strict-check,proto3" json:"strict_check,omitempty"`
	ServerGroupName      string                                                              `protobuf:"bytes,4,opt,name=server_group_name,json=server-group-name,proto3" json:"server_group_name,omitempty"`
	DestinationAddresses *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses `protobuf:"bytes,5,opt,name=destination_addresses,json=destination-addresses,proto3" json:"destination_addresses,omitempty"`
	DestinationIfs       *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs       `protobuf:"bytes,6,opt,name=destination_ifs,json=destination-ifs,proto3" json:"destination_ifs,omitempty"`
	RebuildOption        *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption        `protobuf:"bytes,7,opt,name=rebuild_option,json=rebuild-option,proto3" json:"rebuild_option,omitempty"`
	AccessLimitSetting   *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting   `protobuf:"bytes,8,opt,name=access_limit_setting,json=access-limit-setting,proto3" json:"access_limit_setting,omitempty"`
	PdRouteTrackVrrp     *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp     `protobuf:"bytes,9,opt,name=pd_route_track_vrrp,json=pd-route-track-vrrp,proto3" json:"pd_route_track_vrrp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetLinkAddress() string {
	if x != nil {
		return x.LinkAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetStrictCheck() bool {
	if x != nil {
		return x.StrictCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetServerGroupName() string {
	if x != nil {
		return x.ServerGroupName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetDestinationAddresses() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses {
	if x != nil {
		return x.DestinationAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetDestinationIfs() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs {
	if x != nil {
		return x.DestinationIfs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetRebuildOption() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption {
	if x != nil {
		return x.RebuildOption
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetAccessLimitSetting() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting {
	if x != nil {
		return x.AccessLimitSetting
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetPdRouteTrackVrrp() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp {
	if x != nil {
		return x.PdRouteTrackVrrp
	}
	return nil
}

type Ifm_Interfaces_Interface_Efm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Ifm_Interfaces_Interface_Efm_Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm) Reset() {
	*x = Ifm_Interfaces_Interface_Efm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45}
}

func (x *Ifm_Interfaces_Interface_Efm) GetSession() *Ifm_Interfaces_Interface_Efm_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type Ifm_Interfaces_Interface_Evpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PbbSourceMac    string                                         `protobuf:"bytes,2,opt,name=pbb_source_mac,json=pbb-source-mac,proto3" json:"pbb_source_mac,omitempty"`
	Esi             string                                         `protobuf:"bytes,3,opt,name=esi,proto3" json:"esi,omitempty"`
	EsiName         string                                         `protobuf:"bytes,4,opt,name=esi_name,json=esi-name,proto3" json:"esi_name,omitempty"`
	EsRecoveryTimer uint32                                         `protobuf:"varint,5,opt,name=es_recovery_timer,json=es-recovery-timer,proto3" json:"es_recovery_timer,omitempty"`
	TrackBfdName    string                                         `protobuf:"bytes,6,opt,name=track_bfd_name,json=track-bfd-name,proto3" json:"track_bfd_name,omitempty"`
	ETreeLeaf       bool                                           `protobuf:"varint,7,opt,name=e_tree_leaf,json=e-tree-leaf,proto3" json:"e_tree_leaf,omitempty"`
	ProtocolActions *Ifm_Interfaces_Interface_Evpn_ProtocolActions `protobuf:"bytes,8,opt,name=protocol_actions,json=protocol-actions,proto3" json:"protocol_actions,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Evpn) Reset() {
	*x = Ifm_Interfaces_Interface_Evpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Evpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Evpn) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Evpn) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Evpn.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Evpn) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 46}
}

func (x *Ifm_Interfaces_Interface_Evpn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetPbbSourceMac() string {
	if x != nil {
		return x.PbbSourceMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetEsi() string {
	if x != nil {
		return x.Esi
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetEsiName() string {
	if x != nil {
		return x.EsiName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetEsRecoveryTimer() uint32 {
	if x != nil {
		return x.EsRecoveryTimer
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Evpn) GetTrackBfdName() string {
	if x != nil {
		return x.TrackBfdName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetETreeLeaf() bool {
	if x != nil {
		return x.ETreeLeaf
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Evpn) GetProtocolActions() *Ifm_Interfaces_Interface_Evpn_ProtocolActions {
	if x != nil {
		return x.ProtocolActions
	}
	return nil
}

type Ifm_Interfaces_Interface_Fim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticEnable    Ifm_Interfaces_Interface_Fim_StatisticEnable    `protobuf:"varint,1,opt,name=statistic_enable,json=statistic-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Fim_StatisticEnable" json:"statistic_enable,omitempty"`
	StatisticMode      Ifm_Interfaces_Interface_Fim_StatisticMode      `protobuf:"varint,2,opt,name=statistic_mode,json=statistic-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Fim_StatisticMode" json:"statistic_mode,omitempty"`
	MacStatisticEnable Ifm_Interfaces_Interface_Fim_MacStatisticEnable `protobuf:"varint,3,opt,name=mac_statistic_enable,json=mac-statistic-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Fim_MacStatisticEnable" json:"mac_statistic_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Fim) Reset() {
	*x = Ifm_Interfaces_Interface_Fim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Fim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Fim) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Fim) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fim.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Fim) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 47}
}

func (x *Ifm_Interfaces_Interface_Fim) GetStatisticEnable() Ifm_Interfaces_Interface_Fim_StatisticEnable {
	if x != nil {
		return x.StatisticEnable
	}
	return Ifm_Interfaces_Interface_Fim_StatisticEnable_DISABLE
}

func (x *Ifm_Interfaces_Interface_Fim) GetStatisticMode() Ifm_Interfaces_Interface_Fim_StatisticMode {
	if x != nil {
		return x.StatisticMode
	}
	return Ifm_Interfaces_Interface_Fim_StatisticMode_MAC
}

func (x *Ifm_Interfaces_Interface_Fim) GetMacStatisticEnable() Ifm_Interfaces_Interface_Fim_MacStatisticEnable {
	if x != nil {
		return x.MacStatisticEnable
	}
	return Ifm_Interfaces_Interface_Fim_MacStatisticEnable_DISABLE
}

type Ifm_Interfaces_Interface_FimIfmMru struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mru                uint32                                                `protobuf:"varint,1,opt,name=mru,proto3" json:"mru,omitempty"`
	MruStatisticEnable Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable `protobuf:"varint,2,opt,name=mru_statistic_enable,json=mru-statistic-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable" json:"mru_statistic_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FimIfmMru) Reset() {
	*x = Ifm_Interfaces_Interface_FimIfmMru{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FimIfmMru) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FimIfmMru) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FimIfmMru) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FimIfmMru.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FimIfmMru) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 48}
}

func (x *Ifm_Interfaces_Interface_FimIfmMru) GetMru() uint32 {
	if x != nil {
		return x.Mru
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_FimIfmMru) GetMruStatisticEnable() Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable {
	if x != nil {
		return x.MruStatisticEnable
	}
	return Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable_DISABLE
}

type Ifm_Interfaces_Interface_FimTcpMss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpMss uint32 `protobuf:"varint,1,opt,name=tcp_mss,json=tcp-mss,proto3" json:"tcp_mss,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FimTcpMss) Reset() {
	*x = Ifm_Interfaces_Interface_FimTcpMss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FimTcpMss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FimTcpMss) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FimTcpMss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FimTcpMss.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FimTcpMss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 49}
}

func (x *Ifm_Interfaces_Interface_FimTcpMss) GetTcpMss() uint32 {
	if x != nil {
		return x.TcpMss
	}
	return 0
}

type Ifm_Interfaces_Interface_FimIfmBdifint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VbdifLoopbackEnable bool `protobuf:"varint,1,opt,name=vbdif_loopback_enable,json=vbdif-loopback-enable,proto3" json:"vbdif_loopback_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FimIfmBdifint) Reset() {
	*x = Ifm_Interfaces_Interface_FimIfmBdifint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FimIfmBdifint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FimIfmBdifint) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FimIfmBdifint) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FimIfmBdifint.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FimIfmBdifint) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 50}
}

func (x *Ifm_Interfaces_Interface_FimIfmBdifint) GetVbdifLoopbackEnable() bool {
	if x != nil {
		return x.VbdifLoopbackEnable
	}
	return false
}

type Ifm_Interfaces_Interface_FimIfmVeint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VeForwardMode Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode `protobuf:"varint,1,opt,name=ve_forward_mode,json=ve-forward-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode" json:"ve_forward_mode,omitempty"`
	VeSlotId      string                                             `protobuf:"bytes,2,opt,name=ve_slot_id,json=ve-slot-id,proto3" json:"ve_slot_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FimIfmVeint) Reset() {
	*x = Ifm_Interfaces_Interface_FimIfmVeint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FimIfmVeint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FimIfmVeint) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FimIfmVeint) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FimIfmVeint.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FimIfmVeint) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 51}
}

func (x *Ifm_Interfaces_Interface_FimIfmVeint) GetVeForwardMode() Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode {
	if x != nil {
		return x.VeForwardMode
	}
	return Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode_LOOPBACK
}

func (x *Ifm_Interfaces_Interface_FimIfmVeint) GetVeSlotId() string {
	if x != nil {
		return x.VeSlotId
	}
	return ""
}

type Ifm_Interfaces_Interface_VeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Ifm_Interfaces_Interface_VeGroup_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_VeGroup_Type" json:"type,omitempty"`
	Id   uint32                                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_VeGroup) Reset() {
	*x = Ifm_Interfaces_Interface_VeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_VeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VeGroup) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VeGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VeGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 52}
}

func (x *Ifm_Interfaces_Interface_VeGroup) GetType() Ifm_Interfaces_Interface_VeGroup_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_VeGroup_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_VeGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Ifm_Interfaces_Interface_MruDiscardStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet uint64 `protobuf:"varint,1,opt,name=packet,proto3" json:"packet,omitempty"`
	Byte   uint64 `protobuf:"varint,2,opt,name=byte,proto3" json:"byte,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MruDiscardStatistic) Reset() {
	*x = Ifm_Interfaces_Interface_MruDiscardStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MruDiscardStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MruDiscardStatistic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MruDiscardStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MruDiscardStatistic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MruDiscardStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 53}
}

func (x *Ifm_Interfaces_Interface_MruDiscardStatistic) GetPacket() uint64 {
	if x != nil {
		return x.Packet
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MruDiscardStatistic) GetByte() uint64 {
	if x != nil {
		return x.Byte
	}
	return 0
}

type Ifm_Interfaces_Interface_MacmtuDiscardStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtuIpv4 uint64 `protobuf:"varint,1,opt,name=mtu_ipv4,json=mtu-ipv4,proto3" json:"mtu_ipv4,omitempty"`
	MtuIpv6 uint64 `protobuf:"varint,2,opt,name=mtu_ipv6,json=mtu-ipv6,proto3" json:"mtu_ipv6,omitempty"`
	MacIpv4 uint64 `protobuf:"varint,3,opt,name=mac_ipv4,json=mac-ipv4,proto3" json:"mac_ipv4,omitempty"`
	MacIpv6 uint64 `protobuf:"varint,4,opt,name=mac_ipv6,json=mac-ipv6,proto3" json:"mac_ipv6,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MacmtuDiscardStat) Reset() {
	*x = Ifm_Interfaces_Interface_MacmtuDiscardStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MacmtuDiscardStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MacmtuDiscardStat) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MacmtuDiscardStat) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MacmtuDiscardStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MacmtuDiscardStat) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 54}
}

func (x *Ifm_Interfaces_Interface_MacmtuDiscardStat) GetMtuIpv4() uint64 {
	if x != nil {
		return x.MtuIpv4
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MacmtuDiscardStat) GetMtuIpv6() uint64 {
	if x != nil {
		return x.MtuIpv6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MacmtuDiscardStat) GetMacIpv4() uint64 {
	if x != nil {
		return x.MacIpv4
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MacmtuDiscardStat) GetMacIpv6() uint64 {
	if x != nil {
		return x.MacIpv6
	}
	return 0
}

type Ifm_Interfaces_Interface_FlowRecognition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowEnables *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables `protobuf:"bytes,1,opt,name=flow_enables,json=flow-enables,proto3" json:"flow_enables,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FlowRecognition) Reset() {
	*x = Ifm_Interfaces_Interface_FlowRecognition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowRecognition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowRecognition) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowRecognition) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowRecognition.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowRecognition) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 55}
}

func (x *Ifm_Interfaces_Interface_FlowRecognition) GetFlowEnables() *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables {
	if x != nil {
		return x.FlowEnables
	}
	return nil
}

type Ifm_Interfaces_Interface_FlowspecForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refluence *Ifm_Interfaces_Interface_FlowspecForward_Refluence `protobuf:"bytes,1,opt,name=refluence,proto3" json:"refluence,omitempty"`
	TunnelPop *Ifm_Interfaces_Interface_FlowspecForward_TunnelPop `protobuf:"bytes,2,opt,name=tunnel_pop,json=tunnel-pop,proto3" json:"tunnel_pop,omitempty"`
	Disables  *Ifm_Interfaces_Interface_FlowspecForward_Disables  `protobuf:"bytes,3,opt,name=disables,proto3" json:"disables,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FlowspecForward) Reset() {
	*x = Ifm_Interfaces_Interface_FlowspecForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowspecForward) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowspecForward) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowspecForward.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowspecForward) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 56}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward) GetRefluence() *Ifm_Interfaces_Interface_FlowspecForward_Refluence {
	if x != nil {
		return x.Refluence
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_FlowspecForward) GetTunnelPop() *Ifm_Interfaces_Interface_FlowspecForward_TunnelPop {
	if x != nil {
		return x.TunnelPop
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_FlowspecForward) GetDisables() *Ifm_Interfaces_Interface_FlowspecForward_Disables {
	if x != nil {
		return x.Disables
	}
	return nil
}

type Ifm_Interfaces_Interface_If8021PPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_If8021PPriority) Reset() {
	*x = Ifm_Interfaces_Interface_If8021PPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_If8021PPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_If8021PPriority) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_If8021PPriority) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_If8021PPriority.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_If8021PPriority) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 57}
}

func (x *Ifm_Interfaces_Interface_If8021PPriority) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Ifm_Interfaces_Interface_ManagementPlaneDefendIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId uint32 `protobuf:"varint,1,opt,name=policy_id,json=policy-id,proto3" json:"policy_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) Reset() {
	*x = Ifm_Interfaces_Interface_ManagementPlaneDefendIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ManagementPlaneDefendIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ManagementPlaneDefendIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ManagementPlaneDefendIf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 58}
}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) GetPolicyId() uint32 {
	if x != nil {
		return x.PolicyId
	}
	return 0
}

type Ifm_Interfaces_Interface_IgmpSnooping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearningDisableVlans  string                                              `protobuf:"bytes,1,opt,name=learning_disable_vlans,json=learning-disable-vlans,proto3" json:"learning_disable_vlans,omitempty"`
	StaticRouterPortVlans string                                              `protobuf:"bytes,2,opt,name=static_router_port_vlans,json=static-router-port-vlans,proto3" json:"static_router_port_vlans,omitempty"`
	LimitMaxEntry         uint32                                              `protobuf:"varint,3,opt,name=limit_max_entry,json=limit-max-entry,proto3" json:"limit_max_entry,omitempty"`
	ExceptAcl             string                                              `protobuf:"bytes,4,opt,name=except_acl,json=except-acl,proto3" json:"except_acl,omitempty"`
	NumberLimits          *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits `protobuf:"bytes,5,opt,name=number_limits,json=number-limits,proto3" json:"number_limits,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) Reset() {
	*x = Ifm_Interfaces_Interface_IgmpSnooping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IgmpSnooping) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IgmpSnooping.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IgmpSnooping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 59}
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) GetLearningDisableVlans() string {
	if x != nil {
		return x.LearningDisableVlans
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) GetStaticRouterPortVlans() string {
	if x != nil {
		return x.StaticRouterPortVlans
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) GetLimitMaxEntry() uint32 {
	if x != nil {
		return x.LimitMaxEntry
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) GetExceptAcl() string {
	if x != nil {
		return x.ExceptAcl
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping) GetNumberLimits() *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits {
	if x != nil {
		return x.NumberLimits
	}
	return nil
}

type Ifm_Interfaces_Interface_HwmcIfEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Ifm_Interfaces_Interface_HwmcIfEnable) Reset() {
	*x = Ifm_Interfaces_Interface_HwmcIfEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_HwmcIfEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_HwmcIfEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_HwmcIfEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_HwmcIfEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_HwmcIfEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 60}
}

func (x *Ifm_Interfaces_Interface_HwmcIfEnable) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type Ifm_Interfaces_Interface_ProtocolActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolAction []*Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction `protobuf:"bytes,1,rep,name=protocol_action,json=protocol-action,proto3" json:"protocol_action,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ProtocolActions) Reset() {
	*x = Ifm_Interfaces_Interface_ProtocolActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ProtocolActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ProtocolActions) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ProtocolActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ProtocolActions.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ProtocolActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 61}
}

func (x *Ifm_Interfaces_Interface_ProtocolActions) GetProtocolAction() []*Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction {
	if x != nil {
		return x.ProtocolAction
	}
	return nil
}

type Ifm_Interfaces_Interface_VllPwLoopCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_VllPwLoopCheck) Reset() {
	*x = Ifm_Interfaces_Interface_VllPwLoopCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_VllPwLoopCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VllPwLoopCheck) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VllPwLoopCheck) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VllPwLoopCheck.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VllPwLoopCheck) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 62}
}

func (x *Ifm_Interfaces_Interface_VllPwLoopCheck) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Ifm_Interfaces_Interface_EncapsulationVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanPass bool `protobuf:"varint,1,opt,name=vlan_pass,json=vlan-pass,proto3" json:"vlan_pass,omitempty"`
}

func (x *Ifm_Interfaces_Interface_EncapsulationVlan) Reset() {
	*x = Ifm_Interfaces_Interface_EncapsulationVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_EncapsulationVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_EncapsulationVlan) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_EncapsulationVlan) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_EncapsulationVlan.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_EncapsulationVlan) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 63}
}

func (x *Ifm_Interfaces_Interface_EncapsulationVlan) GetVlanPass() bool {
	if x != nil {
		return x.VlanPass
	}
	return false
}

type Ifm_Interfaces_Interface_Lldp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Ifm_Interfaces_Interface_Lldp_Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64}
}

func (x *Ifm_Interfaces_Interface_Lldp) GetSession() *Ifm_Interfaces_Interface_Lldp_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type Ifm_Interfaces_Interface_Loadbalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ucmp   *Ifm_Interfaces_Interface_Loadbalance_Ucmp   `protobuf:"bytes,1,opt,name=ucmp,proto3" json:"ucmp,omitempty"`
	Packet *Ifm_Interfaces_Interface_Loadbalance_Packet `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Loadbalance) Reset() {
	*x = Ifm_Interfaces_Interface_Loadbalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Loadbalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Loadbalance) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Loadbalance) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loadbalance.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Loadbalance) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 65}
}

func (x *Ifm_Interfaces_Interface_Loadbalance) GetUcmp() *Ifm_Interfaces_Interface_Loadbalance_Ucmp {
	if x != nil {
		return x.Ucmp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Loadbalance) GetPacket() *Ifm_Interfaces_Interface_Loadbalance_Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

type Ifm_Interfaces_Interface_Loopdetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacWithdraw    *Ifm_Interfaces_Interface_Loopdetect_MacWithdraw    `protobuf:"bytes,1,opt,name=mac_withdraw,json=mac-withdraw,proto3" json:"mac_withdraw,omitempty"`
	LoopbackDetect *Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect `protobuf:"bytes,2,opt,name=loopback_detect,json=loopback-detect,proto3" json:"loopback_detect,omitempty"`
	LoopDetect     *Ifm_Interfaces_Interface_Loopdetect_LoopDetect     `protobuf:"bytes,3,opt,name=loop_detect,json=loop-detect,proto3" json:"loop_detect,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Loopdetect) Reset() {
	*x = Ifm_Interfaces_Interface_Loopdetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Loopdetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Loopdetect) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Loopdetect) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loopdetect.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Loopdetect) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 66}
}

func (x *Ifm_Interfaces_Interface_Loopdetect) GetMacWithdraw() *Ifm_Interfaces_Interface_Loopdetect_MacWithdraw {
	if x != nil {
		return x.MacWithdraw
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Loopdetect) GetLoopbackDetect() *Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect {
	if x != nil {
		return x.LoopbackDetect
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Loopdetect) GetLoopDetect() *Ifm_Interfaces_Interface_Loopdetect_LoopDetect {
	if x != nil {
		return x.LoopDetect
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CknCaks                *Ifm_Interfaces_Interface_Macsec_CknCaks                `protobuf:"bytes,1,opt,name=ckn_caks,json=ckn-caks,proto3" json:"ckn_caks,omitempty"`
	ConfidentialityOffsets *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets `protobuf:"bytes,2,opt,name=confidentiality_offsets,json=confidentiality-offsets,proto3" json:"confidentiality_offsets,omitempty"`
	ReplayWindows          *Ifm_Interfaces_Interface_Macsec_ReplayWindows          `protobuf:"bytes,3,opt,name=replay_windows,json=replay-windows,proto3" json:"replay_windows,omitempty"`
	KeyserverPrioritys     *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys     `protobuf:"bytes,4,opt,name=keyserver_prioritys,json=keyserver-prioritys,proto3" json:"keyserver_prioritys,omitempty"`
	SakLifeTimes           *Ifm_Interfaces_Interface_Macsec_SakLifeTimes           `protobuf:"bytes,5,opt,name=sak_life_times,json=sak-life-times,proto3" json:"sak_life_times,omitempty"`
	EncryptModes           *Ifm_Interfaces_Interface_Macsec_EncryptModes           `protobuf:"bytes,6,opt,name=encrypt_modes,json=encrypt-modes,proto3" json:"encrypt_modes,omitempty"`
	CipherAlgorithmSuites  *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites  `protobuf:"bytes,7,opt,name=cipher_algorithm_suites,json=cipher-algorithm-suites,proto3" json:"cipher_algorithm_suites,omitempty"`
	VlanInClears           *Ifm_Interfaces_Interface_Macsec_VlanInClears           `protobuf:"bytes,8,opt,name=vlan_in_clears,json=vlan-in-clears,proto3" json:"vlan_in_clears,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67}
}

func (x *Ifm_Interfaces_Interface_Macsec) GetCknCaks() *Ifm_Interfaces_Interface_Macsec_CknCaks {
	if x != nil {
		return x.CknCaks
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Macsec) GetConfidentialityOffsets() *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets {
	if x != nil {
		return x.ConfidentialityOffsets
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Macsec) GetReplayWindows() *Ifm_Interfaces_Interface_Macsec_ReplayWindows {
	if x != nil {
		return x.ReplayWindows
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Macsec) GetKeyserverPrioritys() *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys {
	if x != nil {
		return x.KeyserverPrioritys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Macsec) GetSakLifeTimes() *Ifm_Interfaces_Interface_Macsec_SakLifeTimes {
	if x != nil {
		return x.SakLifeTimes
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Macsec) GetEncryptModes() *Ifm_Interfaces_Interface_Macsec_EncryptModes {
	if x != nil {
		return x.EncryptModes
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Macsec) GetCipherAlgorithmSuites() *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites {
	if x != nil {
		return x.CipherAlgorithmSuites
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Macsec) GetVlanInClears() *Ifm_Interfaces_Interface_Macsec_VlanInClears {
	if x != nil {
		return x.VlanInClears
	}
	return nil
}

type Ifm_Interfaces_Interface_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortMirrors      *Ifm_Interfaces_Interface_Mirror_PortMirrors      `protobuf:"bytes,1,opt,name=port_mirrors,json=port-mirrors,proto3" json:"port_mirrors,omitempty"`
	PortMirrorSlice  *Ifm_Interfaces_Interface_Mirror_PortMirrorSlice  `protobuf:"bytes,2,opt,name=port_mirror_slice,json=port-mirror-slice,proto3" json:"port_mirror_slice,omitempty"`
	WithoutHeader    *Ifm_Interfaces_Interface_Mirror_WithoutHeader    `protobuf:"bytes,3,opt,name=without_header,json=without-header,proto3" json:"without_header,omitempty"`
	PortMirrorCar    *Ifm_Interfaces_Interface_Mirror_PortMirrorCar    `protobuf:"bytes,4,opt,name=port_mirror_car,json=port-mirror-car,proto3" json:"port_mirror_car,omitempty"`
	PortMirrorTo     *Ifm_Interfaces_Interface_Mirror_PortMirrorTo     `protobuf:"bytes,5,opt,name=port_mirror_to,json=port-mirror-to,proto3" json:"port_mirror_to,omitempty"`
	PortFragments    *Ifm_Interfaces_Interface_Mirror_PortFragments    `protobuf:"bytes,6,opt,name=port_fragments,json=port-fragments,proto3" json:"port_fragments,omitempty"`
	Integrateds      *Ifm_Interfaces_Interface_Mirror_Integrateds      `protobuf:"bytes,7,opt,name=integrateds,proto3" json:"integrateds,omitempty"`
	BasPortMirrors   *Ifm_Interfaces_Interface_Mirror_BasPortMirrors   `protobuf:"bytes,8,opt,name=bas_port_mirrors,json=bas-port-mirrors,proto3" json:"bas_port_mirrors,omitempty"`
	EvcL2PortMirrors *Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors `protobuf:"bytes,9,opt,name=evc_l2_port_mirrors,json=evc-l2-port-mirrors,proto3" json:"evc_l2_port_mirrors,omitempty"`
	PortObserve      *Ifm_Interfaces_Interface_Mirror_PortObserve      `protobuf:"bytes,10,opt,name=port_observe,json=port-observe,proto3" json:"port_observe,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68}
}

func (x *Ifm_Interfaces_Interface_Mirror) GetPortMirrors() *Ifm_Interfaces_Interface_Mirror_PortMirrors {
	if x != nil {
		return x.PortMirrors
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetPortMirrorSlice() *Ifm_Interfaces_Interface_Mirror_PortMirrorSlice {
	if x != nil {
		return x.PortMirrorSlice
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetWithoutHeader() *Ifm_Interfaces_Interface_Mirror_WithoutHeader {
	if x != nil {
		return x.WithoutHeader
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetPortMirrorCar() *Ifm_Interfaces_Interface_Mirror_PortMirrorCar {
	if x != nil {
		return x.PortMirrorCar
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetPortMirrorTo() *Ifm_Interfaces_Interface_Mirror_PortMirrorTo {
	if x != nil {
		return x.PortMirrorTo
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetPortFragments() *Ifm_Interfaces_Interface_Mirror_PortFragments {
	if x != nil {
		return x.PortFragments
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetIntegrateds() *Ifm_Interfaces_Interface_Mirror_Integrateds {
	if x != nil {
		return x.Integrateds
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetBasPortMirrors() *Ifm_Interfaces_Interface_Mirror_BasPortMirrors {
	if x != nil {
		return x.BasPortMirrors
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetEvcL2PortMirrors() *Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors {
	if x != nil {
		return x.EvcL2PortMirrors
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Mirror) GetPortObserve() *Ifm_Interfaces_Interface_Mirror_PortObserve {
	if x != nil {
		return x.PortObserve
	}
	return nil
}

type Ifm_Interfaces_Interface_TrackMonitorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DownWeight uint32 `protobuf:"varint,2,opt,name=down_weight,json=down-weight,proto3" json:"down_weight,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) Reset() {
	*x = Ifm_Interfaces_Interface_TrackMonitorGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TrackMonitorGroup) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TrackMonitorGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TrackMonitorGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 69}
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) GetDownWeight() uint32 {
	if x != nil {
		return x.DownWeight
	}
	return 0
}

type Ifm_Interfaces_Interface_Deephashcfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FragmentField Ifm_Interfaces_Interface_Deephashcfg_FragmentField `protobuf:"varint,1,opt,name=fragment_field,json=fragment-field,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Deephashcfg_FragmentField" json:"fragment_field,omitempty"`
	Deepmplshash  Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash  `protobuf:"varint,2,opt,name=deepmplshash,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash" json:"deepmplshash,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Deephashcfg) Reset() {
	*x = Ifm_Interfaces_Interface_Deephashcfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Deephashcfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Deephashcfg) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Deephashcfg) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Deephashcfg.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Deephashcfg) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 70}
}

func (x *Ifm_Interfaces_Interface_Deephashcfg) GetFragmentField() Ifm_Interfaces_Interface_Deephashcfg_FragmentField {
	if x != nil {
		return x.FragmentField
	}
	return Ifm_Interfaces_Interface_Deephashcfg_INVALID_ENUM_VALUE_FragmentField
}

func (x *Ifm_Interfaces_Interface_Deephashcfg) GetDeepmplshash() Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash {
	if x != nil {
		return x.Deepmplshash
	}
	return Ifm_Interfaces_Interface_Deephashcfg_INVALID_ENUM_VALUE_Deepmplshash
}

type Ifm_Interfaces_Interface_IfPoisonReverse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_IfPoisonReverse) Reset() {
	*x = Ifm_Interfaces_Interface_IfPoisonReverse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfPoisonReverse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfPoisonReverse) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfPoisonReverse) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfPoisonReverse.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfPoisonReverse) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 71}
}

type Ifm_Interfaces_Interface_IfP2MpLoadBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadbanlanceEnable       Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable       `protobuf:"varint,1,opt,name=loadbanlance_enable,json=loadbanlance-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable" json:"loadbanlance_enable,omitempty"`
	RootLoadbanlanceEnable   Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable   `protobuf:"varint,2,opt,name=root_loadbanlance_enable,json=root-loadbanlance-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable" json:"root_loadbanlance_enable,omitempty"`
	RootLoadbanlanceSpmsidis Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis `protobuf:"varint,3,opt,name=root_loadbanlance_spmsidis,json=root-loadbanlance-spmsidis,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis" json:"root_loadbanlance_spmsidis,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfP2MpLoadBalance) Reset() {
	*x = Ifm_Interfaces_Interface_IfP2MpLoadBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfP2MpLoadBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfP2MpLoadBalance) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfP2MpLoadBalance) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfP2MpLoadBalance.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfP2MpLoadBalance) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 72}
}

func (x *Ifm_Interfaces_Interface_IfP2MpLoadBalance) GetLoadbanlanceEnable() Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable {
	if x != nil {
		return x.LoadbanlanceEnable
	}
	return Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable_DISABLE
}

func (x *Ifm_Interfaces_Interface_IfP2MpLoadBalance) GetRootLoadbanlanceEnable() Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable {
	if x != nil {
		return x.RootLoadbanlanceEnable
	}
	return Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable_DISABLE
}

func (x *Ifm_Interfaces_Interface_IfP2MpLoadBalance) GetRootLoadbanlanceSpmsidis() Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis {
	if x != nil {
		return x.RootLoadbanlanceSpmsidis
	}
	return Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis_DISABLE
}

type Ifm_Interfaces_Interface_BgpLocalifnetTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalifnetEnable Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable `protobuf:"varint,1,opt,name=localifnet_enable,json=localifnet-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable" json:"localifnet_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_BgpLocalifnetTraffic) Reset() {
	*x = Ifm_Interfaces_Interface_BgpLocalifnetTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_BgpLocalifnetTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_BgpLocalifnetTraffic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_BgpLocalifnetTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_BgpLocalifnetTraffic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_BgpLocalifnetTraffic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 73}
}

func (x *Ifm_Interfaces_Interface_BgpLocalifnetTraffic) GetLocalifnetEnable() Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable {
	if x != nil {
		return x.LocalifnetEnable
	}
	return Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable_DISABLE
}

type Ifm_Interfaces_Interface_MulticastForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shaping *Ifm_Interfaces_Interface_MulticastForward_Shaping `protobuf:"bytes,1,opt,name=shaping,proto3" json:"shaping,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MulticastForward) Reset() {
	*x = Ifm_Interfaces_Interface_MulticastForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MulticastForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MulticastForward) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MulticastForward) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MulticastForward.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MulticastForward) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 74}
}

func (x *Ifm_Interfaces_Interface_MulticastForward) GetShaping() *Ifm_Interfaces_Interface_MulticastForward_Shaping {
	if x != nil {
		return x.Shaping
	}
	return nil
}

type Ifm_Interfaces_Interface_Netstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerEnables *Ifm_Interfaces_Interface_Netstream_SamplerEnables `protobuf:"bytes,1,opt,name=sampler_enables,json=sampler-enables,proto3" json:"sampler_enables,omitempty"`
	SamplerRates   *Ifm_Interfaces_Interface_Netstream_SamplerRates   `protobuf:"bytes,2,opt,name=sampler_rates,json=sampler-rates,proto3" json:"sampler_rates,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Netstream) Reset() {
	*x = Ifm_Interfaces_Interface_Netstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Netstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Netstream) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Netstream) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Netstream) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75}
}

func (x *Ifm_Interfaces_Interface_Netstream) GetSamplerEnables() *Ifm_Interfaces_Interface_Netstream_SamplerEnables {
	if x != nil {
		return x.SamplerEnables
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Netstream) GetSamplerRates() *Ifm_Interfaces_Interface_Netstream_SamplerRates {
	if x != nil {
		return x.SamplerRates
	}
	return nil
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nvo3VtepStatistic []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic `protobuf:"bytes,1,rep,name=nvo3_vtep_statistic,json=nvo3-vtep-statistic,proto3" json:"nvo3_vtep_statistic,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 76}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) GetNvo3VtepStatistic() []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic {
	if x != nil {
		return x.Nvo3VtepStatistic
	}
	return nil
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfIcmpSecurity []*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity `protobuf:"bytes,1,rep,name=if_icmp_security,json=if-icmp-security,proto3" json:"if_icmp_security,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) Reset() {
	*x = Ifm_Interfaces_Interface_IfIcmpSecuritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIcmpSecuritys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIcmpSecuritys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 77}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) GetIfIcmpSecurity() []*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity {
	if x != nil {
		return x.IfIcmpSecurity
	}
	return nil
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfIpOptSecurity []*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity `protobuf:"bytes,1,rep,name=if_ip_opt_security,json=if-ip-opt-security,proto3" json:"if_ip_opt_security,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) Reset() {
	*x = Ifm_Interfaces_Interface_IfIpOptSecuritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIpOptSecuritys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIpOptSecuritys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 78}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) GetIfIpOptSecurity() []*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity {
	if x != nil {
		return x.IfIpOptSecurity
	}
	return nil
}

type Ifm_Interfaces_Interface_IpVerifySrcAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_IpVerifySrcAddr) Reset() {
	*x = Ifm_Interfaces_Interface_IpVerifySrcAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IpVerifySrcAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IpVerifySrcAddr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IpVerifySrcAddr) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IpVerifySrcAddr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IpVerifySrcAddr) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 79}
}

type Ifm_Interfaces_Interface_IpFwdBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclNameOrNum string `protobuf:"bytes,1,opt,name=acl_name_or_num,json=acl-name-or-num,proto3" json:"acl_name_or_num,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) Reset() {
	*x = Ifm_Interfaces_Interface_IpFwdBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IpFwdBroadcast) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IpFwdBroadcast.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IpFwdBroadcast) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 80}
}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) GetAclNameOrNum() string {
	if x != nil {
		return x.AclNameOrNum
	}
	return ""
}

type Ifm_Interfaces_Interface_Rbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindRbp *Ifm_Interfaces_Interface_Rbs_BindRbp `protobuf:"bytes,1,opt,name=bind_rbp,json=bind-rbp,proto3" json:"bind_rbp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Rbs) Reset() {
	*x = Ifm_Interfaces_Interface_Rbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Rbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Rbs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Rbs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Rbs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Rbs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 81}
}

func (x *Ifm_Interfaces_Interface_Rbs) GetBindRbp() *Ifm_Interfaces_Interface_Rbs_BindRbp {
	if x != nil {
		return x.BindRbp
	}
	return nil
}

type Ifm_Interfaces_Interface_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupGroups *Ifm_Interfaces_Interface_Vrrp_BackupGroups `protobuf:"bytes,1,opt,name=backup_groups,json=backup-groups,proto3" json:"backup_groups,omitempty"`
	TrackAdmins  *Ifm_Interfaces_Interface_Vrrp_TrackAdmins  `protobuf:"bytes,2,opt,name=track_admins,json=track-admins,proto3" json:"track_admins,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 82}
}

func (x *Ifm_Interfaces_Interface_Vrrp) GetBackupGroups() *Ifm_Interfaces_Interface_Vrrp_BackupGroups {
	if x != nil {
		return x.BackupGroups
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Vrrp) GetTrackAdmins() *Ifm_Interfaces_Interface_Vrrp_TrackAdmins {
	if x != nil {
		return x.TrackAdmins
	}
	return nil
}

type Ifm_Interfaces_Interface_UnicastForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoisonReverse            *Ifm_Interfaces_Interface_UnicastForward_PoisonReverse            `protobuf:"bytes,1,opt,name=poison_reverse,json=poison-reverse,proto3" json:"poison_reverse,omitempty"`
	Ipv6Redirect             *Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect             `protobuf:"bytes,2,opt,name=ipv6_redirect,json=ipv6-redirect,proto3" json:"ipv6_redirect,omitempty"`
	Ipv6NaAntiAttack         *Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack         `protobuf:"bytes,3,opt,name=ipv6_na_anti_attack,json=ipv6-na-anti-attack,proto3" json:"ipv6_na_anti_attack,omitempty"`
	IpPrioritySelect         *Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect         `protobuf:"bytes,4,opt,name=ip_priority_select,json=ip-priority-select,proto3" json:"ip_priority_select,omitempty"`
	MacChangeNotifyArp       *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp       `protobuf:"bytes,5,opt,name=mac_change_notify_arp,json=mac-change-notify-arp,proto3" json:"mac_change_notify_arp,omitempty"`
	MacChangeNotifyNdDisable *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable `protobuf:"bytes,6,opt,name=mac_change_notify_nd_disable,json=mac-change-notify-nd-disable,proto3" json:"mac_change_notify_nd_disable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_UnicastForward) Reset() {
	*x = Ifm_Interfaces_Interface_UnicastForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnicastForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnicastForward) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnicastForward) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnicastForward.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnicastForward) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 83}
}

func (x *Ifm_Interfaces_Interface_UnicastForward) GetPoisonReverse() *Ifm_Interfaces_Interface_UnicastForward_PoisonReverse {
	if x != nil {
		return x.PoisonReverse
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_UnicastForward) GetIpv6Redirect() *Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect {
	if x != nil {
		return x.Ipv6Redirect
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_UnicastForward) GetIpv6NaAntiAttack() *Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack {
	if x != nil {
		return x.Ipv6NaAntiAttack
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_UnicastForward) GetIpPrioritySelect() *Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect {
	if x != nil {
		return x.IpPrioritySelect
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_UnicastForward) GetMacChangeNotifyArp() *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp {
	if x != nil {
		return x.MacChangeNotifyArp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_UnicastForward) GetMacChangeNotifyNdDisable() *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable {
	if x != nil {
		return x.MacChangeNotifyNdDisable
	}
	return nil
}

type Ifm_Interfaces_Interface_UnknowUnicastThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_UnknowUnicastThreshold) Reset() {
	*x = Ifm_Interfaces_Interface_UnknowUnicastThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnknowUnicastThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnknowUnicastThreshold) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnknowUnicastThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnknowUnicastThreshold.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnknowUnicastThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 84}
}

func (x *Ifm_Interfaces_Interface_UnknowUnicastThreshold) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxPause       uint64 `protobuf:"varint,1,opt,name=rx_pause,json=rx-pause,proto3" json:"rx_pause,omitempty"`
	RxJumboOctets uint64 `protobuf:"varint,2,opt,name=rx_jumbo_octets,json=rx-jumbo-octets,proto3" json:"rx_jumbo_octets,omitempty"`
	RxCrc         uint64 `protobuf:"varint,3,opt,name=rx_crc,json=rx-crc,proto3" json:"rx_crc,omitempty"`
	RxSymbol      uint64 `protobuf:"varint,4,opt,name=rx_symbol,json=rx-symbol,proto3" json:"rx_symbol,omitempty"`
	RxOverRun     uint64 `protobuf:"varint,5,opt,name=rx_over_run,json=rx-over-run,proto3" json:"rx_over_run,omitempty"`
	RxInrangeLen  uint64 `protobuf:"varint,6,opt,name=rx_inrange_len,json=rx-inrange-len,proto3" json:"rx_inrange_len,omitempty"`
	RxLong        uint64 `protobuf:"varint,7,opt,name=rx_long,json=rx-long,proto3" json:"rx_long,omitempty"`
	RxJabber      uint64 `protobuf:"varint,8,opt,name=rx_jabber,json=rx-jabber,proto3" json:"rx_jabber,omitempty"`
	RxAlignment   uint64 `protobuf:"varint,9,opt,name=rx_alignment,json=rx-alignment,proto3" json:"rx_alignment,omitempty"`
	RxFragment    uint64 `protobuf:"varint,10,opt,name=rx_fragment,json=rx-fragment,proto3" json:"rx_fragment,omitempty"`
	RxUndersize   uint64 `protobuf:"varint,11,opt,name=rx_undersize,json=rx-undersize,proto3" json:"rx_undersize,omitempty"`
	TxPause       uint64 `protobuf:"varint,12,opt,name=tx_pause,json=tx-pause,proto3" json:"tx_pause,omitempty"`
	TxJumboOctets uint64 `protobuf:"varint,13,opt,name=tx_jumbo_octets,json=tx-jumbo-octets,proto3" json:"tx_jumbo_octets,omitempty"`
	TxOverRun     uint64 `protobuf:"varint,14,opt,name=tx_over_run,json=tx-over-run,proto3" json:"tx_over_run,omitempty"`
	TxUnderRun    uint64 `protobuf:"varint,15,opt,name=tx_under_run,json=tx-under-run,proto3" json:"tx_under_run,omitempty"`
	TxSystem      uint64 `protobuf:"varint,16,opt,name=tx_system,json=tx-system,proto3" json:"tx_system,omitempty"`
	TxLost        uint64 `protobuf:"varint,17,opt,name=tx_lost,json=tx-lost,proto3" json:"tx_lost,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) Reset() {
	*x = Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxPause() uint64 {
	if x != nil {
		return x.RxPause
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxJumboOctets() uint64 {
	if x != nil {
		return x.RxJumboOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxCrc() uint64 {
	if x != nil {
		return x.RxCrc
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxSymbol() uint64 {
	if x != nil {
		return x.RxSymbol
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxOverRun() uint64 {
	if x != nil {
		return x.RxOverRun
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxInrangeLen() uint64 {
	if x != nil {
		return x.RxInrangeLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxLong() uint64 {
	if x != nil {
		return x.RxLong
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxJabber() uint64 {
	if x != nil {
		return x.RxJabber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxAlignment() uint64 {
	if x != nil {
		return x.RxAlignment
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxFragment() uint64 {
	if x != nil {
		return x.RxFragment
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetRxUndersize() uint64 {
	if x != nil {
		return x.RxUndersize
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetTxPause() uint64 {
	if x != nil {
		return x.TxPause
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetTxJumboOctets() uint64 {
	if x != nil {
		return x.TxJumboOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetTxOverRun() uint64 {
	if x != nil {
		return x.TxOverRun
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetTxUnderRun() uint64 {
	if x != nil {
		return x.TxUnderRun
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetTxSystem() uint64 {
	if x != nil {
		return x.TxSystem
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts) GetTxLost() uint64 {
	if x != nil {
		return x.TxLost
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses  *Ifm_Interfaces_Interface_Ipv4_State_Addresses  `protobuf:"bytes,1,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Gateways   *Ifm_Interfaces_Interface_Ipv4_State_Gateways   `protobuf:"bytes,2,opt,name=gateways,proto3" json:"gateways,omitempty"`
	Statistics *Ifm_Interfaces_Interface_Ipv4_State_Statistics `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) GetAddresses() *Ifm_Interfaces_Interface_Ipv4_State_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) GetGateways() *Ifm_Interfaces_Interface_Ipv4_State_Gateways {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) GetStatistics() *Ifm_Interfaces_Interface_Ipv4_State_Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_StaticArps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticArp []*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp `protobuf:"bytes,1,rep,name=static_arp,json=static-arp,proto3" json:"static_arp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_StaticArps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_StaticArps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_StaticArps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_StaticArps) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) GetStaticArp() []*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp {
	if x != nil {
		return x.StaticArp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups `protobuf:"bytes,1,opt,name=groups,proto3" json:"groups,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) GetGroups() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Rgm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ipv4_Rgm) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Rgm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Rgm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Rgm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Rgm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Rgm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Rgm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 3}
}

type Ifm_Interfaces_Interface_Ipv4_State_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Addresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) GetAddress() []*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_State_Gateways struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway []*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway `protobuf:"bytes,1,rep,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Gateways{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Gateways.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) GetGateway() []*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_State_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InReceives                uint64 `protobuf:"varint,1,opt,name=in_receives,json=in-receives,proto3" json:"in_receives,omitempty"`
	InOctets                  uint64 `protobuf:"varint,2,opt,name=in_octets,json=in-octets,proto3" json:"in_octets,omitempty"`
	InRatePkts                uint64 `protobuf:"varint,3,opt,name=in_rate_pkts,json=in-rate-pkts,proto3" json:"in_rate_pkts,omitempty"`
	InRateBits                uint64 `protobuf:"varint,4,opt,name=in_rate_bits,json=in-rate-bits,proto3" json:"in_rate_bits,omitempty"`
	InRateByteBandwidthUsage  string `protobuf:"bytes,5,opt,name=in_rate_byte_bandwidth_usage,json=in-rate-byte-bandwidth-usage,proto3" json:"in_rate_byte_bandwidth_usage,omitempty"`
	InUcastPkts               uint64 `protobuf:"varint,6,opt,name=in_ucast_pkts,json=in-ucast-pkts,proto3" json:"in_ucast_pkts,omitempty"`
	InUcastOctets             uint64 `protobuf:"varint,7,opt,name=in_ucast_octets,json=in-ucast-octets,proto3" json:"in_ucast_octets,omitempty"`
	InMcastPkts               uint64 `protobuf:"varint,8,opt,name=in_mcast_pkts,json=in-mcast-pkts,proto3" json:"in_mcast_pkts,omitempty"`
	InMcastOctets             uint64 `protobuf:"varint,9,opt,name=in_mcast_octets,json=in-mcast-octets,proto3" json:"in_mcast_octets,omitempty"`
	InBcastPkts               uint64 `protobuf:"varint,10,opt,name=in_bcast_pkts,json=in-bcast-pkts,proto3" json:"in_bcast_pkts,omitempty"`
	InBcastOctets             uint64 `protobuf:"varint,11,opt,name=in_bcast_octets,json=in-bcast-octets,proto3" json:"in_bcast_octets,omitempty"`
	OutUcastPkts              uint64 `protobuf:"varint,12,opt,name=out_ucast_pkts,json=out-ucast-pkts,proto3" json:"out_ucast_pkts,omitempty"`
	OutUcastOctets            uint64 `protobuf:"varint,13,opt,name=out_ucast_octets,json=out-ucast-octets,proto3" json:"out_ucast_octets,omitempty"`
	OutMcastPkts              uint64 `protobuf:"varint,14,opt,name=out_mcast_pkts,json=out-mcast-pkts,proto3" json:"out_mcast_pkts,omitempty"`
	OutMcastOctets            uint64 `protobuf:"varint,15,opt,name=out_mcast_octets,json=out-mcast-octets,proto3" json:"out_mcast_octets,omitempty"`
	OutBcastPkts              uint64 `protobuf:"varint,16,opt,name=out_bcast_pkts,json=out-bcast-pkts,proto3" json:"out_bcast_pkts,omitempty"`
	OutBcastOctets            uint64 `protobuf:"varint,17,opt,name=out_bcast_octets,json=out-bcast-octets,proto3" json:"out_bcast_octets,omitempty"`
	OutRatePkts               uint64 `protobuf:"varint,18,opt,name=out_rate_pkts,json=out-rate-pkts,proto3" json:"out_rate_pkts,omitempty"`
	OutRateBits               uint64 `protobuf:"varint,19,opt,name=out_rate_bits,json=out-rate-bits,proto3" json:"out_rate_bits,omitempty"`
	OutRateByteBandwidthUsage string `protobuf:"bytes,20,opt,name=out_rate_byte_bandwidth_usage,json=out-rate-byte-bandwidth-usage,proto3" json:"out_rate_byte_bandwidth_usage,omitempty"`
	OutTransmits              uint64 `protobuf:"varint,21,opt,name=out_transmits,json=out-transmits,proto3" json:"out_transmits,omitempty"`
	OutOctets                 uint64 `protobuf:"varint,22,opt,name=out_octets,json=out-octets,proto3" json:"out_octets,omitempty"`
	OutFragRequires           uint64 `protobuf:"varint,23,opt,name=out_frag_requires,json=out-frag-requires,proto3" json:"out_frag_requires,omitempty"`
	OutFragFails              uint32 `protobuf:"varint,24,opt,name=out_frag_fails,json=out-frag-fails,proto3" json:"out_frag_fails,omitempty"`
	OutFragOks                uint64 `protobuf:"varint,25,opt,name=out_frag_oks,json=out-frag-oks,proto3" json:"out_frag_oks,omitempty"`
	OutFragCreates            uint64 `protobuf:"varint,26,opt,name=out_frag_creates,json=out-frag-creates,proto3" json:"out_frag_creates,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Statistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Statistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Statistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInReceives() uint64 {
	if x != nil {
		return x.InReceives
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInOctets() uint64 {
	if x != nil {
		return x.InOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInRatePkts() uint64 {
	if x != nil {
		return x.InRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInRateBits() uint64 {
	if x != nil {
		return x.InRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInRateByteBandwidthUsage() string {
	if x != nil {
		return x.InRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInUcastPkts() uint64 {
	if x != nil {
		return x.InUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInUcastOctets() uint64 {
	if x != nil {
		return x.InUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInMcastPkts() uint64 {
	if x != nil {
		return x.InMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInMcastOctets() uint64 {
	if x != nil {
		return x.InMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInBcastPkts() uint64 {
	if x != nil {
		return x.InBcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInBcastOctets() uint64 {
	if x != nil {
		return x.InBcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutUcastPkts() uint64 {
	if x != nil {
		return x.OutUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutUcastOctets() uint64 {
	if x != nil {
		return x.OutUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutMcastPkts() uint64 {
	if x != nil {
		return x.OutMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutMcastOctets() uint64 {
	if x != nil {
		return x.OutMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutBcastPkts() uint64 {
	if x != nil {
		return x.OutBcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutBcastOctets() uint64 {
	if x != nil {
		return x.OutBcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutRatePkts() uint64 {
	if x != nil {
		return x.OutRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutRateBits() uint64 {
	if x != nil {
		return x.OutRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutRateByteBandwidthUsage() string {
	if x != nil {
		return x.OutRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutTransmits() uint64 {
	if x != nil {
		return x.OutTransmits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragRequires() uint64 {
	if x != nil {
		return x.OutFragRequires
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragFails() uint32 {
	if x != nil {
		return x.OutFragFails
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragOks() uint64 {
	if x != nil {
		return x.OutFragOks
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragCreates() uint64 {
	if x != nil {
		return x.OutFragCreates
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string                                                     `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask    string                                                     `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Type    Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type `protobuf:"varint,3,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type" json:"type,omitempty"`
	IsBlock bool                                                       `protobuf:"varint,4,opt,name=is_block,json=is-block,proto3" json:"is_block,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetType() Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway string `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddr  string `protobuf:"bytes,1,opt,name=ip_addr,json=ip-addr,proto3" json:"ip_addr,omitempty"`
	MacAddr string `protobuf:"bytes,2,opt,name=mac_addr,json=mac-addr,proto3" json:"mac_addr,omitempty"`
	Pevid   uint32 `protobuf:"varint,3,opt,name=pevid,proto3" json:"pevid,omitempty"`
	Cevid   uint32 `protobuf:"varint,4,opt,name=cevid,proto3" json:"cevid,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetPevid() uint32 {
	if x != nil {
		return x.Pevid
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetCevid() uint32 {
	if x != nil {
		return x.Cevid
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group `protobuf:"bytes,1,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) GetGroup() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32                                                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Priority           uint32                                                             `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Preempt            *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt           `protobuf:"bytes,3,opt,name=preempt,proto3" json:"preempt,omitempty"`
	AdverInterval      uint32                                                             `protobuf:"varint,4,opt,name=adver_interval,json=adver-interval,proto3" json:"adver_interval,omitempty"`
	AuthenticationMode Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode `protobuf:"varint,5,opt,name=authentication_mode,json=authentication-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode" json:"authentication_mode,omitempty"`
	Isplain            bool                                                               `protobuf:"varint,6,opt,name=isplain,proto3" json:"isplain,omitempty"`
	AuthenticationKey  string                                                             `protobuf:"bytes,7,opt,name=authentication_key,json=authentication-key,proto3" json:"authentication_key,omitempty"`
	LinkBfddownNum     uint32                                                             `protobuf:"varint,8,opt,name=link_bfddown_num,json=link-bfddown-num,proto3" json:"link_bfddown_num,omitempty"`
	HoldMultiper       uint32                                                             `protobuf:"varint,9,opt,name=hold_multiper,json=hold-multiper,proto3" json:"hold_multiper,omitempty"`
	BackupForward      bool                                                               `protobuf:"varint,10,opt,name=backup_forward,json=backup-forward,proto3" json:"backup_forward,omitempty"`
	FastResume         bool                                                               `protobuf:"varint,11,opt,name=fast_resume,json=fast-resume,proto3" json:"fast_resume,omitempty"`
	V3Sendmode         Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode         `protobuf:"varint,12,opt,name=v3_sendmode,json=v3-sendmode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode" json:"v3_sendmode,omitempty"`
	Type               Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type               `protobuf:"varint,13,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type" json:"type,omitempty"`
	State              Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State              `protobuf:"varint,14,opt,name=state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State" json:"state,omitempty"`
	CreateTime         string                                                             `protobuf:"bytes,15,opt,name=create_time,json=create-time,proto3" json:"create_time,omitempty"`
	LastChangeTime     string                                                             `protobuf:"bytes,16,opt,name=last_change_time,json=last-change-time,proto3" json:"last_change_time,omitempty"`
	VirtualIps         *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps        `protobuf:"bytes,17,opt,name=virtual_ips,json=virtual-ips,proto3" json:"virtual_ips,omitempty"`
	TrackInterfaces    *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces   `protobuf:"bytes,18,opt,name=track_interfaces,json=track-interfaces,proto3" json:"track_interfaces,omitempty"`
	TrackBfds          *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds         `protobuf:"bytes,19,opt,name=track_bfds,json=track-bfds,proto3" json:"track_bfds,omitempty"`
	TrackMtgrps        *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps       `protobuf:"bytes,20,opt,name=track_mtgrps,json=track-mtgrps,proto3" json:"track_mtgrps,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetPreempt() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetAdverInterval() uint32 {
	if x != nil {
		return x.AdverInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetAuthenticationMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode {
	if x != nil {
		return x.AuthenticationMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_NONE
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetIsplain() bool {
	if x != nil {
		return x.Isplain
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetAuthenticationKey() string {
	if x != nil {
		return x.AuthenticationKey
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetLinkBfddownNum() uint32 {
	if x != nil {
		return x.LinkBfddownNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetHoldMultiper() uint32 {
	if x != nil {
		return x.HoldMultiper
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetBackupForward() bool {
	if x != nil {
		return x.BackupForward
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetFastResume() bool {
	if x != nil {
		return x.FastResume
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetV3Sendmode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode {
	if x != nil {
		return x.V3Sendmode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V3X_ONLY
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetType() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_NORMAL
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetState() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State {
	if x != nil {
		return x.State
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_INITIALIZE
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetLastChangeTime() string {
	if x != nil {
		return x.LastChangeTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetVirtualIps() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps {
	if x != nil {
		return x.VirtualIps
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetTrackInterfaces() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces {
	if x != nil {
		return x.TrackInterfaces
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetTrackBfds() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds {
	if x != nil {
		return x.TrackBfds
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetTrackMtgrps() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps {
	if x != nil {
		return x.TrackMtgrps
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreemptEnable bool   `protobuf:"varint,1,opt,name=preempt_enable,json=preempt-enable,proto3" json:"preempt_enable,omitempty"`
	DelayTime     uint32 `protobuf:"varint,2,opt,name=delay_time,json=delay-time,proto3" json:"delay_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) GetPreemptEnable() bool {
	if x != nil {
		return x.PreemptEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) GetDelayTime() uint32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualIp []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp `protobuf:"bytes,1,rep,name=virtual_ip,json=virtual-ip,proto3" json:"virtual_ip,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) GetVirtualIp() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp {
	if x != nil {
		return x.VirtualIp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackInterface []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface `protobuf:"bytes,1,rep,name=track_interface,json=track-interface,proto3" json:"track_interface,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) GetTrackInterface() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackBfd []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd `protobuf:"bytes,1,rep,name=track_bfd,json=track-bfd,proto3" json:"track_bfd,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) GetTrackBfd() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd {
	if x != nil {
		return x.TrackBfd
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackMtgrp []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp `protobuf:"bytes,1,rep,name=track_mtgrp,json=track-mtgrp,proto3" json:"track_mtgrp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 4}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) GetTrackMtgrp() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp {
	if x != nil {
		return x.TrackMtgrp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName         string                                                                                   `protobuf:"bytes,1,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
	PriorityChange uint32                                                                                   `protobuf:"varint,2,opt,name=priority_change,json=priority-change,proto3" json:"priority_change,omitempty"`
	TrackMode      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode `protobuf:"varint,3,opt,name=track_mode,json=track-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode" json:"track_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) GetPriorityChange() uint32 {
	if x != nil {
		return x.PriorityChange
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) GetTrackMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode {
	if x != nil {
		return x.TrackMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_INCREASE
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionName    string                                                                          `protobuf:"bytes,1,opt,name=session_name,json=session-name,proto3" json:"session_name,omitempty"`
	SessionType    Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType  `protobuf:"varint,2,opt,name=session_type,json=session-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType" json:"session_type,omitempty"`
	PriorityChange uint32                                                                          `protobuf:"varint,3,opt,name=priority_change,json=priority-change,proto3" json:"priority_change,omitempty"`
	TrackMode      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode    `protobuf:"varint,4,opt,name=track_mode,json=track-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode" json:"track_mode,omitempty"`
	SessionId      uint32                                                                          `protobuf:"varint,5,opt,name=session_id,json=session-id,proto3" json:"session_id,omitempty"`
	SessionState   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState `protobuf:"varint,6,opt,name=session_state,json=session-state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState" json:"session_state,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionType() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType {
	if x != nil {
		return x.SessionType
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_NORMAL
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetPriorityChange() uint32 {
	if x != nil {
		return x.PriorityChange
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetTrackMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode {
	if x != nil {
		return x.TrackMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_INCREASE
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionState() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState {
	if x != nil {
		return x.SessionState
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_DOWN
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorGroupName string                                                                           `protobuf:"bytes,1,opt,name=monitor_group_name,json=monitor-group-name,proto3" json:"monitor_group_name,omitempty"`
	FailureRatio     uint32                                                                           `protobuf:"varint,2,opt,name=failure_ratio,json=failure-ratio,proto3" json:"failure_ratio,omitempty"`
	PriorityChange   uint32                                                                           `protobuf:"varint,3,opt,name=priority_change,json=priority-change,proto3" json:"priority_change,omitempty"`
	TrackMode        Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode `protobuf:"varint,4,opt,name=track_mode,json=track-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode" json:"track_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 2, 0, 0, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetMonitorGroupName() string {
	if x != nil {
		return x.MonitorGroupName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetFailureRatio() uint32 {
	if x != nil {
		return x.FailureRatio
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetPriorityChange() uint32 {
	if x != nil {
		return x.PriorityChange
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetTrackMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode {
	if x != nil {
		return x.TrackMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_LINK
}

type Ifm_Interfaces_Interface_Ipv6_NdPrefixs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NdPrefix []*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix `protobuf:"bytes,1,rep,name=nd_prefix,json=nd-prefix,proto3" json:"nd_prefix,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdPrefixs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdPrefixs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) GetNdPrefix() []*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix {
	if x != nil {
		return x.NdPrefix
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu6       uint32                                          `protobuf:"varint,1,opt,name=mtu6,proto3" json:"mtu6,omitempty"`
	Addresses  *Ifm_Interfaces_Interface_Ipv6_State_Addresses  `protobuf:"bytes,2,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Statistics *Ifm_Interfaces_Interface_Ipv6_State_Statistics `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) GetMtu6() uint32 {
	if x != nil {
		return x.Mtu6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) GetAddresses() *Ifm_Interfaces_Interface_Ipv6_State_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) GetStatistics() *Ifm_Interfaces_Interface_Ipv6_State_Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_Cgas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cga []*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga `protobuf:"bytes,1,rep,name=cga,proto3" json:"cga,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Cgas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Cgas) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Cgas.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Cgas) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) GetCga() []*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga {
	if x != nil {
		return x.Cga
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfProperty *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty `protobuf:"bytes,1,opt,name=if_property,json=if-property,proto3" json:"if_property,omitempty"`
	Proxys     *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys     `protobuf:"bytes,2,opt,name=proxys,proto3" json:"proxys,omitempty"`
	AntiAttack *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack `protobuf:"bytes,3,opt,name=anti_attack,json=anti-attack,proto3" json:"anti_attack,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) GetIfProperty() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty {
	if x != nil {
		return x.IfProperty
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) GetProxys() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys {
	if x != nil {
		return x.Proxys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) GetAntiAttack() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack {
	if x != nil {
		return x.AntiAttack
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_Pp6Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermitIncompleteFragment bool `protobuf:"varint,1,opt,name=permit_incomplete_fragment,json=permit-incomplete-fragment,proto3" json:"permit_incomplete_fragment,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Pp6Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Pp6Collection) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Pp6Collection.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Pp6Collection) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 4}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) GetPermitIncompleteFragment() bool {
	if x != nil {
		return x.PermitIncompleteFragment
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HopByHopSwitch     *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch     `protobuf:"bytes,1,opt,name=hop_by_hop_switch,json=hop-by-hop-switch,proto3" json:"hop_by_hop_switch,omitempty"`
	RoutingSwitch      *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch      `protobuf:"bytes,2,opt,name=routing_switch,json=routing-switch,proto3" json:"routing_switch,omitempty"`
	DestinationSwitch  *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch  `protobuf:"bytes,3,opt,name=destination_switch,json=destination-switch,proto3" json:"destination_switch,omitempty"`
	NoOptionExhSwitchs *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs `protobuf:"bytes,4,opt,name=no_option_exh_switchs,json=no-option-exh-switchs,proto3" json:"no_option_exh_switchs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetHopByHopSwitch() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch {
	if x != nil {
		return x.HopByHopSwitch
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetRoutingSwitch() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch {
	if x != nil {
		return x.RoutingSwitch
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetDestinationSwitch() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch {
	if x != nil {
		return x.DestinationSwitch
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetNoOptionExhSwitchs() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs {
	if x != nil {
		return x.NoOptionExhSwitchs
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix            string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen         int32  `protobuf:"varint,2,opt,name=prefix_len,json=prefix-len,proto3" json:"prefix_len,omitempty"`
	ValidLifetime     uint32 `protobuf:"varint,3,opt,name=valid_lifetime,json=valid-lifetime,proto3" json:"valid_lifetime,omitempty"`
	PreferredLifetime uint32 `protobuf:"varint,4,opt,name=preferred_lifetime,json=preferred-lifetime,proto3" json:"preferred_lifetime,omitempty"`
	AutoFlag          bool   `protobuf:"varint,5,opt,name=auto_flag,json=auto-flag,proto3" json:"auto_flag,omitempty"`
	OnLinkFlag        bool   `protobuf:"varint,6,opt,name=on_link_flag,json=on-link-flag,proto3" json:"on_link_flag,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetPrefixLen() int32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetAutoFlag() bool {
	if x != nil {
		return x.AutoFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetOnLinkFlag() bool {
	if x != nil {
		return x.OnLinkFlag
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) GetAddress() []*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_State_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InReceives                uint64 `protobuf:"varint,1,opt,name=in_receives,json=in-receives,proto3" json:"in_receives,omitempty"`
	InOctets                  uint64 `protobuf:"varint,2,opt,name=in_octets,json=in-octets,proto3" json:"in_octets,omitempty"`
	InRatePkts                uint64 `protobuf:"varint,3,opt,name=in_rate_pkts,json=in-rate-pkts,proto3" json:"in_rate_pkts,omitempty"`
	InRateBits                uint64 `protobuf:"varint,4,opt,name=in_rate_bits,json=in-rate-bits,proto3" json:"in_rate_bits,omitempty"`
	InRateByteBandwidthUsage  string `protobuf:"bytes,5,opt,name=in_rate_byte_bandwidth_usage,json=in-rate-byte-bandwidth-usage,proto3" json:"in_rate_byte_bandwidth_usage,omitempty"`
	InUcastPkts               uint64 `protobuf:"varint,6,opt,name=in_ucast_pkts,json=in-ucast-pkts,proto3" json:"in_ucast_pkts,omitempty"`
	InUcastOctets             uint64 `protobuf:"varint,7,opt,name=in_ucast_octets,json=in-ucast-octets,proto3" json:"in_ucast_octets,omitempty"`
	InMcastPkts               uint64 `protobuf:"varint,8,opt,name=in_mcast_pkts,json=in-mcast-pkts,proto3" json:"in_mcast_pkts,omitempty"`
	InMcastOctets             uint64 `protobuf:"varint,9,opt,name=in_mcast_octets,json=in-mcast-octets,proto3" json:"in_mcast_octets,omitempty"`
	OutUcastPkts              uint64 `protobuf:"varint,10,opt,name=out_ucast_pkts,json=out-ucast-pkts,proto3" json:"out_ucast_pkts,omitempty"`
	OutUcastOctets            uint64 `protobuf:"varint,11,opt,name=out_ucast_octets,json=out-ucast-octets,proto3" json:"out_ucast_octets,omitempty"`
	OutMcastPkts              uint64 `protobuf:"varint,12,opt,name=out_mcast_pkts,json=out-mcast-pkts,proto3" json:"out_mcast_pkts,omitempty"`
	OutMcastOctets            uint64 `protobuf:"varint,13,opt,name=out_mcast_octets,json=out-mcast-octets,proto3" json:"out_mcast_octets,omitempty"`
	OutRatePkts               uint64 `protobuf:"varint,14,opt,name=out_rate_pkts,json=out-rate-pkts,proto3" json:"out_rate_pkts,omitempty"`
	OutRateBits               uint64 `protobuf:"varint,15,opt,name=out_rate_bits,json=out-rate-bits,proto3" json:"out_rate_bits,omitempty"`
	OutRateByteBandwidthUsage string `protobuf:"bytes,16,opt,name=out_rate_byte_bandwidth_usage,json=out-rate-byte-bandwidth-usage,proto3" json:"out_rate_byte_bandwidth_usage,omitempty"`
	OutTransmits              uint64 `protobuf:"varint,17,opt,name=out_transmits,json=out-transmits,proto3" json:"out_transmits,omitempty"`
	OutOctets                 uint64 `protobuf:"varint,18,opt,name=out_octets,json=out-octets,proto3" json:"out_octets,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State_Statistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Statistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State_Statistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInReceives() uint64 {
	if x != nil {
		return x.InReceives
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInOctets() uint64 {
	if x != nil {
		return x.InOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInRatePkts() uint64 {
	if x != nil {
		return x.InRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInRateBits() uint64 {
	if x != nil {
		return x.InRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInRateByteBandwidthUsage() string {
	if x != nil {
		return x.InRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInUcastPkts() uint64 {
	if x != nil {
		return x.InUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInUcastOctets() uint64 {
	if x != nil {
		return x.InUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInMcastPkts() uint64 {
	if x != nil {
		return x.InMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInMcastOctets() uint64 {
	if x != nil {
		return x.InMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutUcastPkts() uint64 {
	if x != nil {
		return x.OutUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutUcastOctets() uint64 {
	if x != nil {
		return x.OutUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutMcastPkts() uint64 {
	if x != nil {
		return x.OutMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutMcastOctets() uint64 {
	if x != nil {
		return x.OutMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutRatePkts() uint64 {
	if x != nil {
		return x.OutRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutRateBits() uint64 {
	if x != nil {
		return x.OutRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutRateByteBandwidthUsage() string {
	if x != nil {
		return x.OutRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutTransmits() uint64 {
	if x != nil {
		return x.OutTransmits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip             string                                                              `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLength   uint32                                                              `protobuf:"varint,2,opt,name=prefix_length,json=prefix-length,proto3" json:"prefix_length,omitempty"`
	Type           Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type          `protobuf:"varint,3,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type" json:"type,omitempty"`
	AlgorithmType  Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType `protobuf:"varint,4,opt,name=algorithm_type,json=algorithm-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType" json:"algorithm_type,omitempty"`
	CollisionCount uint32                                                              `protobuf:"varint,5,opt,name=collision_count,json=collision-count,proto3" json:"collision_count,omitempty"`
	IsBlock        bool                                                                `protobuf:"varint,6,opt,name=is_block,json=is-block,proto3" json:"is_block,omitempty"`
	Status         Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status        `protobuf:"varint,7,opt,name=status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status" json:"status,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetType() Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetAlgorithmType() Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType {
	if x != nil {
		return x.AlgorithmType
	}
	return Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_NONE
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetCollisionCount() uint32 {
	if x != nil {
		return x.CollisionCount
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetStatus() Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status {
	if x != nil {
		return x.Status
	}
	return Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Status
}

type Ifm_Interfaces_Interface_Ipv6_Cgas_Cga struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsakeyPair string `protobuf:"bytes,1,opt,name=rsakey_pair,json=rsakey-pair,proto3" json:"rsakey_pair,omitempty"`
	SecLevel   uint32 `protobuf:"varint,2,opt,name=sec_level,json=sec-level,proto3" json:"sec_level,omitempty"`
	Modifier   string `protobuf:"bytes,3,opt,name=modifier,proto3" json:"modifier,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Cgas_Cga{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Cgas_Cga.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) GetRsakeyPair() string {
	if x != nil {
		return x.RsakeyPair
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) GetSecLevel() uint32 {
	if x != nil {
		return x.SecLevel
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) GetModifier() string {
	if x != nil {
		return x.Modifier
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetransTimer     uint32                                                                 `protobuf:"varint,1,opt,name=retrans_timer,json=retrans-timer,proto3" json:"retrans_timer,omitempty"`
	NudReachTime     uint32                                                                 `protobuf:"varint,2,opt,name=nud_reach_time,json=nud-reach-time,proto3" json:"nud_reach_time,omitempty"`
	AttemptsValue    uint32                                                                 `protobuf:"varint,3,opt,name=attempts_value,json=attempts-value,proto3" json:"attempts_value,omitempty"`
	NsMcastFlag      Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag      `protobuf:"varint,4,opt,name=ns_mcast_flag,json=ns-mcast-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag" json:"ns_mcast_flag,omitempty"`
	MaxDynNbNum      uint64                                                                 `protobuf:"varint,5,opt,name=max_dyn_nb_num,json=max-dyn-nb-num,proto3" json:"max_dyn_nb_num,omitempty"`
	DadTimeout       uint32                                                                 `protobuf:"varint,6,opt,name=dad_timeout,json=dad-timeout,proto3" json:"dad_timeout,omitempty"`
	NudAttempts      uint32                                                                 `protobuf:"varint,7,opt,name=nud_attempts,json=nud-attempts,proto3" json:"nud_attempts,omitempty"`
	NaGlean          Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean          `protobuf:"varint,8,opt,name=na_glean,json=na-glean,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean" json:"na_glean,omitempty"`
	MaFlag           Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag           `protobuf:"varint,9,opt,name=ma_flag,json=ma-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag" json:"ma_flag,omitempty"`
	OFlag            Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag            `protobuf:"varint,10,opt,name=o_flag,json=o-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag" json:"o_flag,omitempty"`
	RaHaltFlag       Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag       `protobuf:"varint,11,opt,name=ra_halt_flag,json=ra-halt-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag" json:"ra_halt_flag,omitempty"`
	MaxInterval      uint32                                                                 `protobuf:"varint,12,opt,name=max_interval,json=max-interval,proto3" json:"max_interval,omitempty"`
	RaLifetime       uint32                                                                 `protobuf:"varint,13,opt,name=ra_lifetime,json=ra-lifetime,proto3" json:"ra_lifetime,omitempty"`
	RaPreference     Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference     `protobuf:"varint,14,opt,name=ra_preference,json=ra-preference,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference" json:"ra_preference,omitempty"`
	RaPrefixFlag     Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag     `protobuf:"varint,15,opt,name=ra_prefix_flag,json=ra-prefix-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag" json:"ra_prefix_flag,omitempty"`
	RaMtuFlag        Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag        `protobuf:"varint,16,opt,name=ra_mtu_flag,json=ra-mtu-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag" json:"ra_mtu_flag,omitempty"`
	StrictFlag       bool                                                                   `protobuf:"varint,17,opt,name=strict_flag,json=strict-flag,proto3" json:"strict_flag,omitempty"`
	TsFuzzFactor     uint32                                                                 `protobuf:"varint,18,opt,name=ts_fuzz_factor,json=ts-fuzz-factor,proto3" json:"ts_fuzz_factor,omitempty"`
	TsClockDrift     uint32                                                                 `protobuf:"varint,19,opt,name=ts_clock_drift,json=ts-clock-drift,proto3" json:"ts_clock_drift,omitempty"`
	TsDelta          uint32                                                                 `protobuf:"varint,20,opt,name=ts_delta,json=ts-delta,proto3" json:"ts_delta,omitempty"`
	RsaMinKeyLen     uint32                                                                 `protobuf:"varint,21,opt,name=rsa_min_key_len,json=rsa-min-key-len,proto3" json:"rsa_min_key_len,omitempty"`
	RsaMaxKeyLen     uint32                                                                 `protobuf:"varint,22,opt,name=rsa_max_key_len,json=rsa-max-key-len,proto3" json:"rsa_max_key_len,omitempty"`
	StaleTime        uint32                                                                 `protobuf:"varint,23,opt,name=stale_time,json=stale-time,proto3" json:"stale_time,omitempty"`
	CollectHostFlag  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag  `protobuf:"varint,24,opt,name=collect_host_flag,json=collect-host-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag" json:"collect_host_flag,omitempty"`
	GenerateRdEnable Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable `protobuf:"varint,25,opt,name=generate_rd_enable,json=generate-rd-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable" json:"generate_rd_enable,omitempty"`
	NudInterval      uint32                                                                 `protobuf:"varint,26,opt,name=nud_interval,json=nud-interval,proto3" json:"nud_interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRetransTimer() uint32 {
	if x != nil {
		return x.RetransTimer
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNudReachTime() uint32 {
	if x != nil {
		return x.NudReachTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetAttemptsValue() uint32 {
	if x != nil {
		return x.AttemptsValue
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNsMcastFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag {
	if x != nil {
		return x.NsMcastFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetMaxDynNbNum() uint64 {
	if x != nil {
		return x.MaxDynNbNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetDadTimeout() uint32 {
	if x != nil {
		return x.DadTimeout
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNudAttempts() uint32 {
	if x != nil {
		return x.NudAttempts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNaGlean() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean {
	if x != nil {
		return x.NaGlean
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetMaFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag {
	if x != nil {
		return x.MaFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetOFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag {
	if x != nil {
		return x.OFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaHaltFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag {
	if x != nil {
		return x.RaHaltFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetMaxInterval() uint32 {
	if x != nil {
		return x.MaxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaLifetime() uint32 {
	if x != nil {
		return x.RaLifetime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaPreference() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference {
	if x != nil {
		return x.RaPreference
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_MEDIUM
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaPrefixFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag {
	if x != nil {
		return x.RaPrefixFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaMtuFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag {
	if x != nil {
		return x.RaMtuFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetStrictFlag() bool {
	if x != nil {
		return x.StrictFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetTsFuzzFactor() uint32 {
	if x != nil {
		return x.TsFuzzFactor
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetTsClockDrift() uint32 {
	if x != nil {
		return x.TsClockDrift
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetTsDelta() uint32 {
	if x != nil {
		return x.TsDelta
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRsaMinKeyLen() uint32 {
	if x != nil {
		return x.RsaMinKeyLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRsaMaxKeyLen() uint32 {
	if x != nil {
		return x.RsaMaxKeyLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetStaleTime() uint32 {
	if x != nil {
		return x.StaleTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetCollectHostFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag {
	if x != nil {
		return x.CollectHostFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetGenerateRdEnable() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable {
	if x != nil {
		return x.GenerateRdEnable
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNudInterval() uint32 {
	if x != nil {
		return x.NudInterval
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteProxy     Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy     `protobuf:"varint,1,opt,name=route_proxy,json=route-proxy,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy" json:"route_proxy,omitempty"`
	InnerVlanProxy Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy `protobuf:"varint,2,opt,name=inner_vlan_proxy,json=inner-vlan-proxy,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy" json:"inner_vlan_proxy,omitempty"`
	InterVlanProxy Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy `protobuf:"varint,3,opt,name=inter_vlan_proxy,json=inter-vlan-proxy,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy" json:"inter_vlan_proxy,omitempty"`
	AnywayProxy    Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy    `protobuf:"varint,4,opt,name=anyway_proxy,json=anyway-proxy,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy" json:"anyway_proxy,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetRouteProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy {
	if x != nil {
		return x.RouteProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetInnerVlanProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy {
	if x != nil {
		return x.InnerVlanProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetInterVlanProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy {
	if x != nil {
		return x.InterVlanProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetAnywayProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy {
	if x != nil {
		return x.AnywayProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_OFF
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveRateLimits *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits `protobuf:"bytes,1,opt,name=receive_rate_limits,json=receive-rate-limits,proto3" json:"receive_rate_limits,omitempty"`
	SourceIpReceive   *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive   `protobuf:"bytes,2,opt,name=source_ip_receive,json=source-ip-receive,proto3" json:"source_ip_receive,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) GetReceiveRateLimits() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits {
	if x != nil {
		return x.ReceiveRateLimits
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) GetSourceIpReceive() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive {
	if x != nil {
		return x.SourceIpReceive
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveRateLimit []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit `protobuf:"bytes,1,rep,name=receive_rate_limit,json=receive-rate-limit,proto3" json:"receive_rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) GetReceiveRateLimit() []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit {
	if x != nil {
		return x.ReceiveRateLimit
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRateLimits *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits `protobuf:"bytes,1,opt,name=ip_rate_limits,json=ip-rate-limits,proto3" json:"ip_rate_limits,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) GetIpRateLimits() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits {
	if x != nil {
		return x.IpRateLimits
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type" json:"type,omitempty"`
	Value uint32                                                                                        `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) GetType() Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_RS
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRateLimit []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit `protobuf:"bytes,1,rep,name=ip_rate_limit,json=ip-rate-limit,proto3" json:"ip_rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) GetIpRateLimit() []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit {
	if x != nil {
		return x.IpRateLimit
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketType Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType `protobuf:"varint,1,opt,name=packet_type,json=packet-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType" json:"packet_type,omitempty"`
	Ipv6Addr   string                                                                                                    `protobuf:"bytes,2,opt,name=ipv6_addr,json=ipv6-addr,proto3" json:"ipv6_addr,omitempty"`
	Value      uint32                                                                                                    `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 3, 2, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) GetPacketType() Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType {
	if x != nil {
		return x.PacketType
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_RS
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) GetIpv6Addr() string {
	if x != nil {
		return x.Ipv6Addr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllOptions Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions `protobuf:"varint,1,opt,name=all_options,json=all-options,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions" json:"all_options,omitempty"`
	Options    *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options   `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) GetAllOptions() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions {
	if x != nil {
		return x.AllOptions
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_DENY
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) GetOptions() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllOptions Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions `protobuf:"varint,1,opt,name=all_options,json=all-options,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions" json:"all_options,omitempty"`
	Options    *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options   `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) GetAllOptions() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions {
	if x != nil {
		return x.AllOptions
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_DENY
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) GetOptions() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllOptions Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions `protobuf:"varint,1,opt,name=all_options,json=all-options,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions" json:"all_options,omitempty"`
	Options    *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options   `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) GetAllOptions() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions {
	if x != nil {
		return x.AllOptions
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_DENY
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) GetOptions() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOptionExhSwitch []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch `protobuf:"bytes,1,rep,name=no_option_exh_switch,json=no-option-exh-switch,proto3" json:"no_option_exh_switch,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 3}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) GetNoOptionExhSwitch() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch {
	if x != nil {
		return x.NoOptionExhSwitch
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option `protobuf:"bytes,1,rep,name=option,proto3" json:"option,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) GetOption() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionCode uint32                                                                                       `protobuf:"varint,1,opt,name=option_code,json=option-code,proto3" json:"option_code,omitempty"`
	FilterRule Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filter-rule,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) GetOptionCode() uint32 {
	if x != nil {
		return x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule {
	if x != nil {
		return x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_DENY
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option `protobuf:"bytes,1,rep,name=option,proto3" json:"option,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) GetOption() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionCode uint32                                                                                      `protobuf:"varint,1,opt,name=option_code,json=option-code,proto3" json:"option_code,omitempty"`
	FilterRule Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filter-rule,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) GetOptionCode() uint32 {
	if x != nil {
		return x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule {
	if x != nil {
		return x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_DENY
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option `protobuf:"bytes,1,rep,name=option,proto3" json:"option,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) GetOption() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionCode uint32                                                                                          `protobuf:"varint,1,opt,name=option_code,json=option-code,proto3" json:"option_code,omitempty"`
	FilterRule Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filter-rule,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 2, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) GetOptionCode() uint32 {
	if x != nil {
		return x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule {
	if x != nil {
		return x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_DENY
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExhType    Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType    `protobuf:"varint,1,opt,name=exh_type,json=exh-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType" json:"exh_type,omitempty"`
	FilterRule Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filter-rule,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10, 5, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) GetExhType() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType {
	if x != nil {
		return x.ExhType
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_INVALID_ENUM_VALUE_ExhType
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule {
	if x != nil {
		return x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_DENY
}

type Ifm_Interfaces_Interface_Trunk_Members struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*Ifm_Interfaces_Interface_Trunk_Members_Member `protobuf:"bytes,1,rep,name=member,proto3" json:"member,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members) GetMember() []*Ifm_Interfaces_Interface_Trunk_Members_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_Forwardings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forwarding []*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding `protobuf:"bytes,1,rep,name=forwarding,proto3" json:"forwarding,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Forwardings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Forwardings) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Forwardings.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Forwardings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 1}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) GetForwarding() []*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding {
	if x != nil {
		return x.Forwarding
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_FimIfmtrunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkLocalityFlag bool                                                         `protobuf:"varint,1,opt,name=trunk_locality_flag,json=trunk-locality-flag,proto3" json:"trunk_locality_flag,omitempty"`
	TrunkHashType     Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType     `protobuf:"varint,2,opt,name=trunk_hash_type,json=trunk-hash-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType" json:"trunk_hash_type,omitempty"`
	DualReceiveEnable Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable `protobuf:"varint,3,opt,name=dual_receive_enable,json=dual-receive-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable" json:"dual_receive_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_FimIfmtrunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_FimIfmtrunk.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 2}
}

func (x *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) GetTrunkLocalityFlag() bool {
	if x != nil {
		return x.TrunkLocalityFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) GetTrunkHashType() Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType {
	if x != nil {
		return x.TrunkHashType
	}
	return Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType_CRC32X_1
}

func (x *Ifm_Interfaces_Interface_Trunk_FimIfmtrunk) GetDualReceiveEnable() Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable {
	if x != nil {
		return x.DualReceiveEnable
	}
	return Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable_DISABLE
}

type Ifm_Interfaces_Interface_Trunk_Lacp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveTimeoutType Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType `protobuf:"varint,1,opt,name=receive_timeout_type,json=receive-timeout-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType" json:"receive_timeout_type,omitempty"`
	FastTimeoutValue   uint32                                                 `protobuf:"varint,2,opt,name=fast_timeout_value,json=fast-timeout-value,proto3" json:"fast_timeout_value,omitempty"`
	SupportPreempt     bool                                                   `protobuf:"varint,3,opt,name=support_preempt,json=support-preempt,proto3" json:"support_preempt,omitempty"`
	SelectPortStd      Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd      `protobuf:"varint,4,opt,name=select_port_std,json=select-port-std,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd" json:"select_port_std,omitempty"`
	PreemptDelay       uint32                                                 `protobuf:"varint,5,opt,name=preempt_delay,json=preempt-delay,proto3" json:"preempt_delay,omitempty"`
	MaxActiveNum       uint32                                                 `protobuf:"varint,6,opt,name=max_active_num,json=max-active-num,proto3" json:"max_active_num,omitempty"`
	CollectMaxDelay    uint32                                                 `protobuf:"varint,7,opt,name=collect_max_delay,json=collect-max-delay,proto3" json:"collect_max_delay,omitempty"`
	MixRateEnable      bool                                                   `protobuf:"varint,8,opt,name=mix_rate_enable,json=mix-rate-enable,proto3" json:"mix_rate_enable,omitempty"`
	BackupEnable       bool                                                   `protobuf:"varint,9,opt,name=backup_enable,json=backup-enable,proto3" json:"backup_enable,omitempty"`
	DampStateEnable    bool                                                   `protobuf:"varint,10,opt,name=damp_state_enable,json=damp-state-enable,proto3" json:"damp_state_enable,omitempty"`
	DampMacEnable      bool                                                   `protobuf:"varint,11,opt,name=damp_mac_enable,json=damp-mac-enable,proto3" json:"damp_mac_enable,omitempty"`
	SysMac             string                                                 `protobuf:"bytes,12,opt,name=sys_mac,json=sys-mac,proto3" json:"sys_mac,omitempty"`
	SysPriority        uint32                                                 `protobuf:"varint,13,opt,name=sys_priority,json=sys-priority,proto3" json:"sys_priority,omitempty"`
	MLag               *Ifm_Interfaces_Interface_Trunk_Lacp_MLag              `protobuf:"bytes,14,opt,name=m_lag,json=m-lag,proto3" json:"m_lag,omitempty"`
	TrackVrrp          *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp         `protobuf:"bytes,15,opt,name=track_vrrp,json=track-vrrp,proto3" json:"track_vrrp,omitempty"`
	PortupNum          uint32                                                 `protobuf:"varint,16,opt,name=portup_num,json=portup-num,proto3" json:"portup_num,omitempty"`
	OperSyspri         uint32                                                 `protobuf:"varint,17,opt,name=oper_syspri,json=oper-syspri,proto3" json:"oper_syspri,omitempty"`
	OperSysmac         string                                                 `protobuf:"bytes,18,opt,name=oper_sysmac,json=oper-sysmac,proto3" json:"oper_sysmac,omitempty"`
	SysmacSource       Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource       `protobuf:"varint,19,opt,name=sysmac_source,json=sysmac-source,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource" json:"sysmac_source,omitempty"`
	Portkey            uint32                                                 `protobuf:"varint,20,opt,name=portkey,proto3" json:"portkey,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Lacp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Lacp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Lacp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 3}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetReceiveTimeoutType() Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType {
	if x != nil {
		return x.ReceiveTimeoutType
	}
	return Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_SLOW
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetFastTimeoutValue() uint32 {
	if x != nil {
		return x.FastTimeoutValue
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSupportPreempt() bool {
	if x != nil {
		return x.SupportPreempt
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSelectPortStd() Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd {
	if x != nil {
		return x.SelectPortStd
	}
	return Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SelectPortStd
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetPreemptDelay() uint32 {
	if x != nil {
		return x.PreemptDelay
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetMaxActiveNum() uint32 {
	if x != nil {
		return x.MaxActiveNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetCollectMaxDelay() uint32 {
	if x != nil {
		return x.CollectMaxDelay
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetMixRateEnable() bool {
	if x != nil {
		return x.MixRateEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetBackupEnable() bool {
	if x != nil {
		return x.BackupEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetDampStateEnable() bool {
	if x != nil {
		return x.DampStateEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetDampMacEnable() bool {
	if x != nil {
		return x.DampMacEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSysMac() string {
	if x != nil {
		return x.SysMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSysPriority() uint32 {
	if x != nil {
		return x.SysPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetMLag() *Ifm_Interfaces_Interface_Trunk_Lacp_MLag {
	if x != nil {
		return x.MLag
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetTrackVrrp() *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp {
	if x != nil {
		return x.TrackVrrp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetPortupNum() uint32 {
	if x != nil {
		return x.PortupNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetOperSyspri() uint32 {
	if x != nil {
		return x.OperSyspri
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetOperSysmac() string {
	if x != nil {
		return x.OperSysmac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSysmacSource() Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource {
	if x != nil {
		return x.SysmacSource
	}
	return Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SysmacSource
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetPortkey() uint32 {
	if x != nil {
		return x.Portkey
	}
	return 0
}

type Ifm_Interfaces_Interface_Trunk_Members_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Weight              uint32                                                            `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Status              Ifm_Interfaces_Interface_Trunk_Members_Member_Status              `protobuf:"varint,3,opt,name=status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Status" json:"status,omitempty"`
	IsMaster            bool                                                              `protobuf:"varint,4,opt,name=is_master,json=is-master,proto3" json:"is_master,omitempty"`
	Role                Ifm_Interfaces_Interface_Trunk_Members_Member_Role                `protobuf:"varint,5,opt,name=role,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Role" json:"role,omitempty"`
	LacpNegotiationMode Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode `protobuf:"varint,6,opt,name=lacp_negotiation_mode,json=lacp-negotiation-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode" json:"lacp_negotiation_mode,omitempty"`
	FimIfmtrunkMember   *Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember  `protobuf:"bytes,7,opt,name=fim_ifmtrunk_member,json=fim-ifmtrunk-member,proto3" json:"fim_ifmtrunk_member,omitempty"`
	Lacp                *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp               `protobuf:"bytes,8,opt,name=lacp,proto3" json:"lacp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetStatus() Ifm_Interfaces_Interface_Trunk_Members_Member_Status {
	if x != nil {
		return x.Status
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Status_DOWN
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetIsMaster() bool {
	if x != nil {
		return x.IsMaster
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetRole() Ifm_Interfaces_Interface_Trunk_Members_Member_Role {
	if x != nil {
		return x.Role
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Role_SLAVE
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetLacpNegotiationMode() Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode {
	if x != nil {
		return x.LacpNegotiationMode
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_INVALID_ENUM_VALUE_LacpNegotiationMode
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetFimIfmtrunkMember() *Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember {
	if x != nil {
		return x.FimIfmtrunkMember
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetLacp() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp {
	if x != nil {
		return x.Lacp
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashIndex uint32 `protobuf:"varint,1,opt,name=hash_index,json=hash-index,proto3" json:"hash_index,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember) GetHashIndex() uint32 {
	if x != nil {
		return x.HashIndex
	}
	return 0
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortAttributes         *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes         `protobuf:"bytes,1,opt,name=port_attributes,json=port-attributes,proto3" json:"port_attributes,omitempty"`
	PortNegotiateParameter *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter `protobuf:"bytes,2,opt,name=port_negotiate_parameter,json=port-negotiate-parameter,proto3" json:"port_negotiate_parameter,omitempty"`
	PduStatistic           *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic           `protobuf:"bytes,3,opt,name=pdu_statistic,json=pdu-statistic,proto3" json:"pdu_statistic,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) GetPortAttributes() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes {
	if x != nil {
		return x.PortAttributes
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) GetPortNegotiateParameter() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter {
	if x != nil {
		return x.PortNegotiateParameter
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) GetPduStatistic() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic {
	if x != nil {
		return x.PduStatistic
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32                                                                 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Role     Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role `protobuf:"varint,2,opt,name=role,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role" json:"role,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) GetRole() Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role {
	if x != nil {
		return x.Role
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_NONE
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status   `protobuf:"varint,1,opt,name=status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status" json:"status,omitempty"`
	PortType         Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType `protobuf:"varint,2,opt,name=port_type,json=port-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType" json:"port_type,omitempty"`
	ActorState       string                                                                             `protobuf:"bytes,3,opt,name=actor_state,json=actor-state,proto3" json:"actor_state,omitempty"`
	ActorPortkey     uint32                                                                             `protobuf:"varint,4,opt,name=actor_portkey,json=actor-portkey,proto3" json:"actor_portkey,omitempty"`
	ActorSysid       string                                                                             `protobuf:"bytes,5,opt,name=actor_sysid,json=actor-sysid,proto3" json:"actor_sysid,omitempty"`
	ActorPortno      uint32                                                                             `protobuf:"varint,6,opt,name=actor_portno,json=actor-portno,proto3" json:"actor_portno,omitempty"`
	PartnerSysprimac string                                                                             `protobuf:"bytes,7,opt,name=partner_sysprimac,json=partner-sysprimac,proto3" json:"partner_sysprimac,omitempty"`
	PartnerSyspri    uint32                                                                             `protobuf:"varint,8,opt,name=partner_syspri,json=partner-syspri,proto3" json:"partner_syspri,omitempty"`
	PartnerSysid     string                                                                             `protobuf:"bytes,9,opt,name=partner_sysid,json=partner-sysid,proto3" json:"partner_sysid,omitempty"`
	PartnerPortpri   uint32                                                                             `protobuf:"varint,10,opt,name=partner_portpri,json=partner-portpri,proto3" json:"partner_portpri,omitempty"`
	PartnerId        uint32                                                                             `protobuf:"varint,11,opt,name=partner_id,json=partner-id,proto3" json:"partner_id,omitempty"`
	PartnerPortkey   uint32                                                                             `protobuf:"varint,12,opt,name=partner_portkey,json=partner-portkey,proto3" json:"partner_portkey,omitempty"`
	PartnerState     string                                                                             `protobuf:"bytes,13,opt,name=partner_state,json=partner-state,proto3" json:"partner_state,omitempty"`
	ReferencePort    bool                                                                               `protobuf:"varint,14,opt,name=reference_port,json=reference-port,proto3" json:"reference_port,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetStatus() Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status {
	if x != nil {
		return x.Status
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_UNSELECTED
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPortType() Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType {
	if x != nil {
		return x.PortType
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_NULL
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorState() string {
	if x != nil {
		return x.ActorState
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorPortkey() uint32 {
	if x != nil {
		return x.ActorPortkey
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorSysid() string {
	if x != nil {
		return x.ActorSysid
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorPortno() uint32 {
	if x != nil {
		return x.ActorPortno
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerSysprimac() string {
	if x != nil {
		return x.PartnerSysprimac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerSyspri() uint32 {
	if x != nil {
		return x.PartnerSyspri
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerSysid() string {
	if x != nil {
		return x.PartnerSysid
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerPortpri() uint32 {
	if x != nil {
		return x.PartnerPortpri
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerId() uint32 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerPortkey() uint32 {
	if x != nil {
		return x.PartnerPortkey
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerState() string {
	if x != nil {
		return x.PartnerState
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetReferencePort() bool {
	if x != nil {
		return x.ReferencePort
	}
	return false
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvPdunum       uint32 `protobuf:"varint,1,opt,name=recv_pdunum,json=recv-pdunum,proto3" json:"recv_pdunum,omitempty"`
	RecvErrPdunum    uint32 `protobuf:"varint,2,opt,name=recv_err_pdunum,json=recv-err-pdunum,proto3" json:"recv_err_pdunum,omitempty"`
	SendPdunum       uint32 `protobuf:"varint,3,opt,name=send_pdunum,json=send-pdunum,proto3" json:"send_pdunum,omitempty"`
	RecvMarkerPdunum uint32 `protobuf:"varint,4,opt,name=recv_marker_pdunum,json=recv-marker-pdunum,proto3" json:"recv_marker_pdunum,omitempty"`
	RecvErrMakernum  uint32 `protobuf:"varint,5,opt,name=recv_err_makernum,json=recv-err-makernum,proto3" json:"recv_err_makernum,omitempty"`
	SendMakernum     uint32 `protobuf:"varint,6,opt,name=send_makernum,json=send-makernum,proto3" json:"send_makernum,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0, 0, 1, 2}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvPdunum() uint32 {
	if x != nil {
		return x.RecvPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvErrPdunum() uint32 {
	if x != nil {
		return x.RecvErrPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetSendPdunum() uint32 {
	if x != nil {
		return x.SendPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvMarkerPdunum() uint32 {
	if x != nil {
		return x.RecvMarkerPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvErrMakernum() uint32 {
	if x != nil {
		return x.RecvErrMakernum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetSendMakernum() uint32 {
	if x != nil {
		return x.SendMakernum
	}
	return 0
}

type Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MasterPort string `protobuf:"bytes,2,opt,name=master_port,json=master-port,proto3" json:"master_port,omitempty"`
	SlavePort  string `protobuf:"bytes,3,opt,name=slave_port,json=slave-port,proto3" json:"slave_port,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) GetMasterPort() string {
	if x != nil {
		return x.MasterPort
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) GetSlavePort() string {
	if x != nil {
		return x.SlavePort
	}
	return ""
}

type Ifm_Interfaces_Interface_Trunk_Lacp_MLag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysPriority uint32 `protobuf:"varint,1,opt,name=sys_priority,json=sys-priority,proto3" json:"sys_priority,omitempty"`
	SysMac      string `protobuf:"bytes,2,opt,name=sys_mac,json=sys-mac,proto3" json:"sys_mac,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Lacp_MLag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Lacp_MLag) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_MLag.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Lacp_MLag) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) GetSysPriority() uint32 {
	if x != nil {
		return x.SysPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) GetSysMac() string {
	if x != nil {
		return x.SysMac
	}
	return ""
}

type Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrrpId      uint32 `protobuf:"varint,1,opt,name=vrrp_id,json=vrrp-id,proto3" json:"vrrp_id,omitempty"`
	IfName      string `protobuf:"bytes,2,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
	SysPriority uint32 `protobuf:"varint,3,opt,name=sys_priority,json=sys-priority,proto3" json:"sys_priority,omitempty"`
	IdExt       bool   `protobuf:"varint,4,opt,name=id_ext,json=id-ext,proto3" json:"id_ext,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 3, 1}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetVrrpId() uint32 {
	if x != nil {
		return x.VrrpId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetSysPriority() uint32 {
	if x != nil {
		return x.SysPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetIdExt() bool {
	if x != nil {
		return x.IdExt
	}
	return false
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanSwap      Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap       `protobuf:"varint,1,opt,name=vlan_swap,json=vlan-swap,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap" json:"vlan_swap,omitempty"`
	QinqProtocol  string                                                         `protobuf:"bytes,2,opt,name=qinq_protocol,json=qinq-protocol,proto3" json:"qinq_protocol,omitempty"`
	L2Attribute   *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute   `protobuf:"bytes,3,opt,name=l2_attribute,json=l2-attribute,proto3" json:"l2_attribute,omitempty"`
	MstpAttribute *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute `protobuf:"bytes,4,opt,name=mstp_attribute,json=mstp-attribute,proto3" json:"mstp_attribute,omitempty"`
	FimMain       *Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain       `protobuf:"bytes,5,opt,name=fim_main,json=fim-main,proto3" json:"fim_main,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetVlanSwap() Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap {
	if x != nil {
		return x.VlanSwap
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_DISABLE
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetQinqProtocol() string {
	if x != nil {
		return x.QinqProtocol
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetL2Attribute() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute {
	if x != nil {
		return x.L2Attribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetMstpAttribute() *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute {
	if x != nil {
		return x.MstpAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetFimMain() *Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain {
	if x != nil {
		return x.FimMain
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanGroups  *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups  `protobuf:"bytes,1,opt,name=vlan_groups,json=vlan-groups,proto3" json:"vlan_groups,omitempty"`
	ModeChannel *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel `protobuf:"bytes,2,opt,name=mode_channel,json=mode-channel,proto3" json:"mode_channel,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) GetVlanGroups() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups {
	if x != nil {
		return x.VlanGroups
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) GetModeChannel() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel {
	if x != nil {
		return x.ModeChannel
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalSwitch Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch `protobuf:"varint,1,opt,name=local_switch,json=local-switch,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch" json:"local_switch,omitempty"`
	FlowAction  *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction `protobuf:"bytes,2,opt,name=flow_action,json=flow-action,proto3" json:"flow_action,omitempty"`
	FimL2Sub    *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub   `protobuf:"bytes,3,opt,name=fim_l2_sub,json=fim-l2-sub,proto3" json:"fim_l2_sub,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 2}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) GetLocalSwitch() Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch {
	if x != nil {
		return x.LocalSwitch
	}
	return Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_DISABLE
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) GetFlowAction() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction {
	if x != nil {
		return x.FlowAction
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) GetFimL2Sub() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub {
	if x != nil {
		return x.FimL2Sub
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_Mac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubInterfaceMacLimit     *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit     `protobuf:"bytes,1,opt,name=sub_interface_mac_limit,json=sub-interface-mac-limit,proto3" json:"sub_interface_mac_limit,omitempty"`
	SubInterfaceSuppressions *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions `protobuf:"bytes,2,opt,name=sub_interface_suppressions,json=sub-interface-suppressions,proto3" json:"sub_interface_suppressions,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 3}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) GetSubInterfaceMacLimit() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit {
	if x != nil {
		return x.SubInterfaceMacLimit
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) GetSubInterfaceSuppressions() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions {
	if x != nil {
		return x.SubInterfaceSuppressions
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkType              Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType               `protobuf:"varint,1,opt,name=link_type,json=link-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType" json:"link_type,omitempty"`
	Pvid                  uint32                                                                             `protobuf:"varint,2,opt,name=pvid,proto3" json:"pvid,omitempty"`
	TrunkVlans            string                                                                             `protobuf:"bytes,3,opt,name=trunk_vlans,json=trunk-vlans,proto3" json:"trunk_vlans,omitempty"`
	UntagDiscarding       bool                                                                               `protobuf:"varint,4,opt,name=untag_discarding,json=untag-discarding,proto3" json:"untag_discarding,omitempty"`
	VlanStackings         *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings         `protobuf:"bytes,5,opt,name=vlan_stackings,json=vlan-stackings,proto3" json:"vlan_stackings,omitempty"`
	StatisticsEnableVlans *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans `protobuf:"bytes,6,opt,name=statistics_enable_vlans,json=statistics-enable-vlans,proto3" json:"statistics_enable_vlans,omitempty"`
	PortIsolateGroups     *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups     `protobuf:"bytes,7,opt,name=port_isolate_groups,json=port-isolate-groups,proto3" json:"port_isolate_groups,omitempty"`
	MstpAttribute         *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute         `protobuf:"bytes,8,opt,name=mstp_attribute,json=mstp-attribute,proto3" json:"mstp_attribute,omitempty"`
	ProtocolActions       *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions       `protobuf:"bytes,9,opt,name=protocol_actions,json=protocol-actions,proto3" json:"protocol_actions,omitempty"`
	BpduTunnel            *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel            `protobuf:"bytes,10,opt,name=bpdu_tunnel,json=bpdu-tunnel,proto3" json:"bpdu_tunnel,omitempty"`
	VlanIsolateAttribute  *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute  `protobuf:"bytes,11,opt,name=vlan_isolate_attribute,json=vlan-isolate-attribute,proto3" json:"vlan_isolate_attribute,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetLinkType() Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType {
	if x != nil {
		return x.LinkType
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_INVALID_ENUM_VALUE_LinkType
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetPvid() uint32 {
	if x != nil {
		return x.Pvid
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetTrunkVlans() string {
	if x != nil {
		return x.TrunkVlans
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetUntagDiscarding() bool {
	if x != nil {
		return x.UntagDiscarding
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetVlanStackings() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings {
	if x != nil {
		return x.VlanStackings
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetStatisticsEnableVlans() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans {
	if x != nil {
		return x.StatisticsEnableVlans
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetPortIsolateGroups() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups {
	if x != nil {
		return x.PortIsolateGroups
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetMstpAttribute() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute {
	if x != nil {
		return x.MstpAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetProtocolActions() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions {
	if x != nil {
		return x.ProtocolActions
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetBpduTunnel() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel {
	if x != nil {
		return x.BpduTunnel
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetVlanIsolateAttribute() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute {
	if x != nil {
		return x.VlanIsolateAttribute
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable           bool                                                                       `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	LoopProtection   bool                                                                       `protobuf:"varint,2,opt,name=loop_protection,json=loop-protection,proto3" json:"loop_protection,omitempty"`
	NoAgreementCheck bool                                                                       `protobuf:"varint,3,opt,name=no_agreement_check,json=no-agreement-check,proto3" json:"no_agreement_check,omitempty"`
	PointToPoint     Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint `protobuf:"varint,4,opt,name=point_to_point,json=point-to-point,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint" json:"point_to_point,omitempty"`
	RootProtection   bool                                                                       `protobuf:"varint,5,opt,name=root_protection,json=root-protection,proto3" json:"root_protection,omitempty"`
	TransmitLimit    uint32                                                                     `protobuf:"varint,6,opt,name=transmit_limit,json=transmit-limit,proto3" json:"transmit_limit,omitempty"`
	TcRestriction    bool                                                                       `protobuf:"varint,7,opt,name=tc_restriction,json=tc-restriction,proto3" json:"tc_restriction,omitempty"`
	BpduFilter       Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter   `protobuf:"varint,8,opt,name=bpdu_filter,json=bpdu-filter,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter" json:"bpdu_filter,omitempty"`
	EdgePort         Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort     `protobuf:"varint,9,opt,name=edge_port,json=edge-port,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort" json:"edge_port,omitempty"`
	VplsSubInterface bool                                                                       `protobuf:"varint,10,opt,name=vpls_sub_interface,json=vpls-sub-interface,proto3" json:"vpls_sub_interface,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetLoopProtection() bool {
	if x != nil {
		return x.LoopProtection
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetNoAgreementCheck() bool {
	if x != nil {
		return x.NoAgreementCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetPointToPoint() Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint {
	if x != nil {
		return x.PointToPoint
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_INVALID_ENUM_VALUE_PointToPoint
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetRootProtection() bool {
	if x != nil {
		return x.RootProtection
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetTransmitLimit() uint32 {
	if x != nil {
		return x.TransmitLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetTcRestriction() bool {
	if x != nil {
		return x.TcRestriction
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetBpduFilter() Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter {
	if x != nil {
		return x.BpduFilter
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_INVALID_ENUM_VALUE_BpduFilter
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetEdgePort() Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort {
	if x != nil {
		return x.EdgePort
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_INVALID_ENUM_VALUE_EdgePort
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute) GetVplsSubInterface() bool {
	if x != nil {
		return x.VplsSubInterface
	}
	return false
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OuterVlanEnable Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable `protobuf:"varint,1,opt,name=outer_vlan_enable,json=outer-vlan-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable" json:"outer_vlan_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain) GetOuterVlanEnable() Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable {
	if x != nil {
		return x.OuterVlanEnable
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable_DISABLE
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanStacking []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking `protobuf:"bytes,1,rep,name=vlan_stacking,json=vlan-stacking,proto3" json:"vlan_stacking,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) GetVlanStacking() []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking {
	if x != nil {
		return x.VlanStacking
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlans string `protobuf:"bytes,1,opt,name=vlans,proto3" json:"vlans,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) GetVlans() string {
	if x != nil {
		return x.Vlans
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortIsolateGroup []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup `protobuf:"bytes,1,rep,name=port_isolate_group,json=port-isolate-group,proto3" json:"port_isolate_group,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) GetPortIsolateGroup() []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup {
	if x != nil {
		return x.PortIsolateGroup
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable           bool                                                                                   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	LoopProtection   bool                                                                                   `protobuf:"varint,2,opt,name=loop_protection,json=loop-protection,proto3" json:"loop_protection,omitempty"`
	NoAgreementCheck bool                                                                                   `protobuf:"varint,3,opt,name=no_agreement_check,json=no-agreement-check,proto3" json:"no_agreement_check,omitempty"`
	PointToPoint     Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint `protobuf:"varint,4,opt,name=point_to_point,json=point-to-point,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint" json:"point_to_point,omitempty"`
	RootProtection   bool                                                                                   `protobuf:"varint,5,opt,name=root_protection,json=root-protection,proto3" json:"root_protection,omitempty"`
	TransmitLimit    uint32                                                                                 `protobuf:"varint,6,opt,name=transmit_limit,json=transmit-limit,proto3" json:"transmit_limit,omitempty"`
	TcRestriction    bool                                                                                   `protobuf:"varint,7,opt,name=tc_restriction,json=tc-restriction,proto3" json:"tc_restriction,omitempty"`
	BpduFilter       Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter   `protobuf:"varint,8,opt,name=bpdu_filter,json=bpdu-filter,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter" json:"bpdu_filter,omitempty"`
	EdgePort         Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort     `protobuf:"varint,9,opt,name=edge_port,json=edge-port,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort" json:"edge_port,omitempty"`
	VplsSubInterface bool                                                                                   `protobuf:"varint,10,opt,name=vpls_sub_interface,json=vpls-sub-interface,proto3" json:"vpls_sub_interface,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetLoopProtection() bool {
	if x != nil {
		return x.LoopProtection
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetNoAgreementCheck() bool {
	if x != nil {
		return x.NoAgreementCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetPointToPoint() Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint {
	if x != nil {
		return x.PointToPoint
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_INVALID_ENUM_VALUE_PointToPoint
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetRootProtection() bool {
	if x != nil {
		return x.RootProtection
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetTransmitLimit() uint32 {
	if x != nil {
		return x.TransmitLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetTcRestriction() bool {
	if x != nil {
		return x.TcRestriction
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetBpduFilter() Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter {
	if x != nil {
		return x.BpduFilter
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_INVALID_ENUM_VALUE_BpduFilter
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetEdgePort() Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort {
	if x != nil {
		return x.EdgePort
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_INVALID_ENUM_VALUE_EdgePort
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute) GetVplsSubInterface() bool {
	if x != nil {
		return x.VplsSubInterface
	}
	return false
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolAction []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction `protobuf:"bytes,1,rep,name=protocol_action,json=protocol-action,proto3" json:"protocol_action,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 4}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions) GetProtocolAction() []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction {
	if x != nil {
		return x.ProtocolAction
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 5}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsolateVlanlist string `protobuf:"bytes,1,opt,name=isolate_vlanlist,json=isolate-vlanlist,proto3" json:"isolate_vlanlist,omitempty"`
	OutsideVlanIso  bool   `protobuf:"varint,2,opt,name=outside_vlan_iso,json=outside-vlan-iso,proto3" json:"outside_vlan_iso,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 6}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute) GetIsolateVlanlist() string {
	if x != nil {
		return x.IsolateVlanlist
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute) GetOutsideVlanIso() bool {
	if x != nil {
		return x.OutsideVlanIso
	}
	return false
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackingVlan uint32 `protobuf:"varint,1,opt,name=stacking_vlan,json=stacking-vlan,proto3" json:"stacking_vlan,omitempty"`
	CeDefault    bool   `protobuf:"varint,2,opt,name=ce_default,json=ce-default,proto3" json:"ce_default,omitempty"`
	TransVlans   string `protobuf:"bytes,3,opt,name=trans_vlans,json=trans-vlans,proto3" json:"trans_vlans,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) GetStackingVlan() uint32 {
	if x != nil {
		return x.StackingVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) GetCeDefault() bool {
	if x != nil {
		return x.CeDefault
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) GetTransVlans() string {
	if x != nil {
		return x.TransVlans
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=group-id,proto3" json:"group_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolType Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType `protobuf:"varint,1,opt,name=protocol_type,json=protocol-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType" json:"protocol_type,omitempty"`
	Action       Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action       `protobuf:"varint,2,opt,name=action,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action" json:"action,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 0, 0, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction) GetProtocolType() Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_ProtocolType
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction) GetAction() Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action {
	if x != nil {
		return x.Action
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_Action
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanGroup []*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup `protobuf:"bytes,1,rep,name=vlan_group,json=vlan-group,proto3" json:"vlan_group,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) GetVlanGroup() []*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup {
	if x != nil {
		return x.VlanGroup
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeChannelEnable Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable `protobuf:"varint,1,opt,name=mode_channel_enable,json=mode-channel-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable" json:"mode_channel_enable,omitempty"`
	Bandwidth         uint32                                                                         `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel) GetModeChannelEnable() Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable {
	if x != nil {
		return x.ModeChannelEnable
	}
	return Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable_DISABLE
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32                                                                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode            Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode" json:"mode,omitempty"`
	StatisticEnable bool                                                                       `protobuf:"varint,3,opt,name=statistic_enable,json=statistic-enable,proto3" json:"statistic_enable,omitempty"`
	Description     string                                                                     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetMode() Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_INVALID_ENUM_VALUE_Mode
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetStatisticEnable() bool {
	if x != nil {
		return x.StatisticEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType  Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType `protobuf:"varint,1,opt,name=action_type,json=action-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType" json:"action_type,omitempty"`
	OutVlanId   uint32                                                                 `protobuf:"varint,2,opt,name=out_vlan_id,json=out-vlan-id,proto3" json:"out_vlan_id,omitempty"`
	InnerVlanId uint32                                                                 `protobuf:"varint,3,opt,name=inner_vlan_id,json=inner-vlan-id,proto3" json:"inner_vlan_id,omitempty"`
	Outer_8021P uint32                                                                 `protobuf:"varint,4,opt,name=outer_8021p,json=outer-8021p,proto3" json:"outer_8021p,omitempty"`
	Inner_8021P uint32                                                                 `protobuf:"varint,5,opt,name=inner_8021p,json=inner-8021p,proto3" json:"inner_8021p,omitempty"`
	OffsetValue uint32                                                                 `protobuf:"varint,6,opt,name=offset_value,json=offset-value,proto3" json:"offset_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetActionType() Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_POPX_OUTER
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetOutVlanId() uint32 {
	if x != nil {
		return x.OutVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetInnerVlanId() uint32 {
	if x != nil {
		return x.InnerVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetOuter_8021P() uint32 {
	if x != nil {
		return x.Outer_8021P
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetInner_8021P() uint32 {
	if x != nil {
		return x.Inner_8021P
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetOffsetValue() uint32 {
	if x != nil {
		return x.OffsetValue
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressStrictFilter Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter `protobuf:"varint,1,opt,name=egress_strict_filter,json=egress-strict-filter,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter" json:"egress_strict_filter,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 2, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub) GetEgressStrictFilter() Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter {
	if x != nil {
		return x.EgressStrictFilter
	}
	return Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter_DISABLE
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 3, 0}
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubInterfaceSuppression []*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression `protobuf:"bytes,1,rep,name=sub_interface_suppression,json=sub-interface-suppression,proto3" json:"sub_interface_suppression,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 3, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) GetSubInterfaceSuppression() []*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression {
	if x != nil {
		return x.SubInterfaceSuppression
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type" json:"type,omitempty"`
	Direction Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction" json:"direction,omitempty"`
	Cir       uint64                                                                                           `protobuf:"varint,3,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs       uint64                                                                                           `protobuf:"varint,4,opt,name=cbs,proto3" json:"cbs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13, 3, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetType() Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_BROADCAST
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetDirection() Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetCir() uint64 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetCbs() uint64 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

type Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2ProxyDynLearn bool   `protobuf:"varint,1,opt,name=l2proxy_dyn_learn,json=l2proxy-dyn-learn,proto3" json:"l2proxy_dyn_learn,omitempty"`
	L2ProxyMaxNum   uint32 `protobuf:"varint,2,opt,name=l2proxy_max_num,json=l2proxy-max-num,proto3" json:"l2proxy_max_num,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) Reset() {
	*x = Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 16, 0}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) GetL2ProxyDynLearn() bool {
	if x != nil {
		return x.L2ProxyDynLearn
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) GetL2ProxyMaxNum() uint32 {
	if x != nil {
		return x.L2ProxyMaxNum
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_Trusts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trust []*Ifm_Interfaces_Interface_Qos_Trusts_Trust `protobuf:"bytes,1,rep,name=trust,proto3" json:"trust,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Trusts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Trusts) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Trusts) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Trusts.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Trusts) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts) GetTrust() []*Ifm_Interfaces_Interface_Qos_Trusts_Trust {
	if x != nil {
		return x.Trust
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicyApply []*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply `protobuf:"bytes,1,rep,name=traffic_policy_apply,json=traffic-policy-apply,proto3" json:"traffic_policy_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 1}
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys) GetTrafficPolicyApply() []*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply {
	if x != nil {
		return x.TrafficPolicyApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_ProfileApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileApply []*Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply `protobuf:"bytes,1,rep,name=profile_apply,json=profile-apply,proto3" json:"profile_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ProfileApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ProfileApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ProfileApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ProfileApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 2}
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys) GetProfileApply() []*Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply {
	if x != nil {
		return x.ProfileApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_UserQueueApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueApply []*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply `protobuf:"bytes,1,rep,name=user_queue_apply,json=user-queue-apply,proto3" json:"user_queue_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserQueueApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserQueueApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 3}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys) GetUserQueueApply() []*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply {
	if x != nil {
		return x.UserQueueApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PortQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueue []*Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue `protobuf:"bytes,1,rep,name=port_queue,json=port-queue,proto3" json:"port_queue,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueues) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueues.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 4}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues) GetPortQueue() []*Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue {
	if x != nil {
		return x.PortQueue
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PortQueueStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueState []*Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState `protobuf:"bytes,1,rep,name=port_queue_state,json=port-queue-state,proto3" json:"port_queue_state,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueStates) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueStates.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueStates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 5}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates) GetPortQueueState() []*Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState {
	if x != nil {
		return x.PortQueueState
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueTemplateApply []*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply `protobuf:"bytes,1,rep,name=port_queue_template_apply,json=port-queue-template-apply,proto3" json:"port_queue_template_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 6}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys) GetPortQueueTemplateApply() []*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply {
	if x != nil {
		return x.PortQueueTemplateApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PortQueueAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueAlarm []*Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm `protobuf:"bytes,1,rep,name=port_queue_alarm,json=port-queue-alarm,proto3" json:"port_queue_alarm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarms) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueAlarms.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarms) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 7}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms) GetPortQueueAlarm() []*Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm {
	if x != nil {
		return x.PortQueueAlarm
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueAlarmState []*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState `protobuf:"bytes,1,rep,name=port_queue_alarm_state,json=port-queue-alarm-state,proto3" json:"port_queue_alarm_state,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 8}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates) GetPortQueueAlarmState() []*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState {
	if x != nil {
		return x.PortQueueAlarmState
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueDiscardAlarm []*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm `protobuf:"bytes,1,rep,name=port_queue_discard_alarm,json=port-queue-discard-alarm,proto3" json:"port_queue_discard_alarm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 9}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms) GetPortQueueDiscardAlarm() []*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm {
	if x != nil {
		return x.PortQueueDiscardAlarm
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_SetQueueStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetQueueStat []*Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat `protobuf:"bytes,1,rep,name=set_queue_stat,json=set-queue-stat,proto3" json:"set_queue_stat,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SetQueueStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SetQueueStats) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SetQueueStats.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SetQueueStats) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 10}
}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats) GetSetQueueStat() []*Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat {
	if x != nil {
		return x.SetQueueStat
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_LinkAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjustValue int32                                                   `protobuf:"varint,1,opt,name=adjust_value,json=adjust-value,proto3" json:"adjust_value,omitempty"`
	ShapingMode Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode `protobuf:"varint,2,opt,name=shaping_mode,json=shaping-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode" json:"shaping_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_LinkAdjustment) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_LinkAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_LinkAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_LinkAdjustment) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_LinkAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_LinkAdjustment.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_LinkAdjustment) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 11}
}

func (x *Ifm_Interfaces_Interface_Qos_LinkAdjustment) GetAdjustValue() int32 {
	if x != nil {
		return x.AdjustValue
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_LinkAdjustment) GetShapingMode() Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode {
	if x != nil {
		return x.ShapingMode
	}
	return Ifm_Interfaces_Interface_Qos_LinkAdjustment_INVALID_ENUM_VALUE_ShapingMode
}

type Ifm_Interfaces_Interface_Qos_QosQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosQueue []*Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue `protobuf:"bytes,1,rep,name=qos_queue,json=qos-queue,proto3" json:"qos_queue,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_QosQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_QosQueues) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosQueues.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_QosQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 12}
}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues) GetQosQueue() []*Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue {
	if x != nil {
		return x.QosQueue
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_QueueTemplateApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueTemplateApply []*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply `protobuf:"bytes,1,rep,name=queue_template_apply,json=queue-template-apply,proto3" json:"queue_template_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_QueueTemplateApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QueueTemplateApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 13}
}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys) GetQueueTemplateApply() []*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply {
	if x != nil {
		return x.QueueTemplateApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_SoftPipeAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftPipeAlarm *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm `protobuf:"bytes,1,opt,name=soft_pipe_alarm,json=soft-pipe-alarm,proto3" json:"soft_pipe_alarm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SoftPipeAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SoftPipeAlarms.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 14}
}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms) GetSoftPipeAlarm() *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm {
	if x != nil {
		return x.SoftPipeAlarm
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueueTemplateApply []*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply `protobuf:"bytes,1,rep,name=flow_queue_template_apply,json=flow-queue-template-apply,proto3" json:"flow_queue_template_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 15}
}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys) GetFlowQueueTemplateApply() []*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply {
	if x != nil {
		return x.FlowQueueTemplateApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTemplateApply []*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply `protobuf:"bytes,1,rep,name=service_template_apply,json=service-template-apply,proto3" json:"service_template_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 16}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys) GetServiceTemplateApply() []*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply {
	if x != nil {
		return x.ServiceTemplateApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_DefaultServiceClasss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultServiceClass []*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass `protobuf:"bytes,1,rep,name=default_service_class,json=default-service-class,proto3" json:"default_service_class,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultServiceClasss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultServiceClasss.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 17}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss) GetDefaultServiceClass() []*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass {
	if x != nil {
		return x.DefaultServiceClass
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultUserGroupQueue []*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue `protobuf:"bytes,1,rep,name=default_user_group_queue,json=default-user-group-queue,proto3" json:"default_user_group_queue,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 18}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues) GetDefaultUserGroupQueue() []*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue {
	if x != nil {
		return x.DefaultUserGroupQueue
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultSubPortQueue []*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue `protobuf:"bytes,1,rep,name=default_sub_port_queue,json=default-sub-port-queue,proto3" json:"default_sub_port_queue,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 19}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues) GetDefaultSubPortQueue() []*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue {
	if x != nil {
		return x.DefaultSubPortQueue
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PortShapings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortShaping *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping `protobuf:"bytes,1,opt,name=port_shaping,json=port-shaping,proto3" json:"port_shaping,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortShapings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortShapings) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortShapings.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortShapings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 20}
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings) GetPortShaping() *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping {
	if x != nil {
		return x.PortShaping
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerHopBehaviorDisable []*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable `protobuf:"bytes,1,rep,name=per_hop_behavior_disable,json=per-hop-behavior-disable,proto3" json:"per_hop_behavior_disable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 21}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables) GetPerHopBehaviorDisable() []*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable {
	if x != nil {
		return x.PerHopBehaviorDisable
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerHopBehaviorEnable *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable `protobuf:"bytes,1,opt,name=per_hop_behavior_enable,json=per-hop-behavior-enable,proto3" json:"per_hop_behavior_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 22}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables) GetPerHopBehaviorEnable() *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable {
	if x != nil {
		return x.PerHopBehaviorEnable
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerHopBehaviorEnableVlan []*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan `protobuf:"bytes,1,rep,name=per_hop_behavior_enable_vlan,json=per-hop-behavior-enable-vlan,proto3" json:"per_hop_behavior_enable_vlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 23}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans) GetPerHopBehaviorEnableVlan() []*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan {
	if x != nil {
		return x.PerHopBehaviorEnableVlan
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_PerHopBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable `protobuf:"varint,1,opt,name=enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable" json:"enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehavior) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PerHopBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PerHopBehavior) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehavior.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PerHopBehavior) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 24}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehavior) GetEnable() Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable {
	if x != nil {
		return x.Enable
	}
	return Ifm_Interfaces_Interface_Qos_PerHopBehavior_INVALID_ENUM_VALUE_Enable
}

type Ifm_Interfaces_Interface_Qos_Cars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Car []*Ifm_Interfaces_Interface_Qos_Cars_Car `protobuf:"bytes,1,rep,name=car,proto3" json:"car,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Cars) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Cars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Cars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Cars) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Cars) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Cars) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25}
}

func (x *Ifm_Interfaces_Interface_Qos_Cars) GetCar() []*Ifm_Interfaces_Interface_Qos_Cars_Car {
	if x != nil {
		return x.Car
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_ConvergentPrecedence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityType Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType `protobuf:"varint,1,opt,name=priority_type,json=priority-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType" json:"priority_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ConvergentPrecedence) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ConvergentPrecedence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ConvergentPrecedence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ConvergentPrecedence) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ConvergentPrecedence) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ConvergentPrecedence.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ConvergentPrecedence) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 26}
}

func (x *Ifm_Interfaces_Interface_Qos_ConvergentPrecedence) GetPriorityType() Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType {
	if x != nil {
		return x.PriorityType
	}
	return Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_INVALID_ENUM_VALUE_PriorityType
}

type Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId string `protobuf:"bytes,1,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 27}
}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan) GetVlanId() string {
	if x != nil {
		return x.VlanId
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_DropEligibleIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicator) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DropEligibleIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DropEligibleIndicator) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DropEligibleIndicator.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DropEligibleIndicator) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 28}
}

func (x *Ifm_Interfaces_Interface_Qos_DropEligibleIndicator) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable `protobuf:"varint,1,opt,name=enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable" json:"enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 29}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence) GetEnable() Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable {
	if x != nil {
		return x.Enable
	}
	return Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_INVALID_ENUM_VALUE_Enable
}

type Ifm_Interfaces_Interface_Qos_TrustIpPrecedences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustIpPrecedence []*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence `protobuf:"bytes,1,rep,name=trust_ip_precedence,json=trust-ip-precedence,proto3" json:"trust_ip_precedence,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_TrustIpPrecedences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustIpPrecedences.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 30}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences) GetTrustIpPrecedence() []*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence {
	if x != nil {
		return x.TrustIpPrecedence
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_ShareShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be                Ifm_Interfaces_Interface_Qos_ShareShaping_Be                `protobuf:"varint,1,opt,name=be,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Be" json:"be,omitempty"`
	Af1               Ifm_Interfaces_Interface_Qos_ShareShaping_Af1               `protobuf:"varint,2,opt,name=af1,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Af1" json:"af1,omitempty"`
	Af2               Ifm_Interfaces_Interface_Qos_ShareShaping_Af2               `protobuf:"varint,3,opt,name=af2,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Af2" json:"af2,omitempty"`
	Af3               Ifm_Interfaces_Interface_Qos_ShareShaping_Af3               `protobuf:"varint,4,opt,name=af3,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Af3" json:"af3,omitempty"`
	Af4               Ifm_Interfaces_Interface_Qos_ShareShaping_Af4               `protobuf:"varint,5,opt,name=af4,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Af4" json:"af4,omitempty"`
	Ef                Ifm_Interfaces_Interface_Qos_ShareShaping_Ef                `protobuf:"varint,6,opt,name=ef,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Ef" json:"ef,omitempty"`
	Cs6               Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6               `protobuf:"varint,7,opt,name=cs6,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6" json:"cs6,omitempty"`
	Cs7               Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7               `protobuf:"varint,8,opt,name=cs7,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7" json:"cs7,omitempty"`
	QueueScheduleMode Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode `protobuf:"varint,9,opt,name=queue_schedule_mode,json=queue-schedule-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode" json:"queue_schedule_mode,omitempty"`
	Weight            uint32                                                      `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Pbs               uint32                                                      `protobuf:"varint,11,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ShareShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ShareShaping) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ShareShaping.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ShareShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 31}
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetBe() Ifm_Interfaces_Interface_Qos_ShareShaping_Be {
	if x != nil {
		return x.Be
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_Be_TRUE
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetAf1() Ifm_Interfaces_Interface_Qos_ShareShaping_Af1 {
	if x != nil {
		return x.Af1
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af1
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetAf2() Ifm_Interfaces_Interface_Qos_ShareShaping_Af2 {
	if x != nil {
		return x.Af2
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af2
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetAf3() Ifm_Interfaces_Interface_Qos_ShareShaping_Af3 {
	if x != nil {
		return x.Af3
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af3
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetAf4() Ifm_Interfaces_Interface_Qos_ShareShaping_Af4 {
	if x != nil {
		return x.Af4
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Af4
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetEf() Ifm_Interfaces_Interface_Qos_ShareShaping_Ef {
	if x != nil {
		return x.Ef
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Ef
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetCs6() Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6 {
	if x != nil {
		return x.Cs6
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Cs6
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetCs7() Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7 {
	if x != nil {
		return x.Cs7
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_INVALID_ENUM_VALUE_Cs7
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetQueueScheduleMode() Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode {
	if x != nil {
		return x.QueueScheduleMode
	}
	return Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode_PQ
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_ShareShaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_SubPortQueueApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubPortQueueApply []*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply `protobuf:"bytes,1,rep,name=sub_port_queue_apply,json=sub-port-queue-apply,proto3" json:"sub_port_queue_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SubPortQueueApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SubPortQueueApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 32}
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys) GetSubPortQueueApply() []*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply {
	if x != nil {
		return x.SubPortQueueApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVlanUserGroupQueueApply []*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply `protobuf:"bytes,1,rep,name=user_vlan_user_group_queue_apply,json=user-vlan-user-group-queue-apply,proto3" json:"user_vlan_user_group_queue_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 33}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys) GetUserVlanUserGroupQueueApply() []*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply {
	if x != nil {
		return x.UserVlanUserGroupQueueApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrasMemberLinkScheduler []*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler `protobuf:"bytes,1,rep,name=bras_member_link_scheduler,json=bras-member-link-scheduler,proto3" json:"bras_member_link_scheduler,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 34}
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers) GetBrasMemberLinkScheduler() []*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler {
	if x != nil {
		return x.BrasMemberLinkScheduler
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleTreeDistributeMode []*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode `protobuf:"bytes,1,rep,name=schedule_tree_distribute_mode,json=schedule-tree-distribute-mode,proto3" json:"schedule_tree_distribute_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 35}
}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes) GetScheduleTreeDistributeMode() []*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode {
	if x != nil {
		return x.ScheduleTreeDistributeMode
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_LoopMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Qos_LoopMode) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_LoopMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_LoopMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_LoopMode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_LoopMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_LoopMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_LoopMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 36}
}

type Ifm_Interfaces_Interface_Qos_ResourcePools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourcePool []*Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool `protobuf:"bytes,1,rep,name=resource_pool,json=resource-pool,proto3" json:"resource_pool,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ResourcePools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ResourcePools) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ResourcePools.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ResourcePools) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 37}
}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools) GetResourcePool() []*Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool {
	if x != nil {
		return x.ResourcePool
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroupQueueApply []*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply `protobuf:"bytes,1,rep,name=user_group_queue_apply,json=user-group-queue-apply,proto3" json:"user_group_queue_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 38}
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys) GetUserGroupQueueApply() []*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply {
	if x != nil {
		return x.UserGroupQueueApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_MplsL2Vc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffservDomainName string `protobuf:"bytes,1,opt,name=diffserv_domain_name,json=diffserv-domain-name,proto3" json:"diffserv_domain_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_MplsL2Vc) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_MplsL2Vc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_MplsL2Vc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_MplsL2Vc) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_MplsL2Vc) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_MplsL2Vc.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_MplsL2Vc) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 39}
}

func (x *Ifm_Interfaces_Interface_Qos_MplsL2Vc) GetDiffservDomainName() string {
	if x != nil {
		return x.DiffservDomainName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberLinkScheduler []*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler `protobuf:"bytes,1,rep,name=member_link_scheduler,json=member-link-scheduler,proto3" json:"member_link_scheduler,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 40}
}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers) GetMemberLinkScheduler() []*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler {
	if x != nil {
		return x.MemberLinkScheduler
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_QosLr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Qos_QosLr) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_QosLr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_QosLr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_QosLr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_QosLr) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosLr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_QosLr) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 41}
}

type Ifm_Interfaces_Interface_Qos_LdpTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficType Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType `protobuf:"varint,1,opt,name=traffic_type,json=traffic-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType" json:"traffic_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_LdpTraffic) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_LdpTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_LdpTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_LdpTraffic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_LdpTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_LdpTraffic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_LdpTraffic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 42}
}

func (x *Ifm_Interfaces_Interface_Qos_LdpTraffic) GetTrafficType() Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType {
	if x != nil {
		return x.TrafficType
	}
	return Ifm_Interfaces_Interface_Qos_LdpTraffic_INVALID_ENUM_VALUE_TrafficType
}

type Ifm_Interfaces_Interface_Qos_BufferPolicyMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferMode Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode `protobuf:"varint,1,opt,name=buffer_mode,json=buffer-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode" json:"buffer_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_BufferPolicyMode) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_BufferPolicyMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_BufferPolicyMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_BufferPolicyMode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_BufferPolicyMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_BufferPolicyMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_BufferPolicyMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 43}
}

func (x *Ifm_Interfaces_Interface_Qos_BufferPolicyMode) GetBufferMode() Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode {
	if x != nil {
		return x.BufferMode
	}
	return Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode_NORMAL
}

type Ifm_Interfaces_Interface_Qos_HardPipeApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode      Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode" json:"mode,omitempty"`
	Bandwidth uint32                                          `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_HardPipeApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_HardPipeApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_HardPipeApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_HardPipeApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_HardPipeApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_HardPipeApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_HardPipeApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 44}
}

func (x *Ifm_Interfaces_Interface_Qos_HardPipeApply) GetMode() Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode_SHAREX_MODE
}

func (x *Ifm_Interfaces_Interface_Qos_HardPipeApply) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_ChannelAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjustValue uint32 `protobuf:"varint,1,opt,name=adjust_value,json=adjust-value,proto3" json:"adjust_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ChannelAdjustment) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ChannelAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ChannelAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ChannelAdjustment) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ChannelAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ChannelAdjustment.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ChannelAdjustment) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 45}
}

func (x *Ifm_Interfaces_Interface_Qos_ChannelAdjustment) GetAdjustValue() uint32 {
	if x != nil {
		return x.AdjustValue
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVlanProfileApply []*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply `protobuf:"bytes,1,rep,name=user_vlan_profile_apply,json=user-vlan-profile-apply,proto3" json:"user_vlan_profile_apply,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 46}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys) GetUserVlanProfileApply() []*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply {
	if x != nil {
		return x.UserVlanProfileApply
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllServiceClass       *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass       `protobuf:"bytes,1,opt,name=all_service_class,json=all-service-class,proto3" json:"all_service_class,omitempty"`
	SpecificServiceClasss *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss `protobuf:"bytes,2,opt,name=specific_service_classs,json=specific-service-classs,proto3" json:"specific_service_classs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 47}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping) GetAllServiceClass() *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass {
	if x != nil {
		return x.AllServiceClass
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping) GetSpecificServiceClasss() *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss {
	if x != nil {
		return x.SpecificServiceClasss
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass" json:"service_class,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 48}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote) GetServiceClass() Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass_BE
}

type Ifm_Interfaces_Interface_Qos_TrustRemotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustRemote []*Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote `protobuf:"bytes,1,rep,name=trust_remote,json=trust-remote,proto3" json:"trust_remote,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_TrustRemotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_TrustRemotes) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustRemotes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_TrustRemotes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 49}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes) GetTrustRemote() []*Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote {
	if x != nil {
		return x.TrustRemote
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_WfqShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Qos_WfqShaping) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_WfqShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_WfqShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_WfqShaping) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_WfqShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_WfqShaping.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_WfqShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 50}
}

type Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceBoardScheduleWeight []*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight `protobuf:"bytes,1,rep,name=source_board_schedule_weight,json=source-board-schedule-weight,proto3" json:"source_board_schedule_weight,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 51}
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights) GetSourceBoardScheduleWeight() []*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight {
	if x != nil {
		return x.SourceBoardScheduleWeight
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_DeficitUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit" json:"unit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DeficitUnit) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DeficitUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DeficitUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DeficitUnit) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DeficitUnit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DeficitUnit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DeficitUnit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 52}
}

func (x *Ifm_Interfaces_Interface_Qos_DeficitUnit) GetUnit() Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit {
	if x != nil {
		return x.Unit
	}
	return Ifm_Interfaces_Interface_Qos_DeficitUnit_INVALID_ENUM_VALUE_Unit
}

type Ifm_Interfaces_Interface_Qos_DefaultUserQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction" json:"direction,omitempty"`
	Cir       uint32                                                  `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs       uint32                                                  `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pir       uint32                                                  `protobuf:"varint,4,opt,name=pir,proto3" json:"pir,omitempty"`
	Pbs       uint32                                                  `protobuf:"varint,5,opt,name=pbs,proto3" json:"pbs,omitempty"`
	Weight    uint32                                                  `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultUserQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultUserQueue) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultUserQueue.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultUserQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 53}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) GetDirection() Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_DefaultUserQueue_INVALID_ENUM_VALUE_Direction
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserQueue) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_VniCfgPeers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VniCfgPeer []*Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer `protobuf:"bytes,1,rep,name=vni_cfg_peer,json=vni-cfg-peer,proto3" json:"vni_cfg_peer,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_VniCfgPeers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_VniCfgPeers) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_VniCfgPeers.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_VniCfgPeers) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 54}
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers) GetVniCfgPeer() []*Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer {
	if x != nil {
		return x.VniCfgPeer
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_QosVllPipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitMode       bool                                                    `protobuf:"varint,1,opt,name=split_mode,json=split-mode,proto3" json:"split_mode,omitempty"`
	PipeMode        Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode        `protobuf:"varint,2,opt,name=pipe_mode,json=pipe-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode" json:"pipe_mode,omitempty"`
	IngressPipeMode Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode `protobuf:"varint,3,opt,name=ingress_pipe_mode,json=ingress-pipe-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode" json:"ingress_pipe_mode,omitempty"`
	EgressPipeMode  Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode  `protobuf:"varint,4,opt,name=egress_pipe_mode,json=egress-pipe-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode" json:"egress_pipe_mode,omitempty"`
	ServiceClass    Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass    `protobuf:"varint,5,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass" json:"service_class,omitempty"`
	Color           Ifm_Interfaces_Interface_Qos_QosVllPipe_Color           `protobuf:"varint,6,opt,name=color,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosVllPipe_Color" json:"color,omitempty"`
	DomainName      string                                                  `protobuf:"bytes,7,opt,name=domain_name,json=domain-name,proto3" json:"domain_name,omitempty"`
	TrustType       Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType       `protobuf:"varint,8,opt,name=trust_type,json=trust-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType" json:"trust_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_QosVllPipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_QosVllPipe) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosVllPipe.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_QosVllPipe) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 55}
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetSplitMode() bool {
	if x != nil {
		return x.SplitMode
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetPipeMode() Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode {
	if x != nil {
		return x.PipeMode
	}
	return Ifm_Interfaces_Interface_Qos_QosVllPipe_INVALID_ENUM_VALUE_PipeMode
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetIngressPipeMode() Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode {
	if x != nil {
		return x.IngressPipeMode
	}
	return Ifm_Interfaces_Interface_Qos_QosVllPipe_INVALID_ENUM_VALUE_IngressPipeMode
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetEgressPipeMode() Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode {
	if x != nil {
		return x.EgressPipeMode
	}
	return Ifm_Interfaces_Interface_Qos_QosVllPipe_INVALID_ENUM_VALUE_EgressPipeMode
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetServiceClass() Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetColor() Ifm_Interfaces_Interface_Qos_QosVllPipe_Color {
	if x != nil {
		return x.Color
	}
	return Ifm_Interfaces_Interface_Qos_QosVllPipe_Color_GREEN
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_QosVllPipe) GetTrustType() Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType {
	if x != nil {
		return x.TrustType
	}
	return Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType_OUTPRI
}

type Ifm_Interfaces_Interface_Qos_LocalIdEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode" json:"mode,omitempty"`
	Both bool                                            `protobuf:"varint,2,opt,name=both,proto3" json:"both,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_LocalIdEnable) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_LocalIdEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_LocalIdEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_LocalIdEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_LocalIdEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_LocalIdEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_LocalIdEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 56}
}

func (x *Ifm_Interfaces_Interface_Qos_LocalIdEnable) GetMode() Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode_SOURCE
}

func (x *Ifm_Interfaces_Interface_Qos_LocalIdEnable) GetBoth() bool {
	if x != nil {
		return x.Both
	}
	return false
}

type Ifm_Interfaces_Interface_Qos_Qppb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policys      *Ifm_Interfaces_Interface_Qos_Qppb_Policys      `protobuf:"bytes,1,opt,name=policys,proto3" json:"policys,omitempty"`
	IpPrecedence *Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence `protobuf:"bytes,2,opt,name=ip_precedence,json=ip-precedence,proto3" json:"ip_precedence,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Qppb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Qppb) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Qppb) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Qppb.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Qppb) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 57}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb) GetPolicys() *Ifm_Interfaces_Interface_Qos_Qppb_Policys {
	if x != nil {
		return x.Policys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb) GetIpPrecedence() *Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence {
	if x != nil {
		return x.IpPrecedence
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_Trusts_Trust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type" json:"type,omitempty"`
	Direction          Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction" json:"direction,omitempty"`
	VlanMode           bool                                                `protobuf:"varint,3,opt,name=vlan_mode,json=vlan-mode,proto3" json:"vlan_mode,omitempty"`
	BeginVlan          uint32                                              `protobuf:"varint,4,opt,name=begin_vlan,json=begin-vlan,proto3" json:"begin_vlan,omitempty"`
	EndVlan            uint32                                              `protobuf:"varint,5,opt,name=end_vlan,json=end-vlan,proto3" json:"end_vlan,omitempty"`
	DiffservDomainName string                                              `protobuf:"bytes,6,opt,name=diffserv_domain_name,json=diffserv-domain-name,proto3" json:"diffserv_domain_name,omitempty"`
	VpnMode            bool                                                `protobuf:"varint,7,opt,name=vpn_mode,json=vpn-mode,proto3" json:"vpn_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Trusts_Trust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Trusts_Trust) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Trusts_Trust.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Trusts_Trust) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) GetType() Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type_IPX_DSCP
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) GetDirection() Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction_INX_OUTBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) GetVlanMode() bool {
	if x != nil {
		return x.VlanMode
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) GetBeginVlan() uint32 {
	if x != nil {
		return x.BeginVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) GetEndVlan() uint32 {
	if x != nil {
		return x.EndVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) GetDiffservDomainName() string {
	if x != nil {
		return x.DiffservDomainName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_Trusts_Trust) GetVpnMode() bool {
	if x != nil {
		return x.VpnMode
	}
	return false
}

type Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName string                                                                         `protobuf:"bytes,1,opt,name=policy_name,json=policy-name,proto3" json:"policy_name,omitempty"`
	Direction  Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction  `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction" json:"direction,omitempty"`
	Layer      Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer      `protobuf:"varint,3,opt,name=layer,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer" json:"layer,omitempty"`
	VlanMode   bool                                                                           `protobuf:"varint,4,opt,name=vlan_mode,json=vlan-mode,proto3" json:"vlan_mode,omitempty"`
	PeVlanId   uint32                                                                         `protobuf:"varint,5,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId     string                                                                         `protobuf:"bytes,6,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Identifier Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier `protobuf:"varint,7,opt,name=identifier,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier" json:"identifier,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) GetDirection() Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) GetLayer() Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer {
	if x != nil {
		return x.Layer
	}
	return Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer_NONE
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) GetVlanMode() bool {
	if x != nil {
		return x.VlanMode
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) GetVlanId() string {
	if x != nil {
		return x.VlanId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply) GetIdentifier() Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier {
	if x != nil {
		return x.Identifier
	}
	return Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier_NO
}

type Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName      string                                                                   `protobuf:"bytes,1,opt,name=profile_name,json=profile-name,proto3" json:"profile_name,omitempty"`
	Direction        Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction        `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction" json:"direction,omitempty"`
	Type             Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type             `protobuf:"varint,3,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type" json:"type,omitempty"`
	PeVlanId         uint32                                                                   `protobuf:"varint,4,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	CeBeginVlanId    uint32                                                                   `protobuf:"varint,5,opt,name=ce_begin_vlan_id,json=ce-begin-vlan-id,proto3" json:"ce_begin_vlan_id,omitempty"`
	CeEndVlanId      uint32                                                                   `protobuf:"varint,6,opt,name=ce_end_vlan_id,json=ce-end-vlan-id,proto3" json:"ce_end_vlan_id,omitempty"`
	IdentifyType     Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType     `protobuf:"varint,7,opt,name=identify_type,json=identify-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType" json:"identify_type,omitempty"`
	LinkageBandwidth Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth `protobuf:"varint,8,opt,name=linkage_bandwidth,json=linkage-bandwidth,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth" json:"linkage_bandwidth,omitempty"`
	GroupName        string                                                                   `protobuf:"bytes,9,opt,name=group_name,json=group-name,proto3" json:"group_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetDirection() Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetType() Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type_INTERFACE
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetCeBeginVlanId() uint32 {
	if x != nil {
		return x.CeBeginVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetCeEndVlanId() uint32 {
	if x != nil {
		return x.CeEndVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetIdentifyType() Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType {
	if x != nil {
		return x.IdentifyType
	}
	return Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType_NONE
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetLinkageBandwidth() Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth {
	if x != nil {
		return x.LinkageBandwidth
	}
	return Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth_DISABLE
}

func (x *Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction            Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction             `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction" json:"direction,omitempty"`
	Cir                  uint32                                                                            `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir                  uint32                                                                            `protobuf:"varint,3,opt,name=pir,proto3" json:"pir,omitempty"`
	FlowQueueName        string                                                                            `protobuf:"bytes,4,opt,name=flow_queue_name,json=flow-queue-name,proto3" json:"flow_queue_name,omitempty"`
	FlowMappingName      string                                                                            `protobuf:"bytes,5,opt,name=flow_mapping_name,json=flow-mapping-name,proto3" json:"flow_mapping_name,omitempty"`
	UserGroupQueueName   string                                                                            `protobuf:"bytes,6,opt,name=user_group_queue_name,json=user-group-queue-name,proto3" json:"user_group_queue_name,omitempty"`
	ServiceTemplateName  string                                                                            `protobuf:"bytes,7,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
	AdjustOnCard         Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard          `protobuf:"varint,8,opt,name=adjust_on_card,json=adjust-on-card,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard" json:"adjust_on_card,omitempty"`
	UserQueueApplysStats *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats `protobuf:"bytes,9,opt,name=user_queue_applys_stats,json=user-queue-applys-stats,proto3" json:"user_queue_applys_stats,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetDirection() Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetFlowQueueName() string {
	if x != nil {
		return x.FlowQueueName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetFlowMappingName() string {
	if x != nil {
		return x.FlowMappingName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetUserGroupQueueName() string {
	if x != nil {
		return x.UserGroupQueueName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetAdjustOnCard() Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard {
	if x != nil {
		return x.AdjustOnCard
	}
	return Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard_DISABLE
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply) GetUserQueueApplysStats() *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats {
	if x != nil {
		return x.UserQueueApplysStats
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueApplysStat []*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat `protobuf:"bytes,1,rep,name=user_queue_applys_stat,json=user-queue-applys-stat,proto3" json:"user_queue_applys_stat,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 3, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats) GetUserQueueApplysStat() []*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat {
	if x != nil {
		return x.UserQueueApplysStat
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass   Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass" json:"service_class,omitempty"`
	PassPackets    uint64                                                                                                            `protobuf:"varint,2,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                                                            `protobuf:"varint,3,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                                                            `protobuf:"varint,4,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                                                            `protobuf:"varint,5,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                                                            `protobuf:"varint,6,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                                                            `protobuf:"varint,7,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                                                            `protobuf:"varint,8,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                                                            `protobuf:"varint,9,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 3, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetServiceClass() Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass" json:"service_class,omitempty"`
	PortWredName string                                                         `protobuf:"bytes,2,opt,name=port_wred_name,json=port-wred-name,proto3" json:"port_wred_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue) GetServiceClass() Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue) GetPortWredName() string {
	if x != nil {
		return x.PortWredName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass" json:"service_class,omitempty"`
	PortWredName string                                                                   `protobuf:"bytes,2,opt,name=port_wred_name,json=port-wred-name,proto3" json:"port_wred_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 5, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState) GetServiceClass() Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState) GetPortWredName() string {
	if x != nil {
		return x.PortWredName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueTemplateName string `protobuf:"bytes,1,opt,name=port_queue_template_name,json=port-queue-template-name,proto3" json:"port_queue_template_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 6, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply) GetPortQueueTemplateName() string {
	if x != nil {
		return x.PortQueueTemplateName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass     Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass" json:"service_class,omitempty"`
	BufferPercentage uint32                                                                   `protobuf:"varint,2,opt,name=buffer_percentage,json=buffer-percentage,proto3" json:"buffer_percentage,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 7, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm) GetServiceClass() Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm) GetBufferPercentage() uint32 {
	if x != nil {
		return x.BufferPercentage
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass     Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass" json:"service_class,omitempty"`
	BufferPercentage uint32                                                                             `protobuf:"varint,2,opt,name=buffer_percentage,json=buffer-percentage,proto3" json:"buffer_percentage,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 8, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState) GetServiceClass() Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState) GetBufferPercentage() uint32 {
	if x != nil {
		return x.BufferPercentage
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass             Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass" json:"service_class,omitempty"`
	Type                     Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type         `protobuf:"varint,2,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type" json:"type,omitempty"`
	DiscardNumber            uint32                                                                                 `protobuf:"varint,3,opt,name=discard_number,json=discard-number,proto3" json:"discard_number,omitempty"`
	DiscardPacketCoefficient uint32                                                                                 `protobuf:"varint,4,opt,name=discard_packet_coefficient,json=discard-packet-coefficient,proto3" json:"discard_packet_coefficient,omitempty"`
	DiscardPacketExponent    uint32                                                                                 `protobuf:"varint,5,opt,name=discard_packet_exponent,json=discard-packet-exponent,proto3" json:"discard_packet_exponent,omitempty"`
	IntervalTime             uint32                                                                                 `protobuf:"varint,6,opt,name=interval_time,json=interval-time,proto3" json:"interval_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 9, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) GetServiceClass() Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) GetType() Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) GetDiscardNumber() uint32 {
	if x != nil {
		return x.DiscardNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) GetDiscardPacketCoefficient() uint32 {
	if x != nil {
		return x.DiscardPacketCoefficient
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) GetDiscardPacketExponent() uint32 {
	if x != nil {
		return x.DiscardPacketExponent
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm) GetIntervalTime() uint32 {
	if x != nil {
		return x.IntervalTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval `protobuf:"varint,1,opt,name=interval,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval" json:"interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 10, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat) GetInterval() Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval {
	if x != nil {
		return x.Interval
	}
	return Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_INVALID_ENUM_VALUE_Interval
}

type Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass" json:"service_class,omitempty"`
	Priority     Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority     `protobuf:"varint,2,opt,name=priority,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority" json:"priority,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 12, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue) GetServiceClass() Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue) GetPriority() Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority {
	if x != nil {
		return x.Priority
	}
	return Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority_PQ
}

type Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueTemplateName string `protobuf:"bytes,1,opt,name=queue_template_name,json=queue-template-name,proto3" json:"queue_template_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 13, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply) GetQueueTemplateName() string {
	if x != nil {
		return x.QueueTemplateName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandwidthUsageThreshold uint32 `protobuf:"varint,1,opt,name=bandwidth_usage_threshold,json=bandwidth-usage-threshold,proto3" json:"bandwidth_usage_threshold,omitempty"`
	ResumeThreshold         uint32 `protobuf:"varint,2,opt,name=resume_threshold,json=resume-threshold,proto3" json:"resume_threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 14, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm) GetBandwidthUsageThreshold() uint32 {
	if x != nil {
		return x.BandwidthUsageThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm) GetResumeThreshold() uint32 {
	if x != nil {
		return x.ResumeThreshold
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueueTemplateName string `protobuf:"bytes,1,opt,name=flow_queue_template_name,json=flow-queue-template-name,proto3" json:"flow_queue_template_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 15, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply) GetFlowQueueTemplateName() string {
	if x != nil {
		return x.FlowQueueTemplateName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTemplateName string `protobuf:"bytes,1,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 16, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass" json:"service_class,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 17, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass) GetServiceClass() Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass_BE
}

type Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction" json:"direction,omitempty"`
	Shaping   uint32                                                                              `protobuf:"varint,2,opt,name=shaping,proto3" json:"shaping,omitempty"`
	Pbs       uint32                                                                              `protobuf:"varint,3,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 18, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) GetDirection() Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_INVALID_ENUM_VALUE_Direction
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) GetShaping() uint32 {
	if x != nil {
		return x.Shaping
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction" json:"direction,omitempty"`
	Shaping   uint32                                                                          `protobuf:"varint,2,opt,name=shaping,proto3" json:"shaping,omitempty"`
	Pbs       uint32                                                                          `protobuf:"varint,3,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 19, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) GetDirection() Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_INVALID_ENUM_VALUE_Direction
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) GetShaping() uint32 {
	if x != nil {
		return x.Shaping
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pbs                 uint32                                                           `protobuf:"varint,1,opt,name=pbs,proto3" json:"pbs,omitempty"`
	NetworkHeaderLength int32                                                            `protobuf:"varint,2,opt,name=network_header_length,json=network-header-length,proto3" json:"network_header_length,omitempty"`
	WeightMode          Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode `protobuf:"varint,3,opt,name=weight_mode,json=weight-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode" json:"weight_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 20, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) GetNetworkHeaderLength() int32 {
	if x != nil {
		return x.NetworkHeaderLength
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping) GetWeightMode() Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode {
	if x != nil {
		return x.WeightMode
	}
	return Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_INVALID_ENUM_VALUE_WeightMode
}

type Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapType  Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType `protobuf:"varint,1,opt,name=map_type,json=map-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType" json:"map_type,omitempty"`
	VlanMode bool                                                                              `protobuf:"varint,2,opt,name=vlan_mode,json=vlan-mode,proto3" json:"vlan_mode,omitempty"`
	VlanId   string                                                                            `protobuf:"bytes,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 21, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) GetMapType() Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType {
	if x != nil {
		return x.MapType
	}
	return Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_INVALID_ENUM_VALUE_MapType
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) GetVlanMode() bool {
	if x != nil {
		return x.VlanMode
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable) GetVlanId() string {
	if x != nil {
		return x.VlanId
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffservDomainName string `protobuf:"bytes,1,opt,name=diffserv_domain_name,json=diffserv-domain-name,proto3" json:"diffserv_domain_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 22, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable) GetDiffservDomainName() string {
	if x != nil {
		return x.DiffservDomainName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffservDomainName string `protobuf:"bytes,1,opt,name=diffserv_domain_name,json=diffserv-domain-name,proto3" json:"diffserv_domain_name,omitempty"`
	VlanId             string `protobuf:"bytes,2,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 23, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan) GetDiffservDomainName() string {
	if x != nil {
		return x.DiffservDomainName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan) GetVlanId() string {
	if x != nil {
		return x.VlanId
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_Cars_Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction          Ifm_Interfaces_Interface_Qos_Cars_Car_Direction          `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_Direction" json:"direction,omitempty"`
	VlanMode           bool                                                     `protobuf:"varint,2,opt,name=vlan_mode,json=vlan-mode,proto3" json:"vlan_mode,omitempty"`
	BeginVlan          uint32                                                   `protobuf:"varint,3,opt,name=begin_vlan,json=begin-vlan,proto3" json:"begin_vlan,omitempty"`
	EndVlan            uint32                                                   `protobuf:"varint,4,opt,name=end_vlan,json=end-vlan,proto3" json:"end_vlan,omitempty"`
	Cbs                uint32                                                   `protobuf:"varint,5,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs                uint32                                                   `protobuf:"varint,6,opt,name=pbs,proto3" json:"pbs,omitempty"`
	AdjustValue        int32                                                    `protobuf:"varint,7,opt,name=adjust_value,json=adjust-value,proto3" json:"adjust_value,omitempty"`
	GreenAction        Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction        `protobuf:"varint,8,opt,name=green_action,json=green-action,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction" json:"green_action,omitempty"`
	GreenServiceClass  Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass  `protobuf:"varint,9,opt,name=green_service_class,json=green-service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass" json:"green_service_class,omitempty"`
	GreenColor         Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor         `protobuf:"varint,10,opt,name=green_color,json=green-color,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor" json:"green_color,omitempty"`
	YellowAction       Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction       `protobuf:"varint,11,opt,name=yellow_action,json=yellow-action,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction" json:"yellow_action,omitempty"`
	YellowServiceClass Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass `protobuf:"varint,12,opt,name=yellow_service_class,json=yellow-service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass" json:"yellow_service_class,omitempty"`
	YellowColor        Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor        `protobuf:"varint,13,opt,name=yellow_color,json=yellow-color,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor" json:"yellow_color,omitempty"`
	RedAction          Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction          `protobuf:"varint,14,opt,name=red_action,json=red-action,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction" json:"red_action,omitempty"`
	RedServiceClass    Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass    `protobuf:"varint,15,opt,name=red_service_class,json=red-service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass" json:"red_service_class,omitempty"`
	RedColor           Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor           `protobuf:"varint,16,opt,name=red_color,json=red-color,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor" json:"red_color,omitempty"`
	ColorAware         Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware         `protobuf:"varint,17,opt,name=color_aware,json=color-aware,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware" json:"color_aware,omitempty"`
	Identifier         Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier         `protobuf:"varint,18,opt,name=identifier,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier" json:"identifier,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Cars_Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Cars_Car) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Cars_Car.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Cars_Car) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 25, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetDirection() Ifm_Interfaces_Interface_Qos_Cars_Car_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetVlanMode() bool {
	if x != nil {
		return x.VlanMode
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetBeginVlan() uint32 {
	if x != nil {
		return x.BeginVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetEndVlan() uint32 {
	if x != nil {
		return x.EndVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetAdjustValue() int32 {
	if x != nil {
		return x.AdjustValue
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetGreenAction() Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction {
	if x != nil {
		return x.GreenAction
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction_PASS
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetGreenServiceClass() Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass {
	if x != nil {
		return x.GreenServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetGreenColor() Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor {
	if x != nil {
		return x.GreenColor
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor_GREEN
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetYellowAction() Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction {
	if x != nil {
		return x.YellowAction
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction_PASS
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetYellowServiceClass() Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass {
	if x != nil {
		return x.YellowServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetYellowColor() Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor {
	if x != nil {
		return x.YellowColor
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor_GREEN
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetRedAction() Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction {
	if x != nil {
		return x.RedAction
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction_PASS
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetRedServiceClass() Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass {
	if x != nil {
		return x.RedServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetRedColor() Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor {
	if x != nil {
		return x.RedColor
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor_GREEN
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetColorAware() Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware {
	if x != nil {
		return x.ColorAware
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_INVALID_ENUM_VALUE_ColorAware
}

func (x *Ifm_Interfaces_Interface_Qos_Cars_Car) GetIdentifier() Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier {
	if x != nil {
		return x.Identifier
	}
	return Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier_NO
}

type Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanMode bool   `protobuf:"varint,1,opt,name=vlan_mode,json=vlan-mode,proto3" json:"vlan_mode,omitempty"`
	VlanId   string `protobuf:"bytes,2,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 30, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence) GetVlanMode() bool {
	if x != nil {
		return x.VlanMode
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence) GetVlanId() string {
	if x != nil {
		return x.VlanId
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction        Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction" json:"direction,omitempty"`
	SubPortQueueName string                                                                      `protobuf:"bytes,2,opt,name=sub_port_queue_name,json=sub-port-queue-name,proto3" json:"sub_port_queue_name,omitempty"`
	GroupName        string                                                                      `protobuf:"bytes,3,opt,name=group_name,json=group-name,proto3" json:"group_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 32, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) GetDirection() Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_INVALID_ENUM_VALUE_Direction
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) GetSubPortQueueName() string {
	if x != nil {
		return x.SubPortQueueName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction          Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction      `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction" json:"direction,omitempty"`
	PeBeginVlanId      uint32                                                                                               `protobuf:"varint,2,opt,name=pe_begin_vlan_id,json=pe-begin-vlan-id,proto3" json:"pe_begin_vlan_id,omitempty"`
	PeEndVlanId        uint32                                                                                               `protobuf:"varint,3,opt,name=pe_end_vlan_id,json=pe-end-vlan-id,proto3" json:"pe_end_vlan_id,omitempty"`
	CeBeginVlanId      uint32                                                                                               `protobuf:"varint,4,opt,name=ce_begin_vlan_id,json=ce-begin-vlan-id,proto3" json:"ce_begin_vlan_id,omitempty"`
	CeEndVlanId        uint32                                                                                               `protobuf:"varint,5,opt,name=ce_end_vlan_id,json=ce-end-vlan-id,proto3" json:"ce_end_vlan_id,omitempty"`
	IdentifierType     Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType `protobuf:"varint,6,opt,name=identifier_type,json=identifier-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType" json:"identifier_type,omitempty"`
	UserGroupQueueName string                                                                                               `protobuf:"bytes,7,opt,name=user_group_queue_name,json=user-group-queue-name,proto3" json:"user_group_queue_name,omitempty"`
	GroupName          string                                                                                               `protobuf:"bytes,8,opt,name=group_name,json=group-name,proto3" json:"group_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 33, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetDirection() Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetPeBeginVlanId() uint32 {
	if x != nil {
		return x.PeBeginVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetPeEndVlanId() uint32 {
	if x != nil {
		return x.PeEndVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetCeBeginVlanId() uint32 {
	if x != nil {
		return x.CeBeginVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetCeEndVlanId() uint32 {
	if x != nil {
		return x.CeEndVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetIdentifierType() Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType {
	if x != nil {
		return x.IdentifierType
	}
	return Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType_NONE
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetUserGroupQueueName() string {
	if x != nil {
		return x.UserGroupQueueName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccessType Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType `protobuf:"varint,1,opt,name=user_access_type,json=user-access-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType" json:"user_access_type,omitempty"`
	Direction      Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction      `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction" json:"direction,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 34, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler) GetUserAccessType() Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType {
	if x != nil {
		return x.UserAccessType
	}
	return Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_INVALID_ENUM_VALUE_UserAccessType
}

func (x *Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler) GetDirection() Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction_INBOUND
}

type Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction" json:"direction,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 35, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode) GetDirection() Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_INVALID_ENUM_VALUE_Direction
}

type Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction" json:"direction,omitempty"`
	PoolId    Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId    `protobuf:"varint,2,opt,name=pool_id,json=pool-id,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId" json:"pool_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 37, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool) GetDirection() Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool) GetPoolId() Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId {
	if x != nil {
		return x.PoolId
	}
	return Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId_POOLX_0
}

type Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction      Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction" json:"direction,omitempty"`
	GroupQueueName string                                                                          `protobuf:"bytes,2,opt,name=group_queue_name,json=group-queue-name,proto3" json:"group_queue_name,omitempty"`
	GroupName      string                                                                          `protobuf:"bytes,3,opt,name=group_name,json=group-name,proto3" json:"group_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 38, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) GetDirection() Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) GetGroupQueueName() string {
	if x != nil {
		return x.GroupQueueName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberLinkSchedulerType Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType `protobuf:"varint,1,opt,name=member_link_scheduler_type,json=member-link-scheduler-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType" json:"member_link_scheduler_type,omitempty"`
	Direction               Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction               `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction" json:"direction,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 40, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler) GetMemberLinkSchedulerType() Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType {
	if x != nil {
		return x.MemberLinkSchedulerType
	}
	return Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_INVALID_ENUM_VALUE_MemberLinkSchedulerType
}

func (x *Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler) GetDirection() Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_INVALID_ENUM_VALUE_Direction
}

type Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction     Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction" json:"direction,omitempty"`
	PeBeginVlanId uint32                                                                            `protobuf:"varint,2,opt,name=pe_begin_vlan_id,json=pe-begin-vlan-id,proto3" json:"pe_begin_vlan_id,omitempty"`
	PeEndVlanId   uint32                                                                            `protobuf:"varint,3,opt,name=pe_end_vlan_id,json=pe-end-vlan-id,proto3" json:"pe_end_vlan_id,omitempty"`
	CeBeginVlanId uint32                                                                            `protobuf:"varint,4,opt,name=ce_begin_vlan_id,json=ce-begin-vlan-id,proto3" json:"ce_begin_vlan_id,omitempty"`
	CeEndVlanId   uint32                                                                            `protobuf:"varint,5,opt,name=ce_end_vlan_id,json=ce-end-vlan-id,proto3" json:"ce_end_vlan_id,omitempty"`
	ProfileName   string                                                                            `protobuf:"bytes,6,opt,name=profile_name,json=profile-name,proto3" json:"profile_name,omitempty"`
	EachVlan      Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan  `protobuf:"varint,7,opt,name=each_vlan,json=each-vlan,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan" json:"each_vlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 46, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) GetDirection() Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) GetPeBeginVlanId() uint32 {
	if x != nil {
		return x.PeBeginVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) GetPeEndVlanId() uint32 {
	if x != nil {
		return x.PeEndVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) GetCeBeginVlanId() uint32 {
	if x != nil {
		return x.CeBeginVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) GetCeEndVlanId() uint32 {
	if x != nil {
		return x.CeEndVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply) GetEachVlan() Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan {
	if x != nil {
		return x.EachVlan
	}
	return Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan_NO
}

type Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTemplateName string `protobuf:"bytes,1,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 47, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecificServiceClass []*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass `protobuf:"bytes,1,rep,name=specific_service_class,json=specific-service-class,proto3" json:"specific_service_class,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 47, 1}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss) GetSpecificServiceClass() []*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass {
	if x != nil {
		return x.SpecificServiceClass
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass        Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass" json:"service_class,omitempty"`
	ServiceTemplateName string                                                                                                      `protobuf:"bytes,2,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 47, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass) GetServiceClass() Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass_BE
}

func (x *Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type" json:"type,omitempty"`
	Direction          Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction" json:"direction,omitempty"`
	VlanMode           bool                                                            `protobuf:"varint,3,opt,name=vlan_mode,json=vlan-mode,proto3" json:"vlan_mode,omitempty"`
	BeginVlan          uint32                                                          `protobuf:"varint,4,opt,name=begin_vlan,json=begin-vlan,proto3" json:"begin_vlan,omitempty"`
	EndVlan            uint32                                                          `protobuf:"varint,5,opt,name=end_vlan,json=end-vlan,proto3" json:"end_vlan,omitempty"`
	DiffservDomainName string                                                          `protobuf:"bytes,6,opt,name=diffserv_domain_name,json=diffserv-domain-name,proto3" json:"diffserv_domain_name,omitempty"`
	Type_8021P         Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P `protobuf:"varint,7,opt,name=type_8021p,json=type-8021p,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P" json:"type_8021p,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 49, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) GetType() Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type_IPX_DSCP
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) GetDirection() Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_INVALID_ENUM_VALUE_Direction
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) GetVlanMode() bool {
	if x != nil {
		return x.VlanMode
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) GetBeginVlan() uint32 {
	if x != nil {
		return x.BeginVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) GetEndVlan() uint32 {
	if x != nil {
		return x.EndVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) GetDiffservDomainName() string {
	if x != nil {
		return x.DiffservDomainName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote) GetType_8021P() Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P {
	if x != nil {
		return x.Type_8021P
	}
	return Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_INVALID_ENUM_VALUE_Type8021P
}

type Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId      string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	WeightValue uint32 `protobuf:"varint,2,opt,name=weight_value,json=weight-value,proto3" json:"weight_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 51, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight) GetWeightValue() uint32 {
	if x != nil {
		return x.WeightValue
	}
	return 0
}

type Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction   Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction" json:"direction,omitempty"`
	VniId       uint32                                                        `protobuf:"varint,2,opt,name=vni_id,json=vni-id,proto3" json:"vni_id,omitempty"`
	SourceIp    string                                                        `protobuf:"bytes,3,opt,name=source_ip,json=source-ip,proto3" json:"source_ip,omitempty"`
	PeerIp      string                                                        `protobuf:"bytes,4,opt,name=peer_ip,json=peer-ip,proto3" json:"peer_ip,omitempty"`
	ProfileName string                                                        `protobuf:"bytes,5,opt,name=profile_name,json=profile-name,proto3" json:"profile_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 54, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) GetDirection() Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) GetVniId() uint32 {
	if x != nil {
		return x.VniId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type Ifm_Interfaces_Interface_Qos_Qppb_Policys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy []*Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy `protobuf:"bytes,1,rep,name=policy,proto3" json:"policy,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Qppb_Policys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Qppb_Policys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Qppb_Policys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Qppb_Policys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 57, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys) GetPolicy() []*Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode" json:"mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 57, 1}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence) GetMode() Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode_SOURCE
}

type Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction  Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction" json:"direction,omitempty"`
	PolicyName string                                                     `protobuf:"bytes,2,opt,name=policy_name,json=policy-name,proto3" json:"policy_name,omitempty"`
	Mode       Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode      `protobuf:"varint,3,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode" json:"mode,omitempty"`
	ShareMode  bool                                                       `protobuf:"varint,4,opt,name=share_mode,json=share-mode,proto3" json:"share_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) Reset() {
	*x = Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 57, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) GetDirection() Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_INVALID_ENUM_VALUE_Direction
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) GetMode() Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode_SOURCE
}

func (x *Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy) GetShareMode() bool {
	if x != nil {
		return x.ShareMode
	}
	return false
}

type Ifm_Interfaces_Interface_Nve_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceVtepIp   string `protobuf:"bytes,1,opt,name=source_vtep_ip,json=source-vtep-ip,proto3" json:"source_vtep_ip,omitempty"`
	SourceVtepIpv6 string `protobuf:"bytes,2,opt,name=source_vtep_ipv6,json=source-vtep-ipv6,proto3" json:"source_vtep_ipv6,omitempty"`
	PhysAddress    string `protobuf:"bytes,3,opt,name=phys_address,json=phys-address,proto3" json:"phys_address,omitempty"`
	BypassVtepIp   string `protobuf:"bytes,4,opt,name=bypass_vtep_ip,json=bypass-vtep-ip,proto3" json:"bypass_vtep_ip,omitempty"`
	BypassVtepIpv6 string `protobuf:"bytes,5,opt,name=bypass_vtep_ipv6,json=bypass-vtep-ipv6,proto3" json:"bypass_vtep_ipv6,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) Reset() {
	*x = Ifm_Interfaces_Interface_Nve_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nve_Attribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nve_Attribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nve_Attribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 22, 0}
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetSourceVtepIp() string {
	if x != nil {
		return x.SourceVtepIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetSourceVtepIpv6() string {
	if x != nil {
		return x.SourceVtepIpv6
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetPhysAddress() string {
	if x != nil {
		return x.PhysAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetBypassVtepIp() string {
	if x != nil {
		return x.BypassVtepIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetBypassVtepIpv6() string {
	if x != nil {
		return x.BypassVtepIpv6
	}
	return ""
}

type Ifm_Interfaces_Interface_Nve_Pip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIp string `protobuf:"bytes,1,opt,name=source_ip,json=source-ip,proto3" json:"source_ip,omitempty"`
	PeerIp   string `protobuf:"bytes,2,opt,name=peer_ip,json=peer-ip,proto3" json:"peer_ip,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nve_Pip) Reset() {
	*x = Ifm_Interfaces_Interface_Nve_Pip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nve_Pip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nve_Pip) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nve_Pip) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nve_Pip.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nve_Pip) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 22, 1}
}

func (x *Ifm_Interfaces_Interface_Nve_Pip) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Pip) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

type Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0}
}

func (x *Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Ifm_Interfaces_Interface_Bas_BasInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Information *Ifm_Interfaces_Interface_Bas_BasInterface_Information `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"`
	AccessUsers *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers `protobuf:"bytes,2,opt,name=access_users,json=access-users,proto3" json:"access_users,omitempty"`
	Statistics  *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics  `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_BasInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_BasInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_BasInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_BasInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface) GetInformation() *Ifm_Interfaces_Interface_Bas_BasInterface_Information {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface) GetAccessUsers() *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers {
	if x != nil {
		return x.AccessUsers
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface) GetStatistics() *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type Ifm_Interfaces_Interface_Bas_PppoeBasStatics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveSession          uint32 `protobuf:"varint,1,opt,name=active_session,json=active-session,proto3" json:"active_session,omitempty"`
	TotalSessions          uint32 `protobuf:"varint,2,opt,name=total_sessions,json=total-sessions,proto3" json:"total_sessions,omitempty"`
	ReceivePadiPackets     uint32 `protobuf:"varint,3,opt,name=receive_padi_packets,json=receive-padi-packets,proto3" json:"receive_padi_packets,omitempty"`
	DiscardPadiPackets     uint32 `protobuf:"varint,4,opt,name=discard_padi_packets,json=discard-padi-packets,proto3" json:"discard_padi_packets,omitempty"`
	SendPadoPackets        uint32 `protobuf:"varint,5,opt,name=send_pado_packets,json=send-pado-packets,proto3" json:"send_pado_packets,omitempty"`
	ReceivePadrPackets     uint32 `protobuf:"varint,6,opt,name=receive_padr_packets,json=receive-padr-packets,proto3" json:"receive_padr_packets,omitempty"`
	DiscardPadrPackets     uint32 `protobuf:"varint,7,opt,name=discard_padr_packets,json=discard-padr-packets,proto3" json:"discard_padr_packets,omitempty"`
	SendPadsPackets        uint32 `protobuf:"varint,8,opt,name=send_pads_packets,json=send-pads-packets,proto3" json:"send_pads_packets,omitempty"`
	DiscardPadrSameMac     uint32 `protobuf:"varint,9,opt,name=discard_padr_same_mac,json=discard-padr-same-mac,proto3" json:"discard_padr_same_mac,omitempty"`
	ReceivePadtPackets     uint32 `protobuf:"varint,10,opt,name=receive_padt_packets,json=receive-padt-packets,proto3" json:"receive_padt_packets,omitempty"`
	DiscardPadtPackets     uint32 `protobuf:"varint,11,opt,name=discard_padt_packets,json=discard-padt-packets,proto3" json:"discard_padt_packets,omitempty"`
	SendPadtPackets        uint32 `protobuf:"varint,12,opt,name=send_padt_packets,json=send-padt-packets,proto3" json:"send_padt_packets,omitempty"`
	SendPadmPackets        uint32 `protobuf:"varint,13,opt,name=send_padm_packets,json=send-padm-packets,proto3" json:"send_padm_packets,omitempty"`
	SendPadmUrlPackets     uint32 `protobuf:"varint,14,opt,name=send_padm_url_packets,json=send-padm-url-packets,proto3" json:"send_padm_url_packets,omitempty"`
	SendPadmMotmPackets    uint32 `protobuf:"varint,15,opt,name=send_padm_motm_packets,json=send-padm-motm-packets,proto3" json:"send_padm_motm_packets,omitempty"`
	SendPadnPackets        uint32 `protobuf:"varint,16,opt,name=send_padn_packets,json=send-padn-packets,proto3" json:"send_padn_packets,omitempty"`
	ReceiveSessionPackets  uint32 `protobuf:"varint,17,opt,name=receive_session_packets,json=receive-session-packets,proto3" json:"receive_session_packets,omitempty"`
	DiscardSessionPackets  uint32 `protobuf:"varint,18,opt,name=discard_session_packets,json=discard-session-packets,proto3" json:"discard_session_packets,omitempty"`
	SendSessionPackets     uint32 `protobuf:"varint,19,opt,name=send_session_packets,json=send-session-packets,proto3" json:"send_session_packets,omitempty"`
	ReceivePackets         uint32 `protobuf:"varint,20,opt,name=receive_packets,json=receive-packets,proto3" json:"receive_packets,omitempty"`
	DiscardPackets         uint32 `protobuf:"varint,21,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	InvalidVersion         uint32 `protobuf:"varint,22,opt,name=invalid_version,json=invalid-version,proto3" json:"invalid_version,omitempty"`
	InvalidPadCode         uint32 `protobuf:"varint,23,opt,name=invalid_pad_code,json=invalid-pad-code,proto3" json:"invalid_pad_code,omitempty"`
	InvalidPadTags         uint32 `protobuf:"varint,24,opt,name=invalid_pad_tags,json=invalid-pad-tags,proto3" json:"invalid_pad_tags,omitempty"`
	InvalidPadTagLength    uint32 `protobuf:"varint,25,opt,name=invalid_pad_tag_length,json=invalid-pad-tag-length,proto3" json:"invalid_pad_tag_length,omitempty"`
	InvalidPadType         uint32 `protobuf:"varint,26,opt,name=invalid_pad_type,json=invalid-pad-type,proto3" json:"invalid_pad_type,omitempty"`
	InvalidPadiSessions    uint32 `protobuf:"varint,27,opt,name=invalid_padi_sessions,json=invalid-padi-sessions,proto3" json:"invalid_padi_sessions,omitempty"`
	InvalidPadrSessions    uint32 `protobuf:"varint,28,opt,name=invalid_padr_sessions,json=invalid-padr-sessions,proto3" json:"invalid_padr_sessions,omitempty"`
	InvalidPadPacketLength uint32 `protobuf:"varint,29,opt,name=invalid_pad_packet_length,json=invalid-pad-packet-length,proto3" json:"invalid_pad_packet_length,omitempty"`
	OtherInvalidPadPackets uint32 `protobuf:"varint,30,opt,name=other_invalid_pad_packets,json=other-invalid-pad-packets,proto3" json:"other_invalid_pad_packets,omitempty"`
	TotalInvalidPadPackets uint32 `protobuf:"varint,31,opt,name=total_invalid_pad_packets,json=total-invalid-pad-packets,proto3" json:"total_invalid_pad_packets,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_PppoeBasStatics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_PppoeBasStatics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_PppoeBasStatics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_PppoeBasStatics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 2}
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetActiveSession() uint32 {
	if x != nil {
		return x.ActiveSession
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetTotalSessions() uint32 {
	if x != nil {
		return x.TotalSessions
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetReceivePadiPackets() uint32 {
	if x != nil {
		return x.ReceivePadiPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetDiscardPadiPackets() uint32 {
	if x != nil {
		return x.DiscardPadiPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendPadoPackets() uint32 {
	if x != nil {
		return x.SendPadoPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetReceivePadrPackets() uint32 {
	if x != nil {
		return x.ReceivePadrPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetDiscardPadrPackets() uint32 {
	if x != nil {
		return x.DiscardPadrPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendPadsPackets() uint32 {
	if x != nil {
		return x.SendPadsPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetDiscardPadrSameMac() uint32 {
	if x != nil {
		return x.DiscardPadrSameMac
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetReceivePadtPackets() uint32 {
	if x != nil {
		return x.ReceivePadtPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetDiscardPadtPackets() uint32 {
	if x != nil {
		return x.DiscardPadtPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendPadtPackets() uint32 {
	if x != nil {
		return x.SendPadtPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendPadmPackets() uint32 {
	if x != nil {
		return x.SendPadmPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendPadmUrlPackets() uint32 {
	if x != nil {
		return x.SendPadmUrlPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendPadmMotmPackets() uint32 {
	if x != nil {
		return x.SendPadmMotmPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendPadnPackets() uint32 {
	if x != nil {
		return x.SendPadnPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetReceiveSessionPackets() uint32 {
	if x != nil {
		return x.ReceiveSessionPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetDiscardSessionPackets() uint32 {
	if x != nil {
		return x.DiscardSessionPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetSendSessionPackets() uint32 {
	if x != nil {
		return x.SendSessionPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetReceivePackets() uint32 {
	if x != nil {
		return x.ReceivePackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetDiscardPackets() uint32 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidVersion() uint32 {
	if x != nil {
		return x.InvalidVersion
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidPadCode() uint32 {
	if x != nil {
		return x.InvalidPadCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidPadTags() uint32 {
	if x != nil {
		return x.InvalidPadTags
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidPadTagLength() uint32 {
	if x != nil {
		return x.InvalidPadTagLength
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidPadType() uint32 {
	if x != nil {
		return x.InvalidPadType
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidPadiSessions() uint32 {
	if x != nil {
		return x.InvalidPadiSessions
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidPadrSessions() uint32 {
	if x != nil {
		return x.InvalidPadrSessions
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetInvalidPadPacketLength() uint32 {
	if x != nil {
		return x.InvalidPadPacketLength
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetOtherInvalidPadPackets() uint32 {
	if x != nil {
		return x.OtherInvalidPadPackets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppoeBasStatics) GetTotalInvalidPadPackets() uint32 {
	if x != nil {
		return x.TotalInvalidPadPackets
	}
	return 0
}

type Ifm_Interfaces_Interface_Bas_PppBasStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendEchoRequest                 uint32 `protobuf:"varint,1,opt,name=send_echo_request,json=send-echo-request,proto3" json:"send_echo_request,omitempty"`
	SendEchoReply                   uint32 `protobuf:"varint,2,opt,name=send_echo_reply,json=send-echo-reply,proto3" json:"send_echo_reply,omitempty"`
	SendEchoFailed                  uint32 `protobuf:"varint,3,opt,name=send_echo_failed,json=send-echo-failed,proto3" json:"send_echo_failed,omitempty"`
	ReceiveEchoReply                uint32 `protobuf:"varint,4,opt,name=receive_echo_reply,json=receive-echo-reply,proto3" json:"receive_echo_reply,omitempty"`
	ReceiveEchoRequest              uint32 `protobuf:"varint,5,opt,name=receive_echo_request,json=receive-echo-request,proto3" json:"receive_echo_request,omitempty"`
	SendEchoReceiptFast             uint32 `protobuf:"varint,6,opt,name=send_echo_receipt_fast,json=send-echo-receipt-fast,proto3" json:"send_echo_receipt_fast,omitempty"`
	ReceiveEchoRequestFast          uint32 `protobuf:"varint,7,opt,name=receive_echo_request_fast,json=receive-echo-request-fast,proto3" json:"receive_echo_request_fast,omitempty"`
	SendLcpConnectionRequest        uint32 `protobuf:"varint,8,opt,name=send_lcp_connection_request,json=send-lcp-connection-request,proto3" json:"send_lcp_connection_request,omitempty"`
	SendLcpConnectionNak            uint32 `protobuf:"varint,9,opt,name=send_lcp_connection_nak,json=send-lcp-connection-nak,proto3" json:"send_lcp_connection_nak,omitempty"`
	SendLcpConnectionRejection      uint32 `protobuf:"varint,10,opt,name=send_lcp_connection_rejection,json=send-lcp-connection-rejection,proto3" json:"send_lcp_connection_rejection,omitempty"`
	SendLcpConnectionAck            uint32 `protobuf:"varint,11,opt,name=send_lcp_connection_ack,json=send-lcp-connection-ack,proto3" json:"send_lcp_connection_ack,omitempty"`
	SendLcpCodeRejection            uint32 `protobuf:"varint,12,opt,name=send_lcp_code_rejection,json=send-lcp-code-rejection,proto3" json:"send_lcp_code_rejection,omitempty"`
	SendLcpProtocolRejection        uint32 `protobuf:"varint,13,opt,name=send_lcp_protocol_rejection,json=send-lcp-protocol-rejection,proto3" json:"send_lcp_protocol_rejection,omitempty"`
	SendLcpTerminationRequest       uint32 `protobuf:"varint,14,opt,name=send_lcp_termination_request,json=send-lcp-termination-request,proto3" json:"send_lcp_termination_request,omitempty"`
	SendLcpTerminationAck           uint32 `protobuf:"varint,15,opt,name=send_lcp_termination_ack,json=send-lcp-termination-ack,proto3" json:"send_lcp_termination_ack,omitempty"`
	ReceiveLcpConnectionRequest     uint32 `protobuf:"varint,16,opt,name=receive_lcp_connection_request,json=receive-lcp-connection-request,proto3" json:"receive_lcp_connection_request,omitempty"`
	ReceiveLcpConnectionNak         uint32 `protobuf:"varint,17,opt,name=receive_lcp_connection_nak,json=receive-lcp-connection-nak,proto3" json:"receive_lcp_connection_nak,omitempty"`
	ReceiveLcpConnectionRejection   uint32 `protobuf:"varint,18,opt,name=receive_lcp_connection_rejection,json=receive-lcp-connection-rejection,proto3" json:"receive_lcp_connection_rejection,omitempty"`
	ReceiveLcpConnectionAck         uint32 `protobuf:"varint,19,opt,name=receive_lcp_connection_ack,json=receive-lcp-connection-ack,proto3" json:"receive_lcp_connection_ack,omitempty"`
	ReceiveLcpCodeRejection         uint32 `protobuf:"varint,20,opt,name=receive_lcp_code_rejection,json=receive-lcp-code-rejection,proto3" json:"receive_lcp_code_rejection,omitempty"`
	ReceiveLcpProtocolRejection     uint32 `protobuf:"varint,21,opt,name=receive_lcp_protocol_rejection,json=receive-lcp-protocol-rejection,proto3" json:"receive_lcp_protocol_rejection,omitempty"`
	ReceiveLcpTerminationRequest    uint32 `protobuf:"varint,22,opt,name=receive_lcp_termination_request,json=receive-lcp-termination-request,proto3" json:"receive_lcp_termination_request,omitempty"`
	ReceiveLcpTerminationAck        uint32 `protobuf:"varint,23,opt,name=receive_lcp_termination_ack,json=receive-lcp-termination-ack,proto3" json:"receive_lcp_termination_ack,omitempty"`
	SendIpcpConnectionRequest       uint32 `protobuf:"varint,24,opt,name=send_ipcp_connection_request,json=send-ipcp-connection-request,proto3" json:"send_ipcp_connection_request,omitempty"`
	SendIpcpConnectionNak           uint32 `protobuf:"varint,25,opt,name=send_ipcp_connection_nak,json=send-ipcp-connection-nak,proto3" json:"send_ipcp_connection_nak,omitempty"`
	SendIpcpConnectionRejection     uint32 `protobuf:"varint,26,opt,name=send_ipcp_connection_rejection,json=send-ipcp-connection-rejection,proto3" json:"send_ipcp_connection_rejection,omitempty"`
	SendIpcpConnectionAck           uint32 `protobuf:"varint,27,opt,name=send_ipcp_connection_ack,json=send-ipcp-connection-ack,proto3" json:"send_ipcp_connection_ack,omitempty"`
	SendIpcpCodeRejection           uint32 `protobuf:"varint,28,opt,name=send_ipcp_code_rejection,json=send-ipcp-code-rejection,proto3" json:"send_ipcp_code_rejection,omitempty"`
	SendIpcpProtocolRejection       uint32 `protobuf:"varint,29,opt,name=send_ipcp_protocol_rejection,json=send-ipcp-protocol-rejection,proto3" json:"send_ipcp_protocol_rejection,omitempty"`
	SendIpcpTerminationRequest      uint32 `protobuf:"varint,30,opt,name=send_ipcp_termination_request,json=send-ipcp-termination-request,proto3" json:"send_ipcp_termination_request,omitempty"`
	SendIpccpTerminationAck         uint32 `protobuf:"varint,31,opt,name=send_ipccp_termination_ack,json=send-ipccp-termination-ack,proto3" json:"send_ipccp_termination_ack,omitempty"`
	ReceiveIpcpConnectionRequest    uint32 `protobuf:"varint,32,opt,name=receive_ipcp_connection_request,json=receive-ipcp-connection-request,proto3" json:"receive_ipcp_connection_request,omitempty"`
	ReceiveIpcpConnectionNak        uint32 `protobuf:"varint,33,opt,name=receive_ipcp_connection_nak,json=receive-ipcp-connection-nak,proto3" json:"receive_ipcp_connection_nak,omitempty"`
	ReceiveIpcpConnectionRejection  uint32 `protobuf:"varint,34,opt,name=receive_ipcp_connection_rejection,json=receive-ipcp-connection-rejection,proto3" json:"receive_ipcp_connection_rejection,omitempty"`
	ReceiveIpcpConnectionAck        uint32 `protobuf:"varint,35,opt,name=receive_ipcp_connection_ack,json=receive-ipcp-connection-ack,proto3" json:"receive_ipcp_connection_ack,omitempty"`
	ReceiveIpcpCodeRejection        uint32 `protobuf:"varint,36,opt,name=receive_ipcp_code_rejection,json=receive-ipcp-code-rejection,proto3" json:"receive_ipcp_code_rejection,omitempty"`
	ReceiveIpcpProtocolRejection    uint32 `protobuf:"varint,37,opt,name=receive_ipcp_protocol_rejection,json=receive-ipcp-protocol-rejection,proto3" json:"receive_ipcp_protocol_rejection,omitempty"`
	ReceiveIpcpTerminationRequest   uint32 `protobuf:"varint,38,opt,name=receive_ipcp_termination_request,json=receive-ipcp-termination-request,proto3" json:"receive_ipcp_termination_request,omitempty"`
	ReceiveIpcpTerminationAck       uint32 `protobuf:"varint,39,opt,name=receive_ipcp_termination_ack,json=receive-ipcp-termination-ack,proto3" json:"receive_ipcp_termination_ack,omitempty"`
	SendIp6CpConnectionRequest      uint32 `protobuf:"varint,40,opt,name=send_ip6cp_connection_request,json=send-ip6cp-connection-request,proto3" json:"send_ip6cp_connection_request,omitempty"`
	SendIp6CpConnectionNak          uint32 `protobuf:"varint,41,opt,name=send_ip6cp_connection_nak,json=send-ip6cp-connection-nak,proto3" json:"send_ip6cp_connection_nak,omitempty"`
	SendIp6CpConnectionRejection    uint32 `protobuf:"varint,42,opt,name=send_ip6cp_connection_rejection,json=send-ip6cp-connection-rejection,proto3" json:"send_ip6cp_connection_rejection,omitempty"`
	SendIp6CpConnectionAck          uint32 `protobuf:"varint,43,opt,name=send_ip6cp_connection_ack,json=send-ip6cp-connection-ack,proto3" json:"send_ip6cp_connection_ack,omitempty"`
	SendIp6CpCodeRejection          uint32 `protobuf:"varint,44,opt,name=send_ip6cp_code_rejection,json=send-ip6cp-code-rejection,proto3" json:"send_ip6cp_code_rejection,omitempty"`
	SendIp6CpProtocolRejection      uint32 `protobuf:"varint,45,opt,name=send_ip6cp_protocol_rejection,json=send-ip6cp-protocol-rejection,proto3" json:"send_ip6cp_protocol_rejection,omitempty"`
	SendIp6CpTerminationRequest     uint32 `protobuf:"varint,46,opt,name=send_ip6cp_termination_request,json=send-ip6cp-termination-request,proto3" json:"send_ip6cp_termination_request,omitempty"`
	SendIp6CpTerminationAck         uint32 `protobuf:"varint,47,opt,name=send_ip6cp_termination_ack,json=send-ip6cp-termination-ack,proto3" json:"send_ip6cp_termination_ack,omitempty"`
	ReceiveIp6CpConnectionRequest   uint32 `protobuf:"varint,48,opt,name=receive_ip6cp_connection_request,json=receive-ip6cp-connection-request,proto3" json:"receive_ip6cp_connection_request,omitempty"`
	ReceiveIp6CpConnectionNak       uint32 `protobuf:"varint,49,opt,name=receive_ip6cp_connection_nak,json=receive-ip6cp-connection-nak,proto3" json:"receive_ip6cp_connection_nak,omitempty"`
	ReceiveIp6CpConnectionReject    uint32 `protobuf:"varint,50,opt,name=receive_ip6cp_connection_reject,json=receive-ip6cp-connection-reject,proto3" json:"receive_ip6cp_connection_reject,omitempty"`
	ReceiveIp6CpConnectionAck       uint32 `protobuf:"varint,51,opt,name=receive_ip6cp_connection_ack,json=receive-ip6cp-connection-ack,proto3" json:"receive_ip6cp_connection_ack,omitempty"`
	ReceiveIp6CpCodeRejection       uint32 `protobuf:"varint,52,opt,name=receive_ip6cp_code_rejection,json=receive-ip6cp-code-rejection,proto3" json:"receive_ip6cp_code_rejection,omitempty"`
	ReceiveIp6CpProtocolRejection   uint32 `protobuf:"varint,53,opt,name=receive_ip6cp_protocol_rejection,json=receive-ip6cp-protocol-rejection,proto3" json:"receive_ip6cp_protocol_rejection,omitempty"`
	ReceiveIp6CpTerminationRequest  uint32 `protobuf:"varint,54,opt,name=receive_ip6cp_termination_request,json=receive-ip6cp-termination-request,proto3" json:"receive_ip6cp_termination_request,omitempty"`
	ReceiveIp6CpTerminationAck      uint32 `protobuf:"varint,55,opt,name=receive_ip6cp_termination_ack,json=receive-ip6cp-termination-ack,proto3" json:"receive_ip6cp_termination_ack,omitempty"`
	SendPapAuthenticationAck        uint32 `protobuf:"varint,56,opt,name=send_pap_authentication_ack,json=send-pap-authentication-ack,proto3" json:"send_pap_authentication_ack,omitempty"`
	SendPapAuthenticationNak        uint32 `protobuf:"varint,57,opt,name=send_pap_authentication_nak,json=send-pap-authentication-nak,proto3" json:"send_pap_authentication_nak,omitempty"`
	SendChapChallenge               uint32 `protobuf:"varint,58,opt,name=send_chap_challenge,json=send-chap-challenge,proto3" json:"send_chap_challenge,omitempty"`
	SendChapAuthenticationAck       uint32 `protobuf:"varint,59,opt,name=send_chap_authentication_ack,json=send-chap-authentication-ack,proto3" json:"send_chap_authentication_ack,omitempty"`
	SendChapAuthenticationFail      uint32 `protobuf:"varint,60,opt,name=send_chap_authentication_fail,json=send-chap-authentication-fail,proto3" json:"send_chap_authentication_fail,omitempty"`
	DiscardDailFast                 uint32 `protobuf:"varint,61,opt,name=discard_dail_fast,json=discard-dail-fast,proto3" json:"discard_dail_fast,omitempty"`
	DiscardChasten                  uint32 `protobuf:"varint,62,opt,name=discard_chasten,json=discard-chasten,proto3" json:"discard_chasten,omitempty"`
	ReceivePapAuthenticationRequest uint32 `protobuf:"varint,63,opt,name=receive_pap_authentication_request,json=receive-pap-authentication-request,proto3" json:"receive_pap_authentication_request,omitempty"`
	ReceiveChapResponse             uint32 `protobuf:"varint,64,opt,name=receive_chap_response,json=receive-chap-response,proto3" json:"receive_chap_response,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_PppBasStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_PppBasStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_PppBasStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_PppBasStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3}
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendEchoRequest() uint32 {
	if x != nil {
		return x.SendEchoRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendEchoReply() uint32 {
	if x != nil {
		return x.SendEchoReply
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendEchoFailed() uint32 {
	if x != nil {
		return x.SendEchoFailed
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveEchoReply() uint32 {
	if x != nil {
		return x.ReceiveEchoReply
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveEchoRequest() uint32 {
	if x != nil {
		return x.ReceiveEchoRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendEchoReceiptFast() uint32 {
	if x != nil {
		return x.SendEchoReceiptFast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveEchoRequestFast() uint32 {
	if x != nil {
		return x.ReceiveEchoRequestFast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpConnectionRequest() uint32 {
	if x != nil {
		return x.SendLcpConnectionRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpConnectionNak() uint32 {
	if x != nil {
		return x.SendLcpConnectionNak
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpConnectionRejection() uint32 {
	if x != nil {
		return x.SendLcpConnectionRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpConnectionAck() uint32 {
	if x != nil {
		return x.SendLcpConnectionAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpCodeRejection() uint32 {
	if x != nil {
		return x.SendLcpCodeRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpProtocolRejection() uint32 {
	if x != nil {
		return x.SendLcpProtocolRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpTerminationRequest() uint32 {
	if x != nil {
		return x.SendLcpTerminationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendLcpTerminationAck() uint32 {
	if x != nil {
		return x.SendLcpTerminationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionNak
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpConnectionRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveLcpConnectionAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpCodeRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveLcpProtocolRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveLcpTerminationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveLcpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveLcpTerminationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpcpConnectionRequest() uint32 {
	if x != nil {
		return x.SendIpcpConnectionRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpcpConnectionNak() uint32 {
	if x != nil {
		return x.SendIpcpConnectionNak
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpcpConnectionRejection() uint32 {
	if x != nil {
		return x.SendIpcpConnectionRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpcpConnectionAck() uint32 {
	if x != nil {
		return x.SendIpcpConnectionAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpcpCodeRejection() uint32 {
	if x != nil {
		return x.SendIpcpCodeRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpcpProtocolRejection() uint32 {
	if x != nil {
		return x.SendIpcpProtocolRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpcpTerminationRequest() uint32 {
	if x != nil {
		return x.SendIpcpTerminationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIpccpTerminationAck() uint32 {
	if x != nil {
		return x.SendIpccpTerminationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionNak
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpConnectionRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveIpcpConnectionAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpCodeRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveIpcpProtocolRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveIpcpTerminationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIpcpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveIpcpTerminationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpConnectionRequest() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpConnectionNak() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionNak
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpConnectionRejection() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpConnectionAck() uint32 {
	if x != nil {
		return x.SendIp6CpConnectionAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpCodeRejection() uint32 {
	if x != nil {
		return x.SendIp6CpCodeRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpProtocolRejection() uint32 {
	if x != nil {
		return x.SendIp6CpProtocolRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpTerminationRequest() uint32 {
	if x != nil {
		return x.SendIp6CpTerminationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendIp6CpTerminationAck() uint32 {
	if x != nil {
		return x.SendIp6CpTerminationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpConnectionRequest() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpConnectionNak() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionNak
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpConnectionReject() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionReject
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpConnectionAck() uint32 {
	if x != nil {
		return x.ReceiveIp6CpConnectionAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpCodeRejection() uint32 {
	if x != nil {
		return x.ReceiveIp6CpCodeRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpProtocolRejection() uint32 {
	if x != nil {
		return x.ReceiveIp6CpProtocolRejection
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpTerminationRequest() uint32 {
	if x != nil {
		return x.ReceiveIp6CpTerminationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveIp6CpTerminationAck() uint32 {
	if x != nil {
		return x.ReceiveIp6CpTerminationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendPapAuthenticationAck() uint32 {
	if x != nil {
		return x.SendPapAuthenticationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendPapAuthenticationNak() uint32 {
	if x != nil {
		return x.SendPapAuthenticationNak
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendChapChallenge() uint32 {
	if x != nil {
		return x.SendChapChallenge
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendChapAuthenticationAck() uint32 {
	if x != nil {
		return x.SendChapAuthenticationAck
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetSendChapAuthenticationFail() uint32 {
	if x != nil {
		return x.SendChapAuthenticationFail
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetDiscardDailFast() uint32 {
	if x != nil {
		return x.DiscardDailFast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetDiscardChasten() uint32 {
	if x != nil {
		return x.DiscardChasten
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceivePapAuthenticationRequest() uint32 {
	if x != nil {
		return x.ReceivePapAuthenticationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_PppBasStatistics) GetReceiveChapResponse() uint32 {
	if x != nil {
		return x.ReceiveChapResponse
	}
	return 0
}

type Ifm_Interfaces_Interface_Bas_BasInterface_Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsStaticUserExist bool  `protobuf:"varint,1,opt,name=is_static_user_exist,json=is-static-user-exist,proto3" json:"is_static_user_exist,omitempty"`
	IsSelected        bool  `protobuf:"varint,2,opt,name=is_selected,json=is-selected,proto3" json:"is_selected,omitempty"`
	IncreasedUserNum  int32 `protobuf:"varint,3,opt,name=increased_user_num,json=increased-user-num,proto3" json:"increased_user_num,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Information) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_BasInterface_Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_BasInterface_Information) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Information) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_BasInterface_Information.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_BasInterface_Information) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Information) GetIsStaticUserExist() bool {
	if x != nil {
		return x.IsStaticUserExist
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Information) GetIsSelected() bool {
	if x != nil {
		return x.IsSelected
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Information) GetIncreasedUserNum() int32 {
	if x != nil {
		return x.IncreasedUserNum
	}
	return 0
}

type Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessUser []*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser `protobuf:"bytes,1,rep,name=access_user,json=access-user,proto3" json:"access_user,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers) GetAccessUser() []*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser {
	if x != nil {
		return x.AccessUser
	}
	return nil
}

type Ifm_Interfaces_Interface_Bas_BasInterface_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastStatisticsTime string `protobuf:"bytes,1,opt,name=last_statistics_time,json=last-statistics-time,proto3" json:"last_statistics_time,omitempty"`
	InputRate          uint32 `protobuf:"varint,2,opt,name=input_rate,json=input-rate,proto3" json:"input_rate,omitempty"`
	OutputRate         uint32 `protobuf:"varint,3,opt,name=output_rate,json=output-rate,proto3" json:"output_rate,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_BasInterface_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_BasInterface_Statistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 2}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) GetLastStatisticsTime() string {
	if x != nil {
		return x.LastStatisticsTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) GetInputRate() uint32 {
	if x != nil {
		return x.InputRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_Statistics) GetOutputRate() uint32 {
	if x != nil {
		return x.OutputRate
	}
	return 0
}

type Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeVlan          uint32 `protobuf:"varint,1,opt,name=pe_vlan,json=pe-vlan,proto3" json:"pe_vlan,omitempty"`
	CeVlan          uint32 `protobuf:"varint,2,opt,name=ce_vlan,json=ce-vlan,proto3" json:"ce_vlan,omitempty"`
	UserNumber      uint32 `protobuf:"varint,3,opt,name=user_number,json=user-number,proto3" json:"user_number,omitempty"`
	IpoeUserNumber  uint32 `protobuf:"varint,4,opt,name=ipoe_user_number,json=ipoe-user-number,proto3" json:"ipoe_user_number,omitempty"`
	PppoeUserNumber uint32 `protobuf:"varint,5,opt,name=pppoe_user_number,json=pppoe-user-number,proto3" json:"pppoe_user_number,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) GetPeVlan() uint32 {
	if x != nil {
		return x.PeVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) GetCeVlan() uint32 {
	if x != nil {
		return x.CeVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) GetUserNumber() uint32 {
	if x != nil {
		return x.UserNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) GetIpoeUserNumber() uint32 {
	if x != nil {
		return x.IpoeUserNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser) GetPppoeUserNumber() uint32 {
	if x != nil {
		return x.PppoeUserNumber
	}
	return 0
}

type Ifm_Interfaces_Interface_Bras_LoadBalanceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode" json:"mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bras_LoadBalanceMode) Reset() {
	*x = Ifm_Interfaces_Interface_Bras_LoadBalanceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bras_LoadBalanceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bras_LoadBalanceMode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bras_LoadBalanceMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bras_LoadBalanceMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bras_LoadBalanceMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 0}
}

func (x *Ifm_Interfaces_Interface_Bras_LoadBalanceMode) GetMode() Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode_USERX_MODE
}

type Ifm_Interfaces_Interface_Bras_Multicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandwidthLimitPolicy *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy `protobuf:"bytes,1,opt,name=bandwidth_limit_policy,json=bandwidth-limit-policy,proto3" json:"bandwidth_limit_policy,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast) Reset() {
	*x = Ifm_Interfaces_Interface_Bras_Multicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bras_Multicast) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bras_Multicast) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bras_Multicast.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bras_Multicast) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 1}
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast) GetBandwidthLimitPolicy() *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy {
	if x != nil {
		return x.BandwidthLimitPolicy
	}
	return nil
}

type Ifm_Interfaces_Interface_Bras_BrasUserManage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortAccessLimit *Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit `protobuf:"bytes,1,opt,name=port_access_limit,json=port-access-limit,proto3" json:"port_access_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage) Reset() {
	*x = Ifm_Interfaces_Interface_Bras_BrasUserManage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bras_BrasUserManage) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bras_BrasUserManage.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bras_BrasUserManage) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2}
}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage) GetPortAccessLimit() *Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit {
	if x != nil {
		return x.PortAccessLimit
	}
	return nil
}

type Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Total  uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Level1 uint32 `protobuf:"varint,3,opt,name=level1,proto3" json:"level1,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) Reset() {
	*x = Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy) GetLevel1() uint32 {
	if x != nil {
		return x.Level1
	}
	return 0
}

type Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortDomain        uint32                                                             `protobuf:"varint,1,opt,name=port_domain,json=port-domain,proto3" json:"port_domain,omitempty"`
	PortTypeSet       Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet    `protobuf:"varint,2,opt,name=port_type_set,json=port-type-set,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet" json:"port_type_set,omitempty"`
	PortType          Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType       `protobuf:"varint,3,opt,name=port_type,json=port-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType" json:"port_type,omitempty"`
	DelayMechanism    Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism `protobuf:"varint,4,opt,name=delay_mechanism,json=delay-mechanism,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism" json:"delay_mechanism,omitempty"`
	PortCfgState      Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState   `protobuf:"varint,5,opt,name=port_cfg_state,json=port-cfg-state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState" json:"port_cfg_state,omitempty"`
	ClkStep           Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep        `protobuf:"varint,6,opt,name=clk_step,json=clk-step,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep" json:"clk_step,omitempty"`
	NotSlave          bool                                                               `protobuf:"varint,7,opt,name=not_slave,json=not-slave,proto3" json:"not_slave,omitempty"`
	PortLocalPriority int32                                                              `protobuf:"varint,8,opt,name=port_local_priority,json=port-local-priority,proto3" json:"port_local_priority,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetPortDomain() uint32 {
	if x != nil {
		return x.PortDomain
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetPortTypeSet() Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet {
	if x != nil {
		return x.PortTypeSet
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet_NONE
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetPortType() Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType {
	if x != nil {
		return x.PortType
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType_NONE
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetDelayMechanism() Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism {
	if x != nil {
		return x.DelayMechanism
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism_DELAY
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetPortCfgState() Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState {
	if x != nil {
		return x.PortCfgState
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState_SLAVE
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetClkStep() Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep {
	if x != nil {
		return x.ClkStep
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep_ONESTEP
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetNotSlave() bool {
	if x != nil {
		return x.NotSlave
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance) GetPortLocalPriority() int32 {
	if x != nil {
		return x.PortLocalPriority
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PktPackType   Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType    `protobuf:"varint,1,opt,name=pkt_pack_type,json=pkt-pack-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType" json:"pkt_pack_type,omitempty"`
	PtpPktMacPack *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack `protobuf:"bytes,2,opt,name=ptp_pkt_mac_pack,json=ptp-pkt-mac-pack,proto3" json:"ptp_pkt_mac_pack,omitempty"`
	PtpPktUdpPack *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack `protobuf:"bytes,3,opt,name=ptp_pkt_udp_pack,json=ptp-pkt-udp-pack,proto3" json:"ptp_pkt_udp_pack,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 1}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) GetPktPackType() Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType {
	if x != nil {
		return x.PktPackType
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType_MAC
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) GetPtpPktMacPack() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack {
	if x != nil {
		return x.PtpPktMacPack
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack) GetPtpPktUdpPack() *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack {
	if x != nil {
		return x.PtpPktUdpPack
	}
	return nil
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerPortClkId            string `protobuf:"bytes,1,opt,name=peer_port_clk_id,json=peer-port-clk-id,proto3" json:"peer_port_clk_id,omitempty"`
	PeerPortNum              int32  `protobuf:"varint,2,opt,name=peer_port_num,json=peer-port-num,proto3" json:"peer_port_num,omitempty"`
	PeerAnnounceSendInterval int32  `protobuf:"varint,3,opt,name=peer_announce_send_interval,json=peer-announce-send-interval,proto3" json:"peer_announce_send_interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 2}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) GetPeerPortClkId() string {
	if x != nil {
		return x.PeerPortClkId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) GetPeerPortNum() int32 {
	if x != nil {
		return x.PeerPortNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock) GetPeerAnnounceSendInterval() int32 {
	if x != nil {
		return x.PeerAnnounceSendInterval
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnounceDrop           bool  `protobuf:"varint,1,opt,name=announce_drop,json=announce-drop,proto3" json:"announce_drop,omitempty"`
	DelayReqSendDisable    bool  `protobuf:"varint,2,opt,name=delay_req_send_disable,json=delay-req-send-disable,proto3" json:"delay_req_send_disable,omitempty"`
	AnnounceInterval       int32 `protobuf:"varint,3,opt,name=announce_interval,json=announce-interval,proto3" json:"announce_interval,omitempty"`
	AnnounceReceiptTimeout int32 `protobuf:"varint,4,opt,name=announce_receipt_timeout,json=announce-receipt-timeout,proto3" json:"announce_receipt_timeout,omitempty"`
	SyncInterval           int32 `protobuf:"varint,5,opt,name=sync_interval,json=sync-interval,proto3" json:"sync_interval,omitempty"`
	MinDelayReqInterval    int32 `protobuf:"varint,6,opt,name=min_delay_req_interval,json=min-delay-req-interval,proto3" json:"min_delay_req_interval,omitempty"`
	MinPdelayReqInterval   int32 `protobuf:"varint,7,opt,name=min_pdelay_req_interval,json=min-pdelay-req-interval,proto3" json:"min_pdelay_req_interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 3}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) GetAnnounceDrop() bool {
	if x != nil {
		return x.AnnounceDrop
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) GetDelayReqSendDisable() bool {
	if x != nil {
		return x.DelayReqSendDisable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) GetAnnounceInterval() int32 {
	if x != nil {
		return x.AnnounceInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) GetAnnounceReceiptTimeout() int32 {
	if x != nil {
		return x.AnnounceReceiptTimeout
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) GetSyncInterval() int32 {
	if x != nil {
		return x.SyncInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) GetMinDelayReqInterval() int32 {
	if x != nil {
		return x.MinDelayReqInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl) GetMinPdelayReqInterval() int32 {
	if x != nil {
		return x.MinPdelayReqInterval
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrectionFlag  Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag `protobuf:"varint,1,opt,name=correction_flag,json=correction-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag" json:"correction_flag,omitempty"`
	CorrectionValue int32                                                                      `protobuf:"varint,2,opt,name=correction_value,json=correction-value,proto3" json:"correction_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 4}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection) GetCorrectionFlag() Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag {
	if x != nil {
		return x.CorrectionFlag
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag_NEGATIVE
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection) GetCorrectionValue() int32 {
	if x != nil {
		return x.CorrectionValue
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcocStaticClkId      string `protobuf:"bytes,1,opt,name=tcoc_static_clk_id,json=tcoc-static-clk-id,proto3" json:"tcoc_static_clk_id,omitempty"`
	TcocStaticClkPortNum int32  `protobuf:"varint,2,opt,name=tcoc_static_clk_port_num,json=tcoc-static-clk-port-num,proto3" json:"tcoc_static_clk_port_num,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 5}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc) GetTcocStaticClkId() string {
	if x != nil {
		return x.TcocStaticClkId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc) GetTcocStaticClkPortNum() int32 {
	if x != nil {
		return x.TcocStaticClkPortNum
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeValueFlag Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag `protobuf:"varint,1,opt,name=change_value_flag,json=change-value-flag,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag" json:"change_value_flag,omitempty"`
	ChangeValue     uint32                                                                        `protobuf:"varint,2,opt,name=change_value,json=change-value,proto3" json:"change_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 6}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange) GetChangeValueFlag() Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag {
	if x != nil {
		return x.ChangeValueFlag
	}
	return Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag_NEGATIVE
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange) GetChangeValue() uint32 {
	if x != nil {
		return x.ChangeValue
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacEgressDestMac     string `protobuf:"bytes,1,opt,name=mac_egress_dest_mac,json=mac-egress-dest-mac,proto3" json:"mac_egress_dest_mac,omitempty"`
	MacEgressVlanId      int32  `protobuf:"varint,2,opt,name=mac_egress_vlan_id,json=mac-egress-vlan-id,proto3" json:"mac_egress_vlan_id,omitempty"`
	MacEgressPktPriority int32  `protobuf:"varint,3,opt,name=mac_egress_pkt_priority,json=mac-egress-pkt-priority,proto3" json:"mac_egress_pkt_priority,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 1, 0}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) GetMacEgressDestMac() string {
	if x != nil {
		return x.MacEgressDestMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) GetMacEgressVlanId() int32 {
	if x != nil {
		return x.MacEgressVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack) GetMacEgressPktPriority() int32 {
	if x != nil {
		return x.MacEgressPktPriority
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UdpEgressSrcIp       string `protobuf:"bytes,1,opt,name=udp_egress_src_ip,json=udp-egress-src-ip,proto3" json:"udp_egress_src_ip,omitempty"`
	UdpEgressDestIp      string `protobuf:"bytes,2,opt,name=udp_egress_dest_ip,json=udp-egress-dest-ip,proto3" json:"udp_egress_dest_ip,omitempty"`
	UdpEgressDscp        int32  `protobuf:"varint,3,opt,name=udp_egress_dscp,json=udp-egress-dscp,proto3" json:"udp_egress_dscp,omitempty"`
	UdpEgressVlanId      int32  `protobuf:"varint,4,opt,name=udp_egress_vlan_id,json=udp-egress-vlan-id,proto3" json:"udp_egress_vlan_id,omitempty"`
	UdpEgressPktPriority int32  `protobuf:"varint,5,opt,name=udp_egress_pkt_priority,json=udp-egress-pkt-priority,proto3" json:"udp_egress_pkt_priority,omitempty"`
	UdpEgressDestMac     string `protobuf:"bytes,6,opt,name=udp_egress_dest_mac,json=udp-egress-dest-mac,proto3" json:"udp_egress_dest_mac,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) Reset() {
	*x = Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 1, 1}
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) GetUdpEgressSrcIp() string {
	if x != nil {
		return x.UdpEgressSrcIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) GetUdpEgressDestIp() string {
	if x != nil {
		return x.UdpEgressDestIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) GetUdpEgressDscp() int32 {
	if x != nil {
		return x.UdpEgressDscp
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) GetUdpEgressVlanId() int32 {
	if x != nil {
		return x.UdpEgressVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) GetUdpEgressPktPriority() int32 {
	if x != nil {
		return x.UdpEgressPktPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack) GetUdpEgressDestMac() string {
	if x != nil {
		return x.UdpEgressDestMac
	}
	return ""
}

type Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhyPort *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort `protobuf:"bytes,1,opt,name=phy_port,json=phy-port,proto3" json:"phy_port,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts) Reset() {
	*x = Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 0}
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts) GetPhyPort() *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort {
	if x != nil {
		return x.PhyPort
	}
	return nil
}

type Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LgcPortName string `protobuf:"bytes,1,opt,name=lgc_port_name,json=lgc-port-name,proto3" json:"lgc_port_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort) Reset() {
	*x = Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 0, 0}
}

func (x *Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort) GetLgcPortName() string {
	if x != nil {
		return x.LgcPortName
	}
	return ""
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsSfpPtpPriority1   int32                                                              `protobuf:"varint,1,opt,name=gps_sfp_ptp_priority1,json=gps-sfp-ptp-priority1,proto3" json:"gps_sfp_ptp_priority1,omitempty"`
	GpsSfpPtpPriority2   int32                                                              `protobuf:"varint,2,opt,name=gps_sfp_ptp_priority2,json=gps-sfp-ptp-priority2,proto3" json:"gps_sfp_ptp_priority2,omitempty"`
	GpsSfpPtpDomain      int32                                                              `protobuf:"varint,3,opt,name=gps_sfp_ptp_domain,json=gps-sfp-ptp-domain,proto3" json:"gps_sfp_ptp_domain,omitempty"`
	GpsSfpRecoveryEnable bool                                                               `protobuf:"varint,4,opt,name=gps_sfp_recovery_enable,json=gps-sfp-recovery-enable,proto3" json:"gps_sfp_recovery_enable,omitempty"`
	GnssModelPri1        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1      `protobuf:"varint,5,opt,name=gnss_model_pri1,json=gnss-model-pri1,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1" json:"gnss_model_pri1,omitempty"`
	GnssModelPri2        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2      `protobuf:"varint,6,opt,name=gnss_model_pri2,json=gnss-model-pri2,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2" json:"gnss_model_pri2,omitempty"`
	GnssModelPri3        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3      `protobuf:"varint,7,opt,name=gnss_model_pri3,json=gnss-model-pri3,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3" json:"gnss_model_pri3,omitempty"`
	GnssModelPri4        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4      `protobuf:"varint,8,opt,name=gnss_model_pri4,json=gnss-model-pri4,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4" json:"gnss_model_pri4,omitempty"`
	GnssModelPri5        Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5      `protobuf:"varint,9,opt,name=gnss_model_pri5,json=gnss-model-pri5,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5" json:"gnss_model_pri5,omitempty"`
	LeapManualmodeEnable int32                                                              `protobuf:"varint,10,opt,name=leap_manualmode_enable,json=leap-manualmode-enable,proto3" json:"leap_manualmode_enable,omitempty"`
	CableDelay           int32                                                              `protobuf:"varint,11,opt,name=cable_delay,json=cable-delay,proto3" json:"cable_delay,omitempty"`
	GpsSfpOnline         bool                                                               `protobuf:"varint,12,opt,name=gps_sfp_online,json=gps-sfp-online,proto3" json:"gps_sfp_online,omitempty"`
	GpsSfpWorkStates     *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates  `protobuf:"bytes,13,opt,name=gps_sfp_work_states,json=gps-sfp-work-states,proto3" json:"gps_sfp_work_states,omitempty"`
	GnssModule           *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule        `protobuf:"bytes,14,opt,name=gnss_module,json=gnss-module,proto3" json:"gnss_module,omitempty"`
	GpsSyncParameters    *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters `protobuf:"bytes,15,opt,name=gps_sync_parameters,json=gps-sync-parameters,proto3" json:"gps_sync_parameters,omitempty"`
	GpsBoard             *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard          `protobuf:"bytes,16,opt,name=gps_board,json=gps-board,proto3" json:"gps_board,omitempty"`
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) Reset() {
	*x = Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsSfpPtpPriority1() int32 {
	if x != nil {
		return x.GpsSfpPtpPriority1
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsSfpPtpPriority2() int32 {
	if x != nil {
		return x.GpsSfpPtpPriority2
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsSfpPtpDomain() int32 {
	if x != nil {
		return x.GpsSfpPtpDomain
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsSfpRecoveryEnable() bool {
	if x != nil {
		return x.GpsSfpRecoveryEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGnssModelPri1() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1 {
	if x != nil {
		return x.GnssModelPri1
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri1
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGnssModelPri2() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2 {
	if x != nil {
		return x.GnssModelPri2
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri2
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGnssModelPri3() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3 {
	if x != nil {
		return x.GnssModelPri3
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri3
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGnssModelPri4() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4 {
	if x != nil {
		return x.GnssModelPri4
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri4
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGnssModelPri5() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5 {
	if x != nil {
		return x.GnssModelPri5
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_INVALID_ENUM_VALUE_GnssModelPri5
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetLeapManualmodeEnable() int32 {
	if x != nil {
		return x.LeapManualmodeEnable
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetCableDelay() int32 {
	if x != nil {
		return x.CableDelay
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsSfpOnline() bool {
	if x != nil {
		return x.GpsSfpOnline
	}
	return false
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsSfpWorkStates() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates {
	if x != nil {
		return x.GpsSfpWorkStates
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGnssModule() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule {
	if x != nil {
		return x.GnssModule
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsSyncParameters() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters {
	if x != nil {
		return x.GpsSyncParameters
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc) GetGpsBoard() *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard {
	if x != nil {
		return x.GpsBoard
	}
	return nil
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsSfpIsTimelock       bool `protobuf:"varint,1,opt,name=gps_sfp_is_timelock,json=gps-sfp-is-timelock,proto3" json:"gps_sfp_is_timelock,omitempty"`
	GpsSfpIsFreqlock       bool `protobuf:"varint,2,opt,name=gps_sfp_is_freqlock,json=gps-sfp-is-freqlock,proto3" json:"gps_sfp_is_freqlock,omitempty"`
	GpsSfpSelfRecoveryen   bool `protobuf:"varint,3,opt,name=gps_sfp_self_recoveryen,json=gps-sfp-self-recoveryen,proto3" json:"gps_sfp_self_recoveryen,omitempty"`
	GpsSfpIsSelfRecovering bool `protobuf:"varint,4,opt,name=gps_sfp_is_self_recovering,json=gps-sfp-is-self-recovering,proto3" json:"gps_sfp_is_self_recovering,omitempty"`
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) Reset() {
	*x = Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 0}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) GetGpsSfpIsTimelock() bool {
	if x != nil {
		return x.GpsSfpIsTimelock
	}
	return false
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) GetGpsSfpIsFreqlock() bool {
	if x != nil {
		return x.GpsSfpIsFreqlock
	}
	return false
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) GetGpsSfpSelfRecoveryen() bool {
	if x != nil {
		return x.GpsSfpSelfRecoveryen
	}
	return false
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates) GetGpsSfpIsSelfRecovering() bool {
	if x != nil {
		return x.GpsSfpIsSelfRecovering
	}
	return false
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsLatitude            string                                                                          `protobuf:"bytes,1,opt,name=gps_latitude,json=gps-latitude,proto3" json:"gps_latitude,omitempty"`
	GpsLongitude           string                                                                          `protobuf:"bytes,2,opt,name=gps_longitude,json=gps-longitude,proto3" json:"gps_longitude,omitempty"`
	GpsAltitude            string                                                                          `protobuf:"bytes,3,opt,name=gps_altitude,json=gps-altitude,proto3" json:"gps_altitude,omitempty"`
	GpsWorkMode            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode          `protobuf:"varint,4,opt,name=gps_work_mode,json=gps-work-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode" json:"gps_work_mode,omitempty"`
	GpsSatelliteNumber     int32                                                                           `protobuf:"varint,5,opt,name=gps_satellite_number,json=gps-satellite-number,proto3" json:"gps_satellite_number,omitempty"`
	GpsLeapSecond          int32                                                                           `protobuf:"varint,6,opt,name=gps_leap_second,json=gps-leap-second,proto3" json:"gps_leap_second,omitempty"`
	GpsSatelliteCno        string                                                                          `protobuf:"bytes,7,opt,name=gps_satellite_cno,json=gps-satellite-cno,proto3" json:"gps_satellite_cno,omitempty"`
	GlonassSatelliteNumber int32                                                                           `protobuf:"varint,8,opt,name=glonass_satellite_number,json=glonass-satellite-number,proto3" json:"glonass_satellite_number,omitempty"`
	GlonassSatelliteCno    string                                                                          `protobuf:"bytes,9,opt,name=glonass_satellite_cno,json=glonass-satellite-cno,proto3" json:"glonass_satellite_cno,omitempty"`
	BeidouSatelliteNumber  int32                                                                           `protobuf:"varint,10,opt,name=beidou_satellite_number,json=beidou-satellite-number,proto3" json:"beidou_satellite_number,omitempty"`
	BeidouSatelliteCno     string                                                                          `protobuf:"bytes,11,opt,name=beidou_satellite_cno,json=beidou-satellite-cno,proto3" json:"beidou_satellite_cno,omitempty"`
	GpsTime                string                                                                          `protobuf:"bytes,12,opt,name=gps_time,json=gps-time,proto3" json:"gps_time,omitempty"`
	GpsFixStatus           Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus         `protobuf:"varint,13,opt,name=gps_fix_status,json=gps-fix-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus" json:"gps_fix_status,omitempty"`
	GnssModel              Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel            `protobuf:"varint,14,opt,name=gnss_model,json=gnss-model,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel" json:"gnss_model,omitempty"`
	GnssModelPriority      string                                                                          `protobuf:"bytes,15,opt,name=gnss_model_priority,json=gnss-model-priority,proto3" json:"gnss_model_priority,omitempty"`
	LeapManualmodeEnStat   Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat `protobuf:"varint,16,opt,name=leap_manualmode_en_stat,json=leap-manualmode-en-stat,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat" json:"leap_manualmode_en_stat,omitempty"`
	LeapAdjustdirStat      Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat    `protobuf:"varint,17,opt,name=leap_adjustdir_stat,json=leap-adjustdir-stat,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat" json:"leap_adjustdir_stat,omitempty"`
	LeapAdjustdateStat     string                                                                          `protobuf:"bytes,18,opt,name=leap_adjustdate_stat,json=leap-adjustdate-stat,proto3" json:"leap_adjustdate_stat,omitempty"`
	CableDelayStat         int32                                                                           `protobuf:"varint,19,opt,name=cable_delay_stat,json=cable-delay-stat,proto3" json:"cable_delay_stat,omitempty"`
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) Reset() {
	*x = Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 1}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsLatitude() string {
	if x != nil {
		return x.GpsLatitude
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsLongitude() string {
	if x != nil {
		return x.GpsLongitude
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsAltitude() string {
	if x != nil {
		return x.GpsAltitude
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsWorkMode() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode {
	if x != nil {
		return x.GpsWorkMode
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode_POSITION
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsSatelliteNumber() int32 {
	if x != nil {
		return x.GpsSatelliteNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsLeapSecond() int32 {
	if x != nil {
		return x.GpsLeapSecond
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsSatelliteCno() string {
	if x != nil {
		return x.GpsSatelliteCno
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGlonassSatelliteNumber() int32 {
	if x != nil {
		return x.GlonassSatelliteNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGlonassSatelliteCno() string {
	if x != nil {
		return x.GlonassSatelliteCno
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetBeidouSatelliteNumber() int32 {
	if x != nil {
		return x.BeidouSatelliteNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetBeidouSatelliteCno() string {
	if x != nil {
		return x.BeidouSatelliteCno
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsTime() string {
	if x != nil {
		return x.GpsTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGpsFixStatus() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus {
	if x != nil {
		return x.GpsFixStatus
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus_NOFIXSTATUS
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGnssModel() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel {
	if x != nil {
		return x.GnssModel
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_INVALID_ENUM_VALUE_GnssModel
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetGnssModelPriority() string {
	if x != nil {
		return x.GnssModelPriority
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetLeapManualmodeEnStat() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat {
	if x != nil {
		return x.LeapManualmodeEnStat
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat_DISABLE
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetLeapAdjustdirStat() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat {
	if x != nil {
		return x.LeapAdjustdirStat
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_INVALID_ENUM_VALUE_LeapAdjustdirStat
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetLeapAdjustdateStat() string {
	if x != nil {
		return x.LeapAdjustdateStat
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule) GetCableDelayStat() int32 {
	if x != nil {
		return x.CableDelayStat
	}
	return 0
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsSyncDomain          int32                                                                                  `protobuf:"varint,1,opt,name=gps_sync_domain,json=gps-sync-domain,proto3" json:"gps_sync_domain,omitempty"`
	GpsSyncPriority1       int32                                                                                  `protobuf:"varint,2,opt,name=gps_sync_priority1,json=gps-sync-priority1,proto3" json:"gps_sync_priority1,omitempty"`
	GpsSyncPriority2       int32                                                                                  `protobuf:"varint,3,opt,name=gps_sync_priority2,json=gps-sync-priority2,proto3" json:"gps_sync_priority2,omitempty"`
	GpsPtpDelayMechanism   Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism `protobuf:"varint,4,opt,name=gps_ptp_delay_mechanism,json=gps-ptp-delay-mechanism,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism" json:"gps_ptp_delay_mechanism,omitempty"`
	GpsPtpClkClass         uint32                                                                                 `protobuf:"varint,5,opt,name=gps_ptp_clk_class,json=gps-ptp-clk-class,proto3" json:"gps_ptp_clk_class,omitempty"`
	GpsPtpClkStep          Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep        `protobuf:"varint,6,opt,name=gps_ptp_clk_step,json=gps-ptp-clk-step,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep" json:"gps_ptp_clk_step,omitempty"`
	GpsPtpAnnounceInterval int32                                                                                  `protobuf:"varint,7,opt,name=gps_ptp_announce_interval,json=gps-ptp-announce-interval,proto3" json:"gps_ptp_announce_interval,omitempty"`
	GpsPtpSyncInterval     int32                                                                                  `protobuf:"varint,8,opt,name=gps_ptp_sync_interval,json=gps-ptp-sync-interval,proto3" json:"gps_ptp_sync_interval,omitempty"`
	GpsPtpDelayreqInterval int32                                                                                  `protobuf:"varint,9,opt,name=gps_ptp_delayreq_interval,json=gps-ptp-delayreq-interval,proto3" json:"gps_ptp_delayreq_interval,omitempty"`
	GpsPtpClkid            string                                                                                 `protobuf:"bytes,10,opt,name=gps_ptp_clkid,json=gps-ptp-clkid,proto3" json:"gps_ptp_clkid,omitempty"`
	GpsClockSsm            Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm          `protobuf:"varint,11,opt,name=gps_clock_ssm,json=gps-clock-ssm,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm" json:"gps_clock_ssm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) Reset() {
	*x = Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 2}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsSyncDomain() int32 {
	if x != nil {
		return x.GpsSyncDomain
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsSyncPriority1() int32 {
	if x != nil {
		return x.GpsSyncPriority1
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsSyncPriority2() int32 {
	if x != nil {
		return x.GpsSyncPriority2
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsPtpDelayMechanism() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism {
	if x != nil {
		return x.GpsPtpDelayMechanism
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism_DELAY
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsPtpClkClass() uint32 {
	if x != nil {
		return x.GpsPtpClkClass
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsPtpClkStep() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep {
	if x != nil {
		return x.GpsPtpClkStep
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep_ONESTEP
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsPtpAnnounceInterval() int32 {
	if x != nil {
		return x.GpsPtpAnnounceInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsPtpSyncInterval() int32 {
	if x != nil {
		return x.GpsPtpSyncInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsPtpDelayreqInterval() int32 {
	if x != nil {
		return x.GpsPtpDelayreqInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsPtpClkid() string {
	if x != nil {
		return x.GpsPtpClkid
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters) GetGpsClockSsm() Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm {
	if x != nil {
		return x.GpsClockSsm
	}
	return Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm_UNK
}

type Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsBoardVersion string `protobuf:"bytes,1,opt,name=gps_board_version,json=gps-board-version,proto3" json:"gps_board_version,omitempty"`
	GpsMacAddress   string `protobuf:"bytes,2,opt,name=gps_mac_address,json=gps-mac-address,proto3" json:"gps_mac_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard) Reset() {
	*x = Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 3}
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard) GetGpsBoardVersion() string {
	if x != nil {
		return x.GpsBoardVersion
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard) GetGpsMacAddress() string {
	if x != nil {
		return x.GpsMacAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_ClockPortSources_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           Ifm_Interfaces_Interface_ClockPortSources_Source_State     `protobuf:"varint,1,opt,name=state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ClockPortSources_Source_State" json:"state,omitempty"`
	SyncEnable      bool                                                       `protobuf:"varint,2,opt,name=sync_enable,json=sync-enable,proto3" json:"sync_enable,omitempty"`
	EsmcSendDisable bool                                                       `protobuf:"varint,3,opt,name=esmc_send_disable,json=esmc-send-disable,proto3" json:"esmc_send_disable,omitempty"`
	ReferenceEnable bool                                                       `protobuf:"varint,4,opt,name=reference_enable,json=reference-enable,proto3" json:"reference_enable,omitempty"`
	SlaveNegoEnable bool                                                       `protobuf:"varint,5,opt,name=slave_nego_enable,json=slave-nego-enable,proto3" json:"slave_nego_enable,omitempty"`
	PhyState        Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState  `protobuf:"varint,6,opt,name=phy_state,json=phy-state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState" json:"phy_state,omitempty"`
	E1Sabit         Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit   `protobuf:"varint,7,opt,name=e1_sabit,json=e1-sabit,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit" json:"e1_sabit,omitempty"`
	E1AisEnable     bool                                                       `protobuf:"varint,8,opt,name=e1_ais_enable,json=e1-ais-enable,proto3" json:"e1_ais_enable,omitempty"`
	CposAisEnable   bool                                                       `protobuf:"varint,9,opt,name=cpos_ais_enable,json=cpos-ais-enable,proto3" json:"cpos_ais_enable,omitempty"`
	CposExcEnable   bool                                                       `protobuf:"varint,10,opt,name=cpos_exc_enable,json=cpos-exc-enable,proto3" json:"cpos_exc_enable,omitempty"`
	Priority        *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority `protobuf:"bytes,11,opt,name=priority,proto3" json:"priority,omitempty"`
	SsmClass        *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass `protobuf:"bytes,12,opt,name=ssm_class,json=ssm-class,proto3" json:"ssm_class,omitempty"`
	ClockId         *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId  `protobuf:"bytes,13,opt,name=clock_id,json=clock-id,proto3" json:"clock_id,omitempty"`
	BundleGroup     int32                                                      `protobuf:"varint,14,opt,name=bundle_group,json=bundle-group,proto3" json:"bundle_group,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) Reset() {
	*x = Ifm_Interfaces_Interface_ClockPortSources_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClockPortSources_Source) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClockPortSources_Source) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetState() Ifm_Interfaces_Interface_ClockPortSources_Source_State {
	if x != nil {
		return x.State
	}
	return Ifm_Interfaces_Interface_ClockPortSources_Source_State_INITIAL
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetSyncEnable() bool {
	if x != nil {
		return x.SyncEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetEsmcSendDisable() bool {
	if x != nil {
		return x.EsmcSendDisable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetReferenceEnable() bool {
	if x != nil {
		return x.ReferenceEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetSlaveNegoEnable() bool {
	if x != nil {
		return x.SlaveNegoEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetPhyState() Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState {
	if x != nil {
		return x.PhyState
	}
	return Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState_DOWN
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetE1Sabit() Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit {
	if x != nil {
		return x.E1Sabit
	}
	return Ifm_Interfaces_Interface_ClockPortSources_Source_INVALID_ENUM_VALUE_E1Sabit
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetE1AisEnable() bool {
	if x != nil {
		return x.E1AisEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetCposAisEnable() bool {
	if x != nil {
		return x.CposAisEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetCposExcEnable() bool {
	if x != nil {
		return x.CposExcEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetPriority() *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetSsmClass() *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass {
	if x != nil {
		return x.SsmClass
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetClockId() *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId {
	if x != nil {
		return x.ClockId
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source) GetBundleGroup() int32 {
	if x != nil {
		return x.BundleGroup
	}
	return 0
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_Priority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System  int32 `protobuf:"varint,1,opt,name=system,proto3" json:"system,omitempty"`
	Sync2M1 int32 `protobuf:"varint,2,opt,name=sync2m1,proto3" json:"sync2m1,omitempty"`
	Sync2M2 int32 `protobuf:"varint,3,opt,name=sync2m2,proto3" json:"sync2m2,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) Reset() {
	*x = Ifm_Interfaces_Interface_ClockPortSources_Source_Priority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_Priority.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 0}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) GetSystem() int32 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) GetSync2M1() int32 {
	if x != nil {
		return x.Sync2M1
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_Priority) GetSync2M2() int32 {
	if x != nil {
		return x.Sync2M2
	}
	return 0
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsmConfigured Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured `protobuf:"varint,1,opt,name=ssm_configured,json=ssm-configured,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured" json:"ssm_configured,omitempty"`
	SsmLearn      Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn      `protobuf:"varint,2,opt,name=ssm_learn,json=ssm-learn,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn" json:"ssm_learn,omitempty"`
	SsmOutput     Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput     `protobuf:"varint,3,opt,name=ssm_output,json=ssm-output,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput" json:"ssm_output,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) Reset() {
	*x = Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 1}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) GetSsmConfigured() Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured {
	if x != nil {
		return x.SsmConfigured
	}
	return Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured_UNK
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) GetSsmLearn() Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn {
	if x != nil {
		return x.SsmLearn
	}
	return Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn_UNK
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass) GetSsmOutput() Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput {
	if x != nil {
		return x.SsmOutput
	}
	return Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput_UNK
}

type Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClockIdConfigured uint32 `protobuf:"varint,1,opt,name=clock_id_configured,json=clock-id-configured,proto3" json:"clock_id_configured,omitempty"`
	ClockIdLearn      uint32 `protobuf:"varint,2,opt,name=clock_id_learn,json=clock-id-learn,proto3" json:"clock_id_learn,omitempty"`
	ClockIdOut        uint32 `protobuf:"varint,3,opt,name=clock_id_out,json=clock-id-out,proto3" json:"clock_id_out,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) Reset() {
	*x = Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0, 2}
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) GetClockIdConfigured() uint32 {
	if x != nil {
		return x.ClockIdConfigured
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) GetClockIdLearn() uint32 {
	if x != nil {
		return x.ClockIdLearn
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId) GetClockIdOut() uint32 {
	if x != nil {
		return x.ClockIdOut
	}
	return 0
}

type Ifm_Interfaces_Interface_PtpaPorts_PtpaPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtpAtrEn bool `protobuf:"varint,1,opt,name=ptp_atr_en,json=ptp-atr-en,proto3" json:"ptp_atr_en,omitempty"`
}

func (x *Ifm_Interfaces_Interface_PtpaPorts_PtpaPort) Reset() {
	*x = Ifm_Interfaces_Interface_PtpaPorts_PtpaPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_PtpaPorts_PtpaPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PtpaPorts_PtpaPort) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PtpaPorts_PtpaPort) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PtpaPorts_PtpaPort.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PtpaPorts_PtpaPort) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 0}
}

func (x *Ifm_Interfaces_Interface_PtpaPorts_PtpaPort) GetPtpAtrEn() bool {
	if x != nil {
		return x.PtpAtrEn
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArpSafeguard bool `protobuf:"varint,1,opt,name=arp_safeguard,json=arp-safeguard,proto3" json:"arp_safeguard,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards) GetArpSafeguard() bool {
	if x != nil {
		return x.ArpSafeguard
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostCarQinqHash bool `protobuf:"varint,1,opt,name=host_car_qinq_hash,json=host-car-qinq-hash,proto3" json:"host_car_qinq_hash,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 1}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs) GetHostCarQinqHash() bool {
	if x != nil {
		return x.HostCarQinqHash
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticsEnable bool `protobuf:"varint,1,opt,name=statistics_enable,json=statistics-enable,proto3" json:"statistics_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 2}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf) GetStatisticsEnable() bool {
	if x != nil {
		return x.StatisticsEnable
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticsEnable bool `protobuf:"varint,1,opt,name=statistics_enable,json=statistics-enable,proto3" json:"statistics_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 3}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf) GetStatisticsEnable() bool {
	if x != nil {
		return x.StatisticsEnable
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimit uint32 `protobuf:"varint,1,opt,name=rate_limit,json=rate-limit,proto3" json:"rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 4}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar) GetRateLimit() uint32 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

type Ifm_Interfaces_Interface_Cpudefend_NdVlanCars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NdVlanCar []*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar `protobuf:"bytes,1,rep,name=nd_vlan_car,json=nd-vlan-car,proto3" json:"nd_vlan_car,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_NdVlanCars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_NdVlanCars.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 5}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars) GetNdVlanCar() []*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar {
	if x != nil {
		return x.NdVlanCar
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimits *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits `protobuf:"bytes,1,opt,name=rate_limits,json=rate-limits,proto3" json:"rate_limits,omitempty"`
	Alarm      *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm      `protobuf:"bytes,2,opt,name=alarm,proto3" json:"alarm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 6}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar) GetRateLimits() *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar) GetAlarm() *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_ArpCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckDestinationIp bool `protobuf:"varint,1,opt,name=check_destination_ip,json=check-destination-ip,proto3" json:"check_destination_ip,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpCheck) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ArpCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ArpCheck) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpCheck) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ArpCheck.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ArpCheck) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 7}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpCheck) GetCheckDestinationIp() bool {
	if x != nil {
		return x.CheckDestinationIp
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_ArpFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterGratuitous       bool `protobuf:"varint,1,opt,name=filter_gratuitous,json=filter-gratuitous,proto3" json:"filter_gratuitous,omitempty"`
	FilterMacIllegal       bool `protobuf:"varint,2,opt,name=filter_mac_illegal,json=filter-mac-illegal,proto3" json:"filter_mac_illegal,omitempty"`
	FilterThaFilledRequest bool `protobuf:"varint,3,opt,name=filter_tha_filled_request,json=filter-tha-filled-request,proto3" json:"filter_tha_filled_request,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpFilter) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ArpFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ArpFilter) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ArpFilter.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ArpFilter) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 8}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpFilter) GetFilterGratuitous() bool {
	if x != nil {
		return x.FilterGratuitous
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpFilter) GetFilterMacIllegal() bool {
	if x != nil {
		return x.FilterMacIllegal
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ArpFilter) GetFilterThaFilledRequest() bool {
	if x != nil {
		return x.FilterThaFilledRequest
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Igmp    *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp    `protobuf:"bytes,1,opt,name=igmp,proto3" json:"igmp,omitempty"`
	Ports   *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports   `protobuf:"bytes,2,opt,name=ports,proto3" json:"ports,omitempty"`
	Enhance *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance `protobuf:"bytes,3,opt,name=enhance,proto3" json:"enhance,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) GetIgmp() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp {
	if x != nil {
		return x.Igmp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) GetPorts() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit) GetEnhance() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance {
	if x != nil {
		return x.Enhance
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_MacFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistEnable bool                                                      `protobuf:"varint,1,opt,name=whitelist_enable,json=whitelist-enable,proto3" json:"whitelist_enable,omitempty"`
	BlacklistEnable bool                                                      `protobuf:"varint,2,opt,name=blacklist_enable,json=blacklist-enable,proto3" json:"blacklist_enable,omitempty"`
	MacAddresss     *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss `protobuf:"bytes,3,opt,name=mac_addresss,json=mac-addresss,proto3" json:"mac_addresss,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_MacFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_MacFilter) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_MacFilter.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_MacFilter) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 10}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter) GetWhitelistEnable() bool {
	if x != nil {
		return x.WhitelistEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter) GetBlacklistEnable() bool {
	if x != nil {
		return x.BlacklistEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter) GetMacAddresss() *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss {
	if x != nil {
		return x.MacAddresss
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type" json:"type,omitempty"`
	RateLimit uint32                                                       `protobuf:"varint,2,opt,name=rate_limit,json=rate-limit,proto3" json:"rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 5, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar) GetType() Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar) GetRateLimit() uint32 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

type Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimit []*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit `protobuf:"bytes,1,rep,name=rate_limit,json=rate-limit,proto3" json:"rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 6, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits) GetRateLimit() []*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable    bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Interval  uint32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 6, 1}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol    Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol" json:"protocol,omitempty"`
	CpRateLimit uint32                                                                           `protobuf:"varint,2,opt,name=cp_rate_limit,json=cp-rate-limit,proto3" json:"cp_rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 6, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit) GetProtocol() Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol {
	if x != nil {
		return x.Protocol
	}
	return Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_INVALID_ENUM_VALUE_Protocol
}

func (x *Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit) GetCpRateLimit() uint32 {
	if x != nil {
		return x.CpRateLimit
	}
	return 0
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	General           *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General           `protobuf:"bytes,1,opt,name=general,proto3" json:"general,omitempty"`
	Dot1QTerminations *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations `protobuf:"bytes,2,opt,name=dot1q_terminations,json=dot1q-terminations,proto3" json:"dot1q_terminations,omitempty"`
	QinqTerminations  *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations  `protobuf:"bytes,3,opt,name=qinq_terminations,json=qinq-terminations,proto3" json:"qinq_terminations,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) GetGeneral() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General {
	if x != nil {
		return x.General
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) GetDot1QTerminations() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations {
	if x != nil {
		return x.Dot1QTerminations
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp) GetQinqTerminations() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations {
	if x != nil {
		return x.QinqTerminations
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	General           *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General           `protobuf:"bytes,1,opt,name=general,proto3" json:"general,omitempty"`
	Dot1QTerminations *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations `protobuf:"bytes,2,opt,name=dot1q_terminations,json=dot1q-terminations,proto3" json:"dot1q_terminations,omitempty"`
	QinqTerminations  *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations  `protobuf:"bytes,3,opt,name=qinq_terminations,json=qinq-terminations,proto3" json:"qinq_terminations,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 1}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) GetGeneral() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General {
	if x != nil {
		return x.General
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) GetDot1QTerminations() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations {
	if x != nil {
		return x.Dot1QTerminations
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports) GetQinqTerminations() *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations {
	if x != nil {
		return x.QinqTerminations
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 2}
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir   uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs   uint32 `protobuf:"varint,2,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Prior bool   `protobuf:"varint,3,opt,name=prior,proto3" json:"prior,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General) GetPrior() bool {
	if x != nil {
		return x.Prior
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot1QTermination []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination `protobuf:"bytes,1,rep,name=dot1q_termination,json=dot1q-termination,proto3" json:"dot1q_termination,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations) GetDot1QTermination() []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination {
	if x != nil {
		return x.Dot1QTermination
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QinqTermination []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination `protobuf:"bytes,1,rep,name=qinq_termination,json=qinq-termination,proto3" json:"qinq_termination,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations) GetQinqTermination() []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination {
	if x != nil {
		return x.QinqTermination
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanBegin uint32 `protobuf:"varint,1,opt,name=vlan_begin,json=vlan-begin,proto3" json:"vlan_begin,omitempty"`
	VlanEnd   uint32 `protobuf:"varint,2,opt,name=vlan_end,json=vlan-end,proto3" json:"vlan_end,omitempty"`
	Cir       uint32 `protobuf:"varint,3,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs       uint32 `protobuf:"varint,4,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Prior     bool   `protobuf:"varint,5,opt,name=prior,proto3" json:"prior,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) GetVlanBegin() uint32 {
	if x != nil {
		return x.VlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) GetVlanEnd() uint32 {
	if x != nil {
		return x.VlanEnd
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination) GetPrior() bool {
	if x != nil {
		return x.Prior
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeVlan      uint32 `protobuf:"varint,1,opt,name=pe_vlan,json=pe-vlan,proto3" json:"pe_vlan,omitempty"`
	CeVlanBegin uint32 `protobuf:"varint,2,opt,name=ce_vlan_begin,json=ce-vlan-begin,proto3" json:"ce_vlan_begin,omitempty"`
	CeVlanEnd   uint32 `protobuf:"varint,3,opt,name=ce_vlan_end,json=ce-vlan-end,proto3" json:"ce_vlan_end,omitempty"`
	Cir         uint32 `protobuf:"varint,4,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs         uint32 `protobuf:"varint,5,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Prior       bool   `protobuf:"varint,6,opt,name=prior,proto3" json:"prior,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) GetPeVlan() uint32 {
	if x != nil {
		return x.PeVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) GetCeVlanBegin() uint32 {
	if x != nil {
		return x.CeVlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) GetCeVlanEnd() uint32 {
	if x != nil {
		return x.CeVlanEnd
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination) GetPrior() bool {
	if x != nil {
		return x.Prior
	}
	return false
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 1, 0}
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot1QTermination []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination `protobuf:"bytes,1,rep,name=dot1q_termination,json=dot1q-termination,proto3" json:"dot1q_termination,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations) GetDot1QTermination() []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination {
	if x != nil {
		return x.Dot1QTermination
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QinqTermination []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination `protobuf:"bytes,1,rep,name=qinq_termination,json=qinq-termination,proto3" json:"qinq_termination,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 1, 2}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations) GetQinqTermination() []*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination {
	if x != nil {
		return x.QinqTermination
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanBegin uint32 `protobuf:"varint,1,opt,name=vlan_begin,json=vlan-begin,proto3" json:"vlan_begin,omitempty"`
	VlanEnd   uint32 `protobuf:"varint,2,opt,name=vlan_end,json=vlan-end,proto3" json:"vlan_end,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 1, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination) GetVlanBegin() uint32 {
	if x != nil {
		return x.VlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination) GetVlanEnd() uint32 {
	if x != nil {
		return x.VlanEnd
	}
	return 0
}

type Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeVlan      uint32 `protobuf:"varint,1,opt,name=pe_vlan,json=pe-vlan,proto3" json:"pe_vlan,omitempty"`
	CeVlanBegin uint32 `protobuf:"varint,2,opt,name=ce_vlan_begin,json=ce-vlan-begin,proto3" json:"ce_vlan_begin,omitempty"`
	CeVlanEnd   uint32 `protobuf:"varint,3,opt,name=ce_vlan_end,json=ce-vlan-end,proto3" json:"ce_vlan_end,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 9, 1, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) GetPeVlan() uint32 {
	if x != nil {
		return x.PeVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) GetCeVlanBegin() uint32 {
	if x != nil {
		return x.CeVlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination) GetCeVlanEnd() uint32 {
	if x != nil {
		return x.CeVlanEnd
	}
	return 0
}

type Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress []*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress `protobuf:"bytes,1,rep,name=mac_address,json=mac-address,proto3" json:"mac_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 10, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss) GetMacAddress() []*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38, 10, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type Ifm_Interfaces_Interface_Dcn_Dcnv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultPort bool `protobuf:"varint,1,opt,name=default_port,json=default-port,proto3" json:"default_port,omitempty"`
	Enable      bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dcn_Dcnv4) Reset() {
	*x = Ifm_Interfaces_Interface_Dcn_Dcnv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dcn_Dcnv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dcn_Dcnv4) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dcn_Dcnv4) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dcn_Dcnv4.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dcn_Dcnv4) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 39, 0}
}

func (x *Ifm_Interfaces_Interface_Dcn_Dcnv4) GetDefaultPort() bool {
	if x != nil {
		return x.DefaultPort
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dcn_Dcnv4) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Ifm_Interfaces_Interface_Dcn_TcDcn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultPort bool `protobuf:"varint,1,opt,name=default_port,json=default-port,proto3" json:"default_port,omitempty"`
	Enable      bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dcn_TcDcn) Reset() {
	*x = Ifm_Interfaces_Interface_Dcn_TcDcn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dcn_TcDcn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dcn_TcDcn) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dcn_TcDcn) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dcn_TcDcn.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dcn_TcDcn) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 39, 1}
}

func (x *Ifm_Interfaces_Interface_Dcn_TcDcn) GetDefaultPort() bool {
	if x != nil {
		return x.DefaultPort
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dcn_TcDcn) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkSelectionEnable        bool                                                                  `protobuf:"varint,1,opt,name=link_selection_enable,json=link-selection-enable,proto3" json:"link_selection_enable,omitempty"`
	LinkSelectionAddress       string                                                                `protobuf:"bytes,2,opt,name=link_selection_address,json=link-selection-address,proto3" json:"link_selection_address,omitempty"`
	VendorSpecificEnable       bool                                                                  `protobuf:"varint,3,opt,name=vendor_specific_enable,json=vendor-specific-enable,proto3" json:"vendor_specific_enable,omitempty"`
	SubscriberIdEnable         bool                                                                  `protobuf:"varint,4,opt,name=subscriber_id_enable,json=subscriber-id-enable,proto3" json:"subscriber_id_enable,omitempty"`
	SubscriberIdMode           Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode `protobuf:"varint,5,opt,name=subscriber_id_mode,json=subscriber-id-mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode" json:"subscriber_id_mode,omitempty"`
	SubscriberIdSelfDefineText string                                                                `protobuf:"bytes,6,opt,name=subscriber_id_self_define_text,json=subscriber-id-self-define-text,proto3" json:"subscriber_id_self_define_text,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetLinkSelectionEnable() bool {
	if x != nil {
		return x.LinkSelectionEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetLinkSelectionAddress() string {
	if x != nil {
		return x.LinkSelectionAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetVendorSpecificEnable() bool {
	if x != nil {
		return x.VendorSpecificEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetSubscriberIdEnable() bool {
	if x != nil {
		return x.SubscriberIdEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetSubscriberIdMode() Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode {
	if x != nil {
		return x.SubscriberIdMode
	}
	return Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_INVALID_ENUM_VALUE_SubscriberIdMode
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetSubscriberIdSelfDefineText() string {
	if x != nil {
		return x.SubscriberIdSelfDefineText
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddress []*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress `protobuf:"bytes,1,rep,name=server_address,json=server-address,proto3" json:"server_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) GetServerAddress() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress {
	if x != nil {
		return x.ServerAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayAddress []*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress `protobuf:"bytes,1,rep,name=gateway_address,json=gateway-address,proto3" json:"gateway_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 2}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) GetGatewayAddress() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress {
	if x != nil {
		return x.GatewayAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpnName       string `protobuf:"bytes,1,opt,name=vpn_name,json=vpn-name,proto3" json:"vpn_name,omitempty"`
	SourceAddress string `protobuf:"bytes,2,opt,name=source_address,json=source-address,proto3" json:"source_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 3}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) GetVpnName() string {
	if x != nil {
		return x.VpnName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelaySourceOptionAddress []*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress `protobuf:"bytes,1,rep,name=relay_source_option_address,json=relay-source-option-address,proto3" json:"relay_source_option_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 4}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) GetRelaySourceOptionAddress() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress {
	if x != nil {
		return x.RelaySourceOptionAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt82VendorSpecific []*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific `protobuf:"bytes,1,rep,name=opt82_vendor_specific,json=opt82-vendor-specific,proto3" json:"opt82_vendor_specific,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 5}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) GetOpt82VendorSpecific() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific {
	if x != nil {
		return x.Opt82VendorSpecific
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Vendor      bool   `protobuf:"varint,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	OptionCode  uint32 `protobuf:"varint,3,opt,name=option_code,json=option-code,proto3" json:"option_code,omitempty"`
	VendorClass string `protobuf:"bytes,4,opt,name=vendor_class,json=vendor-class,proto3" json:"vendor_class,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 1, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetVendor() bool {
	if x != nil {
		return x.Vendor
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetOptionCode() uint32 {
	if x != nil {
		return x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetVendorClass() string {
	if x != nil {
		return x.VendorClass
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      bool   `protobuf:"varint,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	OptionCode  uint32 `protobuf:"varint,2,opt,name=option_code,json=option-code,proto3" json:"option_code,omitempty"`
	VendorClass string `protobuf:"bytes,3,opt,name=vendor_class,json=vendor-class,proto3" json:"vendor_class,omitempty"`
	IpAddress   string `protobuf:"bytes,4,opt,name=ip_address,json=ip-address,proto3" json:"ip_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 2, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetVendor() bool {
	if x != nil {
		return x.Vendor
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetOptionCode() uint32 {
	if x != nil {
		return x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetVendorClass() string {
	if x != nil {
		return x.VendorClass
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor        bool   `protobuf:"varint,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	OptionCode    uint32 `protobuf:"varint,2,opt,name=option_code,json=option-code,proto3" json:"option_code,omitempty"`
	VendorClass   string `protobuf:"bytes,3,opt,name=vendor_class,json=vendor-class,proto3" json:"vendor_class,omitempty"`
	SourceAddress string `protobuf:"bytes,4,opt,name=source_address,json=source-address,proto3" json:"source_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 4, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetVendor() bool {
	if x != nil {
		return x.Vendor
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetOptionCode() uint32 {
	if x != nil {
		return x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetVendorClass() string {
	if x != nil {
		return x.VendorClass
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubOptionNumber uint32                                                                                               `protobuf:"varint,1,opt,name=sub_option_number,json=sub-option-number,proto3" json:"sub_option_number,omitempty"`
	SubOptionFormat Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat `protobuf:"varint,2,opt,name=sub_option_format,json=sub-option-format,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat" json:"sub_option_format,omitempty"`
	IpAddress       string                                                                                               `protobuf:"bytes,3,opt,name=ip_address,json=ip-address,proto3" json:"ip_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 5, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) GetSubOptionNumber() uint32 {
	if x != nil {
		return x.SubOptionNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) GetSubOptionFormat() Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat {
	if x != nil {
		return x.SubOptionFormat
	}
	return Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_SOURCEX_IPX_ADDRESS
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpTtl        uint32                                                         `protobuf:"varint,1,opt,name=ip_ttl,json=ip-ttl,proto3" json:"ip_ttl,omitempty"`
	DscpOutbound uint32                                                         `protobuf:"varint,2,opt,name=dscp_outbound,json=dscp-outbound,proto3" json:"dscp_outbound,omitempty"`
	ServerEnable Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable `protobuf:"varint,3,opt,name=server_enable,json=server-enable,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable" json:"server_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) GetIpTtl() uint32 {
	if x != nil {
		return x.IpTtl
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) GetDscpOutbound() uint32 {
	if x != nil {
		return x.DscpOutbound
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) GetServerEnable() Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable {
	if x != nil {
		return x.ServerEnable
	}
	return Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_INVALID_ENUM_VALUE_ServerEnable
}

type Ifm_Interfaces_Interface_DhcpIf_Option82Formats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option82Format []*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format `protobuf:"bytes,1,rep,name=option82_format,json=option82-format,proto3" json:"option82_format,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_Option82Formats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82Formats.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) GetOption82Format() []*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format {
	if x != nil {
		return x.Option82Format
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41, 2}
}

type Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubOptionType  Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType `protobuf:"varint,1,opt,name=sub_option_type,json=sub-option-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType" json:"sub_option_type,omitempty"`
	UserDefineText string                                                                       `protobuf:"bytes,3,opt,name=user_define_text,json=user-define-text,proto3" json:"user_define_text,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41, 1, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) GetSubOptionType() Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType {
	if x != nil {
		return x.SubOptionType
	}
	return Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_INVALID_ENUM_VALUE_SubOptionType
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) GetUserDefineText() string {
	if x != nil {
		return x.UserDefineText
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FsmState          Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState `protobuf:"varint,1,opt,name=fsm_state,json=fsm-state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState" json:"fsm_state,omitempty"`
	MacAddress        string                                                      `protobuf:"bytes,2,opt,name=mac_address,json=mac-address,proto3" json:"mac_address,omitempty"`
	IpAddress         string                                                      `protobuf:"bytes,3,opt,name=ip_address,json=ip-address,proto3" json:"ip_address,omitempty"`
	IpMask            string                                                      `protobuf:"bytes,4,opt,name=ip_mask,json=ip-mask,proto3" json:"ip_mask,omitempty"`
	ServerAddress     string                                                      `protobuf:"bytes,5,opt,name=server_address,json=server-address,proto3" json:"server_address,omitempty"`
	LeaseObtainedTime string                                                      `protobuf:"bytes,6,opt,name=lease_obtained_time,json=lease-obtained-time,proto3" json:"lease_obtained_time,omitempty"`
	LeaseExpireTime   string                                                      `protobuf:"bytes,7,opt,name=lease_expire_time,json=lease-expire-time,proto3" json:"lease_expire_time,omitempty"`
	LeaseRenewTime    string                                                      `protobuf:"bytes,8,opt,name=lease_renew_time,json=lease-renew-time,proto3" json:"lease_renew_time,omitempty"`
	LeaseRebindTime   string                                                      `protobuf:"bytes,9,opt,name=lease_rebind_time,json=lease-rebind-time,proto3" json:"lease_rebind_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetFsmState() Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState {
	if x != nil {
		return x.FsmState
	}
	return Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_INIT
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetIpMask() string {
	if x != nil {
		return x.IpMask
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseObtainedTime() string {
	if x != nil {
		return x.LeaseObtainedTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseExpireTime() string {
	if x != nil {
		return x.LeaseExpireTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseRenewTime() string {
	if x != nil {
		return x.LeaseRenewTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseRebindTime() string {
	if x != nil {
		return x.LeaseRebindTime
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPacketsReceived     uint32 `protobuf:"varint,1,opt,name=total_packets_received,json=total-packets-received,proto3" json:"total_packets_received,omitempty"`
	OfferPacketsReceived     uint32 `protobuf:"varint,2,opt,name=offer_packets_received,json=offer-packets-received,proto3" json:"offer_packets_received,omitempty"`
	AckPacketsReceived       uint32 `protobuf:"varint,3,opt,name=ack_packets_received,json=ack-packets-received,proto3" json:"ack_packets_received,omitempty"`
	NakPacketsReceived       uint32 `protobuf:"varint,4,opt,name=nak_packets_received,json=nak-packets-received,proto3" json:"nak_packets_received,omitempty"`
	TotalPacketsSend         uint32 `protobuf:"varint,5,opt,name=total_packets_send,json=total-packets-send,proto3" json:"total_packets_send,omitempty"`
	DiscoveryPacketsSend     uint32 `protobuf:"varint,6,opt,name=discovery_packets_send,json=discovery-packets-send,proto3" json:"discovery_packets_send,omitempty"`
	RequestPacketsSend       uint32 `protobuf:"varint,7,opt,name=request_packets_send,json=request-packets-send,proto3" json:"request_packets_send,omitempty"`
	RebootRequestPacketsSend uint32 `protobuf:"varint,8,opt,name=reboot_request_packets_send,json=reboot-request-packets-send,proto3" json:"reboot_request_packets_send,omitempty"`
	SelectRequestPacketsSend uint32 `protobuf:"varint,9,opt,name=select_request_packets_send,json=select-request-packets-send,proto3" json:"select_request_packets_send,omitempty"`
	RenewRequestPacketsSend  uint32 `protobuf:"varint,10,opt,name=renew_request_packets_send,json=renew-request-packets-send,proto3" json:"renew_request_packets_send,omitempty"`
	RebindRequestPacketsSend uint32 `protobuf:"varint,11,opt,name=rebind_request_packets_send,json=rebind-request-packets-send,proto3" json:"rebind_request_packets_send,omitempty"`
	DeclinePacketsSend       uint32 `protobuf:"varint,12,opt,name=decline_packets_send,json=decline-packets-send,proto3" json:"decline_packets_send,omitempty"`
	ReleasePacketsSend       uint32 `protobuf:"varint,13,opt,name=release_packets_send,json=release-packets-send,proto3" json:"release_packets_send,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetTotalPacketsReceived() uint32 {
	if x != nil {
		return x.TotalPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetOfferPacketsReceived() uint32 {
	if x != nil {
		return x.OfferPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetAckPacketsReceived() uint32 {
	if x != nil {
		return x.AckPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetNakPacketsReceived() uint32 {
	if x != nil {
		return x.NakPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetTotalPacketsSend() uint32 {
	if x != nil {
		return x.TotalPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetDiscoveryPacketsSend() uint32 {
	if x != nil {
		return x.DiscoveryPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRequestPacketsSend() uint32 {
	if x != nil {
		return x.RequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRebootRequestPacketsSend() uint32 {
	if x != nil {
		return x.RebootRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetSelectRequestPacketsSend() uint32 {
	if x != nil {
		return x.SelectRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRenewRequestPacketsSend() uint32 {
	if x != nil {
		return x.RenewRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRebindRequestPacketsSend() uint32 {
	if x != nil {
		return x.RebindRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetDeclinePacketsSend() uint32 {
	if x != nil {
		return x.DeclinePacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetReleasePacketsSend() uint32 {
	if x != nil {
		return x.ReleasePacketsSend
	}
	return 0
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                  bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	TrustEnable             bool   `protobuf:"varint,2,opt,name=trust_enable,json=trust-enable,proto3" json:"trust_enable,omitempty"`
	CheckArpEnable          bool   `protobuf:"varint,3,opt,name=check_arp_enable,json=check-arp-enable,proto3" json:"check_arp_enable,omitempty"`
	AlarmArpEnable          bool   `protobuf:"varint,4,opt,name=alarm_arp_enable,json=alarm-arp-enable,proto3" json:"alarm_arp_enable,omitempty"`
	AlarmArpThreshold       uint32 `protobuf:"varint,5,opt,name=alarm_arp_threshold,json=alarm-arp-threshold,proto3" json:"alarm_arp_threshold,omitempty"`
	CheckIpEnable           bool   `protobuf:"varint,6,opt,name=check_ip_enable,json=check-ip-enable,proto3" json:"check_ip_enable,omitempty"`
	AlarmIpEnable           bool   `protobuf:"varint,7,opt,name=alarm_ip_enable,json=alarm-ip-enable,proto3" json:"alarm_ip_enable,omitempty"`
	AlarmIpThreshold        uint32 `protobuf:"varint,8,opt,name=alarm_ip_threshold,json=alarm-ip-threshold,proto3" json:"alarm_ip_threshold,omitempty"`
	AlarmReplyEnable        bool   `protobuf:"varint,9,opt,name=alarm_reply_enable,json=alarm-reply-enable,proto3" json:"alarm_reply_enable,omitempty"`
	AlarmReplyThreshold     uint32 `protobuf:"varint,10,opt,name=alarm_reply_threshold,json=alarm-reply-threshold,proto3" json:"alarm_reply_threshold,omitempty"`
	CheckMacEnable          bool   `protobuf:"varint,11,opt,name=check_mac_enable,json=check-mac-enable,proto3" json:"check_mac_enable,omitempty"`
	AlarmMacEnable          bool   `protobuf:"varint,12,opt,name=alarm_mac_enable,json=alarm-mac-enable,proto3" json:"alarm_mac_enable,omitempty"`
	AlarmMacThreshold       uint32 `protobuf:"varint,13,opt,name=alarm_mac_threshold,json=alarm-mac-threshold,proto3" json:"alarm_mac_threshold,omitempty"`
	CheckUserBindEnable     bool   `protobuf:"varint,14,opt,name=check_user_bind_enable,json=check-user-bind-enable,proto3" json:"check_user_bind_enable,omitempty"`
	AlarmUserBindEnable     bool   `protobuf:"varint,15,opt,name=alarm_user_bind_enable,json=alarm-user-bind-enable,proto3" json:"alarm_user_bind_enable,omitempty"`
	AlarmUserBindThreshold  uint32 `protobuf:"varint,16,opt,name=alarm_user_bind_threshold,json=alarm-user-bind-threshold,proto3" json:"alarm_user_bind_threshold,omitempty"`
	MaxUserNumber           uint32 `protobuf:"varint,17,opt,name=max_user_number,json=max-user-number,proto3" json:"max_user_number,omitempty"`
	AlarmUserLimitEnable    bool   `protobuf:"varint,18,opt,name=alarm_user_limit_enable,json=alarm-user-limit-enable,proto3" json:"alarm_user_limit_enable,omitempty"`
	AlarmUserLimitThreshold uint32 `protobuf:"varint,19,opt,name=alarm_user_limit_threshold,json=alarm-user-limit-threshold,proto3" json:"alarm_user_limit_threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetTrustEnable() bool {
	if x != nil {
		return x.TrustEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckArpEnable() bool {
	if x != nil {
		return x.CheckArpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmArpEnable() bool {
	if x != nil {
		return x.AlarmArpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmArpThreshold() uint32 {
	if x != nil {
		return x.AlarmArpThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckIpEnable() bool {
	if x != nil {
		return x.CheckIpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmIpEnable() bool {
	if x != nil {
		return x.AlarmIpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmIpThreshold() uint32 {
	if x != nil {
		return x.AlarmIpThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmReplyEnable() bool {
	if x != nil {
		return x.AlarmReplyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmReplyThreshold() uint32 {
	if x != nil {
		return x.AlarmReplyThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckMacEnable() bool {
	if x != nil {
		return x.CheckMacEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmMacEnable() bool {
	if x != nil {
		return x.AlarmMacEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmMacThreshold() uint32 {
	if x != nil {
		return x.AlarmMacThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckUserBindEnable() bool {
	if x != nil {
		return x.CheckUserBindEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserBindEnable() bool {
	if x != nil {
		return x.AlarmUserBindEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserBindThreshold() uint32 {
	if x != nil {
		return x.AlarmUserBindThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetMaxUserNumber() uint32 {
	if x != nil {
		return x.MaxUserNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserLimitEnable() bool {
	if x != nil {
		return x.AlarmUserLimitEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserLimitThreshold() uint32 {
	if x != nil {
		return x.AlarmUserLimitThreshold
	}
	return 0
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticBind []*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind `protobuf:"bytes,1,rep,name=static_bind,json=static-bind,proto3" json:"static_bind,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) GetStaticBind() []*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind {
	if x != nil {
		return x.StaticBind
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress  string `protobuf:"bytes,1,opt,name=ip_address,json=ip-address,proto3" json:"ip_address,omitempty"`
	VlanId     uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	CevlanId   uint32 `protobuf:"varint,3,opt,name=cevlan_id,json=cevlan-id,proto3" json:"cevlan_id,omitempty"`
	MacAddress string `protobuf:"bytes,4,opt,name=mac_address,json=mac-address,proto3" json:"mac_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43, 1, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetCevlanId() uint32 {
	if x != nil {
		return x.CevlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress `protobuf:"bytes,1,rep,name=destination_address,json=destination-address,proto3" json:"destination_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 0}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) GetDestinationAddress() []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationIf []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf `protobuf:"bytes,1,rep,name=destination_if,json=destination-if,proto3" json:"destination_if,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 1}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) GetDestinationIf() []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf {
	if x != nil {
		return x.DestinationIf
	}
	return nil
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebuildInterfaceId bool `protobuf:"varint,1,opt,name=rebuild_interface_id,json=rebuild-interface-id,proto3" json:"rebuild_interface_id,omitempty"`
	RebuildRemoteId    bool `protobuf:"varint,2,opt,name=rebuild_remote_id,json=rebuild-remote-id,proto3" json:"rebuild_remote_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 2}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) GetRebuildInterfaceId() bool {
	if x != nil {
		return x.RebuildInterfaceId
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) GetRebuildRemoteId() bool {
	if x != nil {
		return x.RebuildRemoteId
	}
	return false
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessLimit     uint32 `protobuf:"varint,1,opt,name=access_limit,json=access-limit,proto3" json:"access_limit,omitempty"`
	AccessVlanLimit uint32 `protobuf:"varint,2,opt,name=access_vlan_limit,json=access-vlan-limit,proto3" json:"access_vlan_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 3}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) GetAccessLimit() uint32 {
	if x != nil {
		return x.AccessLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) GetAccessVlanLimit() uint32 {
	if x != nil {
		return x.AccessVlanLimit
	}
	return 0
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DegradeCost uint32 `protobuf:"varint,1,opt,name=degrade_cost,json=degrade-cost,proto3" json:"degrade_cost,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 4}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) GetDegradeCost() uint32 {
	if x != nil {
		return x.DegradeCost
	}
	return 0
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6Address string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6-address,proto3" json:"ipv6_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName string `protobuf:"bytes,1,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type Ifm_Interfaces_Interface_Efm_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                 Ifm_Interfaces_Interface_Efm_Session_State                 `protobuf:"varint,1,opt,name=state,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_State" json:"state,omitempty"`
	Mode                  Ifm_Interfaces_Interface_Efm_Session_Mode                  `protobuf:"varint,2,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_Mode" json:"mode,omitempty"`
	PacketMaxSize         uint32                                                     `protobuf:"varint,3,opt,name=packet_max_size,json=packet-max-size,proto3" json:"packet_max_size,omitempty"`
	Interval              uint32                                                     `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Timeout               uint32                                                     `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	IgnoreLoopbackRequest Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest `protobuf:"varint,6,opt,name=ignore_loopback_request,json=ignore-loopback-request,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest" json:"ignore_loopback_request,omitempty"`
	TriggerIfDown         Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown         `protobuf:"varint,7,opt,name=trigger_if_down,json=trigger-if-down,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown" json:"trigger_if_down,omitempty"`
	HoldUpTime            uint32                                                     `protobuf:"varint,8,opt,name=hold_up_time,json=hold-up-time,proto3" json:"hold_up_time,omitempty"`
	TriggerMacRenew       bool                                                       `protobuf:"varint,9,opt,name=trigger_mac_renew,json=trigger-mac-renew,proto3" json:"trigger_mac_renew,omitempty"`
	ErrorFrame            *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame           `protobuf:"bytes,10,opt,name=error_frame,json=error-frame,proto3" json:"error_frame,omitempty"`
	ErrorFrameSecond      *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond     `protobuf:"bytes,11,opt,name=error_frame_second,json=error-frame-second,proto3" json:"error_frame_second,omitempty"`
	ErrorCode             *Ifm_Interfaces_Interface_Efm_Session_ErrorCode            `protobuf:"bytes,12,opt,name=error_code,json=error-code,proto3" json:"error_code,omitempty"`
	ErrorFramePeriod      *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod     `protobuf:"bytes,13,opt,name=error_frame_period,json=error-frame-period,proto3" json:"error_frame_period,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0}
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetState() Ifm_Interfaces_Interface_Efm_Session_State {
	if x != nil {
		return x.State
	}
	return Ifm_Interfaces_Interface_Efm_Session_State_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetMode() Ifm_Interfaces_Interface_Efm_Session_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Efm_Session_Mode_PASSIVE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetPacketMaxSize() uint32 {
	if x != nil {
		return x.PacketMaxSize
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetIgnoreLoopbackRequest() Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest {
	if x != nil {
		return x.IgnoreLoopbackRequest
	}
	return Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetTriggerIfDown() Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown {
	if x != nil {
		return x.TriggerIfDown
	}
	return Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetHoldUpTime() uint32 {
	if x != nil {
		return x.HoldUpTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetTriggerMacRenew() bool {
	if x != nil {
		return x.TriggerMacRenew
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorFrame() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame {
	if x != nil {
		return x.ErrorFrame
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorFrameSecond() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond {
	if x != nil {
		return x.ErrorFrameSecond
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorCode() *Ifm_Interfaces_Interface_Efm_Session_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorFramePeriod() *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod {
	if x != nil {
		return x.ErrorFramePeriod
	}
	return nil
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification `protobuf:"varint,1,opt,name=notification,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification" json:"notification,omitempty"`
	Period       uint32                                                       `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Threshold    uint32                                                       `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	PeriodUnit   Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit   `protobuf:"varint,4,opt,name=period_unit,json=period-unit,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit" json:"period_unit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrame.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification {
	if x != nil {
		return x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetPeriodUnit() Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit {
	if x != nil {
		return x.PeriodUnit
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_SECOND
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification `protobuf:"varint,1,opt,name=notification,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification" json:"notification,omitempty"`
	Period       uint32                                                             `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Threshold    uint32                                                             `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification {
	if x != nil {
		return x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification `protobuf:"varint,1,opt,name=notification,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification" json:"notification,omitempty"`
	Period       uint32                                                      `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Threshold    uint32                                                      `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorCode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorCode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorCode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification {
	if x != nil {
		return x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification `protobuf:"varint,1,opt,name=notification,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification" json:"notification,omitempty"`
	Period       uint32                                                             `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Threshold    uint32                                                             `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification {
	if x != nil {
		return x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Ifm_Interfaces_Interface_Evpn_ProtocolActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolAction []*Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction `protobuf:"bytes,1,rep,name=protocol_action,json=protocol-action,proto3" json:"protocol_action,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions) Reset() {
	*x = Ifm_Interfaces_Interface_Evpn_ProtocolActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Evpn_ProtocolActions) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Evpn_ProtocolActions.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Evpn_ProtocolActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 46, 0}
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions) GetProtocolAction() []*Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction {
	if x != nil {
		return x.ProtocolAction
	}
	return nil
}

type Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolType Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType `protobuf:"varint,1,opt,name=protocol_type,json=protocol-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType" json:"protocol_type,omitempty"`
	Action       Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action       `protobuf:"varint,2,opt,name=action,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action" json:"action,omitempty"`
	Mode         Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode         `protobuf:"varint,3,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode" json:"mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) Reset() {
	*x = Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 46, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) GetProtocolType() Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_ProtocolType
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) GetAction() Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action {
	if x != nil {
		return x.Action
	}
	return Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_Action
}

func (x *Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction) GetMode() Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode_NORMAL
}

type Ifm_Interfaces_Interface_FlowRecognition_FlowEnables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowEnable []*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable `protobuf:"bytes,1,rep,name=flow_enable,json=flow-enable,proto3" json:"flow_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables) Reset() {
	*x = Ifm_Interfaces_Interface_FlowRecognition_FlowEnables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowRecognition_FlowEnables.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 55, 0}
}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables) GetFlowEnable() []*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable {
	if x != nil {
		return x.FlowEnable
	}
	return nil
}

type Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction" json:"direction,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable) Reset() {
	*x = Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 55, 0, 0}
}

func (x *Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable) GetDirection() Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction_INBOUND
}

type Ifm_Interfaces_Interface_FlowspecForward_Refluence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Refluence) Reset() {
	*x = Ifm_Interfaces_Interface_FlowspecForward_Refluence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Refluence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowspecForward_Refluence) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Refluence) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowspecForward_Refluence.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowspecForward_Refluence) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 56, 0}
}

type Ifm_Interfaces_Interface_FlowspecForward_TunnelPop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_TunnelPop) Reset() {
	*x = Ifm_Interfaces_Interface_FlowspecForward_TunnelPop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_TunnelPop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowspecForward_TunnelPop) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowspecForward_TunnelPop) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowspecForward_TunnelPop.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowspecForward_TunnelPop) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 56, 1}
}

type Ifm_Interfaces_Interface_FlowspecForward_Disables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disable []*Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable `protobuf:"bytes,1,rep,name=disable,proto3" json:"disable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables) Reset() {
	*x = Ifm_Interfaces_Interface_FlowspecForward_Disables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowspecForward_Disables) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowspecForward_Disables.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowspecForward_Disables) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 56, 2}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables) GetDisable() []*Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable {
	if x != nil {
		return x.Disable
	}
	return nil
}

type Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType" json:"flow_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable) Reset() {
	*x = Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 56, 2, 0}
}

func (x *Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable) GetFlowType() Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_INVALID_ENUM_VALUE_FlowType
}

type Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberLimit []*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit `protobuf:"bytes,1,rep,name=number_limit,json=number-limit,proto3" json:"number_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits) Reset() {
	*x = Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 59, 0}
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits) GetNumberLimit() []*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit {
	if x != nil {
		return x.NumberLimit
	}
	return nil
}

type Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitMaxEntry uint32 `protobuf:"varint,1,opt,name=limit_max_entry,json=limit-max-entry,proto3" json:"limit_max_entry,omitempty"`
	VlanIdBegin   uint32 `protobuf:"varint,2,opt,name=vlan_id_begin,json=vlan-id-begin,proto3" json:"vlan_id_begin,omitempty"`
	VlanIdEnd     uint32 `protobuf:"varint,3,opt,name=vlan_id_end,json=vlan-id-end,proto3" json:"vlan_id_end,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) Reset() {
	*x = Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 59, 0, 0}
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) GetLimitMaxEntry() uint32 {
	if x != nil {
		return x.LimitMaxEntry
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) GetVlanIdBegin() uint32 {
	if x != nil {
		return x.VlanIdBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit) GetVlanIdEnd() uint32 {
	if x != nil {
		return x.VlanIdEnd
	}
	return 0
}

type Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolType Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType `protobuf:"varint,1,opt,name=protocol_type,json=protocol-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType" json:"protocol_type,omitempty"`
	Action       Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action       `protobuf:"varint,2,opt,name=action,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action" json:"action,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction) Reset() {
	*x = Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 61, 0}
}

func (x *Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction) GetProtocolType() Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_INVALID_ENUM_VALUE_ProtocolType
}

func (x *Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction) GetAction() Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action {
	if x != nil {
		return x.Action
	}
	return Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action_TRANSPORT
}

type Ifm_Interfaces_Interface_Lldp_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus Ifm_Interfaces_Interface_Lldp_Session_AdminStatus `protobuf:"varint,1,opt,name=admin_status,json=admin-status,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_AdminStatus" json:"admin_status,omitempty"`
	TlvEnable   *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable  `protobuf:"bytes,2,opt,name=tlv_enable,json=tlv-enable,proto3" json:"tlv_enable,omitempty"`
	Neighbors   *Ifm_Interfaces_Interface_Lldp_Session_Neighbors  `protobuf:"bytes,3,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) GetAdminStatus() Ifm_Interfaces_Interface_Lldp_Session_AdminStatus {
	if x != nil {
		return x.AdminStatus
	}
	return Ifm_Interfaces_Interface_Lldp_Session_INVALID_ENUM_VALUE_AdminStatus
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) GetTlvEnable() *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable {
	if x != nil {
		return x.TlvEnable
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) GetNeighbors() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_TlvEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagementAddress    bool  `protobuf:"varint,1,opt,name=management_address,json=management-address,proto3" json:"management_address,omitempty"`
	PortDescription      bool  `protobuf:"varint,2,opt,name=port_description,json=port-description,proto3" json:"port_description,omitempty"`
	SystemCapability     bool  `protobuf:"varint,3,opt,name=system_capability,json=system-capability,proto3" json:"system_capability,omitempty"`
	SystemDescription    bool  `protobuf:"varint,4,opt,name=system_description,json=system-description,proto3" json:"system_description,omitempty"`
	SystemName           bool  `protobuf:"varint,5,opt,name=system_name,json=system-name,proto3" json:"system_name,omitempty"`
	PortVlanId           bool  `protobuf:"varint,6,opt,name=port_vlan_id,json=port-vlan-id,proto3" json:"port_vlan_id,omitempty"`
	ProtocolVlanIdEnable bool  `protobuf:"varint,7,opt,name=protocol_vlan_id_enable,json=protocol-vlan-id-enable,proto3" json:"protocol_vlan_id_enable,omitempty"`
	ProtocolVlanId       int32 `protobuf:"varint,8,opt,name=protocol_vlan_id,json=protocol-vlan-id,proto3" json:"protocol_vlan_id,omitempty"`
	VlanNameEnable       bool  `protobuf:"varint,9,opt,name=vlan_name_enable,json=vlan-name-enable,proto3" json:"vlan_name_enable,omitempty"`
	VlanNameId           int32 `protobuf:"varint,10,opt,name=vlan_name_id,json=vlan-name-id,proto3" json:"vlan_name_id,omitempty"`
	ProtocolIdentity     bool  `protobuf:"varint,11,opt,name=protocol_identity,json=protocol-identity,proto3" json:"protocol_identity,omitempty"`
	MacPhysic            bool  `protobuf:"varint,12,opt,name=mac_physic,json=mac-physic,proto3" json:"mac_physic,omitempty"`
	LinkAggregation      bool  `protobuf:"varint,13,opt,name=link_aggregation,json=link-aggregation,proto3" json:"link_aggregation,omitempty"`
	MaxFrameSize         bool  `protobuf:"varint,14,opt,name=max_frame_size,json=max-frame-size,proto3" json:"max_frame_size,omitempty"`
	Ddp                  bool  `protobuf:"varint,15,opt,name=ddp,proto3" json:"ddp,omitempty"`
	Identity             bool  `protobuf:"varint,16,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_TlvEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_TlvEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetManagementAddress() bool {
	if x != nil {
		return x.ManagementAddress
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetPortDescription() bool {
	if x != nil {
		return x.PortDescription
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetSystemCapability() bool {
	if x != nil {
		return x.SystemCapability
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetSystemDescription() bool {
	if x != nil {
		return x.SystemDescription
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetSystemName() bool {
	if x != nil {
		return x.SystemName
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetPortVlanId() bool {
	if x != nil {
		return x.PortVlanId
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetProtocolVlanIdEnable() bool {
	if x != nil {
		return x.ProtocolVlanIdEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetProtocolVlanId() int32 {
	if x != nil {
		return x.ProtocolVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetVlanNameEnable() bool {
	if x != nil {
		return x.VlanNameEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetVlanNameId() int32 {
	if x != nil {
		return x.VlanNameId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetProtocolIdentity() bool {
	if x != nil {
		return x.ProtocolIdentity
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetMacPhysic() bool {
	if x != nil {
		return x.MacPhysic
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetLinkAggregation() bool {
	if x != nil {
		return x.LinkAggregation
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetMaxFrameSize() bool {
	if x != nil {
		return x.MaxFrameSize
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetDdp() bool {
	if x != nil {
		return x.Ddp
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetIdentity() bool {
	if x != nil {
		return x.Identity
	}
	return false
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor `protobuf:"bytes,1,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) GetNeighbor() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                              uint32                                                                                       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ChassisIdSubType                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType                    `protobuf:"varint,2,opt,name=chassis_id_sub_type,json=chassis-id-sub-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType" json:"chassis_id_sub_type,omitempty"`
	ChassisId                          string                                                                                       `protobuf:"bytes,3,opt,name=chassis_id,json=chassis-id,proto3" json:"chassis_id,omitempty"`
	PortIdSubType                      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType                       `protobuf:"varint,4,opt,name=port_id_sub_type,json=port-id-sub-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType" json:"port_id_sub_type,omitempty"`
	PortId                             string                                                                                       `protobuf:"bytes,5,opt,name=port_id,json=port-id,proto3" json:"port_id,omitempty"`
	PortDescription                    string                                                                                       `protobuf:"bytes,6,opt,name=port_description,json=port-description,proto3" json:"port_description,omitempty"`
	SystemName                         string                                                                                       `protobuf:"bytes,7,opt,name=system_name,json=system-name,proto3" json:"system_name,omitempty"`
	SystemDescription                  string                                                                                       `protobuf:"bytes,8,opt,name=system_description,json=system-description,proto3" json:"system_description,omitempty"`
	SystemCapabilitiesEnabled          string                                                                                       `protobuf:"bytes,9,opt,name=system_capabilities_enabled,json=system-capabilities-enabled,proto3" json:"system_capabilities_enabled,omitempty"`
	SystemCapabilitiesSupported        string                                                                                       `protobuf:"bytes,10,opt,name=system_capabilities_supported,json=system-capabilities-supported,proto3" json:"system_capabilities_supported,omitempty"`
	ExpiredTime                        int32                                                                                        `protobuf:"varint,11,opt,name=expired_time,json=expired-time,proto3" json:"expired_time,omitempty"`
	PortVlanId                         int32                                                                                        `protobuf:"varint,12,opt,name=port_vlan_id,json=port-vlan-id,proto3" json:"port_vlan_id,omitempty"`
	ProtocolIdentity                   string                                                                                       `protobuf:"bytes,13,opt,name=protocol_identity,json=protocol-identity,proto3" json:"protocol_identity,omitempty"`
	AutoNegotiationSupported           Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported            `protobuf:"varint,14,opt,name=auto_negotiation_supported,json=auto-negotiation-supported,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported" json:"auto_negotiation_supported,omitempty"`
	AutoNegotiationEnabled             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled              `protobuf:"varint,15,opt,name=auto_negotiation_enabled,json=auto-negotiation-enabled,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled" json:"auto_negotiation_enabled,omitempty"`
	AutoNegotiationCapability          string                                                                                       `protobuf:"bytes,16,opt,name=auto_negotiation_capability,json=auto-negotiation-capability,proto3" json:"auto_negotiation_capability,omitempty"`
	OperMauType                        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType                         `protobuf:"varint,17,opt,name=oper_mau_type,json=oper-mau-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType" json:"oper_mau_type,omitempty"`
	LinkAggregationSupported           Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported            `protobuf:"varint,18,opt,name=link_aggregation_supported,json=link-aggregation-supported,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported" json:"link_aggregation_supported,omitempty"`
	LinkAggregationEnabled             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled              `protobuf:"varint,19,opt,name=link_aggregation_enabled,json=link-aggregation-enabled,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled" json:"link_aggregation_enabled,omitempty"`
	AggregationPortId                  int32                                                                                        `protobuf:"varint,20,opt,name=aggregation_port_id,json=aggregation-port-id,proto3" json:"aggregation_port_id,omitempty"`
	MaximumFrameSize                   int32                                                                                        `protobuf:"varint,21,opt,name=maximum_frame_size,json=maximum-frame-size,proto3" json:"maximum_frame_size,omitempty"`
	DiscoveredTime                     string                                                                                       `protobuf:"bytes,22,opt,name=discovered_time,json=discovered-time,proto3" json:"discovered_time,omitempty"`
	ManagementAddresss                 *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss                 `protobuf:"bytes,23,opt,name=management_addresss,json=management-addresss,proto3" json:"management_addresss,omitempty"`
	ProtocolVlans                      *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans                      `protobuf:"bytes,24,opt,name=protocol_vlans,json=protocol-vlans,proto3" json:"protocol_vlans,omitempty"`
	VlanNames                          *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames                          `protobuf:"bytes,25,opt,name=vlan_names,json=vlan-names,proto3" json:"vlan_names,omitempty"`
	UnknownTlvs                        *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs                        `protobuf:"bytes,26,opt,name=unknown_tlvs,json=unknown-tlvs,proto3" json:"unknown_tlvs,omitempty"`
	UnknownOrganizationallyDefinedTlvs *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs `protobuf:"bytes,27,opt,name=unknown_organizationally_defined_tlvs,json=unknown-organizationally-defined-tlvs,proto3" json:"unknown_organizationally_defined_tlvs,omitempty"`
	DdpTlv                             *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv                             `protobuf:"bytes,28,opt,name=ddp_tlv,json=ddp-tlv,proto3" json:"ddp_tlv,omitempty"`
	IdentityTlv                        *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv                        `protobuf:"bytes,29,opt,name=identity_tlv,json=identity-tlv,proto3" json:"identity_tlv,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetChassisIdSubType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType {
	if x != nil {
		return x.ChassisIdSubType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetChassisId() string {
	if x != nil {
		return x.ChassisId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortIdSubType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType {
	if x != nil {
		return x.PortIdSubType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortDescription() string {
	if x != nil {
		return x.PortDescription
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemDescription() string {
	if x != nil {
		return x.SystemDescription
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemCapabilitiesEnabled() string {
	if x != nil {
		return x.SystemCapabilitiesEnabled
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemCapabilitiesSupported() string {
	if x != nil {
		return x.SystemCapabilitiesSupported
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetExpiredTime() int32 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortVlanId() int32 {
	if x != nil {
		return x.PortVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetProtocolIdentity() string {
	if x != nil {
		return x.ProtocolIdentity
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAutoNegotiationSupported() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported {
	if x != nil {
		return x.AutoNegotiationSupported
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAutoNegotiationEnabled() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled {
	if x != nil {
		return x.AutoNegotiationEnabled
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAutoNegotiationCapability() string {
	if x != nil {
		return x.AutoNegotiationCapability
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetOperMauType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType {
	if x != nil {
		return x.OperMauType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_UNKNOWN
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetLinkAggregationSupported() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported {
	if x != nil {
		return x.LinkAggregationSupported
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetLinkAggregationEnabled() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled {
	if x != nil {
		return x.LinkAggregationEnabled
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAggregationPortId() int32 {
	if x != nil {
		return x.AggregationPortId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetMaximumFrameSize() int32 {
	if x != nil {
		return x.MaximumFrameSize
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetDiscoveredTime() string {
	if x != nil {
		return x.DiscoveredTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetManagementAddresss() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss {
	if x != nil {
		return x.ManagementAddresss
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetProtocolVlans() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans {
	if x != nil {
		return x.ProtocolVlans
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetVlanNames() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames {
	if x != nil {
		return x.VlanNames
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetUnknownTlvs() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs {
	if x != nil {
		return x.UnknownTlvs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetUnknownOrganizationallyDefinedTlvs() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs {
	if x != nil {
		return x.UnknownOrganizationallyDefinedTlvs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetDdpTlv() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv {
	if x != nil {
		return x.DdpTlv
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetIdentityTlv() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv {
	if x != nil {
		return x.IdentityTlv
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagementAddress []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress `protobuf:"bytes,1,rep,name=management_address,json=management-address,proto3" json:"management_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) GetManagementAddress() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress {
	if x != nil {
		return x.ManagementAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVlan []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan `protobuf:"bytes,1,rep,name=protocol_vlan,json=protocol-vlan,proto3" json:"protocol_vlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) GetProtocolVlan() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan {
	if x != nil {
		return x.ProtocolVlan
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName `protobuf:"bytes,1,rep,name=vlan_name,json=vlan-name,proto3" json:"vlan_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) GetVlanName() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownTlv []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv `protobuf:"bytes,1,rep,name=unknown_tlv,json=unknown-tlv,proto3" json:"unknown_tlv,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) GetUnknownTlv() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv {
	if x != nil {
		return x.UnknownTlv
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownOrganizationallyDefinedTlv []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv `protobuf:"bytes,1,rep,name=unknown_organizationally_defined_tlv,json=unknown-organizationally-defined-tlv,proto3" json:"unknown_organizationally_defined_tlv,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 4}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) GetUnknownOrganizationallyDefinedTlv() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv {
	if x != nil {
		return x.UnknownOrganizationallyDefinedTlv
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serial-number,proto3" json:"serial_number,omitempty"`
	IfIndex      uint32 `protobuf:"varint,2,opt,name=if_index,json=if-index,proto3" json:"if_index,omitempty"`
	Ipv4Address  string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4-address,proto3" json:"ipv4_address,omitempty"`
	MacAddress   string `protobuf:"bytes,4,opt,name=mac_address,json=mac-address,proto3" json:"mac_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 5}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 6}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type" json:"type,omitempty"`
	Value     string                                                                                                  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Length    int32                                                                                                   `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	IfSubType Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType `protobuf:"varint,4,opt,name=if_sub_type,json=if-sub-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType" json:"if_sub_type,omitempty"`
	IfId      int32                                                                                                   `protobuf:"varint,5,opt,name=if_id,json=if-id,proto3" json:"if_id,omitempty"`
	Oid       string                                                                                                  `protobuf:"bytes,6,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetIfSubType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType {
	if x != nil {
		return x.IfSubType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetIfId() int32 {
	if x != nil {
		return x.IfId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                                                                                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Supported Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported `protobuf:"varint,2,opt,name=supported,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported" json:"supported,omitempty"`
	Enabled   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled   `protobuf:"varint,3,opt,name=enabled,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled" json:"enabled,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) GetSupported() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported {
	if x != nil {
		return x.Supported
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) GetEnabled() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled {
	if x != nil {
		return x.Enabled
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_NO
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Info string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui     string `protobuf:"bytes,1,opt,name=oui,proto3" json:"oui,omitempty"`
	SubType int32  `protobuf:"varint,2,opt,name=sub_type,json=sub-type,proto3" json:"sub_type,omitempty"`
	Index   int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Info    string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 64, 0, 1, 0, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Ifm_Interfaces_Interface_Loadbalance_Ucmp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Loadbalance_Ucmp) Reset() {
	*x = Ifm_Interfaces_Interface_Loadbalance_Ucmp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Loadbalance_Ucmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Loadbalance_Ucmp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Loadbalance_Ucmp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loadbalance_Ucmp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Loadbalance_Ucmp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 65, 0}
}

type Ifm_Interfaces_Interface_Loadbalance_Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Loadbalance_Packet) Reset() {
	*x = Ifm_Interfaces_Interface_Loadbalance_Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Loadbalance_Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Loadbalance_Packet) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Loadbalance_Packet) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loadbalance_Packet.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Loadbalance_Packet) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 65, 1}
}

type Ifm_Interfaces_Interface_Loopdetect_MacWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Loopdetect_MacWithdraw) Reset() {
	*x = Ifm_Interfaces_Interface_Loopdetect_MacWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Loopdetect_MacWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Loopdetect_MacWithdraw) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Loopdetect_MacWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loopdetect_MacWithdraw.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Loopdetect_MacWithdraw) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 66, 0}
}

type Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockTime uint32 `protobuf:"varint,1,opt,name=block_time,json=block-time,proto3" json:"block_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect) Reset() {
	*x = Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 66, 1}
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect) GetBlockTime() uint32 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Loopdetect_LoopDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockTimeType  Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType `protobuf:"varint,1,opt,name=block_time_type,json=block-time-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType" json:"block_time_type,omitempty"`
	BlockTimeValue uint32                                                       `protobuf:"varint,2,opt,name=block_time_value,json=block-time-value,proto3" json:"block_time_value,omitempty"`
	TriggerDown    bool                                                         `protobuf:"varint,3,opt,name=trigger_down,json=trigger-down,proto3" json:"trigger_down,omitempty"`
	PacketPriority uint32                                                       `protobuf:"varint,4,opt,name=packet_priority,json=packet-priority,proto3" json:"packet_priority,omitempty"`
	OnlyAlarm      bool                                                         `protobuf:"varint,5,opt,name=only_alarm,json=only-alarm,proto3" json:"only_alarm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) Reset() {
	*x = Ifm_Interfaces_Interface_Loopdetect_LoopDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Loopdetect_LoopDetect) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Loopdetect_LoopDetect.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Loopdetect_LoopDetect) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 66, 2}
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) GetBlockTimeType() Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType {
	if x != nil {
		return x.BlockTimeType
	}
	return Ifm_Interfaces_Interface_Loopdetect_LoopDetect_INVALID_ENUM_VALUE_BlockTimeType
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) GetBlockTimeValue() uint32 {
	if x != nil {
		return x.BlockTimeValue
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) GetTriggerDown() bool {
	if x != nil {
		return x.TriggerDown
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) GetPacketPriority() uint32 {
	if x != nil {
		return x.PacketPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Loopdetect_LoopDetect) GetOnlyAlarm() bool {
	if x != nil {
		return x.OnlyAlarm
	}
	return false
}

type Ifm_Interfaces_Interface_Macsec_CknCaks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CknCak *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak `protobuf:"bytes,1,opt,name=ckn_cak,json=ckn-cak,proto3" json:"ckn_cak,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_CknCaks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_CknCaks) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_CknCaks.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_CknCaks) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks) GetCknCak() *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak {
	if x != nil {
		return x.CknCak
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfidentialityOffset *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset `protobuf:"bytes,1,opt,name=confidentiality_offset,json=confidentiality-offset,proto3" json:"confidentiality_offset,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 1}
}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets) GetConfidentialityOffset() *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset {
	if x != nil {
		return x.ConfidentialityOffset
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_ReplayWindows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplayWindow *Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow `protobuf:"bytes,1,opt,name=replay_window,json=replay-window,proto3" json:"replay_window,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_ReplayWindows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_ReplayWindows) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_ReplayWindows.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_ReplayWindows) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 2}
}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows) GetReplayWindow() *Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow {
	if x != nil {
		return x.ReplayWindow
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyserverPriority *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority `protobuf:"bytes,1,opt,name=keyserver_priority,json=keyserver-priority,proto3" json:"keyserver_priority,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 3}
}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys) GetKeyserverPriority() *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority {
	if x != nil {
		return x.KeyserverPriority
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_SakLifeTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SakLifeTime *Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime `protobuf:"bytes,1,opt,name=sak_life_time,json=sak-life-time,proto3" json:"sak_life_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_SakLifeTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_SakLifeTimes) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_SakLifeTimes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_SakLifeTimes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 4}
}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes) GetSakLifeTime() *Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime {
	if x != nil {
		return x.SakLifeTime
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_EncryptModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptMode *Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode `protobuf:"bytes,1,opt,name=encrypt_mode,json=encrypt-mode,proto3" json:"encrypt_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_EncryptModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_EncryptModes) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_EncryptModes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_EncryptModes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 5}
}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes) GetEncryptMode() *Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode {
	if x != nil {
		return x.EncryptMode
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CipherAlgorithmSuite *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite `protobuf:"bytes,1,opt,name=cipher_algorithm_suite,json=cipher-algorithm-suite,proto3" json:"cipher_algorithm_suite,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 6}
}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites) GetCipherAlgorithmSuite() *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite {
	if x != nil {
		return x.CipherAlgorithmSuite
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_VlanInClears struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanInClear *Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear `protobuf:"bytes,1,opt,name=vlan_in_clear,json=vlan-in-clear,proto3" json:"vlan_in_clear,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_VlanInClears{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_VlanInClears) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_VlanInClears.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_VlanInClears) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 7}
}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears) GetVlanInClear() *Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear {
	if x != nil {
		return x.VlanInClear
	}
	return nil
}

type Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ckn     string                                                 `protobuf:"bytes,1,opt,name=ckn,proto3" json:"ckn,omitempty"`
	CakType Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType `protobuf:"varint,2,opt,name=cak_type,json=cak-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType" json:"cak_type,omitempty"`
	Cak     string                                                 `protobuf:"bytes,3,opt,name=cak,proto3" json:"cak,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) GetCkn() string {
	if x != nil {
		return x.Ckn
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) GetCakType() Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType {
	if x != nil {
		return x.CakType
	}
	return Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_INVALID_ENUM_VALUE_CakType
}

func (x *Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak) GetCak() string {
	if x != nil {
		return x.Cak
	}
	return ""
}

type Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetValue uint32 `protobuf:"varint,1,opt,name=offset_value,json=offset-value,proto3" json:"offset_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset) GetOffsetValue() uint32 {
	if x != nil {
		return x.OffsetValue
	}
	return 0
}

type Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowSize uint32 `protobuf:"varint,1,opt,name=window_size,json=window-size,proto3" json:"window_size,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow) GetWindowSize() uint32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

type Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifeTime uint32 `protobuf:"varint,1,opt,name=life_time,json=life-time,proto3" json:"life_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime) GetLifeTime() uint32 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode" json:"mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 5, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode) GetMode() Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_INVALID_ENUM_VALUE_Mode
}

type Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suite Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite `protobuf:"varint,1,opt,name=suite,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite" json:"suite,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 6, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite) GetSuite() Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite {
	if x != nil {
		return x.Suite
	}
	return Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_INVALID_ENUM_VALUE_Suite
}

type Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClearType Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType `protobuf:"varint,1,opt,name=clear_type,json=clear-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType" json:"clear_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear) Reset() {
	*x = Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 67, 7, 0}
}

func (x *Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear) GetClearType() Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType {
	if x != nil {
		return x.ClearType
	}
	return Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_INVALID_ENUM_VALUE_ClearType
}

type Ifm_Interfaces_Interface_Mirror_PortMirrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortMirror []*Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror `protobuf:"bytes,1,rep,name=port_mirror,json=port-mirror,proto3" json:"port_mirror,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortMirrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortMirrors) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortMirrors.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortMirrors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 0}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors) GetPortMirror() []*Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror {
	if x != nil {
		return x.PortMirror
	}
	return nil
}

type Ifm_Interfaces_Interface_Mirror_PortMirrorSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceSize uint32 `protobuf:"varint,1,opt,name=slice_size,json=slice-size,proto3" json:"slice_size,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorSlice) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortMirrorSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortMirrorSlice) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorSlice) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortMirrorSlice.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortMirrorSlice) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 1}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorSlice) GetSliceSize() uint32 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

type Ifm_Interfaces_Interface_Mirror_WithoutHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Mirror_WithoutHeader) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_WithoutHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_WithoutHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_WithoutHeader) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_WithoutHeader) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_WithoutHeader.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_WithoutHeader) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 2}
}

type Ifm_Interfaces_Interface_Mirror_PortMirrorCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir uint32 `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
	Cbs uint32 `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs uint32 `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorCar) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortMirrorCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortMirrorCar) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorCar) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortMirrorCar.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortMirrorCar) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 3}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorCar) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorCar) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorCar) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorCar) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Ifm_Interfaces_Interface_Mirror_PortMirrorTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObserveIndex string `protobuf:"bytes,1,opt,name=observe_index,json=observe-index,proto3" json:"observe_index,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorTo) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortMirrorTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortMirrorTo) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorTo) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortMirrorTo.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortMirrorTo) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 4}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrorTo) GetObserveIndex() string {
	if x != nil {
		return x.ObserveIndex
	}
	return ""
}

type Ifm_Interfaces_Interface_Mirror_PortFragments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortFragment []*Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment `protobuf:"bytes,1,rep,name=port_fragment,json=port-fragment,proto3" json:"port_fragment,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortFragments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortFragments) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortFragments.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortFragments) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 5}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments) GetPortFragment() []*Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment {
	if x != nil {
		return x.PortFragment
	}
	return nil
}

type Ifm_Interfaces_Interface_Mirror_Integrateds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrated []*Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated `protobuf:"bytes,1,rep,name=integrated,proto3" json:"integrated,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_Integrateds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_Integrateds) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_Integrateds.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_Integrateds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 6}
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds) GetIntegrated() []*Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated {
	if x != nil {
		return x.Integrated
	}
	return nil
}

type Ifm_Interfaces_Interface_Mirror_BasPortMirrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasPortMirror []*Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror `protobuf:"bytes,1,rep,name=bas_port_mirror,json=bas-port-mirror,proto3" json:"bas_port_mirror,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_BasPortMirrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_BasPortMirrors) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_BasPortMirrors.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_BasPortMirrors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 7}
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors) GetBasPortMirror() []*Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror {
	if x != nil {
		return x.BasPortMirror
	}
	return nil
}

type Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 8}
}

type Ifm_Interfaces_Interface_Mirror_PortObserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObserveIndex        uint32                                                          `protobuf:"varint,1,opt,name=observe_index,json=observe-index,proto3" json:"observe_index,omitempty"`
	WithoutFilter       Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter       `protobuf:"varint,2,opt,name=without_filter,json=without-filter,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter" json:"without_filter,omitempty"`
	DestinationMac      string                                                          `protobuf:"bytes,3,opt,name=destination_mac,json=destination-mac,proto3" json:"destination_mac,omitempty"`
	PopLabel            Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel            `protobuf:"varint,4,opt,name=pop_label,json=pop-label,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel" json:"pop_label,omitempty"`
	SubExtend           bool                                                            `protobuf:"varint,5,opt,name=sub_extend,json=sub-extend,proto3" json:"sub_extend,omitempty"`
	WithLinklayerHeader Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader `protobuf:"varint,6,opt,name=with_linklayer_header,json=with-linklayer-header,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader" json:"with_linklayer_header,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortObserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortObserve) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortObserve.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortObserve) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 9}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) GetObserveIndex() uint32 {
	if x != nil {
		return x.ObserveIndex
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) GetWithoutFilter() Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter {
	if x != nil {
		return x.WithoutFilter
	}
	return Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter_FALSE
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) GetDestinationMac() string {
	if x != nil {
		return x.DestinationMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) GetPopLabel() Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel {
	if x != nil {
		return x.PopLabel
	}
	return Ifm_Interfaces_Interface_Mirror_PortObserve_INVALID_ENUM_VALUE_PopLabel
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) GetSubExtend() bool {
	if x != nil {
		return x.SubExtend
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Mirror_PortObserve) GetWithLinklayerHeader() Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader {
	if x != nil {
		return x.WithLinklayerHeader
	}
	return Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader_FALSE
}

type Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction" json:"direction,omitempty"`
	CpuPacket bool                                                             `protobuf:"varint,2,opt,name=cpu_packet,json=cpu-packet,proto3" json:"cpu_packet,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror) GetDirection() Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror) GetCpuPacket() bool {
	if x != nil {
		return x.CpuPacket
	}
	return false
}

type Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction" json:"direction,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 5, 0}
}

func (x *Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment) GetDirection() Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction_INBOUND
}

type Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction" json:"direction,omitempty"`
	CpuPacket bool                                                             `protobuf:"varint,2,opt,name=cpu_packet,json=cpu-packet,proto3" json:"cpu_packet,omitempty"`
	FilterId  uint32                                                           `protobuf:"varint,3,opt,name=filter_id,json=filter-id,proto3" json:"filter_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 6, 0}
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) GetDirection() Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) GetCpuPacket() bool {
	if x != nil {
		return x.CpuPacket
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated) GetFilterId() uint32 {
	if x != nil {
		return x.FilterId
	}
	return 0
}

type Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction   Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction" json:"direction,omitempty"`
	PevlanBegin uint32                                                                 `protobuf:"varint,2,opt,name=pevlan_begin,json=pevlan-begin,proto3" json:"pevlan_begin,omitempty"`
	PevlanEnd   uint32                                                                 `protobuf:"varint,3,opt,name=pevlan_end,json=pevlan-end,proto3" json:"pevlan_end,omitempty"`
	CevlanBegin uint32                                                                 `protobuf:"varint,4,opt,name=cevlan_begin,json=cevlan-begin,proto3" json:"cevlan_begin,omitempty"`
	CevlanEnd   uint32                                                                 `protobuf:"varint,5,opt,name=cevlan_end,json=cevlan-end,proto3" json:"cevlan_end,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) Reset() {
	*x = Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 68, 7, 0}
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) GetDirection() Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) GetPevlanBegin() uint32 {
	if x != nil {
		return x.PevlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) GetPevlanEnd() uint32 {
	if x != nil {
		return x.PevlanEnd
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) GetCevlanBegin() uint32 {
	if x != nil {
		return x.CevlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror) GetCevlanEnd() uint32 {
	if x != nil {
		return x.CevlanEnd
	}
	return 0
}

type Ifm_Interfaces_Interface_MulticastForward_Shaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingEnable bool `protobuf:"varint,1,opt,name=shaping_enable,json=shaping-enable,proto3" json:"shaping_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MulticastForward_Shaping) Reset() {
	*x = Ifm_Interfaces_Interface_MulticastForward_Shaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MulticastForward_Shaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MulticastForward_Shaping) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MulticastForward_Shaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MulticastForward_Shaping.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MulticastForward_Shaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 74, 0}
}

func (x *Ifm_Interfaces_Interface_MulticastForward_Shaping) GetShapingEnable() bool {
	if x != nil {
		return x.ShapingEnable
	}
	return false
}

type Ifm_Interfaces_Interface_Netstream_SamplerEnables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerEnable []*Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable `protobuf:"bytes,1,rep,name=sampler_enable,json=sampler-enable,proto3" json:"sampler_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables) Reset() {
	*x = Ifm_Interfaces_Interface_Netstream_SamplerEnables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Netstream_SamplerEnables) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerEnables.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Netstream_SamplerEnables) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 0}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables) GetSamplerEnable() []*Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable {
	if x != nil {
		return x.SamplerEnable
	}
	return nil
}

type Ifm_Interfaces_Interface_Netstream_SamplerRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerRate []*Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate `protobuf:"bytes,1,rep,name=sampler_rate,json=sampler-rate,proto3" json:"sampler_rate,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates) Reset() {
	*x = Ifm_Interfaces_Interface_Netstream_SamplerRates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Netstream_SamplerRates) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerRates.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Netstream_SamplerRates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 1}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates) GetSamplerRate() []*Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate {
	if x != nil {
		return x.SamplerRate
	}
	return nil
}

type Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType  Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType  `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType" json:"flow_type,omitempty"`
	Direction Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction" json:"direction,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable) Reset() {
	*x = Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable) GetFlowType() Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType_IPX_FLOW
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable) GetDirection() Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction_INBOUND
}

type Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType  Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType  `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType" json:"flow_type,omitempty"`
	Direction Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction" json:"direction,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate) Reset() {
	*x = Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 75, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate) GetFlowType() Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType_IPX_FLOW
}

func (x *Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate) GetDirection() Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction_INBOUND
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni         uint32                                                                     `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Peer        string                                                                     `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Mode        Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode         `protobuf:"varint,3,opt,name=mode,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode" json:"mode,omitempty"`
	Direction   Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction    `protobuf:"varint,4,opt,name=direction,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction" json:"direction,omitempty"`
	Collections *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections `protobuf:"bytes,5,opt,name=collections,proto3" json:"collections,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 76, 0}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetMode() Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode {
	if x != nil {
		return x.Mode
	}
	return Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_L2
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetDirection() Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction {
	if x != nil {
		return x.Direction
	}
	return Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetCollections() *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections {
	if x != nil {
		return x.Collections
	}
	return nil
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection `protobuf:"bytes,1,rep,name=collection,proto3" json:"collection,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 76, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) GetCollection() []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAddr           string `protobuf:"bytes,1,opt,name=source_addr,json=source-addr,proto3" json:"source_addr,omitempty"`
	SendBitsRate         uint64 `protobuf:"varint,2,opt,name=send_bits_rate,json=send-bits-rate,proto3" json:"send_bits_rate,omitempty"`
	SendPktsRate         uint64 `protobuf:"varint,3,opt,name=send_pkts_rate,json=send-pkts-rate,proto3" json:"send_pkts_rate,omitempty"`
	SendUnicastPkts      uint64 `protobuf:"varint,4,opt,name=send_unicast_pkts,json=send-unicast-pkts,proto3" json:"send_unicast_pkts,omitempty"`
	SendMulticastPkts    uint64 `protobuf:"varint,5,opt,name=send_multicast_pkts,json=send-multicast-pkts,proto3" json:"send_multicast_pkts,omitempty"`
	SendBroadcastPkts    uint64 `protobuf:"varint,6,opt,name=send_broadcast_pkts,json=send-broadcast-pkts,proto3" json:"send_broadcast_pkts,omitempty"`
	SendTotalBytes       uint64 `protobuf:"varint,7,opt,name=send_total_bytes,json=send-total-bytes,proto3" json:"send_total_bytes,omitempty"`
	SendTotalPkts        uint64 `protobuf:"varint,8,opt,name=send_total_pkts,json=send-total-pkts,proto3" json:"send_total_pkts,omitempty"`
	ReceiveBitsRate      uint64 `protobuf:"varint,9,opt,name=receive_bits_rate,json=receive-bits-rate,proto3" json:"receive_bits_rate,omitempty"`
	ReceivePktsRate      uint64 `protobuf:"varint,10,opt,name=receive_pkts_rate,json=receive-pkts-rate,proto3" json:"receive_pkts_rate,omitempty"`
	ReceiveUnicastPkts   uint64 `protobuf:"varint,11,opt,name=receive_unicast_pkts,json=receive-unicast-pkts,proto3" json:"receive_unicast_pkts,omitempty"`
	ReceiveMulticastPkts uint64 `protobuf:"varint,12,opt,name=receive_multicast_pkts,json=receive-multicast-pkts,proto3" json:"receive_multicast_pkts,omitempty"`
	ReceiveBroadcastPkts uint64 `protobuf:"varint,13,opt,name=receive_broadcast_pkts,json=receive-broadcast-pkts,proto3" json:"receive_broadcast_pkts,omitempty"`
	ReceiveTotalBytes    uint64 `protobuf:"varint,14,opt,name=receive_total_bytes,json=receive-total-bytes,proto3" json:"receive_total_bytes,omitempty"`
	ReceiveTotalPkts     uint64 `protobuf:"varint,15,opt,name=receive_total_pkts,json=receive-total-pkts,proto3" json:"receive_total_pkts,omitempty"`
	DropUnicastPkts      uint64 `protobuf:"varint,16,opt,name=drop_unicast_pkts,json=drop-unicast-pkts,proto3" json:"drop_unicast_pkts,omitempty"`
	DropMulticastPkts    uint64 `protobuf:"varint,17,opt,name=drop_multicast_pkts,json=drop-multicast-pkts,proto3" json:"drop_multicast_pkts,omitempty"`
	DropBroadcastPkts    uint64 `protobuf:"varint,18,opt,name=drop_broadcast_pkts,json=drop-broadcast-pkts,proto3" json:"drop_broadcast_pkts,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 76, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSourceAddr() string {
	if x != nil {
		return x.SourceAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendBitsRate() uint64 {
	if x != nil {
		return x.SendBitsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendPktsRate() uint64 {
	if x != nil {
		return x.SendPktsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendUnicastPkts() uint64 {
	if x != nil {
		return x.SendUnicastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendMulticastPkts() uint64 {
	if x != nil {
		return x.SendMulticastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendBroadcastPkts() uint64 {
	if x != nil {
		return x.SendBroadcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendTotalBytes() uint64 {
	if x != nil {
		return x.SendTotalBytes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendTotalPkts() uint64 {
	if x != nil {
		return x.SendTotalPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveBitsRate() uint64 {
	if x != nil {
		return x.ReceiveBitsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceivePktsRate() uint64 {
	if x != nil {
		return x.ReceivePktsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveUnicastPkts() uint64 {
	if x != nil {
		return x.ReceiveUnicastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveMulticastPkts() uint64 {
	if x != nil {
		return x.ReceiveMulticastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveBroadcastPkts() uint64 {
	if x != nil {
		return x.ReceiveBroadcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveTotalBytes() uint64 {
	if x != nil {
		return x.ReceiveTotalBytes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveTotalPkts() uint64 {
	if x != nil {
		return x.ReceiveTotalPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetDropUnicastPkts() uint64 {
	if x != nil {
		return x.DropUnicastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetDropMulticastPkts() uint64 {
	if x != nil {
		return x.DropMulticastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetDropBroadcastPkts() uint64 {
	if x != nil {
		return x.DropBroadcastPkts
	}
	return 0
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action          `protobuf:"varint,1,opt,name=action,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action" json:"action,omitempty"`
	IcmpName        Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName        `protobuf:"varint,2,opt,name=icmp_name,json=icmp-name,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName" json:"icmp_name,omitempty"`
	IcmpType        uint32                                                                  `protobuf:"varint,3,opt,name=icmp_type,json=icmp-type,proto3" json:"icmp_type,omitempty"`
	IcmpCode        uint32                                                                  `protobuf:"varint,4,opt,name=icmp_code,json=icmp-code,proto3" json:"icmp_code,omitempty"`
	SwitchOperation Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation `protobuf:"varint,5,opt,name=switch_operation,json=switch-operation,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation" json:"switch_operation,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) Reset() {
	*x = Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 77, 0}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetAction() Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action {
	if x != nil {
		return x.Action
	}
	return Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_RECEIVEX_PKT
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetIcmpName() Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName {
	if x != nil {
		return x.IcmpName
	}
	return Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_USERX_DEFINED
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetIcmpType() uint32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetIcmpCode() uint32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetSwitchOperation() Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation {
	if x != nil {
		return x.SwitchOperation
	}
	return Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_ENABLE
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionType Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType `protobuf:"varint,1,opt,name=option_type,json=option-type,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType" json:"option_type,omitempty"`
	Switch     Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch     `protobuf:"varint,2,opt,name=switch,proto3,enum=huaweiV8R12_ifm.Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch" json:"switch,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) Reset() {
	*x = Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 78, 0}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) GetOptionType() Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType {
	if x != nil {
		return x.OptionType
	}
	return Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_ROUTEX_ALERT
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) GetSwitch() Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch {
	if x != nil {
		return x.Switch
	}
	return Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_ENABLE
}

type Ifm_Interfaces_Interface_Rbs_BindRbp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) Reset() {
	*x = Ifm_Interfaces_Interface_Rbs_BindRbp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Rbs_BindRbp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Rbs_BindRbp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Rbs_BindRbp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 81, 0}
}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Ifm_Interfaces_Interface_Vrrp_BackupGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtlcheckFlag  bool   `protobuf:"varint,1,opt,name=ttlcheck_flag,json=ttlcheck-flag,proto3" json:"ttlcheck_flag,omitempty"`
	RecoverDelay  uint32 `protobuf:"varint,2,opt,name=recover_delay,json=recover-delay,proto3" json:"recover_delay,omitempty"`
	ArpsendSimple bool   `protobuf:"varint,3,opt,name=arpsend_simple,json=arpsend-simple,proto3" json:"arpsend_simple,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_BackupGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_BackupGroups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 82, 0}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) GetTtlcheckFlag() bool {
	if x != nil {
		return x.TtlcheckFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) GetRecoverDelay() uint32 {
	if x != nil {
		return x.RecoverDelay
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) GetArpsendSimple() bool {
	if x != nil {
		return x.ArpsendSimple
	}
	return false
}

type Ifm_Interfaces_Interface_Vrrp_TrackAdmins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackAdmin []*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin `protobuf:"bytes,1,rep,name=track_admin,json=track-admin,proto3" json:"track_admin,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_TrackAdmins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_TrackAdmins.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 82, 1}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) GetTrackAdmin() []*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin {
	if x != nil {
		return x.TrackAdmin
	}
	return nil
}

type Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IfName string `protobuf:"bytes,2,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 82, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type Ifm_Interfaces_Interface_UnicastForward_PoisonReverse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_UnicastForward_PoisonReverse) Reset() {
	*x = Ifm_Interfaces_Interface_UnicastForward_PoisonReverse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_PoisonReverse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnicastForward_PoisonReverse) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnicastForward_PoisonReverse) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnicastForward_PoisonReverse.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnicastForward_PoisonReverse) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 83, 0}
}

type Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect) Reset() {
	*x = Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 83, 1}
}

type Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack) Reset() {
	*x = Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 83, 2}
}

type Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName string `protobuf:"bytes,1,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect) Reset() {
	*x = Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 83, 3}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp) Reset() {
	*x = Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 83, 4}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable) Reset() {
	*x = Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 83, 5}
}

type Ifm_AutoRecoveryTimes_AutoRecoveryTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorDownType Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType `protobuf:"varint,1,opt,name=error_down_type,json=error-down-type,proto3,enum=huaweiV8R12_ifm.Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType" json:"error_down_type,omitempty"`
	TimeValue     uint32                                               `protobuf:"varint,2,opt,name=time_value,json=time-value,proto3" json:"time_value,omitempty"`
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) Reset() {
	*x = Ifm_AutoRecoveryTimes_AutoRecoveryTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_AutoRecoveryTimes_AutoRecoveryTime) ProtoMessage() {}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes_AutoRecoveryTime.ProtoReflect.Descriptor instead.
func (*Ifm_AutoRecoveryTimes_AutoRecoveryTime) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) GetErrorDownType() Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType {
	if x != nil {
		return x.ErrorDownType
	}
	return Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_BPDUX_PROTECTION
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) GetTimeValue() uint32 {
	if x != nil {
		return x.TimeValue
	}
	return 0
}

type Ifm_StaticDimensionRanges_StaticDimensionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Ifm_StaticDimensionRanges_StaticDimensionRange_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_ifm.Ifm_StaticDimensionRanges_StaticDimensionRange_Type" json:"type,omitempty"`
	ChassisRange string                                              `protobuf:"bytes,2,opt,name=chassis_range,json=chassis-range,proto3" json:"chassis_range,omitempty"`
	SlotRange    string                                              `protobuf:"bytes,3,opt,name=slot_range,json=slot-range,proto3" json:"slot_range,omitempty"`
	CardRange    string                                              `protobuf:"bytes,4,opt,name=card_range,json=card-range,proto3" json:"card_range,omitempty"`
	PortRange    string                                              `protobuf:"bytes,5,opt,name=port_range,json=port-range,proto3" json:"port_range,omitempty"`
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) Reset() {
	*x = Ifm_StaticDimensionRanges_StaticDimensionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_StaticDimensionRanges_StaticDimensionRange) ProtoMessage() {}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_StaticDimensionRanges_StaticDimensionRange.ProtoReflect.Descriptor instead.
func (*Ifm_StaticDimensionRanges_StaticDimensionRange) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetType() Ifm_StaticDimensionRanges_StaticDimensionRange_Type {
	if x != nil {
		return x.Type
	}
	return Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ETHERNET
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetChassisRange() string {
	if x != nil {
		return x.ChassisRange
	}
	return ""
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetSlotRange() string {
	if x != nil {
		return x.SlotRange
	}
	return ""
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetCardRange() string {
	if x != nil {
		return x.CardRange
	}
	return ""
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetPortRange() string {
	if x != nil {
		return x.PortRange
	}
	return ""
}

type Ifm_RemoteInterfaces_RemoteInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                                                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Index                 uint32                                                      `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	RemoteStatisticsState *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState `protobuf:"bytes,3,opt,name=remote_statistics_state,json=remote-statistics-state,proto3" json:"remote_statistics_state,omitempty"`
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) Reset() {
	*x = Ifm_RemoteInterfaces_RemoteInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces_RemoteInterface) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces_RemoteInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces_RemoteInterface.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces_RemoteInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetRemoteStatisticsState() *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState {
	if x != nil {
		return x.RemoteStatisticsState
	}
	return nil
}

type Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastClearedTime          string `protobuf:"bytes,1,opt,name=last_cleared_time,json=last-cleared-time,proto3" json:"last_cleared_time,omitempty"`
	InBitRate                uint64 `protobuf:"varint,2,opt,name=in_bit_rate,json=in-bit-rate,proto3" json:"in_bit_rate,omitempty"`
	InPacketRate             uint64 `protobuf:"varint,3,opt,name=in_packet_rate,json=in-packet-rate,proto3" json:"in_packet_rate,omitempty"`
	InPeakBitRate            uint64 `protobuf:"varint,4,opt,name=in_peak_bit_rate,json=in-peak-bit-rate,proto3" json:"in_peak_bit_rate,omitempty"`
	InPeakBitRateRecordTime  string `protobuf:"bytes,5,opt,name=in_peak_bit_rate_record_time,json=in-peak-bit-rate-record-time,proto3" json:"in_peak_bit_rate_record_time,omitempty"`
	OutBitRate               uint64 `protobuf:"varint,6,opt,name=out_bit_rate,json=out-bit-rate,proto3" json:"out_bit_rate,omitempty"`
	OutPacketRate            uint64 `protobuf:"varint,7,opt,name=out_packet_rate,json=out-packet-rate,proto3" json:"out_packet_rate,omitempty"`
	OutPeakBitRate           uint64 `protobuf:"varint,8,opt,name=out_peak_bit_rate,json=out-peak-bit-rate,proto3" json:"out_peak_bit_rate,omitempty"`
	OutPeakBitRateRecordTime string `protobuf:"bytes,9,opt,name=out_peak_bit_rate_record_time,json=out-peak-bit-rate-record-time,proto3" json:"out_peak_bit_rate_record_time,omitempty"`
	InUseRate                string `protobuf:"bytes,10,opt,name=in_use_rate,json=in-use-rate,proto3" json:"in_use_rate,omitempty"`
	OutUseRate               string `protobuf:"bytes,11,opt,name=out_use_rate,json=out-use-rate,proto3" json:"out_use_rate,omitempty"`
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) Reset() {
	*x = Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_ifm_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_ifm_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_ifm_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetLastClearedTime() string {
	if x != nil {
		return x.LastClearedTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInBitRate() uint64 {
	if x != nil {
		return x.InBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInPacketRate() uint64 {
	if x != nil {
		return x.InPacketRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInPeakBitRate() uint64 {
	if x != nil {
		return x.InPeakBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInPeakBitRateRecordTime() string {
	if x != nil {
		return x.InPeakBitRateRecordTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutBitRate() uint64 {
	if x != nil {
		return x.OutBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutPacketRate() uint64 {
	if x != nil {
		return x.OutPacketRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutPeakBitRate() uint64 {
	if x != nil {
		return x.OutPeakBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutPeakBitRateRecordTime() string {
	if x != nil {
		return x.OutPeakBitRateRecordTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInUseRate() string {
	if x != nil {
		return x.InUseRate
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutUseRate() string {
	if x != nil {
		return x.OutUseRate
	}
	return ""
}

var File_huaweiV8R12_ifm_proto protoreflect.FileDescriptor

var file_huaweiV8R12_ifm_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x69, 0x66,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x22, 0x8e, 0xd2, 0x0a, 0x0a, 0x03, 0x49, 0x66,
	0x6d, 0x12, 0x33, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x6d, 0x70, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x13, 0x61, 0x75, 0x74,
	0x6f, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x64, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x17, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x68, 0x64, 0x6c, 0x63,
	0x5f, 0x64, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x48, 0x64, 0x6c, 0x63, 0x44, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x68, 0x64, 0x6c, 0x63,
	0x2d, 0x64, 0x61, 0x6d, 0x70, 0x1a, 0xb1, 0x0f, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x17, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x75, 0x62, 0x12, 0x46, 0x0a, 0x1e, 0x73, 0x75,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x72, 0x61, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x14, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x2d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x14, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x66, 0x69,
	0x6d, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x0e, 0x66, 0x69,
	0x6d, 0x2d, 0x69, 0x66, 0x6d, 0x2d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x12,
	0x66, 0x69, 0x6d, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x66,
	0x77, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x66, 0x77, 0x64, 0x52, 0x12, 0x66, 0x69, 0x6d, 0x2d, 0x74, 0x72, 0x75, 0x6e,
	0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x66, 0x77, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x76, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x56, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x09, 0x76, 0x65, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x3c,
	0x0a, 0x12, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x12,
	0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xc2, 0x06, 0x0a, 0x0c, 0x46,
	0x69, 0x6d, 0x49, 0x66, 0x6d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x14, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x10,
	0x64, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x10, 0x64, 0x75, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x51, 0x69, 0x6e,
	0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x15, 0x71, 0x69, 0x6e, 0x71, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x1a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x0e,
	0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x75,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x50, 0x0a, 0x11, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x56, 0x0a, 0x13, 0x51, 0x69, 0x6e, 0x71, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a,
	0x90, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x66, 0x77, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x46, 0x69, 0x6d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x66,
	0x77, 0x64, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x2f, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x1a, 0xe4, 0x01, 0x0a, 0x08, 0x56, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x48, 0x0a, 0x08, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x56,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x56, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x08, 0x76, 0x65, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x8d, 0x01, 0x0a, 0x07, 0x56, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x32, 0x5f, 0x76, 0x65, 0x5f, 0x69, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x32, 0x2d, 0x76, 0x65, 0x2d, 0x69,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x33, 0x5f, 0x76, 0x65, 0x5f, 0x69,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x33, 0x2d,
	0x76, 0x65, 0x2d, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc8, 0x99, 0x0a, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x1a, 0xef, 0x98, 0x0a, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6c, 0x32, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x2d, 0x6c, 0x32, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x59,
	0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x56, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x64, 0x66, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x69, 0x70, 0x2d, 0x64,
	0x66, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x75, 0x70, 0x2d, 0x64, 0x6f, 0x77,
	0x6e, 0x2d, 0x74, 0x72, 0x61, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x74, 0x75, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6d, 0x74, 0x75, 0x2d,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x72, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x32, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x12, 0x5f, 0x0a, 0x0e, 0x6d, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0e, 0x6d, 0x69, 0x62, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x73, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x32, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x32, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x70, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x75,
	0x70, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2d, 0x66, 0x6c, 0x61, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x70, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x70, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x62, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x5f, 0x0a, 0x0e, 0x62, 0x64, 0x69, 0x66, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x64, 0x69, 0x66, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0e, 0x62, 0x64, 0x69, 0x66, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x42, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x36, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12,
	0x45, 0x0a, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52,
	0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x65, 0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x69, 0x66,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x76, 0x6c, 0x61,
	0x6e, 0x69, 0x66, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4e, 0x0a,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x50, 0x0a,
	0x09, 0x61, 0x72, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x70, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x67, 0x0a, 0x11, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x11, 0x61, 0x72, 0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x67, 0x0a, 0x11, 0x61, 0x72, 0x70, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41,
	0x72, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x11,
	0x61, 0x72, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x3f, 0x0a, 0x03, 0x62, 0x66, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x66, 0x64, 0x52, 0x03, 0x62,
	0x66, 0x64, 0x12, 0x3f, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x03,
	0x71, 0x6f, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x62, 0x66, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x42, 0x66, 0x64, 0x45, 0x78, 0x74, 0x52, 0x07, 0x62, 0x66, 0x64, 0x2d, 0x65, 0x78, 0x74, 0x12,
	0x56, 0x0a, 0x0b, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x61, 0x72, 0x70, 0x2d,
	0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x0a, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x03,
	0x6e, 0x76, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x65, 0x52, 0x03, 0x6e, 0x76, 0x65, 0x12, 0x59, 0x0a,
	0x0c, 0x6e, 0x76, 0x6f, 0x33, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e,
	0x76, 0x6f, 0x33, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x0c, 0x6e, 0x76, 0x6f, 0x33,
	0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x03, 0x62, 0x61, 0x73, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x52, 0x03, 0x62, 0x61, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x62, 0x72, 0x61,
	0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x52, 0x04, 0x62, 0x72, 0x61, 0x73, 0x12, 0x5b, 0x0a,
	0x0d, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x74, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x50, 0x70, 0x70, 0x6f, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x74, 0x52, 0x0d, 0x70, 0x70, 0x70,
	0x6f, 0x65, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x76, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x70,
	0x70, 0x6f, 0x65, 0x5f, 0x76, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x56, 0x74, 0x52,
	0x08, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x2d, 0x76, 0x74, 0x12, 0x5b, 0x0a, 0x0d, 0x74, 0x63, 0x70,
	0x5f, 0x6d, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x63, 0x70, 0x4d,
	0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x2d, 0x6d, 0x73, 0x73,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75,
	0x72, 0x70, 0x66, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x72, 0x70, 0x66, 0x52, 0x09, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x72, 0x70, 0x66, 0x12, 0x50, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x75, 0x72, 0x70, 0x66, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x72, 0x70, 0x66, 0x52,
	0x09, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x72, 0x70, 0x66, 0x12, 0x56, 0x0a, 0x0b, 0x72, 0x6f,
	0x61, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x61, 0x6d, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x72, 0x6f, 0x61, 0x6d, 0x2d, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x0d, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x72, 0x63, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73,
	0x52, 0x0d, 0x70, 0x74, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x72, 0x63, 0x73, 0x12,
	0x59, 0x0a, 0x0c, 0x76, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0c, 0x76, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x62, 0x0a, 0x0f, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x65, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x65, 0x78, 0x65, 0x52, 0x0f, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x66, 0x6c, 0x65, 0x78, 0x65, 0x12, 0x5b,
	0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x72, 0x63, 0x73, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x52, 0x0d, 0x67, 0x70,
	0x73, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x72, 0x63, 0x73, 0x12, 0x6a, 0x0a, 0x12, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x70, 0x74, 0x70, 0x61, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x0a, 0x70, 0x74, 0x70, 0x61, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x09,
	0x63, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x63, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x12,
	0x3f, 0x0a, 0x03, 0x64, 0x63, 0x6e, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x63, 0x6e, 0x52, 0x03, 0x64, 0x63, 0x6e,
	0x12, 0x70, 0x0a, 0x14, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x14, 0x64, 0x68,
	0x63, 0x70, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x66, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x49, 0x66, 0x52, 0x07, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x69, 0x66, 0x12, 0x5e,
	0x0a, 0x0e, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x52, 0x0e,
	0x64, 0x68, 0x63, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x66, 0x12, 0x64,
	0x0a, 0x10, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x66, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x66, 0x52, 0x10, 0x64, 0x68, 0x63, 0x70, 0x2d, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e,
	0x67, 0x2d, 0x69, 0x66, 0x12, 0x76, 0x0a, 0x16, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x16, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x03,
	0x65, 0x66, 0x6d, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x52, 0x03, 0x65, 0x66, 0x6d, 0x12, 0x42, 0x0a,
	0x04, 0x65, 0x76, 0x70, 0x6e, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x70, 0x6e, 0x52, 0x04, 0x65, 0x76, 0x70,
	0x6e, 0x12, 0x3f, 0x0a, 0x03, 0x66, 0x69, 0x6d, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x52, 0x03, 0x66,
	0x69, 0x6d, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x69, 0x6d, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x6d, 0x72,
	0x75, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x4d, 0x72, 0x75, 0x52, 0x0b, 0x66, 0x69,
	0x6d, 0x2d, 0x69, 0x66, 0x6d, 0x2d, 0x6d, 0x72, 0x75, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x69, 0x6d,
	0x5f, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x54, 0x63, 0x70,
	0x4d, 0x73, 0x73, 0x52, 0x0b, 0x66, 0x69, 0x6d, 0x2d, 0x74, 0x63, 0x70, 0x2d, 0x6d, 0x73, 0x73,
	0x12, 0x61, 0x0a, 0x0f, 0x66, 0x69, 0x6d, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x62, 0x64, 0x69, 0x66,
	0x69, 0x6e, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x42, 0x64, 0x69, 0x66, 0x69,
	0x6e, 0x74, 0x52, 0x0f, 0x66, 0x69, 0x6d, 0x2d, 0x69, 0x66, 0x6d, 0x2d, 0x62, 0x64, 0x69, 0x66,
	0x69, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0d, 0x66, 0x69, 0x6d, 0x5f, 0x69, 0x66, 0x6d, 0x5f, 0x76,
	0x65, 0x69, 0x6e, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x56, 0x65, 0x69, 0x6e,
	0x74, 0x52, 0x0d, 0x66, 0x69, 0x6d, 0x2d, 0x69, 0x66, 0x6d, 0x2d, 0x76, 0x65, 0x69, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x08, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x76, 0x65, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x73, 0x0a, 0x15, 0x6d, 0x72, 0x75, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x72, 0x75, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x15, 0x6d,
	0x72, 0x75, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x6d, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x6d, 0x74, 0x75, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63,
	0x6d, 0x74, 0x75, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x13,
	0x6d, 0x61, 0x63, 0x6d, 0x74, 0x75, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x12, 0x65, 0x0a, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x72,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x10, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x67, 0x0a, 0x11, 0x69, 0x66, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x38, 0x30, 0x32, 0x31, 0x50, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x11, 0x69, 0x66, 0x2d, 0x38, 0x30, 0x32, 0x31,
	0x70, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x49, 0x66, 0x52, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x66, 0x12, 0x5c,
	0x0a, 0x0d, 0x69, 0x67, 0x6d, 0x70, 0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x67, 0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x69,
	0x67, 0x6d, 0x70, 0x2d, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x0e,
	0x68, 0x77, 0x6d, 0x63, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x48, 0x77, 0x6d, 0x63, 0x49, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x68, 0x77,
	0x6d, 0x63, 0x2d, 0x69, 0x66, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x11, 0x76, 0x6c, 0x6c, 0x5f, 0x70, 0x77, 0x5f, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x6c, 0x50, 0x77, 0x4c,
	0x6f, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x11, 0x76, 0x6c, 0x6c, 0x2d, 0x70, 0x77,
	0x2d, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x6b, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6c, 0x61, 0x6e, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x6c, 0x6c, 0x64, 0x70,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x52, 0x04, 0x6c, 0x6c, 0x64, 0x70, 0x12, 0x57, 0x0a, 0x0b,
	0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52,
	0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x06, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x6d, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x57,
	0x0a, 0x0b, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x12, 0x67, 0x0a, 0x11, 0x69, 0x66, 0x5f, 0x70, 0x6f,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66,
	0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x11, 0x69,
	0x66, 0x2d, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x14, 0x69, 0x66, 0x5f, 0x70, 0x32, 0x6d, 0x70, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x50, 0x32, 0x4d, 0x70,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x69, 0x66, 0x2d,
	0x70, 0x32, 0x6d, 0x70, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x76, 0x0a, 0x16, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66,
	0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x67, 0x70,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x16, 0x62, 0x67, 0x70, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x6e, 0x65,
	0x74, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x68, 0x0a, 0x11, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x70, 0x0a, 0x14, 0x6e, 0x76, 0x6f, 0x33, 0x5f, 0x76,
	0x74, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x14, 0x6e, 0x76, 0x6f, 0x33, 0x2d, 0x76, 0x74, 0x65, 0x70, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x67, 0x0a, 0x11, 0x69, 0x66, 0x5f, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x52, 0x11,
	0x69, 0x66, 0x2d, 0x69, 0x63, 0x6d, 0x70, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x73, 0x12, 0x6c, 0x0a, 0x13, 0x69, 0x66, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x52, 0x13, 0x69, 0x66, 0x2d, 0x69,
	0x70, 0x2d, 0x6f, 0x70, 0x74, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x69, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x52, 0x12, 0x69, 0x70, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x2d, 0x73, 0x72, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x70,
	0x5f, 0x66, 0x77, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x46, 0x77, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x10,
	0x69, 0x70, 0x2d, 0x66, 0x77, 0x64, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x03, 0x72, 0x62, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x62, 0x73, 0x52, 0x03, 0x72, 0x62,
	0x73, 0x12, 0x42, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x52,
	0x04, 0x76, 0x72, 0x72, 0x70, 0x12, 0x62, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x7c, 0x0a, 0x18, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x18, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x86, 0x0a, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x12, 0x5e, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5e, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x5e, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5e, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6c,
	0x61, 0x70, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x66, 0x6c, 0x61, 0x70, 0x2d, 0x64,
	0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x2d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x72, 0x0a, 0x12, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x66, 0x2d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x40, 0x0a, 0x0e, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x34, 0x0a,
	0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x22, 0x34, 0x0a, 0x0a, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x34, 0x0a, 0x0a, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x70, 0x76, 0x36, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x70, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22,
	0x7f, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x69, 0x6e,
	0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x4d, 0x49,
	0x44, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04,
	0x1a, 0xca, 0x0a, 0x0a, 0x0d, 0x4d, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x10,
	0x65, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x45, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x53, 0x74, 0x73, 0x52, 0x10, 0x65,
	0x74, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x2d, 0x73, 0x74, 0x73, 0x1a,
	0xbb, 0x04, 0x0a, 0x0d, 0x45, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x53, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78, 0x2d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x78, 0x5f, 0x6a, 0x75, 0x6d, 0x62, 0x6f, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x78, 0x2d, 0x6a, 0x75, 0x6d, 0x62, 0x6f,
	0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x63, 0x72,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x78, 0x2d, 0x63, 0x72, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x78, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x75, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x2d, 0x69, 0x6e, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x78, 0x2d, 0x6c, 0x6f, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x78, 0x2d, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x78, 0x2d, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78, 0x2d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x78, 0x2d,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x6a, 0x75, 0x6d, 0x62,
	0x6f, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x74, 0x78, 0x2d, 0x6a, 0x75, 0x6d, 0x62, 0x6f, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x78, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x72, 0x75,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x2d, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x2d, 0x72, 0x75, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x2d, 0x6c, 0x6f, 0x73, 0x74, 0x1a, 0xe6, 0x0f,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x69, 0x6e, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x2d, 0x75, 0x73, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x62, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x2d, 0x62, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x69, 0x74, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x65, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x65, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x6f, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x61, 0x79, 0x2d, 0x6f, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x61, 0x79, 0x2d, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d,
	0x66, 0x6c, 0x61, 0x70, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xcb, 0x01, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x72,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x72, 0x69, 0x73,
	0x69, 0x6e, 0x67, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xcd, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x72, 0x65, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x68, 0x61, 0x6c, 0x66, 0x2d, 0x6c, 0x69, 0x66, 0x65, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61, 0x6d, 0x70, 0x2d,
	0x72, 0x65, 0x75, 0x73, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x2d, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0xff, 0x07, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x4f, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x06, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x42, 0x50, 0x44, 0x55, 0x58, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x4f, 0x4e,
	0x49, 0x54, 0x4f, 0x52, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x45, 0x43, 0x58, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x41, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x44,
	0x55, 0x41, 0x4c, 0x58, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x44, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x45, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4e, 0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x46, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x43, 0x52, 0x43, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x53, 0x10, 0x47, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x58, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x48, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x10, 0x49, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x58, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x45, 0x44, 0x10, 0x4a, 0x12, 0x26, 0x0a, 0x22, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x4b, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x50, 0x49,
	0x4e, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x4c, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x4d,
	0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x58, 0x5f, 0x4d, 0x53, 0x54, 0x50, 0x10, 0x4e, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c, 0x41, 0x47, 0x10,
	0x4f, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49,
	0x43, 0x58, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x50, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x58, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x51, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x52, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x10,
	0x53, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x58, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x55, 0x12, 0x2c, 0x0a, 0x28,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x56, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x57, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c, 0x41, 0x47, 0x58, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10,
	0x58, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x50, 0x46, 0x43, 0x58, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x59, 0x1a, 0x10, 0x0a, 0x0e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x33, 0x0a, 0x0d,
	0x42, 0x64, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x1a, 0xd2, 0x33, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x34, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x61, 0x72, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x41, 0x72, 0x70, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x61,
	0x72, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x52, 0x04, 0x76, 0x72, 0x72, 0x70, 0x12, 0x44, 0x0a, 0x03,
	0x72, 0x67, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x52, 0x67, 0x6d, 0x52, 0x03, 0x72,
	0x67, 0x6d, 0x1a, 0x89, 0x0f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x08, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x8d, 0x03, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x9d, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x2d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x71, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x4e, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x45, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x55, 0x42, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x48, 0x43, 0x50, 0x10, 0x80, 0x02, 0x1a, 0x90, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x1a, 0x23, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0xc2, 0x08, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69,
	0x6e, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69,
	0x6e, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x69, 0x6e, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x69, 0x74, 0x73,
	0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6e, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2d, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x2d,
	0x75, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e,
	0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x2d, 0x75, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x2d,
	0x6d, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e,
	0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x2d, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x2d,
	0x62, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e,
	0x5f, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x2d, 0x62, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75,
	0x74, 0x2d, 0x75, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x6f, 0x75, 0x74, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x2d,
	0x6d, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x75, 0x74, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x2d, 0x62, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x6f, 0x75, 0x74, 0x2d, 0x62, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f,
	0x75, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x1d,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x6f, 0x75, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x2d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6f, 0x6b, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x2d, 0x6f,
	0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75,
	0x74, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xe0,
	0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x70, 0x73, 0x12, 0x63, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x72, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x61,
	0x72, 0x70, 0x1a, 0x6d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x63,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x76, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x65, 0x76, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x65, 0x76, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x65, 0x76, 0x69,
	0x64, 0x1a, 0x9b, 0x20, 0x0a, 0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0x52, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0xbe,
	0x1f, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0xdb, 0x1e, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x66,
	0x64, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x62, 0x66, 0x64, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x6e, 0x75,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x2d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x12, 0x6d, 0x0a, 0x0b, 0x76, 0x33, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x76, 0x33, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x73, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x2d, 0x69, 0x70, 0x73, 0x12, 0x7c, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x66,
	0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x42, 0x66, 0x64, 0x73, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x66, 0x64, 0x73,
	0x12, 0x70, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x74, 0x67, 0x72, 0x70, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74,
	0x67, 0x72, 0x70, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x74, 0x67, 0x72,
	0x70, 0x73, 0x1a, 0x51, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x70, 0x73, 0x12, 0x75, 0x0a, 0x0a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x49, 0x70, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x52,
	0x0a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x69, 0x70, 0x1a, 0x25, 0x0a, 0x09, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xbb, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x1a, 0x9b, 0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01,
	0x1a, 0x88, 0x07, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x73, 0x12, 0x71,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x66, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x66,
	0x64, 0x1a, 0x87, 0x06, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x42, 0x66, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x7d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66,
	0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x69,
	0x64, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x42, 0x66, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x02, 0x22, 0x39, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01, 0x22, 0x71, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x58, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x03, 0x1a, 0xd2, 0x03, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x73, 0x12, 0x79, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x74, 0x67, 0x72, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2d, 0x6d, 0x74, 0x67, 0x72, 0x70, 0x1a, 0xc7, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4d, 0x74, 0x67, 0x72, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74,
	0x67, 0x72, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01,
	0x22, 0x91, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x53, 0x48, 0x41, 0x32,
	0x35, 0x36, 0x10, 0x03, 0x22, 0x59, 0x0a, 0x0a, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x56, 0x33, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x56,
	0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x32, 0x56, 0x33, 0x58, 0x5f,
	0x42, 0x4f, 0x54, 0x48, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x32, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x22,
	0x9a, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x42, 0x52, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x42, 0x52, 0x47, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x4d, 0x58, 0x5f, 0x4c, 0x42, 0x52, 0x47, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x4d, 0x58, 0x5f, 0x4c,
	0x42, 0x52, 0x47, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x07, 0x22, 0x41, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a,
	0x05, 0x0a, 0x03, 0x52, 0x67, 0x6d, 0x1a, 0xda, 0x58, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x36, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x74, 0x75, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d,
	0x74, 0x75, 0x36, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x74,
	0x75, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x2d, 0x6d, 0x74, 0x75, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x0a, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x73, 0x52, 0x0a, 0x6e, 0x64, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x73, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x04, 0x63, 0x67, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x67, 0x61, 0x73,
	0x52, 0x04, 0x63, 0x67, 0x61, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x64, 0x2d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0e, 0x70, 0x70, 0x36,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x50, 0x70, 0x36, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x70, 0x70, 0x36, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7e, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0xcb, 0x02, 0x0a, 0x09, 0x4e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x73, 0x12, 0x5f, 0x0a,
	0x09, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x4e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x73, 0x2e, 0x4e, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x09, 0x6e, 0x64, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xdc,
	0x01, 0x0a, 0x08, 0x4e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x6c, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x2d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x2d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x1a, 0xff, 0x0e,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x74, 0x75, 0x36, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x74, 0x75, 0x36, 0x12, 0x5c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xa7, 0x07, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xb7, 0x06, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a,
	0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x2d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x65, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x4e, 0x59, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x06, 0x22, 0x57, 0x0a, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x41,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x55, 0x49, 0x36, 0x34, 0x10, 0x02, 0x22, 0x96, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x07, 0x1a, 0xf8, 0x05, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x2d, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69,
	0x6e, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x69,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x69, 0x6e, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x2d, 0x75, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x6e, 0x2d, 0x75, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x2d, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x6e, 0x2d, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x63, 0x61,
	0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75, 0x74,
	0x2d, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f,
	0x75, 0x74, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x2d, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x6f, 0x75, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x62,
	0x69, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6f, 0x75, 0x74, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x1a,
	0xb4, 0x01, 0x0a, 0x04, 0x43, 0x67, 0x61, 0x73, 0x12, 0x49, 0x0a, 0x03, 0x63, 0x67, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x67, 0x61, 0x73, 0x2e, 0x43, 0x67, 0x61, 0x52, 0x03,
	0x63, 0x67, 0x61, 0x1a, 0x61, 0x0a, 0x03, 0x43, 0x67, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x73,
	0x61, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x73, 0x61, 0x6b, 0x65, 0x79, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x65, 0x63, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xb3, 0x25, 0x0a, 0x0c, 0x4e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x0b, 0x69, 0x66, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x5a, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x73, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x12, 0x68, 0x0a,
	0x0b, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x61, 0x6e, 0x74, 0x69,
	0x2d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0xbb, 0x12, 0x0a, 0x0a, 0x49, 0x66, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x78, 0x0a, 0x0d,
	0x6e, 0x73, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4e, 0x73, 0x4d, 0x63,
	0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0d, 0x6e, 0x73, 0x2d, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x79,
	0x6e, 0x5f, 0x6e, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x2d, 0x64, 0x79, 0x6e, 0x2d, 0x6e, 0x62, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x64, 0x2d, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x08, 0x6e, 0x61, 0x5f, 0x67, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4e,
	0x61, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x6e, 0x61, 0x2d, 0x67, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x67, 0x0a, 0x07, 0x6d, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x07, 0x6d, 0x61, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x64, 0x0a, 0x06, 0x6f, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x2e, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x06, 0x6f, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x75, 0x0a, 0x0c, 0x72, 0x61, 0x5f, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x61,
	0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0c, 0x72, 0x61, 0x2d, 0x68, 0x61, 0x6c,
	0x74, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x61, 0x2d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x0d,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x61, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x0e, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x0e, 0x72, 0x61, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2d,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x72, 0x0a, 0x0b, 0x72, 0x61, 0x5f, 0x6d, 0x74, 0x75, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x2e, 0x52, 0x61, 0x4d, 0x74, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0b, 0x72, 0x61, 0x2d,
	0x6d, 0x74, 0x75, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x73,
	0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x73, 0x2d, 0x66, 0x75, 0x7a, 0x7a, 0x2d, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x72, 0x69, 0x66, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x73, 0x2d, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x64, 0x72, 0x69, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x73,
	0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x73, 0x61, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x73, 0x61, 0x2d, 0x6d, 0x69, 0x6e, 0x2d, 0x6b, 0x65, 0x79, 0x2d, 0x6c, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x73, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x73, 0x61, 0x2d, 0x6d,
	0x61, 0x78, 0x2d, 0x6b, 0x65, 0x79, 0x2d, 0x6c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x11,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x72, 0x64, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x75, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x64, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x36, 0x0a, 0x0b, 0x4e, 0x73, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x73, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x73, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x07, 0x4e, 0x61, 0x47, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x61, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x4f,
	0x4e, 0x10, 0x01, 0x22, 0x27, 0x0a, 0x06, 0x4d, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x24, 0x0a, 0x05,
	0x4f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e,
	0x10, 0x01, 0x22, 0x33, 0x0a, 0x0a, 0x52, 0x61, 0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x61, 0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x61, 0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x54, 0x0a, 0x0c, 0x52, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22, 0x39, 0x0a,
	0x0c, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x30, 0x0a, 0x09, 0x52, 0x61, 0x4d, 0x74,
	0x75, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x61, 0x4d, 0x74, 0x75, 0x46, 0x6c,
	0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x61, 0x4d, 0x74,
	0x75, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x42, 0x0a, 0x0f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x45,
	0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0xda, 0x05, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73,
	0x12, 0x6f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x7d, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x2e,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x10,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x7d, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x72, 0x0a, 0x0c, 0x61, 0x6e, 0x79, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x2e, 0x41, 0x6e, 0x79, 0x77, 0x61, 0x79,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x0c, 0x61, 0x6e, 0x79, 0x77, 0x61, 0x79, 0x2d, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x22, 0x33, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0e, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x0b, 0x41, 0x6e,
	0x79, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6e, 0x79,
	0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x6e, 0x79, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e,
	0x10, 0x01, 0x1a, 0xd7, 0x0a, 0x0a, 0x0a, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74,
	0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x84,
	0x01, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x2d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x1a, 0xac, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xfa, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x82, 0x01, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x41, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x41, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x44, 0x4d, 0x49,
	0x53, 0x53, 0x10, 0x04, 0x1a, 0x85, 0x05, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x69, 0x70, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0e, 0x69, 0x70, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0xe3, 0x03, 0x0a, 0x0c, 0x49, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74,
	0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0d, 0x69, 0x70, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0xba, 0x02, 0x0a, 0x0b, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x9c, 0x01, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x58, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x52, 0x41, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x03, 0x1a, 0x4f, 0x0a, 0x0d,
	0x50, 0x70, 0x36, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x1a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x2d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xa3, 0x1a,
	0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x68, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x70, 0x42, 0x79, 0x48,
	0x6f, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x11, 0x68, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x7a, 0x0a, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x12, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x8d, 0x01, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x78, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x52, 0x15, 0x6e, 0x6f, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x78, 0x68, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73,
	0x1a, 0xc5, 0x05, 0x0a, 0x0e, 0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41,
	0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x2d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f,
	0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xfe, 0x02,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf6, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48,
	0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x22, 0x38,
	0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x1a, 0xbf, 0x05, 0x0a, 0x0d, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x7f, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x74, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xfc, 0x02, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf5, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01,
	0x22, 0x38, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x44, 0x45, 0x4e,
	0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x1a, 0xd4, 0x05, 0x0a, 0x11, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x83, 0x01, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41,
	0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x2d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x78, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x84, 0x03, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7d, 0x0a, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf9, 0x01, 0x0a, 0x06,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x38, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x22, 0x38, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10,
	0x01, 0x1a, 0x8f, 0x05, 0x0a, 0x12, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x6e, 0x6f, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73,
	0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x14, 0x6e, 0x6f, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x78,
	0x68, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0xd8, 0x03, 0x0a, 0x11, 0x4e, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x8d,
	0x01, 0x0a, 0x08, 0x65, 0x78, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x71, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x78, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96,
	0x01, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x74, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e, 0x4e, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x07, 0x45, 0x78, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x78, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x78, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x52,
	0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x53, 0x50, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x48, 0x10, 0x33, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x10, 0x01, 0x1a, 0xb1, 0x38, 0x0a, 0x05, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x2d, 0x75, 0x70, 0x2d,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x2d, 0x75, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x70,
	0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x51, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x66, 0x69, 0x6d, 0x5f, 0x69, 0x66, 0x6d, 0x74, 0x72, 0x75, 0x6e,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x52, 0x0c, 0x66, 0x69, 0x6d, 0x2d, 0x69, 0x66, 0x6d, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x1a, 0x86, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0xa2, 0x17, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x2d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x88, 0x01,
	0x0a, 0x15, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x15, 0x6c, 0x61, 0x63, 0x70, 0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x66, 0x69, 0x6d,
	0x5f, 0x69, 0x66, 0x6d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x13, 0x66, 0x69, 0x6d, 0x2d, 0x69, 0x66,
	0x6d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x57, 0x0a,
	0x04, 0x6c, 0x61, 0x63, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70,
	0x52, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x1a, 0x33, 0x0a, 0x11, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x8e, 0x10, 0x0a, 0x04,
	0x4c, 0x61, 0x63, 0x70, 0x12, 0x7c, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x63, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0d, 0x70,
	0x64, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50, 0x64, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x0d, 0x70, 0x64, 0x75, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x1a, 0xd1, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x6b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x36, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x9f, 0x09, 0x0a, 0x16, 0x50, 0x6f, 0x72, 0x74,
	0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x79, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x79, 0x73, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x6e, 0x6f, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2d, 0x73, 0x79, 0x73, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x70, 0x72, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x73,
	0x79, 0x73, 0x70, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x79, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x73, 0x79, 0x73, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x72, 0x69, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x70, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5c, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x4e,
	0x44, 0x45, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x22, 0xdb, 0x02, 0x0a, 0x08,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x4d, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30,
	0x30, 0x4d, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x47, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47,
	0x45, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x54, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x54, 0x45,
	0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x30, 0x54, 0x45, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x30,
	0x47, 0x45, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x45, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30,
	0x47, 0x45, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x10, 0x92, 0x4e, 0x1a, 0x80, 0x02, 0x0a, 0x0c, 0x50, 0x64,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x76, 0x5f, 0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x65, 0x72, 0x72, 0x2d,
	0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x64, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x2d, 0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x2d, 0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x76, 0x2d, 0x65, 0x72, 0x72, 0x2d, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x22, 0x28, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x38, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x03,
	0x22, 0x82, 0x01, 0x0a, 0x13, 0x4c, 0x61, 0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c,
	0x61, 0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x61, 0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x61, 0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0xd5, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x66, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x5e, 0x0a,
	0x0a, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x8c, 0x04,
	0x0a, 0x0b, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x30, 0x0a,
	0x13, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72, 0x75, 0x6e,
	0x6b, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x73, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x7f, 0x0a, 0x13, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x44,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x13, 0x64, 0x75, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x58, 0x5f,
	0x31, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x58, 0x5f, 0x32, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x4f, 0x52, 0x58, 0x5f, 0x31, 0x36, 0x42, 0x49, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x4f, 0x52, 0x58, 0x5f, 0x38, 0x42, 0x49, 0x54, 0x10, 0x03, 0x22, 0x50, 0x0a, 0x11, 0x44, 0x75,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xaa, 0x0c, 0x0a,
	0x04, 0x4c, 0x61, 0x63, 0x70, 0x12, 0x7b, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x66, 0x61, 0x73, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x6c, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x78,
	0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6d, 0x69, 0x78, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64,
	0x61, 0x6d, 0x70, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x79, 0x73, 0x2d, 0x6d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x79, 0x73, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x05,
	0x6d, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63,
	0x70, 0x2e, 0x4d, 0x4c, 0x61, 0x67, 0x52, 0x05, 0x6d, 0x2d, 0x6c, 0x61, 0x67, 0x12, 0x5e, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x56, 0x72, 0x72,
	0x70, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x76, 0x72, 0x72, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x70, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x79, 0x73, 0x70, 0x72, 0x69, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x73, 0x79, 0x73, 0x6d, 0x61,
	0x63, 0x12, 0x67, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x53,
	0x79, 0x73, 0x6d, 0x61, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x79, 0x73,
	0x6d, 0x61, 0x63, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x6b, 0x65, 0x79, 0x1a, 0x44, 0x0a, 0x04, 0x4d, 0x4c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x79, 0x73, 0x2d, 0x6d, 0x61, 0x63, 0x1a, 0x7b, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x56, 0x72, 0x72, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x72, 0x72, 0x70, 0x2d, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x79, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x64, 0x2d, 0x65, 0x78, 0x74, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x01, 0x22, 0x6a, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x03, 0x22, 0x64, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x6d,
	0x61, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e,
	0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f,
	0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x22, 0x84, 0x03, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x45, 0x53, 0x58, 0x5f, 0x49, 0x50, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x53, 0x58, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x52, 0x43, 0x58,
	0x5f, 0x49, 0x50, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x52, 0x43, 0x58, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x45, 0x53, 0x49, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x34,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x58, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e,
	0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x61,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x22, 0x96,
	0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x59,
	0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x1a, 0x35, 0x0a, 0x0f, 0x56, 0x6c, 0x61, 0x6e, 0x69,
	0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xab,
	0x48, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x6c, 0x33, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x10, 0x6c, 0x33, 0x2d, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x10, 0x6c, 0x32, 0x2d, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x1a, 0xcf, 0x2b,
	0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x67, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x69, 0x6e, 0x71,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x71, 0x69, 0x6e, 0x71, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x70,
	0x0a, 0x0c, 0x6c, 0x32, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0c, 0x6c, 0x32, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x76, 0x0a, 0x0e, 0x6d, 0x73, 0x74, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0e, 0x6d, 0x73, 0x74, 0x70, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x66, 0x69, 0x6d, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d,
	0x4d, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x66, 0x69, 0x6d, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0xae,
	0x1d, 0x0a, 0x0b, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x73,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x76, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x74,
	0x61, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x17, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x0e, 0x6d, 0x73, 0x74, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0e, 0x6d, 0x73, 0x74, 0x70, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a, 0x0b,
	0x62, 0x70, 0x64, 0x75, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x42, 0x70, 0x64, 0x75, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x62, 0x70, 0x64, 0x75,
	0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x16, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x1a, 0x97, 0x02, 0x0a, 0x0d, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x76, 0x0a, 0x0c, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0x2d, 0x0a,
	0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x1a, 0xe5, 0x01, 0x0a,
	0x11, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x2e, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x69, 0x64, 0x1a, 0xbb, 0x08, 0x0a, 0x0d, 0x4d, 0x73, 0x74, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x6f, 0x2d, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x4d, 0x73, 0x74, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2d, 0x74, 0x6f, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x63, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x81,
	0x01, 0x0a, 0x09, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2e, 0x4d, 0x73, 0x74, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x76, 0x70, 0x6c, 0x73, 0x2d, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f,
	0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x46, 0x41,
	0x4c, 0x53, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x03, 0x22, 0x76, 0x0a, 0x0a,
	0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x03, 0x22, 0x6c, 0x0a, 0x08, 0x45, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x64, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x03, 0x1a, 0xf6, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xca,
	0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x78, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x43, 0x50, 0x10, 0x01, 0x22, 0x3e, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0c, 0x0a, 0x0a, 0x42,
	0x70, 0x64, 0x75, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x6e, 0x0a, 0x14, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x73,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x73, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x08, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x59, 0x42,
	0x52, 0x49, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x04, 0x1a,
	0x95, 0x08, 0x0a, 0x0d, 0x4d, 0x73, 0x74, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x6e, 0x6f, 0x2d, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d,
	0x73, 0x74, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2d, 0x74, 0x6f, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x63, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x63, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x0b, 0x62, 0x70, 0x64, 0x75, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x70, 0x64, 0x75, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x75, 0x0a, 0x09, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x74, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x65, 0x64,
	0x67, 0x65, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x70, 0x6c, 0x73, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x76, 0x70, 0x6c, 0x73, 0x2d, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x58, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10,
	0x03, 0x22, 0x76, 0x0a, 0x0a, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x70,
	0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x70, 0x64, 0x75, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x22, 0x6c, 0x0a, 0x08, 0x45, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x1a, 0xde, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6d, 0x4d,
	0x61, 0x69, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x0f,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x35, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e,
	0x53, 0x77, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x6c,
	0x61, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a,
	0xb4, 0x07, 0x0a, 0x0e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x71, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xaa, 0x03, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa3, 0x02, 0x0a,
	0x09, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6f, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x10, 0x02, 0x1a, 0x91, 0x02, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xa8, 0x0a, 0x0a, 0x0e, 0x4c, 0x32, 0x53, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x6e, 0x0a, 0x0b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x0a,
	0x66, 0x69, 0x6d, 0x5f, 0x6c, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x52, 0x0a, 0x66, 0x69,
	0x6d, 0x2d, 0x6c, 0x32, 0x2d, 0x73, 0x75, 0x62, 0x1a, 0x90, 0x05, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x38, 0x30, 0x32, 0x31, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x38, 0x30, 0x32, 0x31, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x4f, 0x50, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x31,
	0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x50,
	0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41,
	0x53, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x41, 0x50, 0x58, 0x5f, 0x31, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x31,
	0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x41, 0x50, 0x58, 0x5f, 0x32, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x31, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x41, 0x50, 0x58, 0x5f, 0x31, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x32, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x50,
	0x58, 0x5f, 0x32, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x32, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x50, 0x58, 0x5f,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x32, 0x58, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x50, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x58,
	0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x1a, 0xf3, 0x01, 0x0a, 0x08,
	0x46, 0x69, 0x6d, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x4c, 0x32,
	0x53, 0x75, 0x62, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x14, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x12,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x22, 0x3e, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0xd8, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x63, 0x12, 0x85, 0x01, 0x0a, 0x17, 0x73, 0x75,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4d, 0x61, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x17, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1a, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x9e, 0x05, 0x0a, 0x18,
	0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x19, 0x73, 0x75, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x73, 0x75, 0x62, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0xd9, 0x03, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x71, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x63, 0x62, 0x73, 0x22, 0x49, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02,
	0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xf3, 0x0b, 0x0a,
	0x08, 0x41, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x70, 0x5f, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x61, 0x72, 0x70, 0x2d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x61, 0x72, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x52, 0x10, 0x61, 0x72, 0x70, 0x2d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2d, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x61,
	0x6b, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65,
	0x73, 0x74, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x6b, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x72,
	0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x0f, 0x67, 0x72,
	0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74,
	0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x64, 0x74, 0x62,
	0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x64, 0x74, 0x62, 0x6c, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x66, 0x61, 0x6b, 0x65, 0x2d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75,
	0x73, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x2d, 0x61, 0x72, 0x70,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x61, 0x78, 0x2d,
	0x6e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x41, 0x72,
	0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x21,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x72, 0x70, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54,
	0x10, 0x03, 0x22, 0x6e, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x72, 0x61, 0x74, 0x75,
	0x69, 0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69,
	0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x1a, 0xda, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x52, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x27, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x01, 0x1a,
	0xf1, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x32, 0x2d, 0x73, 0x75, 0x62, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x68, 0x0a, 0x0e, 0x4c, 0x32, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c,
	0x32, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x64, 0x79, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d,
	0x64, 0x79, 0x6e, 0x2d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x32, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x6d, 0x61, 0x78, 0x2d,
	0x6e, 0x75, 0x6d, 0x1a, 0x7d, 0x0a, 0x03, 0x42, 0x66, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x62,
	0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x2d, 0x63, 0x72, 0x63,
	0x2d, 0x62, 0x69, 0x74, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x2d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x69, 0x66, 0x2d, 0x64, 0x6f,
	0x77, 0x6e, 0x1a, 0x8e, 0xa0, 0x02, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x73, 0x52, 0x06, 0x74, 0x72, 0x75, 0x73, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x12, 0x63, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x6b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x73, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x12, 0x6b, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x85, 0x01,
	0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x6b, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52,
	0x11, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x12, 0x7c, 0x0a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x19, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x71, 0x6f, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x77, 0x0a,
	0x15, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52,
	0x15, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x68, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x50, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x10,
	0x73, 0x6f, 0x66, 0x74, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x12, 0x85, 0x01, 0x0a, 0x1a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x1a, 0x66, 0x6c,
	0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x7d, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x17,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x7a, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x52, 0x16, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x19, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x17, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x70, 0x65, 0x72,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48,
	0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x19, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x7f, 0x0a,
	0x18, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x18, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x8d,
	0x01, 0x0a, 0x1d, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x1d, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x68,
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x10, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x52, 0x04, 0x63, 0x61, 0x72, 0x73,
	0x12, 0x78, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1c, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x1c, 0x64, 0x72, 0x6f, 0x70,
	0x2d, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x7d, 0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x17,
	0x64, 0x72, 0x6f, 0x70, 0x2d, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x55, 0x6e, 0x74, 0x61, 0x67, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x19, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x2d, 0x69,
	0x70, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x14,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x49,
	0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x14, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x76, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x15, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x98, 0x01, 0x0a,
	0x21, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x52, 0x21, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x1b, 0x62, 0x72, 0x61, 0x73,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x72, 0x61,
	0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x1b, 0x62, 0x72, 0x61, 0x73, 0x2d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2d, 0x74, 0x72, 0x65, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x7c, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12,
	0x54, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x32, 0x76, 0x63, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x32, 0x56, 0x63, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73,
	0x2d, 0x6c, 0x32, 0x76, 0x63, 0x12, 0x7a, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x4b, 0x0a, 0x06, 0x71, 0x6f, 0x73, 0x5f, 0x6c, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x72, 0x52, 0x06, 0x71, 0x6f, 0x73, 0x2d, 0x6c, 0x72, 0x12, 0x5a,
	0x0a, 0x0b, 0x6c, 0x64, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x4c, 0x64, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x0b, 0x6c,
	0x64, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x6e, 0x0a, 0x12, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a, 0x0f, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x6f, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x77, 0x66, 0x71, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x66, 0x71, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x77, 0x66, 0x71, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x2d, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x76, 0x6e, 0x69, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x56, 0x6e, 0x69, 0x43, 0x66, 0x67, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x76, 0x6e, 0x69, 0x2d, 0x63, 0x66, 0x67, 0x2d, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x71, 0x6f, 0x73, 0x5f, 0x76, 0x6c, 0x6c, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6c, 0x6c, 0x50,
	0x69, 0x70, 0x65, 0x52, 0x0c, 0x71, 0x6f, 0x73, 0x2d, 0x76, 0x6c, 0x6c, 0x2d, 0x70, 0x69, 0x70,
	0x65, 0x12, 0x65, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69,
	0x64, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x71, 0x70, 0x70, 0x62,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x52, 0x04, 0x71, 0x70, 0x70, 0x62,
	0x1a, 0xfa, 0x04, 0x0a, 0x06, 0x54, 0x72, 0x75, 0x73, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x73,
	0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x05, 0x74, 0x72, 0x75, 0x73, 0x74, 0x1a, 0x9d, 0x04,
	0x0a, 0x05, 0x54, 0x72, 0x75, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69,
	0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x44,
	0x53, 0x43, 0x50, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f, 0x38, 0x30,
	0x32, 0x31, 0x50, 0x10, 0x03, 0x22, 0x56, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x49, 0x4e, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0xb6, 0x07,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x1a, 0x93, 0x06, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x64, 0x12, 0x7f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x57,
	0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x04, 0x22, 0x7d, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x56, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x43, 0x45, 0x58, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x56, 0x49, 0x44, 0x58, 0x5f, 0x43, 0x45, 0x58,
	0x5f, 0x56, 0x49, 0x44, 0x10, 0x04, 0x1a, 0xcc, 0x09, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0xca, 0x08, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x61, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x65,
	0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x7b, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x45, 0x10,
	0x02, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x45, 0x58, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x45, 0x58, 0x5f, 0x56,
	0x49, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x45, 0x58, 0x5f, 0x43, 0x45, 0x58, 0x5f, 0x56, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43, 0x58, 0x5f, 0x43, 0x45,
	0x58, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x44, 0x58, 0x5f, 0x43, 0x45, 0x58,
	0x5f, 0x56, 0x49, 0x44, 0x10, 0x07, 0x22, 0x4d, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x8d, 0x0f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x78, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x1a, 0xff, 0x0d, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x74, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x2d, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x17, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xed, 0x07, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0xad, 0x01, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x1a,
	0xa4, 0x06, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x82, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37,
	0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x30, 0x10,
	0x09, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x4f, 0x53, 0x31, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x32, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x4f, 0x53, 0x33, 0x10, 0x0c, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x22, 0x41, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xdc, 0x03, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xe9, 0x02, 0x0a, 0x09, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x75, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x77, 0x72, 0x65, 0x64,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x1a, 0x86, 0x04, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0xf8, 0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77,
	0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0x8c, 0x02,
	0x0a, 0x17, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x19, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x54, 0x0a, 0x16, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x8c, 0x04, 0x0a,
	0x0f, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x12, 0x78, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0xfe, 0x02, 0x0a, 0x0e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x7f, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xb8, 0x04, 0x0a, 0x14,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x03, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xcf, 0x07, 0x0a, 0x16, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x12, 0x96, 0x01, 0x0a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x9b, 0x06, 0x0a, 0x15, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x73, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07,
	0x22, 0x76, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x58,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58,
	0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x03, 0x1a, 0xeb, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x70, 0x0a, 0x0e, 0x73, 0x65,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0e, 0x73, 0x65,
	0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x1a, 0xe7, 0x01, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x6d, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x68, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x58, 0x5f, 0x35, 0x53, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x58, 0x5f, 0x33, 0x30, 0x53, 0x10, 0x1e,
	0x12, 0x14, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x58, 0x5f, 0x33,
	0x30, 0x30, 0x53, 0x10, 0xac, 0x02, 0x1a, 0xeb, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6c, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x45,
	0x4c, 0x4c, 0x10, 0x01, 0x1a, 0xd4, 0x04, 0x0a, 0x09, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x5e, 0x0a, 0x09, 0x71, 0x6f, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09, 0x71, 0x6f, 0x73, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x1a, 0xe6, 0x03, 0x0a, 0x08, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x73, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x3f, 0x0a, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02, 0x1a, 0xe8, 0x01, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x46,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x81, 0x02, 0x0a, 0x0e, 0x53, 0x6f, 0x66, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x74, 0x0a, 0x0f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x50, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x50, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x0f,
	0x73, 0x6f, 0x66, 0x74, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a,
	0x79, 0x0a, 0x0d, 0x53, 0x6f, 0x66, 0x74, 0x50, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x12, 0x3c, 0x0a, 0x19, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2d, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x8c, 0x02, 0x0a, 0x17, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x19, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x1a, 0x54, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a,
	0x18, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xf8, 0x01, 0x0a, 0x15, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x4c, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x88, 0x04, 0x0a, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x12, 0x8c, 0x01,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0xe0, 0x02, 0x0a,
	0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45,
	0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a,
	0xc3, 0x03, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x18, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x1a, 0x8f, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x22, 0x45,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xb2, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x8e,
	0x01, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a,
	0x88, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x7e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x62, 0x73, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x8f, 0x03, 0x0a, 0x0c, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x92, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x73, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x9e, 0x04, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x18, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0xea, 0x02, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48,
	0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6d, 0x61, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x58, 0x5f, 0x38, 0x30, 0x32,
	0x31, 0x50, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x53, 0x43, 0x50, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x10, 0x1a, 0xf8, 0x01,
	0x0a, 0x15, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x17, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x4a, 0x0a, 0x14,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x19, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x1c, 0x70, 0x65, 0x72, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52,
	0x1c, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x1a, 0x68, 0x0a,
	0x18, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x66,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x1a, 0xa9, 0x01, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x48,
	0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0xd2, 0x16, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x03,
	0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x52, 0x03, 0x63, 0x61, 0x72, 0x1a, 0xff, 0x15, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x5e,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x66, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x63, 0x0a, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x69, 0x0a, 0x0d, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x14, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x0a, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a,
	0x11, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x2e, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x11, 0x72, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x52,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x63, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2d, 0x61, 0x77, 0x61, 0x72, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x3c, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x42, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07,
	0x22, 0x4d, 0x0a, 0x0a, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45,
	0x45, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x3f, 0x0a, 0x0c, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x22, 0xf2, 0x01, 0x0a, 0x12, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x51, 0x0a, 0x0b, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x59,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x45, 0x0a, 0x08, 0x52, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x46, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x7d, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x56, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x43, 0x45, 0x58, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x56, 0x49, 0x44, 0x58, 0x5f, 0x43,
	0x45, 0x58, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x04, 0x1a, 0xd9, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x75, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x01, 0x1a, 0x35, 0x0a, 0x19, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x1a, 0x2f, 0x0a, 0x15, 0x44,
	0x72, 0x6f, 0x70, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xb9, 0x01, 0x0a,
	0x16, 0x54, 0x72, 0x75, 0x73, 0x74, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x49, 0x70, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x55, 0x6e, 0x74, 0x61,
	0x67, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x06,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0xe8, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x13, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x4b, 0x0a, 0x11, 0x54, 0x72, 0x75, 0x73, 0x74, 0x49,
	0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x64, 0x1a, 0x8e, 0x0a, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x02, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x65, 0x52,
	0x02, 0x62, 0x65, 0x12, 0x50, 0x0a, 0x03, 0x61, 0x66, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x66, 0x31,
	0x52, 0x03, 0x61, 0x66, 0x31, 0x12, 0x50, 0x0a, 0x03, 0x61, 0x66, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x66, 0x32, 0x52, 0x03, 0x61, 0x66, 0x32, 0x12, 0x50, 0x0a, 0x03, 0x61, 0x66, 0x33, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x66, 0x33, 0x52, 0x03, 0x61, 0x66, 0x33, 0x12, 0x50, 0x0a, 0x03, 0x61, 0x66, 0x34,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x66, 0x34, 0x52, 0x03, 0x61, 0x66, 0x34, 0x12, 0x4d, 0x0a, 0x02, 0x65,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x66, 0x52, 0x02, 0x65, 0x66, 0x12, 0x50, 0x0a, 0x03, 0x63, 0x73,
	0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x73, 0x36, 0x52, 0x03, 0x63, 0x73, 0x36, 0x12, 0x50, 0x0a, 0x03,
	0x63, 0x73, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x73, 0x37, 0x52, 0x03, 0x63, 0x73, 0x37, 0x12, 0x7e,
	0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x22, 0x11, 0x0a, 0x02, 0x42, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x22, 0x2f, 0x0a, 0x03, 0x41,
	0x66, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x31, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x66, 0x31, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x03,
	0x41, 0x66, 0x32, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x32, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x66, 0x32, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x22, 0x2f, 0x0a,
	0x03, 0x41, 0x66, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x33, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x33, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x03, 0x22, 0x2f,
	0x0a, 0x03, 0x41, 0x66, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x34, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x34, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x04, 0x22,
	0x2c, 0x0a, 0x02, 0x45, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x66, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x66, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x05, 0x22, 0x2f, 0x0a,
	0x03, 0x43, 0x73, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x36, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x36, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x06, 0x22, 0x2f,
	0x0a, 0x03, 0x43, 0x73, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x37, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x37, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x07, 0x22,
	0x63, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c,
	0x50, 0x51, 0x10, 0x02, 0x1a, 0xc8, 0x03, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x14,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x14,
	0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x1a, 0xa8, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x7a, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a,
	0x81, 0x08, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73,
	0x12, 0xb2, 0x01, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0xab, 0x06, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c,
	0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x65, 0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x2d, 0x65,
	0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x65,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x65, 0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x9f,
	0x01, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x45,
	0x58, 0x5f, 0x56, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x45, 0x58, 0x5f, 0x56, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x45, 0x58, 0x5f, 0x43, 0x45, 0x58, 0x5f, 0x56, 0x49,
	0x44, 0x10, 0x04, 0x1a, 0xc2, 0x05, 0x0a, 0x18, 0x42, 0x72, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x9e, 0x01, 0x0a, 0x1a, 0x62, 0x72, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x1a, 0x62, 0x72, 0x61, 0x73, 0x2d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x1a, 0x84, 0x04, 0x0a, 0x17, 0x42, 0x72, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x99, 0x01,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x2e, 0x42, 0x72, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x68, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x72, 0x61,
	0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x52, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x0d, 0x22, 0x3a, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55,
	0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xbf, 0x03, 0x0a, 0x1b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x1d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2d, 0x74, 0x72, 0x65, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xf2, 0x01, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x0a, 0x0a, 0x08, 0x4c, 0x6f,
	0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xdb, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0xd9, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x70, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x52, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x2d, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x22, 0x30, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x58, 0x5f, 0x30, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x58,
	0x5f, 0x31, 0x10, 0x01, 0x1a, 0xc7, 0x03, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x9d,
	0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x3e,
	0x0a, 0x08, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x32, 0x56, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69,
	0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc9,
	0x07, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52,
	0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0xa1, 0x06, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0xae,
	0x01, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x7e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x91, 0x03, 0x0a, 0x17, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x58, 0x5f,
	0x43, 0x41, 0x52, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x51, 0x4f, 0x53, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x53, 0x48, 0x41,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x04, 0x12, 0x27,
	0x0a, 0x23, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x58, 0x5f,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10,
	0x07, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x51, 0x4f,
	0x53, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x24, 0x0a,
	0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x54,
	0x45, 0x10, 0x09, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x07, 0x0a, 0x05, 0x51, 0x6f,
	0x73, 0x4c, 0x72, 0x1a, 0xc7, 0x01, 0x0a, 0x0a, 0x4c, 0x64, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x12, 0x68, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x4c, 0x64, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x44, 0x50, 0x58, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x01, 0x1a, 0xba, 0x01,
	0x0a, 0x10, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x6b, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x39, 0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x1a, 0xbb, 0x01, 0x0a, 0x0d, 0x48,
	0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69,
	0x70, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x22, 0x36, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45,
	0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x1a, 0x37, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x80, 0x06, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x17,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x1a, 0xd1, 0x04, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x65, 0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x65, 0x2d, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x09, 0x65, 0x61, 0x63, 0x68,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x61, 0x63, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x09,
	0x65, 0x61, 0x63, 0x68, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x2d, 0x0a, 0x08, 0x45, 0x61, 0x63, 0x68, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x61, 0x63, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x5f, 0x4e, 0x4f,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x61, 0x63, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x5f, 0x59,
	0x45, 0x53, 0x10, 0x01, 0x1a, 0xf4, 0x07, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x82, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x73, 0x52, 0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x1a, 0x47, 0x0a, 0x0f, 0x41,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xf4, 0x04, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x12, 0xa7,
	0x01, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0xb0, 0x03, 0x0a, 0x14, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xd6, 0x02, 0x0a, 0x19,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x1a, 0xcc, 0x06, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x1a, 0xcf, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x66, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x70, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x38, 0x30, 0x32, 0x31, 0x50, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x38, 0x30, 0x32,
	0x31, 0x70, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x01, 0x22,
	0x44, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x7c, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x38, 0x30, 0x32,
	0x31, 0x50, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x38, 0x30, 0x32,
	0x31, 0x50, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x38, 0x30, 0x32, 0x31,
	0x50, 0x5f, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x79, 0x70, 0x65, 0x38, 0x30, 0x32, 0x31, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x58, 0x5f,
	0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x38,
	0x30, 0x32, 0x31, 0x50, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31,
	0x50, 0x10, 0x03, 0x1a, 0x0c, 0x0a, 0x0a, 0x57, 0x66, 0x71, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x1a, 0xa0, 0x02, 0x0a, 0x1a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0xa6, 0x01, 0x0a, 0x1c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x1c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x59, 0x0a, 0x19, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x41, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x6e, 0x69, 0x74, 0x5f, 0x58, 0x5f, 0x31, 0x4b, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x6e, 0x69, 0x74, 0x5f, 0x58, 0x5f, 0x32, 0x4b, 0x10, 0x05, 0x1a, 0xa1, 0x02, 0x0a, 0x10,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x66, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a,
	0xa4, 0x03, 0x0a, 0x0b, 0x56, 0x6e, 0x69, 0x43, 0x66, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x68, 0x0a, 0x0c, 0x76, 0x6e, 0x69, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x56, 0x6e, 0x69, 0x43, 0x66, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x2e, 0x56, 0x6e, 0x69, 0x43, 0x66, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x6e, 0x69,
	0x2d, 0x63, 0x66, 0x67, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x1a, 0xaa, 0x02, 0x0a, 0x0a, 0x56, 0x6e,
	0x69, 0x43, 0x66, 0x67, 0x50, 0x65, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x56, 0x6e, 0x69, 0x43, 0x66,
	0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x6e, 0x69, 0x43, 0x66, 0x67, 0x50, 0x65, 0x65,
	0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6e, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6e, 0x69, 0x2d, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x98, 0x0b, 0x0a, 0x0a, 0x51, 0x6f, 0x73, 0x56, 0x6c,
	0x6c, 0x50, 0x69, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6c, 0x6c, 0x50, 0x69,
	0x70, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70,
	0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6c, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x73,
	0x0a, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6c, 0x6c, 0x50, 0x69,
	0x70, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x56, 0x6c, 0x6c,
	0x50, 0x69, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x54, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x56, 0x6c, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x56,
	0x6c, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x08,
	0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50,
	0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x69, 0x70,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x50, 0x49,
	0x50, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x22, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x50, 0x49, 0x50, 0x45, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x22, 0x8a, 0x01, 0x0a,
	0x0e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x50, 0x49, 0x50, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x69, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x4c, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x52, 0x49, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x49, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x44, 0x53, 0x43, 0x50, 0x10,
	0x02, 0x1a, 0xa8, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x68, 0x22, 0x2d, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0xe5, 0x06, 0x0a,
	0x04, 0x51, 0x70, 0x70, 0x62, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x73, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x1a, 0x85, 0x04, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0x59,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70,
	0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x9e, 0x03, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x69, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x70, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x2d, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x45, 0x53,
	0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x97, 0x01, 0x0a, 0x0c, 0x49,
	0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x70,
	0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x3a, 0x0a, 0x06, 0x42, 0x66, 0x64, 0x45, 0x78, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x66, 0x6c, 0x61, 0x67,
	0x1a, 0xce, 0x01, 0x0a, 0x0a, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x4f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x55,
	0x41, 0x4c, 0x58, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x58, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10,
	0x02, 0x1a, 0xb5, 0x01, 0x0a, 0x09, 0x4e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x55, 0x41,
	0x4c, 0x58, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xba, 0x03, 0x0a, 0x03, 0x4e, 0x76,
	0x65, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4e, 0x76, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x70, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4e, 0x76, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x52, 0x03, 0x70, 0x69, 0x70, 0x1a, 0xd7, 0x01,
	0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x76, 0x74, 0x65, 0x70,
	0x2d, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x74,
	0x65, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x76, 0x74, 0x65, 0x70, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x74,
	0x65, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x76, 0x74, 0x65, 0x70, 0x2d, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x62,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x76, 0x74,
	0x65, 0x70, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0x3d, 0x0a, 0x03, 0x50, 0x69, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x2d, 0x69, 0x70, 0x1a, 0x7b, 0x0a, 0x0b, 0x4e, 0x76, 0x6f, 0x33, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x61,
	0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2d, 0x61, 0x6e, 0x79, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x1a, 0xcf, 0x38, 0x0a, 0x03, 0x42, 0x61, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x24,
	0x65, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x45, 0x61, 0x70, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x24, 0x65, 0x61, 0x70,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x12, 0x60, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x11, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x50, 0x70,
	0x70, 0x6f, 0x65, 0x42, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x70,
	0x70, 0x70, 0x6f, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x6e, 0x0a, 0x12, 0x70, 0x70, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x50, 0x70, 0x70, 0x42,
	0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x12, 0x70, 0x70,
	0x70, 0x2d, 0x62, 0x61, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x3b, 0x0a, 0x21, 0x45, 0x61, 0x70, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xaa, 0x07,
	0x0a, 0x0c, 0x42, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x68,
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x0b,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6e, 0x75,
	0x6d, 0x1a, 0xc1, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x73, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x1a, 0xbc, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x70, 0x6f, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x6f, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x70, 0x70, 0x6f, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x70, 0x70, 0x6f, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x82, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xab, 0x0c, 0x0a, 0x0f, 0x50,
	0x70, 0x70, 0x6f, 0x65, 0x42, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x69, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x69, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x64, 0x69, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x69, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x64, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6f, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x64, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x72,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d,
	0x70, 0x61, 0x64, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61,
	0x64, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x61, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x72, 0x2d, 0x73, 0x61, 0x6d, 0x65, 0x2d, 0x6d, 0x61, 0x63,
	0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x64, 0x74, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x64, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x74,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x64, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x74, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6d, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64,
	0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6d, 0x2d, 0x75,
	0x72, 0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6d, 0x5f, 0x6d, 0x6f, 0x74, 0x6d, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x70, 0x61, 0x64, 0x6d, 0x2d, 0x6d, 0x6f, 0x74, 0x6d, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x6e, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x74, 0x61, 0x67, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x74, 0x61, 0x67, 0x2d,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x64, 0x69, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x69, 0x2d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x2d, 0x70, 0x61, 0x64, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c,
	0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x19,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70,
	0x61, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x70, 0x61, 0x64,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xca, 0x20, 0x0a, 0x10, 0x50, 0x70, 0x70,
	0x42, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x65,
	0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x63,
	0x68, 0x6f, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x63, 0x68,
	0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x63, 0x68,
	0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x63,
	0x68, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x65, 0x63, 0x68, 0x6f,
	0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x65, 0x63, 0x68, 0x6f, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c,
	0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6c, 0x63, 0x70,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x63, 0x70, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x4a, 0x0a, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c,
	0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6c, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x46, 0x0a, 0x1e, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70,
	0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12,
	0x3a, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x63,
	0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70,
	0x63, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x69, 0x70, 0x63, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70,
	0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61,
	0x6b, 0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70,
	0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63,
	0x6b, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x69, 0x70, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x70, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a,
	0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x63, 0x70, 0x2d, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a,
	0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70,
	0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36,
	0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61,
	0x6b, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65,
	0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x1e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x36, 0x63,
	0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70,
	0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x6b, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6b, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69,
	0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x70, 0x36, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x70, 0x36, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x70, 0x36, 0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x70, 0x36,
	0x63, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x69, 0x70, 0x36, 0x63, 0x70, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65,
	0x6e, 0x64, 0x2d, 0x70, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63,
	0x68, 0x61, 0x70, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63,
	0x6b, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63,
	0x68, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x61, 0x69, 0x6c,
	0x2d, 0x66, 0x61, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x12,
	0x4e, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x70, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x9c, 0x07, 0x0a, 0x04, 0x42, 0x72, 0x61, 0x73, 0x12, 0x6c,
	0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x2d,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x62, 0x72, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x42,
	0x72, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x10, 0x62,
	0x72, 0x61, 0x73, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x1a,
	0xb7, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x61,
	0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x58, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x1a, 0xed, 0x01, 0x0a, 0x09, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x16, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0x58, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x1a, 0xb8, 0x01, 0x0a, 0x0e, 0x42, 0x72,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x11,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x29, 0x0a, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x21, 0x0a, 0x0b, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x56, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xf4, 0x0b, 0x0a, 0x07, 0x50, 0x70, 0x70, 0x6f,
	0x65, 0x56, 0x74, 0x12, 0x78, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x70, 0x70,
	0x6f, 0x65, 0x56, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x13, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6b, 0x65, 0x65, 0x70,
	0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x2d,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x15, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x74, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x74, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x74,
	0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x6d, 0x2d, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x58, 0x0a, 0x09, 0x70,
	0x61, 0x64, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x56,
	0x74, 0x2e, 0x50, 0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x70, 0x61, 0x64, 0x6e,
	0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x70, 0x61, 0x64, 0x6d, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x50, 0x70, 0x70, 0x6f, 0x65, 0x56, 0x74, 0x2e, 0x50, 0x61, 0x64, 0x6d,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x70, 0x61, 0x64, 0x6d, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12,
	0x3a, 0x0a, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x1c, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x72, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x72,
	0x75, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x63, 0x70, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x63, 0x70, 0x2d, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x70, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x41, 0x50, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x4d, 0x53, 0x43, 0x48, 0x41, 0x50, 0x56, 0x31, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x4d, 0x53, 0x43, 0x48, 0x41, 0x50, 0x56, 0x32, 0x10, 0x04, 0x22, 0x95,
	0x01, 0x0a, 0x08, 0x50, 0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x50, 0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x49, 0x50, 0x43, 0x50, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x43, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x4e, 0x43, 0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x4e, 0x43, 0x50, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x64, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x41, 0x4c,
	0x4c, 0x4e, 0x43, 0x50, 0x10, 0x05, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x64, 0x6d, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x61, 0x64, 0x6d, 0x53, 0x65,
	0x6e, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x64, 0x6d, 0x53, 0x65, 0x6e, 0x64,
	0x5f, 0x49, 0x50, 0x43, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x64, 0x6d, 0x53,
	0x65, 0x6e, 0x64, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x43, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x61, 0x64, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x4e, 0x43,
	0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x64, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x4e, 0x43, 0x50, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x64,
	0x6d, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x41, 0x4c, 0x4c, 0x4e, 0x43, 0x50, 0x10, 0x05, 0x1a, 0x2b,
	0x0a, 0x0b, 0x54, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x73, 0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x52, 0x0a, 0x08, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x72, 0x70, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a,
	0x52, 0x0a, 0x08, 0x49, 0x70, 0x76, 0x36, 0x55, 0x72, 0x70, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2d, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x6f, 0x61, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x6f, 0x61, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f, 0x61,
	0x6d, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x9e, 0x26,
	0x0a, 0x0b, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x5f, 0x0a, 0x0a, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x2d, 0x64, 0x6d, 0x61, 0x63, 0x12, 0x70,
	0x0a, 0x10, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e,
	0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x70, 0x74, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x64, 0x0a, 0x0c, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74,
	0x70, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x70, 0x74, 0x70, 0x2d, 0x70, 0x6b,
	0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x12, 0x6a, 0x0a, 0x0e, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x0e, 0x70, 0x74, 0x70, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x6d, 0x0a, 0x0f, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72,
	0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6b, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x0f, 0x70, 0x74, 0x70, 0x2d, 0x70, 0x6b, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x88, 0x01, 0x0a, 0x18, 0x70, 0x74, 0x70, 0x5f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x41,
	0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x18, 0x70, 0x74, 0x70, 0x2d, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a,
	0x19, 0x70, 0x74, 0x70, 0x5f, 0x74, 0x63, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x54, 0x63, 0x6f, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x72, 0x63, 0x52, 0x19, 0x70,
	0x74, 0x70, 0x2d, 0x74, 0x63, 0x6f, 0x63, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x72, 0x63, 0x12, 0x92, 0x01, 0x0a, 0x1c, 0x70, 0x74, 0x70,
	0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x52, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x62, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x1c, 0x70, 0x74, 0x70, 0x2d, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x69, 0x62, 0x65, 0x72, 0x2d,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x81, 0x0b,
	0x0a, 0x0e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x76, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73,
	0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x73, 0x65, 0x74, 0x12, 0x6b, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x79, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x66, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x63, 0x66, 0x67, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x68, 0x0a, 0x08, 0x63, 0x6c, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50,
	0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6b, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x08, 0x63, 0x6c, 0x6b, 0x2d, 0x73, 0x74, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x2d, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x0b,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74,
	0x5f, 0x4f, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x74, 0x5f, 0x42, 0x43, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x5f, 0x54, 0x43, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x5f, 0x54, 0x43, 0x4f,
	0x43, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x65, 0x74, 0x5f, 0x54, 0x58, 0x5f, 0x42, 0x43, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x43, 0x10,
	0x06, 0x22, 0x8b, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x43,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x54, 0x43, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x43, 0x4f, 0x43, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x58, 0x5f, 0x42, 0x43, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x43, 0x10, 0x06, 0x22,
	0x45, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x50, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x55, 0x4e, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74,
	0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x59,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0x33, 0x0a, 0x07,
	0x43, 0x6c, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x5f, 0x4f, 0x4e, 0x45, 0x53, 0x54, 0x45, 0x50, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x6c, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x54, 0x57, 0x4f, 0x53, 0x54, 0x45, 0x50, 0x10,
	0x01, 0x1a, 0xab, 0x07, 0x0a, 0x0a, 0x50, 0x74, 0x70, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x12, 0x72, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50,
	0x74, 0x70, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6b, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x10, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x2e, 0x50, 0x74, 0x70, 0x50, 0x6b, 0x74, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x10,
	0x70, 0x74, 0x70, 0x2d, 0x70, 0x6b, 0x74, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x12, 0x7a, 0x0a, 0x10, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x75, 0x64, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63,
	0x73, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x74, 0x70,
	0x50, 0x6b, 0x74, 0x55, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x10, 0x70, 0x74, 0x70, 0x2d,
	0x70, 0x6b, 0x74, 0x2d, 0x75, 0x64, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x1a, 0xab, 0x01, 0x0a,
	0x0d, 0x50, 0x74, 0x70, 0x50, 0x6b, 0x74, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x30,
	0x0a, 0x13, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x63,
	0x2d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x6d, 0x61, 0x63,
	0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61,
	0x63, 0x2d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x17, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6b, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6b,
	0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xb3, 0x02, 0x0a, 0x0d, 0x50,
	0x74, 0x70, 0x50, 0x6b, 0x74, 0x55, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x11,
	0x75, 0x64, 0x70, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x64, 0x70, 0x2d, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2d, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x64,
	0x70, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x64, 0x70, 0x2d, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2d, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x64,
	0x70, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x2d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d,
	0x64, 0x73, 0x63, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x75, 0x64, 0x70, 0x2d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x75, 0x64, 0x70, 0x2d, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2d, 0x70, 0x6b, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x13, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x64, 0x70,
	0x2d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x6d, 0x61, 0x63,
	0x22, 0x4d, 0x0a, 0x0b, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x41, 0x43, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6b, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x1a,
	0xa2, 0x01, 0x0a, 0x0c, 0x50, 0x74, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x63, 0x6c, 0x6b, 0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e,
	0x75, 0x6d, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x1a, 0xef, 0x02, 0x0a, 0x0d, 0x50, 0x74, 0x70, 0x50, 0x6b, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x36, 0x0a, 0x16,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x72, 0x65, 0x71, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x72, 0x65, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x17,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d,
	0x69, 0x6e, 0x2d, 0x70, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x72, 0x65, 0x71, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x98, 0x02, 0x0a, 0x16, 0x50, 0x74, 0x70, 0x41, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72,
	0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x1a, 0x83, 0x01, 0x0a, 0x15, 0x50, 0x74, 0x70, 0x54, 0x63, 0x6f, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x72, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x63, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x63, 0x6f, 0x63, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x2d, 0x63, 0x6c, 0x6b, 0x2d, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x74,
	0x63, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x6b, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74,
	0x63, 0x6f, 0x63, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x63, 0x6c, 0x6b, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x1a, 0x9c, 0x02, 0x0a, 0x18, 0x50, 0x74, 0x70, 0x52,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x74, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x52, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x50, 0x52, 0x45, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x1a, 0x29,
	0x0a, 0x0b, 0x56, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x72, 0x63, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x96, 0x02, 0x0a, 0x0e, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x65, 0x78, 0x65, 0x12, 0x5f, 0x0a, 0x09,
	0x70, 0x68, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x65, 0x78, 0x65, 0x2e, 0x50, 0x68, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x09, 0x70, 0x68, 0x79, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xa2, 0x01,
	0x0a, 0x08, 0x50, 0x68, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x08, 0x70, 0x68,
	0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x79, 0x6e,
	0x63, 0x46, 0x6c, 0x65, 0x78, 0x65, 0x2e, 0x50, 0x68, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x50, 0x68, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x70, 0x68, 0x79, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0x2f, 0x0a, 0x07, 0x50, 0x68, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x67, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x67, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0xe5, 0x2e, 0x0a, 0x0b, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72,
	0x63, 0x73, 0x12, 0x64, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e,
	0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x52, 0x0c, 0x67, 0x70, 0x73, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x72, 0x63, 0x1a, 0xef, 0x2d, 0x0a, 0x0a, 0x47, 0x70, 0x73,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x70, 0x73, 0x5f, 0x73,
	0x66, 0x70, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d,
	0x70, 0x74, 0x70, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x12, 0x34, 0x0a,
	0x15, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x66, 0x70, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67, 0x70,
	0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d, 0x70, 0x74, 0x70, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x32, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x66, 0x70, 0x5f, 0x70,
	0x74, 0x70, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d, 0x70, 0x74, 0x70, 0x2d, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x66, 0x70, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x78, 0x0a,
	0x0f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x72, 0x69, 0x31, 0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x70, 0x72, 0x69, 0x31, 0x12, 0x78, 0x0a, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x72, 0x63, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x32,
	0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x70, 0x72, 0x69,
	0x32, 0x12, 0x78, 0x0a, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63,
	0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x6e, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x33, 0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x70, 0x72, 0x69, 0x33, 0x12, 0x78, 0x0a, 0x0f, 0x67,
	0x6e, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x34, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x34, 0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2d, 0x70, 0x72, 0x69, 0x34, 0x12, 0x78, 0x0a, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63,
	0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x35, 0x52, 0x0f,
	0x67, 0x6e, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x70, 0x72, 0x69, 0x35, 0x12,
	0x36, 0x0a, 0x16, 0x6c, 0x65, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x6c, 0x65, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6d, 0x6f, 0x64, 0x65,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x70, 0x73,
	0x5f, 0x73, 0x66, 0x70, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x66, 0x70, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72,
	0x63, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x66, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x13, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x0b, 0x67, 0x6e, 0x73, 0x73, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47,
	0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x67, 0x6e, 0x73, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x67, 0x70, 0x73, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x13, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x79,
	0x6e, 0x63, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a,
	0x09, 0x67, 0x70, 0x73, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x72, 0x63, 0x2e, 0x47, 0x70, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x09, 0x67, 0x70, 0x73,
	0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0xf0, 0x01, 0x0a, 0x10, 0x47, 0x70, 0x73, 0x53, 0x66,
	0x70, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x67,
	0x70, 0x73, 0x5f, 0x73, 0x66, 0x70, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x66,
	0x70, 0x2d, 0x69, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a,
	0x13, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x66, 0x70, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x70, 0x73, 0x2d,
	0x73, 0x66, 0x70, 0x2d, 0x69, 0x73, 0x2d, 0x66, 0x72, 0x65, 0x71, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x38, 0x0a, 0x17, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x66, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d, 0x73, 0x65, 0x6c, 0x66, 0x2d, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x67, 0x70, 0x73,
	0x5f, 0x73, 0x66, 0x70, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x67,
	0x70, 0x73, 0x2d, 0x73, 0x66, 0x70, 0x2d, 0x69, 0x73, 0x2d, 0x73, 0x65, 0x6c, 0x66, 0x2d, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xf5, 0x0e, 0x0a, 0x0a, 0x47, 0x6e,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x5f,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x70, 0x73, 0x2d, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x67, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x2d, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x70, 0x73, 0x2d, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x7d, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e,
	0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x70, 0x73,
	0x5f, 0x6c, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x67, 0x70, 0x73, 0x2d, 0x6c, 0x65, 0x61, 0x70, 0x2d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x70, 0x73, 0x2d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x2d, 0x63, 0x6e,
	0x6f, 0x12, 0x3a, 0x0a, 0x18, 0x67, 0x6c, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x67, 0x6c, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x2d, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x15, 0x67, 0x6c, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6c,
	0x6f, 0x6e, 0x61, 0x73, 0x73, 0x2d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x2d,
	0x63, 0x6e, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x62, 0x65, 0x69, 0x64, 0x6f, 0x75, 0x5f, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x62, 0x65, 0x69, 0x64, 0x6f, 0x75, 0x2d, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x62, 0x65, 0x69, 0x64, 0x6f, 0x75, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x69,
	0x64, 0x6f, 0x75, 0x2d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x2d, 0x63, 0x6e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x70, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x0e, 0x67, 0x70, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x46, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0e, 0x67, 0x70, 0x73, 0x2d, 0x66, 0x69, 0x78, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x75, 0x0a, 0x0a, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x67, 0x6e, 0x73,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x6e, 0x73, 0x73, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6e, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x17, 0x6c, 0x65,
	0x61, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72,
	0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x6e,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x70, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x17, 0x6c,
	0x65, 0x61, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x65,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x70, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x64, 0x69, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4c, 0x65, 0x61, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x64, 0x69, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x70, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x64, 0x69, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x65, 0x61, 0x70,
	0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x65, 0x61, 0x70, 0x2d, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x47, 0x70, 0x73, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x70, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x70, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x70, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x22, 0x65, 0x0a,
	0x0c, 0x47, 0x70, 0x73, 0x46, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x18, 0x47, 0x70, 0x73, 0x46, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x4f,
	0x46, 0x49, 0x58, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47,
	0x70, 0x73, 0x46, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x49, 0x58, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x70, 0x73, 0x46, 0x69,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x09, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x6e, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x42, 0x45, 0x49, 0x44,
	0x4f, 0x55, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x47, 0x50,
	0x53, 0x58, 0x5f, 0x42, 0x45, 0x49, 0x44, 0x4f, 0x55, 0x10, 0x05, 0x22, 0x59, 0x0a, 0x14, 0x4c,
	0x65, 0x61, 0x70, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x65, 0x61, 0x70, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x65, 0x61, 0x70, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x79, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x70, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x64, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x24, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4c, 0x65, 0x61, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x64, 0x69, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x65, 0x61, 0x70, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x64, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x4c, 0x45, 0x41, 0x50, 0x35,
	0x39, 0x10, 0x3b, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x65, 0x61, 0x70, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x64, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x4c, 0x45, 0x41, 0x50, 0x36, 0x31, 0x10,
	0x3d, 0x1a, 0xa3, 0x09, 0x0a, 0x11, 0x47, 0x70, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x70, 0x73, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x67, 0x70, 0x73, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67,
	0x70, 0x73, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x31, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67,
	0x70, 0x73, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x32, 0x12, 0xa1, 0x01, 0x0a, 0x17, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47,
	0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x74, 0x70, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x17, 0x67, 0x70,
	0x73, 0x2d, 0x70, 0x74, 0x70, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x6d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x74, 0x70,
	0x5f, 0x63, 0x6c, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x67, 0x70, 0x73, 0x2d, 0x70, 0x74, 0x70, 0x2d, 0x63, 0x6c, 0x6b, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x74, 0x70, 0x5f,
	0x63, 0x6c, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63,
	0x2e, 0x47, 0x70, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x74, 0x70, 0x43, 0x6c, 0x6b, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x10, 0x67, 0x70, 0x73, 0x2d, 0x70, 0x74, 0x70, 0x2d, 0x63, 0x6c, 0x6b, 0x2d, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x3c, 0x0a, 0x19, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x67, 0x70, 0x73, 0x2d, 0x70, 0x74, 0x70, 0x2d, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x15, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x67, 0x70, 0x73, 0x2d, 0x70, 0x74, 0x70, 0x2d, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x74,
	0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x67, 0x70, 0x73, 0x2d, 0x70,
	0x74, 0x70, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x71, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x74, 0x70, 0x5f,
	0x63, 0x6c, 0x6b, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x70, 0x73,
	0x2d, 0x70, 0x74, 0x70, 0x2d, 0x63, 0x6c, 0x6b, 0x69, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x67,
	0x70, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x73, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x70,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x72, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x72, 0x63, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x73, 0x6d, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x2d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x73,
	0x6d, 0x22, 0x57, 0x0a, 0x14, 0x47, 0x70, 0x73, 0x50, 0x74, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x70, 0x73,
	0x50, 0x74, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x70, 0x73,
	0x50, 0x74, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x5f, 0x50, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x22, 0x45, 0x0a, 0x0d, 0x47, 0x70,
	0x73, 0x50, 0x74, 0x70, 0x43, 0x6c, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x70, 0x73, 0x50, 0x74, 0x70, 0x43, 0x6c, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x4f, 0x4e, 0x45,
	0x53, 0x54, 0x45, 0x50, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x70, 0x73, 0x50, 0x74, 0x70,
	0x43, 0x6c, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x54, 0x57, 0x4f, 0x53, 0x54, 0x45, 0x50, 0x10,
	0x01, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x47, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x73,
	0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x73, 0x6d,
	0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x70, 0x73, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x73, 0x6d, 0x5f, 0x50, 0x52, 0x43, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x47,
	0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x73, 0x6d, 0x5f, 0x53, 0x53, 0x55, 0x41, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x73, 0x6d,
	0x5f, 0x53, 0x53, 0x55, 0x42, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x70, 0x73, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x73, 0x6d, 0x5f, 0x53, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x73, 0x6d, 0x5f, 0x44, 0x4e, 0x55, 0x10,
	0x0f, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x73, 0x6d,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x10, 0x1a, 0x62, 0x0a, 0x08, 0x47, 0x70, 0x73, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x70, 0x73, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x70, 0x73, 0x2d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x70, 0x73, 0x2d,
	0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0d,
	0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x31, 0x12, 0x24, 0x0a,
	0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69,
	0x31, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x31, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x6e,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x31, 0x5f, 0x47, 0x4c, 0x4f, 0x4e,
	0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x72, 0x69, 0x31, 0x5f, 0x42, 0x45, 0x49, 0x44, 0x4f, 0x55, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x31,
	0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x31,
	0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x42, 0x45, 0x49, 0x44, 0x4f, 0x55, 0x10, 0x05, 0x22, 0xc0,
	0x01, 0x0a, 0x0d, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x32,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x32, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x32, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x32, 0x5f, 0x47,
	0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x6e, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x32, 0x5f, 0x42, 0x45, 0x49, 0x44, 0x4f, 0x55,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x72, 0x69, 0x32, 0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53,
	0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x72, 0x69, 0x32, 0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x42, 0x45, 0x49, 0x44, 0x4f, 0x55, 0x10,
	0x05, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x72, 0x69, 0x33, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x33, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x6e, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x33, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69,
	0x33, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47,
	0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x33, 0x5f, 0x42, 0x45, 0x49,
	0x44, 0x4f, 0x55, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x72, 0x69, 0x33, 0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x47, 0x4c, 0x4f, 0x4e,
	0x41, 0x53, 0x53, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x72, 0x69, 0x33, 0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x42, 0x45, 0x49, 0x44,
	0x4f, 0x55, 0x10, 0x05, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x72, 0x69, 0x34, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x6e, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x34, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x34, 0x5f, 0x47, 0x50,
	0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x34, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x34, 0x5f,
	0x42, 0x45, 0x49, 0x44, 0x4f, 0x55, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x6e, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x34, 0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x47,
	0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x6e, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x34, 0x5f, 0x47, 0x50, 0x53, 0x58, 0x5f, 0x42,
	0x45, 0x49, 0x44, 0x4f, 0x55, 0x10, 0x05, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x47, 0x6e, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x35, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x35, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x35,
	0x5f, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x35, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72,
	0x69, 0x35, 0x5f, 0x42, 0x45, 0x49, 0x44, 0x4f, 0x55, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x47,
	0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x35, 0x5f, 0x47, 0x50, 0x53,
	0x58, 0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x47,
	0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x35, 0x5f, 0x47, 0x50, 0x53,
	0x58, 0x5f, 0x42, 0x45, 0x49, 0x44, 0x4f, 0x55, 0x10, 0x05, 0x1a, 0x87, 0x13, 0x0a, 0x10, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x59, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x97, 0x12, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x2d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x73, 0x6d, 0x63, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x73, 0x6d, 0x63, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68,
	0x0a, 0x09, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70,
	0x68, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x65, 0x31, 0x5f, 0x73,
	0x61, 0x62, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x31,
	0x53, 0x61, 0x62, 0x69, 0x74, 0x52, 0x08, 0x65, 0x31, 0x2d, 0x73, 0x61, 0x62, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x31, 0x5f, 0x61, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x31, 0x2d, 0x61, 0x69, 0x73, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x70, 0x6f, 0x73, 0x5f, 0x61, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x70, 0x6f, 0x73, 0x2d, 0x61, 0x69, 0x73, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x70, 0x6f, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x70, 0x6f, 0x73, 0x2d, 0x65,
	0x78, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x68, 0x0a, 0x09, 0x73, 0x73, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x73, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x09, 0x73, 0x73, 0x6d, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x08, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x56, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79,
	0x6e, 0x63, 0x32, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x79, 0x6e,
	0x63, 0x32, 0x6d, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x32, 0x6d, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x32, 0x6d, 0x32, 0x1a, 0xd0,
	0x06, 0x0a, 0x08, 0x53, 0x73, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0e,
	0x73, 0x73, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x73, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x0e,
	0x73, 0x73, 0x6d, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x71,
	0x0a, 0x09, 0x73, 0x73, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x73, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x73,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x09, 0x73, 0x73, 0x6d, 0x2d, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x12, 0x74, 0x0a, 0x0a, 0x73, 0x73, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x73, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x2e, 0x53, 0x73, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x73, 0x73, 0x6d,
	0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x53, 0x73, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x73, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x50, 0x52, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x73, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x53, 0x53, 0x55, 0x41, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x53, 0x53, 0x55, 0x42, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x73, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x53, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x44, 0x4e, 0x55, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x10, 0x22, 0x8b, 0x01,
	0x0a, 0x08, 0x53, 0x73, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x73,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x73, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x50, 0x52, 0x43, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x73, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x53, 0x55, 0x41, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x73, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x53,
	0x55, 0x42, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x73, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x53, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x73, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x44, 0x4e, 0x55, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x73, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x10, 0x22, 0x93, 0x01, 0x0a, 0x09,
	0x53, 0x73, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x73, 0x6d,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x73, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x50, 0x52, 0x43, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x73, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x53, 0x53, 0x55,
	0x41, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x73, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x53, 0x53, 0x55, 0x42, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x73, 0x6d, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x53, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x73,
	0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x44, 0x4e, 0x55, 0x10, 0x0f, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x73, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x10, 0x1a, 0x87, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x2d, 0x69, 0x64, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x69,
	0x64, 0x2d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x69, 0x64, 0x2d, 0x6f, 0x75, 0x74, 0x22, 0x66, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x57, 0x54, 0x52, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x4f, 0x46,
	0x46, 0x10, 0x04, 0x22, 0x3f, 0x0a, 0x08, 0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x68, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x41, 0x10, 0x02, 0x22, 0x7e, 0x0a, 0x07, 0x45, 0x31, 0x53, 0x61, 0x62, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x31, 0x53, 0x61, 0x62, 0x69, 0x74, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x31, 0x53, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x53, 0x41, 0x34, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x31, 0x53, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x53, 0x41, 0x35, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x31, 0x53, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x53, 0x41, 0x36,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x31, 0x53, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x53, 0x41,
	0x37, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x31, 0x53, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x53,
	0x41, 0x38, 0x10, 0x08, 0x1a, 0x93, 0x01, 0x0a, 0x09, 0x50, 0x74, 0x70, 0x61, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x70, 0x74, 0x70, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x50, 0x74, 0x70, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x70, 0x61, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x09, 0x70, 0x74, 0x70, 0x61, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2a,
	0x0a, 0x08, 0x50, 0x74, 0x70, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x74,
	0x70, 0x5f, 0x61, 0x74, 0x72, 0x5f, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x70, 0x74, 0x70, 0x2d, 0x61, 0x74, 0x72, 0x2d, 0x65, 0x6e, 0x1a, 0xe8, 0x2b, 0x0a, 0x09, 0x43,
	0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x12, 0x69, 0x0a, 0x0e, 0x61, 0x72, 0x70, 0x5f,
	0x73, 0x61, 0x66, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x70, 0x53, 0x61, 0x66, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x0e, 0x61, 0x72, 0x70, 0x2d, 0x73, 0x61, 0x66, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x76, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x5f,
	0x71, 0x69, 0x6e, 0x71, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x51, 0x69, 0x6e,
	0x71, 0x48, 0x61, 0x73, 0x68, 0x73, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x63, 0x61, 0x72,
	0x2d, 0x71, 0x69, 0x6e, 0x71, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x75, 0x72, 0x70, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x72, 0x70, 0x66, 0x52, 0x09, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x72, 0x70, 0x66, 0x12, 0x5a, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x75, 0x72, 0x70, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x72, 0x70, 0x66, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x72, 0x70, 0x66, 0x12, 0x62, 0x0a, 0x0c, 0x61, 0x72, 0x70, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x63, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x72, 0x70, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x52, 0x0c, 0x61, 0x72, 0x70, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x12, 0x62, 0x0a, 0x0c, 0x6e, 0x64, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x73, 0x52, 0x0c, 0x6e,
	0x64, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x63, 0x61, 0x72, 0x12, 0x5a,
	0x0a, 0x09, 0x61, 0x72, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x09, 0x61, 0x72, 0x70, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x72,
	0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x61,
	0x72, 0x70, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0d, 0x63, 0x70, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x0d, 0x63, 0x70, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x5d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x63, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x35, 0x0a, 0x0d, 0x41, 0x72, 0x70, 0x53, 0x61, 0x66, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x72, 0x70, 0x2d, 0x73, 0x61, 0x66,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x1a, 0x42, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x72, 0x51, 0x69, 0x6e, 0x71, 0x48, 0x61, 0x73, 0x68, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x63, 0x61, 0x72,
	0x2d, 0x71, 0x69, 0x6e, 0x71, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x38, 0x0a, 0x08, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x72, 0x70, 0x66, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0x38, 0x0a, 0x08, 0x49, 0x70, 0x76, 0x36, 0x55, 0x72, 0x70, 0x66,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x2c,
	0x0a, 0x0a, 0x41, 0x72, 0x70, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xe9, 0x02, 0x0a,
	0x0a, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x0b, 0x6e,
	0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x73,
	0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x6e, 0x64, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x1a, 0xee, 0x01, 0x0a, 0x09, 0x4e, 0x64, 0x56, 0x6c,
	0x61, 0x6e, 0x43, 0x61, 0x72, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43,
	0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43,
	0x61, 0x72, 0x73, 0x2e, 0x4e, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x53, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x58, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x1a, 0xda, 0x06, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x12, 0x70, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5f,
	0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a,
	0x98, 0x04, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x78,
	0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70,
	0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x8f, 0x03, 0x0a, 0x09, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x7d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x70,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x41, 0x52, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x45,
	0x4c, 0x4e, 0x45, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x58, 0x5f, 0x4e, 0x44,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x49,
	0x43, 0x4d, 0x50, 0x56, 0x36, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x09, 0x1a, 0x59, 0x0a, 0x05, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x3e, 0x0a, 0x08, 0x41, 0x72, 0x70, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x69, 0x70, 0x1a, 0xa7, 0x01, 0x0a, 0x09, 0x41, 0x72, 0x70, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x68, 0x61,
	0x2d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0xb6, 0x12, 0x0a, 0x0b, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x58, 0x0a, 0x04, 0x69, 0x67, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x49,
	0x67, 0x6d, 0x70, 0x52, 0x04, 0x69, 0x67, 0x6d, 0x70, 0x12, 0x5b, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x07, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xd4, 0x08, 0x0a, 0x04, 0x49, 0x67,
	0x6d, 0x70, 0x12, 0x66, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43,
	0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x49, 0x67, 0x6d, 0x70, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x64,
	0x6f, 0x74, 0x31, 0x71, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x49, 0x67, 0x6d, 0x70, 0x2e, 0x44, 0x6f,
	0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x12, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x49, 0x67, 0x6d, 0x70, 0x2e, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x71, 0x69, 0x6e, 0x71, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x43, 0x0a, 0x07, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x1a, 0xb6,
	0x02, 0x0a, 0x11, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x49, 0x67, 0x6d, 0x70, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x6f, 0x74, 0x31, 0x71,
	0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x88, 0x01, 0x0a,
	0x10, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x1a, 0xd6, 0x02, 0x0a, 0x10, 0x51, 0x69, 0x6e, 0x71,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x91, 0x01, 0x0a,
	0x10, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x49, 0x67, 0x6d, 0x70, 0x2e, 0x51, 0x69,
	0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51,
	0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x71, 0x69, 0x6e, 0x71, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xad, 0x01, 0x0a, 0x0f, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x65, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x1a, 0xaa, 0x07, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64,
	0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x64, 0x6f, 0x74, 0x31, 0x71,
	0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x84, 0x01,
	0x0a, 0x11, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x11, 0x71, 0x69, 0x6e, 0x71, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x09, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x1a,
	0xfc, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x68, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x51,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x6f, 0x74,
	0x31, 0x71, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4e,
	0x0a, 0x10, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x65, 0x6e, 0x64, 0x1a, 0x9c,
	0x02, 0x0a, 0x10, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x10, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x2e, 0x43, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x71, 0x69, 0x6e, 0x71, 0x2d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x73, 0x0a, 0x0f, 0x51, 0x69, 0x6e, 0x71,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x65,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x65, 0x6e, 0x64, 0x1a, 0x09, 0x0a,
	0x07, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x63,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6d,
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x70, 0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x63, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x52,
	0x0c, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x1a, 0xa5, 0x01,
	0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x12, 0x76, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x70,
	0x75, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x2e, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x1a, 0xa7, 0x02, 0x0a, 0x03, 0x44, 0x63, 0x6e, 0x12, 0x49, 0x0a,
	0x05, 0x64, 0x63, 0x6e, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x63, 0x6e, 0x2e, 0x44, 0x63, 0x6e, 0x76,
	0x34, 0x52, 0x05, 0x64, 0x63, 0x6e, 0x76, 0x34, 0x12, 0x4b, 0x0a, 0x06, 0x74, 0x63, 0x5f, 0x64,
	0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x63, 0x6e, 0x2e, 0x54, 0x63, 0x44, 0x63, 0x6e, 0x52, 0x06, 0x74,
	0x63, 0x2d, 0x64, 0x63, 0x6e, 0x1a, 0x43, 0x0a, 0x05, 0x44, 0x63, 0x6e, 0x76, 0x34, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x43, 0x0a, 0x05, 0x54, 0x63,
	0x44, 0x63, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0xdd, 0x18, 0x0a, 0x12, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x61, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x38, 0x32, 0x12, 0x78, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7b,
	0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x14,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x9d, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x1d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x38, 0x32, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x52, 0x16, 0x6f, 0x70, 0x74, 0x38, 0x32, 0x2d, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x1a, 0x95, 0x04,
	0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x69, 0x6e, 0x6b, 0x2d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a,
	0x1e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x2d, 0x69, 0x64, 0x2d, 0x73, 0x65, 0x6c, 0x66, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x2d, 0x74, 0x65, 0x78, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x58, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0xa0, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x87,
	0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0xac, 0x02, 0x0a, 0x10, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x86, 0x01,
	0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x58, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x70, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xf4, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0xb2, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xa0, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfc, 0x03, 0x0a, 0x14, 0x4f, 0x70, 0x74,
	0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x73, 0x12, 0x9b, 0x01, 0x0a, 0x15, 0x6f, 0x70, 0x74, 0x38, 0x32, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x15, 0x6f, 0x70, 0x74, 0x38, 0x32, 0x2d,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x1a,
	0xc5, 0x02, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x75, 0x62, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x11, 0x73, 0x75, 0x62, 0x2d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x53,
	0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27,
	0x0a, 0x23, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x22, 0x66, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x24,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x58, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x1a,
	0xab, 0x09, 0x0a, 0x06, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x12, 0x74, 0x0a, 0x13, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x64, 0x68, 0x63,
	0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x6c, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x80,
	0x01, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x49, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x38, 0x32, 0x2d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x1a, 0xb0, 0x02, 0x0a, 0x11, 0x44, 0x68, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x70, 0x2d, 0x74, 0x74, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x73, 0x63, 0x70, 0x2d, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x75, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x1a, 0xed, 0x03, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38,
	0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x38, 0x32, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x49, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x2d, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x1a, 0xde, 0x02, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x49, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2d, 0x74, 0x65, 0x78, 0x74, 0x22, 0x95, 0x01, 0x0a,
	0x0d, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x58, 0x5f, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x58, 0x5f, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x10, 0x03, 0x1a, 0x17, 0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0xaa, 0x0d,
	0x0a, 0x0c, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x2d, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x30, 0x12, 0x69, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x66, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0xcc, 0x04, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x09, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x46, 0x73,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x66, 0x73, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x08, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x73, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x05, 0x1a, 0xf4, 0x05, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x63, 0x6b, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x6e, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x61, 0x6b, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x1b,
	0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x40,
	0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64,
	0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x2d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64,
	0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x65,
	0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x73, 0x65, 0x6e, 0x64, 0x1a, 0x98, 0x0b, 0x0a, 0x0e, 0x44,
	0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x66, 0x12, 0x71, 0x0a,
	0x0f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x66,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x68, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x66,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x1a, 0x9c, 0x07, 0x0a, 0x0e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x61, 0x72, 0x70, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x61,
	0x72, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x61, 0x72, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x61, 0x72, 0x70, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x70, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2d, 0x69, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x70,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x69, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x70, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x6d,
	0x61, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x6e, 0x64,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x17, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x89, 0x02, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e,
	0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42,
	0x69, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x1a, 0x86, 0x01, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x80, 0x0c, 0x0a, 0x14, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x6e, 0x6b, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a,
	0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x73,
	0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x66,
	0x73, 0x12, 0x74, 0x0a, 0x0e, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x81, 0x01, 0x0a, 0x13, 0x70, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x56, 0x72, 0x72, 0x70, 0x52, 0x13,
	0x70, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x76,
	0x72, 0x72, 0x70, 0x1a, 0xeb, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x38, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0xc1, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x66, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x66, 0x1a, 0x29, 0x0a, 0x0d, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x71, 0x0a, 0x0d, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x1a, 0x66, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x1a, 0x36, 0x0a, 0x10, 0x50, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x56, 0x72, 0x72, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x1a, 0x92, 0x14, 0x0a, 0x03, 0x45, 0x66, 0x6d,
	0x12, 0x4f, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xb9, 0x13, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x6d, 0x61, 0x78, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x85, 0x01, 0x0a, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66,
	0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d,
	0x69, 0x66, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68,
	0x6f, 0x6c, 0x64, 0x2d, 0x75, 0x70, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d,
	0x6d, 0x61, 0x63, 0x2d, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x62, 0x0a, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x76, 0x0a,
	0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x52, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66,
	0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x12, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xa8,
	0x03, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x2d, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x41, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x5f, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x84, 0x02, 0x0a, 0x10, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x77,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x41, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0xf6, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x70,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x41, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x84, 0x02, 0x0a, 0x10, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x77,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x41, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x22, 0x2c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x29,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x5c, 0x0a, 0x15, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x44, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x66,
	0x44, 0x6f, 0x77, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xa7, 0x09,
	0x0a, 0x04, 0x45, 0x76, 0x70, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x62,
	0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x62, 0x62, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d,
	0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x73, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x73, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x73, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x73, 0x2d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x66,
	0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x2d, 0x74,
	0x72, 0x65, 0x65, 0x2d, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x6a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76,
	0x70, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd0, 0x06, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x70,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xc3, 0x05, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x76, 0x70, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x43, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x42, 0x50, 0x44, 0x55, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x44, 0x50, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x44, 0x4c, 0x44, 0x10, 0x06, 0x22, 0x86, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x04, 0x22, 0x27,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x55, 0x4e, 0x54, 0x41, 0x47, 0x10, 0x01, 0x1a, 0xaf, 0x04, 0x0a, 0x03, 0x46, 0x69, 0x6d, 0x12,
	0x69, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x74, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x2e, 0x4d, 0x61, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x14, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x01, 0x22, 0x53, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x61,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x61,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xee, 0x01, 0x0a, 0x09, 0x46, 0x69,
	0x6d, 0x49, 0x66, 0x6d, 0x4d, 0x72, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x72, 0x75, 0x12, 0x7a, 0x0a, 0x14, 0x6d, 0x72, 0x75,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x4d, 0x72, 0x75, 0x2e, 0x4d, 0x72, 0x75,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x14, 0x6d, 0x72, 0x75, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x12, 0x4d, 0x72, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4d,
	0x72, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x72, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x25, 0x0a, 0x09, 0x46, 0x69,
	0x6d, 0x54, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x5f, 0x6d,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x63, 0x70, 0x2d, 0x6d, 0x73,
	0x73, 0x1a, 0x45, 0x0a, 0x0d, 0x46, 0x69, 0x6d, 0x49, 0x66, 0x6d, 0x42, 0x64, 0x69, 0x66, 0x69,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x76, 0x62, 0x64, 0x69, 0x66, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x76, 0x62, 0x64, 0x69, 0x66, 0x2d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63,
	0x6b, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x85, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6d,
	0x49, 0x66, 0x6d, 0x56, 0x65, 0x69, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x0f, 0x76, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6d,
	0x49, 0x66, 0x6d, 0x56, 0x65, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x76, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x2d,
	0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x0d, 0x56, 0x65, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x56, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x48, 0x41, 0x4c, 0x46, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x03,
	0x1a, 0xc0, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x32, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x33, 0x56, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x58, 0x5f, 0x56,
	0x45, 0x10, 0x07, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x72, 0x75, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x62, 0x79, 0x74, 0x65, 0x1a, 0x83, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x6d, 0x74,
	0x75, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x74, 0x75, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x74, 0x75, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x74, 0x75, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x74, 0x75, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x2d, 0x69, 0x70, 0x76, 0x34,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0xad, 0x03, 0x0a,
	0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0xae, 0x02, 0x0a, 0x0b,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0xaa, 0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x78,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x1a, 0x98, 0x05, 0x0a,
	0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x61, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52,
	0x65, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x70, 0x52, 0x0a, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x6f, 0x70, 0x12, 0x5e, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x6f, 0x70, 0x1a, 0xc2, 0x02, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x64, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x71, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0x27, 0x0a, 0x0f, 0x49, 0x66, 0x38, 0x30, 0x32,
	0x31, 0x50, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x37, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x49, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x69, 0x64, 0x1a, 0xbe, 0x04, 0x0a, 0x0c, 0x49, 0x67,
	0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x6d,
	0x61, 0x78, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x2d, 0x61, 0x63, 0x6c, 0x12, 0x69, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x67, 0x6d, 0x70, 0x53,
	0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x1a, 0x84, 0x02, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x73, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x67, 0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x7f, 0x0a, 0x0b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x6d, 0x61, 0x78, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x64, 0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x2d, 0x65, 0x6e, 0x64, 0x1a, 0x26, 0x0a, 0x0c, 0x48, 0x77,
	0x6d, 0x63, 0x49, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x9b, 0x06, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x93, 0x05, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x58, 0x5f, 0x53, 0x54, 0x50,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x58, 0x5f, 0x53, 0x54, 0x50, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x4c, 0x4d, 0x49,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x41, 0x43, 0x50, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x52, 0x50, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x41, 0x50, 0x4f, 0x4c, 0x10, 0x08, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x53, 0x4d, 0x43, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x50, 0x44,
	0x55, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x4f, 0x41, 0x4d, 0x10, 0x0e, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x54, 0x50, 0x10, 0x0f, 0x22, 0x49, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x1a, 0x24, 0x0a, 0x0e, 0x56, 0x6c, 0x6c, 0x50, 0x77, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x31, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x1a, 0xb6, 0x4f, 0x0a, 0x04, 0x4c, 0x6c,
	0x64, 0x70, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xdb, 0x4e, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x74, 0x6c, 0x76, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6c, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a,
	0x74, 0x6c, 0x76, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52,
	0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0x91, 0x05, 0x0a, 0x09, 0x54,
	0x6c, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x63, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x64, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64,
	0x64, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xf7,
	0x45, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x1a, 0x82, 0x45, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x2d, 0x73, 0x75, 0x62,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x2d, 0x69, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x69, 0x64, 0x2d, 0x73, 0x75, 0x62, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0xa2, 0x01, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x6f,
	0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x18, 0x61, 0x75, 0x74,
	0x6f, 0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x75, 0x74, 0x6f,
	0x2d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x7b, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x75, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x1a, 0x6c,
	0x69, 0x6e, 0x6b, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x18, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x18,
	0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2d,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c,
	0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73,
	0x52, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x0c, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x73, 0x52, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x25, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x54, 0x6c, 0x76, 0x73, 0x52, 0x25, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x2d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x74, 0x6c, 0x76, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x64,
	0x64, 0x70, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x44, 0x64, 0x70, 0x54, 0x6c, 0x76, 0x52, 0x07,
	0x64, 0x64, 0x70, 0x2d, 0x74, 0x6c, 0x76, 0x12, 0x79, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x6c, 0x76, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74,
	0x6c, 0x76, 0x1a, 0xbc, 0x09, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x84, 0x08, 0x0a, 0x11, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x87, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x73, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x69, 0x66, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x78,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49,
	0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x66, 0x2d, 0x73, 0x75, 0x62,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x66, 0x2d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0xfb, 0x03,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x41,
	0x50, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x44, 0x4c, 0x43,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x42, 0x4e, 0x31, 0x38,
	0x32, 0x32, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x36, 0x33, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x36, 0x34, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x36, 0x39, 0x10, 0x09, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x31, 0x32, 0x31, 0x10, 0x0a, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x43, 0x4e, 0x45, 0x54,
	0x58, 0x5f, 0x49, 0x56, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x41, 0x4e, 0x59, 0x41, 0x4e, 0x58, 0x5f, 0x56, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x36, 0x34, 0x58, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x58, 0x5f, 0x4e, 0x53, 0x41, 0x50, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x55, 0x49, 0x53, 0x48, 0x45, 0x44, 0x58, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x53,
	0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x54, 0x50, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x54, 0x50,
	0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x14, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x54, 0x50, 0x58, 0x5f, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x58, 0x5f, 0x58, 0x54, 0x50, 0x10, 0x15, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x52, 0x45, 0x58, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x57, 0x57, 0x50, 0x4e, 0x10, 0x16, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x52, 0x45, 0x58, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x57, 0x57, 0x4e, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x57, 0x49, 0x44, 0x10, 0x18, 0x22, 0x74, 0x0a, 0x09, 0x49,
	0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x66, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x46, 0x58, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x03, 0x1a, 0xb3, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c,
	0x61, 0x6e, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x76, 0x6c, 0x61, 0x6e,
	0x1a, 0x94, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x8c, 0x01, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x86, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c,
	0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x09, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x07, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x1a, 0xb9, 0x01, 0x0a, 0x09, 0x56, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x30, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xc8, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x6c, 0x76, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x74, 0x6c, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x73,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x52, 0x0b, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x74, 0x6c, 0x76, 0x1a, 0x34, 0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x87,
	0x03, 0x0a, 0x22, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x6c, 0x76, 0x73, 0x12, 0xe3, 0x01, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x8e, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x6c, 0x76, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x54, 0x6c, 0x76, 0x52, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x74, 0x6c, 0x76, 0x1a, 0x7b, 0x0a, 0x21, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x6c, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x62, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x44, 0x64, 0x70,
	0x54, 0x6c, 0x76, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x66, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x29, 0x0a, 0x0b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x58, 0x5f,
	0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x58, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x58, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x58,
	0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43,
	0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12,
	0x21, 0x0a, 0x1d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x58, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x58, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55,
	0x49, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x07, 0x22, 0x5d, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01,
	0x22, 0x57, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x75,
	0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x75, 0x74,
	0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x22, 0x94, 0x13, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x65,
	0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x41, 0x55, 0x49, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x58, 0x5f, 0x35, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x46, 0x4f, 0x49, 0x52, 0x4c, 0x10, 0x03, 0x12, 0x2c,
	0x0a, 0x28, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28,
	0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f,
	0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x50, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x70, 0x65,
	0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d,
	0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x46, 0x42, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x58, 0x5f, 0x46, 0x4c, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x72, 0x4d,
	0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x58, 0x5f, 0x33, 0x36, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x54, 0x48, 0x44, 0x10, 0x0a, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x54, 0x46, 0x44, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x46, 0x4c, 0x48, 0x44, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d,
	0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x58, 0x5f, 0x46, 0x4c, 0x46, 0x44, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x54, 0x34, 0x10, 0x0e, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x54, 0x58, 0x48, 0x44, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f,
	0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x58, 0x46, 0x44, 0x10, 0x10, 0x12, 0x30, 0x0a, 0x2c,
	0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30,
	0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x58, 0x48, 0x44, 0x10, 0x11, 0x12, 0x30,
	0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x58, 0x46, 0x44, 0x10, 0x12,
	0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x32, 0x48, 0x44,
	0x10, 0x13, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x32,
	0x46, 0x44, 0x10, 0x14, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x58, 0x48, 0x44, 0x10, 0x15, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x58, 0x5f, 0x58, 0x46, 0x44, 0x10, 0x16, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x58, 0x48, 0x44, 0x10, 0x17, 0x12, 0x31, 0x0a, 0x2d, 0x4f,
	0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58,
	0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30,
	0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x58, 0x46, 0x44, 0x10, 0x18, 0x12, 0x31,
	0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x58, 0x48, 0x44, 0x10,
	0x19, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x58,
	0x46, 0x44, 0x10, 0x1a, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x43, 0x58, 0x48, 0x44, 0x10, 0x1b, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d,
	0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x43, 0x58, 0x46, 0x44, 0x10, 0x1c, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f,
	0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x48, 0x44, 0x10, 0x1d, 0x12, 0x30, 0x0a, 0x2c,
	0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30,
	0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x46, 0x44, 0x10, 0x1e, 0x12, 0x2f,
	0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x58, 0x10, 0x1f, 0x12,
	0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f,
	0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x58, 0x34,
	0x10, 0x20, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f,
	0x52, 0x10, 0x21, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x45, 0x52, 0x10, 0x22, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x58, 0x5f, 0x4c, 0x52, 0x10, 0x23, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d,
	0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x52, 0x10, 0x24, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65,
	0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d,
	0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x57, 0x10, 0x25, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f,
	0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47,
	0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x45, 0x57, 0x10, 0x26, 0x12, 0x30, 0x0a, 0x2c,
	0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47,
	0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x57, 0x10, 0x27, 0x12, 0x30,
	0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x57, 0x10, 0x28,
	0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x34, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4b, 0x52,
	0x34, 0x10, 0x46, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x43, 0x52, 0x34, 0x10, 0x47, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x53, 0x52, 0x34, 0x10, 0x48, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65,
	0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d,
	0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x49, 0x47, 0x58,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x52, 0x10, 0x49, 0x12, 0x31, 0x0a, 0x2d, 0x4f,
	0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58,
	0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x49,
	0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0x4a, 0x12, 0x33,
	0x0a, 0x2f, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x52, 0x31,
	0x30, 0x10, 0x4b, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x58, 0x5f, 0x53, 0x52, 0x31, 0x30, 0x10, 0x4c, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x49, 0x47, 0x58,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0x4d, 0x12, 0x32, 0x0a, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30,
	0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x34, 0x10, 0x4e,
	0x22, 0x5d, 0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x1b,
	0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x22,
	0x57, 0x0a, 0x16, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x69, 0x6e,
	0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x69, 0x6e, 0x6b,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x58, 0x58, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x58, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x54, 0x58, 0x58, 0x5f, 0x52, 0x58, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x1a, 0xc5, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x75, 0x63, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x55, 0x63, 0x6d, 0x70, 0x52, 0x04, 0x75, 0x63,
	0x6d, 0x70, 0x12, 0x54, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x06, 0x0a, 0x04, 0x55, 0x63, 0x6d, 0x70,
	0x1a, 0x08, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0xa8, 0x06, 0x0a, 0x0a, 0x4c,
	0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x64, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x6d, 0x0a, 0x0f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x61,
	0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x1a, 0x0d, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x1a, 0x30, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0xa0, 0x03, 0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x12, 0x77, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x2d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x22, 0x7f, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x45, 0x52,
	0x50, 0x58, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x58, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x58, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x02, 0x1a, 0xc4, 0x18, 0x0a, 0x06, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x12, 0x54, 0x0a, 0x08, 0x63, 0x6b, 0x6e, 0x5f, 0x63, 0x61, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x6b, 0x6e, 0x43, 0x61, 0x6b, 0x73, 0x52, 0x08, 0x63, 0x6b,
	0x6e, 0x2d, 0x63, 0x61, 0x6b, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x2d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2d, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x12, 0x75, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x73, 0x52, 0x13, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x65, 0x0a, 0x0e, 0x73, 0x61, 0x6b,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2e, 0x53, 0x61, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x52, 0x0e, 0x73, 0x61, 0x6b, 0x2d, 0x6c, 0x69, 0x66, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x63, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x17, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x2d, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0e, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x52,
	0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x1a,
	0xcb, 0x02, 0x0a, 0x07, 0x43, 0x6b, 0x6e, 0x43, 0x61, 0x6b, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x63,
	0x6b, 0x6e, 0x5f, 0x63, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x43,
	0x6b, 0x6e, 0x43, 0x61, 0x6b, 0x73, 0x2e, 0x43, 0x6b, 0x6e, 0x43, 0x61, 0x6b, 0x52, 0x07, 0x63,
	0x6b, 0x6e, 0x2d, 0x63, 0x61, 0x6b, 0x1a, 0xe4, 0x01, 0x0a, 0x06, 0x43, 0x6b, 0x6e, 0x43, 0x61,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6b, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x6b, 0x6e, 0x12, 0x63, 0x0a, 0x08, 0x63, 0x61, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x6b, 0x6e, 0x43, 0x61, 0x6b, 0x73, 0x2e,
	0x43, 0x6b, 0x6e, 0x43, 0x61, 0x6b, 0x2e, 0x43, 0x61, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x61, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x6b, 0x22, 0x51, 0x0a, 0x07, 0x43, 0x61,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x61, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x10, 0x02, 0x1a, 0xed, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x1a, 0x3b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb4, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12,
	0x71, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2d, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x1a, 0x30, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2d,
	0x73, 0x69, 0x7a, 0x65, 0x1a, 0xcd, 0x01, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x12,
	0x6b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x12, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x1a, 0x2f, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0xac, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x6b, 0x4c, 0x69, 0x66, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x0d, 0x73, 0x61, 0x6b, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x53,
	0x61, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6b, 0x4c,
	0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x61, 0x6b, 0x2d, 0x6c, 0x69, 0x66,
	0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x2b, 0x0a, 0x0b, 0x53, 0x61, 0x6b, 0x4c, 0x69, 0x66,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x58,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x9d, 0x03, 0x0a, 0x15, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52,
	0x16, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x2d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x2d, 0x73, 0x75, 0x69, 0x74, 0x65, 0x1a, 0xed, 0x01, 0x0a, 0x14, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x12, 0x77, 0x0a, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x05, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x75, 0x69, 0x74, 0x65, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x47, 0x43, 0x4d, 0x58, 0x5f, 0x41,
	0x45, 0x53, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x5f, 0x47, 0x43, 0x4d, 0x58, 0x5f, 0x41, 0x45, 0x53, 0x58, 0x5f, 0x58, 0x50, 0x4e,
	0x58, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x02, 0x1a, 0xf2, 0x02, 0x0a, 0x0c, 0x56, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x12, 0x6f, 0x0a, 0x0d, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x0d, 0x76, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x6e, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x1a, 0xf0, 0x01, 0x0a, 0x0b, 0x56, 0x6c,
	0x61, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x73, 0x0a, 0x0a, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x2e, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6c,
	0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51,
	0x58, 0x5f, 0x49, 0x4e, 0x58, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x49, 0x4e, 0x51, 0x58,
	0x5f, 0x49, 0x4e, 0x58, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x02, 0x1a, 0xcb, 0x1b, 0x0a,
	0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x11, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x68, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x63, 0x61, 0x72, 0x12, 0x65, 0x0a, 0x0e, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x6f, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2d,
	0x74, 0x6f, 0x12, 0x66, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x73, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x62, 0x61,
	0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x10, 0x62, 0x61, 0x73, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x73, 0x0a, 0x13, 0x65, 0x76, 0x63, 0x5f, 0x6c,
	0x32, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x63, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x13, 0x65, 0x76, 0x63, 0x2d, 0x6c, 0x32, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x0c,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x1a, 0xd4,
	0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x69,
	0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xd9, 0x01, 0x0a, 0x0a, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x70, 0x75,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x70, 0x75, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x31, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x57, 0x0a, 0x0d, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x62, 0x73, 0x1a, 0x34, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xc4, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x0d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xbf, 0x01,
	0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x73,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a,
	0xf0, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x73, 0x12,
	0x67, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xf7, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x70,
	0x75, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x1a, 0xd6, 0x03, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0f, 0x62,
	0x61, 0x73, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xca,
	0x02, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x75, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x65, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x65, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x65, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x65, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x65, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x65, 0x6e, 0x64, 0x22,
	0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x12, 0x0a, 0x10, 0x45,
	0x76, 0x63, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a,
	0xd8, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x72, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x2d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6d, 0x61, 0x63, 0x12, 0x63, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x09, 0x70,
	0x6f, 0x70, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x15, 0x77, 0x69, 0x74, 0x68,
	0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x40, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x52, 0x55,
	0x45, 0x10, 0x01, 0x22, 0x61, 0x0a, 0x08, 0x50, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x54,
	0x57, 0x4f, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0x52, 0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69,
	0x6e, 0x6b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x19, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x49, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x94, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x73, 0x68, 0x63, 0x66, 0x67, 0x12, 0x6b, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x68, 0x61, 0x73,
	0x68, 0x63, 0x66, 0x67, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x66, 0x0a, 0x0c, 0x64, 0x65, 0x65, 0x70, 0x6d, 0x70, 0x6c, 0x73, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x68, 0x61, 0x73, 0x68, 0x63, 0x66, 0x67, 0x2e,
	0x44, 0x65, 0x65, 0x70, 0x6d, 0x70, 0x6c, 0x73, 0x68, 0x61, 0x73, 0x68, 0x52, 0x0c, 0x64, 0x65,
	0x65, 0x70, 0x6d, 0x70, 0x6c, 0x73, 0x68, 0x61, 0x73, 0x68, 0x22, 0x66, 0x0a, 0x0d, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x22, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x65, 0x70, 0x6d, 0x70, 0x6c, 0x73, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x65, 0x65, 0x70, 0x6d, 0x70, 0x6c,
	0x73, 0x68, 0x61, 0x73, 0x68, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x65, 0x70, 0x6d,
	0x70, 0x6c, 0x73, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x4c, 0x33, 0x10, 0x01, 0x1a, 0x11, 0x0a, 0x0f,
	0x49, 0x66, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x1a,
	0xdb, 0x05, 0x0a, 0x11, 0x49, 0x66, 0x50, 0x32, 0x4d, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x66, 0x50, 0x32, 0x4d, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x18, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x50, 0x32, 0x4d, 0x70, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x18, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x1a, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x70, 0x6d, 0x73, 0x69, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x50, 0x32, 0x4d, 0x70,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x6d, 0x73,
	0x69, 0x64, 0x69, 0x73, 0x52, 0x1a, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x6c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x70, 0x6d, 0x73, 0x69, 0x64, 0x69, 0x73,
	0x22, 0x53, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x5f, 0x0a, 0x16, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x65, 0x0a, 0x18, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x6d, 0x73, 0x69, 0x64,
	0x69, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x6d, 0x73, 0x69, 0x64, 0x69, 0x73, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x6f, 0x6f, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x6d, 0x73,
	0x69, 0x64, 0x69, 0x73, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xe4, 0x01,
	0x0a, 0x14, 0x42, 0x67, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x6e, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x7d, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x66, 0x6e, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x67, 0x70,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x6e, 0x65, 0x74, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x66,
	0x6e, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x66, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x66, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0xa3, 0x01, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x07, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x31, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xe1, 0x09, 0x0a, 0x09, 0x4e,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x6c, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x87,
	0x04, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x78, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x0d,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x77, 0x0a,
	0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3a, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x22, 0x3a, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55,
	0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xf3, 0x03, 0x0a, 0x0c, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x0b,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x09, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x74, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x50, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xaf,
	0x0d, 0x0a, 0x12, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x6e, 0x76, 0x6f, 0x33, 0x5f, 0x76,
	0x74, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e,
	0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x13, 0x6e, 0x76, 0x6f, 0x33, 0x2d, 0x76, 0x74, 0x65, 0x70, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0x95, 0x0c, 0x0a, 0x11, 0x4e, 0x76, 0x6f,
	0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76,
	0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33,
	0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e,
	0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xf2, 0x07, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xda, 0x06, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65,
	0x6e, 0x64, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x62, 0x69, 0x74, 0x73, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x70, 0x6b, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x2d, 0x70, 0x6b, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x32, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x33, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x22, 0x55, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x1a, 0xd7, 0x0a, 0x0a, 0x0f, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x73, 0x12, 0x74, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x66, 0x2d, 0x69, 0x63, 0x6d,
	0x70, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xcd, 0x09, 0x0a, 0x0e, 0x49,
	0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x69, 0x63,
	0x6d, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x50, 0x4b,
	0x54, 0x10, 0x01, 0x22, 0x98, 0x05, 0x0a, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x45, 0x43, 0x48, 0x4f,
	0x58, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x63, 0x6d,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4e, 0x45,
	0x45, 0x44, 0x58, 0x5f, 0x44, 0x46, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x63, 0x6d, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x53, 0x58, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x63,
	0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x63,
	0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x58, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x63,
	0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x53, 0x58,
	0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x63,
	0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x58, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x58, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x48, 0x10, 0x10, 0x12, 0x22,
	0x0a, 0x1e, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x58, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10,
	0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x54,
	0x54, 0x4c, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x14, 0x22, 0x4a,
	0x0a, 0x0f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xbb, 0x04, 0x0a, 0x10, 0x49,
	0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x7a, 0x0a, 0x12, 0x69, 0x66, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x12, 0x69, 0x66, 0x2d, 0x69, 0x70, 0x2d, 0x6f,
	0x70, 0x74, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xaa, 0x03, 0x0a, 0x0f,
	0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x77, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73,
	0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x58, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x58, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x58, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x58, 0x5f,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x03, 0x22, 0x2f, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x11, 0x0a, 0x0f, 0x49, 0x70, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x3a, 0x0a, 0x0e, 0x49,
	0x70, 0x46, 0x77, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x63, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x2d, 0x6f, 0x72, 0x2d, 0x6e, 0x75, 0x6d, 0x1a, 0x77, 0x0a, 0x03, 0x52, 0x62, 0x73, 0x12, 0x51,
	0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x62, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x62, 0x73, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x62, 0x70, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x72, 0x62,
	0x70, 0x1a, 0x1d, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x62, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0xff, 0x03, 0x0a, 0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0x61, 0x0a, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0d, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x5e, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x1a, 0x82, 0x01, 0x0a,
	0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x74, 0x6c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x74, 0x6c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x70,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x72, 0x70, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x1a, 0xae, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x12, 0x67, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x36, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0xae, 0x07, 0x0a, 0x0e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x6e, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x2d, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x7b, 0x0a, 0x13, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x61, 0x5f, 0x61, 0x6e,
	0x74, 0x69, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x61,
	0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x6e, 0x61, 0x2d, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x79, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x12, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x6d,
	0x61, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x61, 0x72, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x41, 0x72, 0x70, 0x52, 0x15, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x61, 0x72, 0x70, 0x12, 0x95,
	0x01, 0x0a, 0x1c, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x4d, 0x61, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e,
	0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1c, 0x6d, 0x61, 0x63, 0x2d, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x6e, 0x64, 0x2d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x1a, 0x0e, 0x0a, 0x0c, 0x49, 0x70, 0x76, 0x36, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x70, 0x76, 0x36, 0x4e,
	0x61, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x2c, 0x0a, 0x10, 0x49,
	0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2c, 0x0a, 0x12, 0x4d, 0x61, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x72, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x1a, 0x0a, 0x18, 0x4d, 0x61, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x64, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x36, 0x0a, 0x16, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x3c, 0x0a, 0x05, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x55, 0x42, 0x58, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01, 0x22, 0xb2, 0x0b, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x49,
	0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x54, 0x52, 0x55,
	0x4e, 0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58,
	0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f,
	0x53, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f, 0x53,
	0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d, 0x10, 0x0b,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x46,
	0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x12, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x45, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x4d, 0x50, 0x49, 0x46, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x45, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x45, 0x42, 0x52, 0x49, 0x45, 0x46, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x49, 0x50, 0x10, 0x1c, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x1f,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x41, 0x58, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4d,
	0x45, 0x54, 0x48, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x58, 0x5f, 0x41, 0x50, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d, 0x58, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45,
	0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52,
	0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x27,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x42, 0x44, 0x49, 0x46, 0x10, 0x28,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x31, 0x10, 0x29, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x33, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x43, 0x34, 0x10, 0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x43, 0x31, 0x32, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x2e, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x33, 0x10, 0x30,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x50, 0x10, 0x31, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x43, 0x4e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f,
	0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x58, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x35, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x4e, 0x10, 0x37, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x4d, 0x41,
	0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x3b, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x55, 0x4e,
	0x49, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x44, 0x4d, 0x10,
	0x40, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x56, 0x45, 0x10, 0x41, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x43, 0x4f, 0x45, 0x58, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x44,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x43, 0x10, 0x46, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x45, 0x10, 0x47,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x31, 0x30,
	0x47, 0x45, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x33,
	0x58, 0x34, 0x30, 0x47, 0x45, 0x10, 0x49, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x34, 0x58, 0x32, 0x35, 0x47, 0x45, 0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x45, 0x10, 0x4b, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x4f, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x57, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x58, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x58, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x59, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x49, 0x46, 0x10, 0x5a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x47,
	0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x5b,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x45,
	0x10, 0x5c, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x58, 0x5f, 0x4f, 0x44, 0x55, 0x4b, 0x10, 0x5e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x10, 0x5f, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x45, 0x10,
	0x60, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x58, 0x5f,
	0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x35, 0x30, 0x47, 0x45, 0x10, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x10, 0x67, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30,
	0x47, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58,
	0x45, 0x58, 0x5f, 0x35, 0x30, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x10, 0x69, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x45, 0x10, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x48, 0x50, 0x47, 0x45, 0x10, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x46, 0x10, 0x74, 0x22, 0x37,
	0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x50, 0x50, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x69, 0x6e,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x48, 0x44, 0x4c, 0x43, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x46, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x41, 0x54, 0x4d, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x44, 0x4d, 0x10,
	0x07, 0x22, 0x7f, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x54,
	0x4f, 0x50, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x54, 0x4f, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x42, 0x4d, 0x41, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0xff, 0x01, 0x22, 0x7f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x56,
	0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x22, 0xd6, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x41, 0x47, 0x58, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x58, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x47, 0x58, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45,
	0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f, 0x53, 0x58, 0x5f,
	0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0f, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49,
	0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x12, 0x22, 0xbe, 0x07, 0x0a,
	0x11, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x49, 0x4e, 0x51, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x32, 0x50, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x32,
	0x4d, 0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x32, 0x56, 0x45, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x33, 0x56, 0x45, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x31,
	0x51, 0x58, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x58, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x54, 0x41, 0x47, 0x58, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x49,
	0x4e, 0x51, 0x58, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x32, 0x56, 0x43, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x33, 0x56, 0x43, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43, 0x58, 0x5f,
	0x55, 0x4e, 0x54, 0x41, 0x47, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43,
	0x58, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x56, 0x43, 0x58, 0x5f, 0x51, 0x49, 0x4e, 0x51, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x56, 0x43, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x11, 0x12, 0x28,
	0x0a, 0x24, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43, 0x58, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x58, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x45,
	0x54, 0x46, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x58, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x15, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x58, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x41, 0x4e, 0x59, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x49, 0x4e, 0x58, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x17, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x46, 0x54,
	0x58, 0x5f, 0x47, 0x52, 0x45, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x33, 0x56, 0x45, 0x58, 0x5f, 0x54, 0x45, 0x52, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x33, 0x56, 0x45, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x1a, 0x12, 0x1e, 0x0a,
	0x19, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0x01, 0x22, 0x66, 0x0a,
	0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x58, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x23, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x80, 0x80, 0x0c, 0x1a, 0x1e, 0x0a, 0x04, 0x44, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74,
	0x78, 0x2d, 0x6f, 0x66, 0x66, 0x1a, 0xd7, 0x0a, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x1a, 0xd8, 0x09, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x0f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x08, 0x0a, 0x0d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x50,
	0x44, 0x55, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x45, 0x43, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x41, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x4d, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x42, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x10, 0x43, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x45, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f,
	0x58, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x46, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x52, 0x43, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53,
	0x10, 0x47, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x58,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x58, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x48, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x10, 0x49, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x32, 0x58,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x58, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x45, 0x44, 0x10, 0x4a,
	0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x58,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x4b,
	0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x58,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x4c,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x4d, 0x49, 0x53, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x4d, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x58, 0x5f, 0x4d, 0x53,
	0x54, 0x50, 0x10, 0x4e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x4f, 0x12, 0x2b,
	0x0a, 0x27, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x50, 0x12, 0x29, 0x0a, 0x25, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x4c, 0x49, 0x43, 0x54, 0x10, 0x51, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x52, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x10, 0x53, 0x12, 0x31,
	0x0a, 0x2d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x58,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x55, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x58, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x56, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x57,
	0x12, 0x2c, 0x0a, 0x28, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c, 0x41, 0x47, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x43, 0x59, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x58, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x46, 0x43, 0x58, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x59, 0x1a,
	0xbe, 0x0e, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x16, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x2d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x1a, 0xab, 0x0d, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb2, 0x0b, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x47, 0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x54,
	0x52, 0x55, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x50, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x4f, 0x53, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50,
	0x4f, 0x53, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d,
	0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e,
	0x49, 0x46, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x4d, 0x50, 0x49, 0x46, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x45, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x45, 0x42, 0x52, 0x49, 0x45, 0x46, 0x10, 0x19, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x1a, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x49, 0x50, 0x10,
	0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x10, 0x1e, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x41, 0x58, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x56, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x58, 0x5f, 0x41, 0x50, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x24, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d, 0x58, 0x5f, 0x42, 0x55, 0x4e, 0x44,
	0x4c, 0x45, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42,
	0x45, 0x52, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x26, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x42, 0x41, 0x4e, 0x44,
	0x10, 0x27, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x42, 0x44, 0x49, 0x46,
	0x10, 0x28, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x31, 0x10, 0x29, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x33, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x43, 0x34, 0x10, 0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x43, 0x31, 0x32, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x2d, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x2e, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x33,
	0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x50, 0x10, 0x31, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x43, 0x4e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43,
	0x50, 0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f, 0x53, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x58, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x35,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x4e, 0x10, 0x37, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49,
	0x4d, 0x41, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x3b,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f,
	0x55, 0x4e, 0x49, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x44,
	0x4d, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x56, 0x45, 0x10,
	0x41, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x43, 0x4f, 0x45, 0x58, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x43, 0x10, 0x46, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x45,
	0x10, 0x47, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x58,
	0x31, 0x30, 0x47, 0x45, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x5f, 0x33, 0x58, 0x34, 0x30, 0x47, 0x45, 0x10, 0x49, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x32, 0x35, 0x47, 0x45, 0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x45, 0x10, 0x4b, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x4f, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x57, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x58, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x58, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x59, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x49, 0x46, 0x10, 0x5a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x47, 0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x10, 0x5b, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30,
	0x47, 0x45, 0x10, 0x5c, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x4f, 0x44, 0x55, 0x4b, 0x10, 0x5e, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x10, 0x5f, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47,
	0x45, 0x10, 0x60, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30,
	0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x45, 0x10, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x10, 0x67, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c,
	0x45, 0x58, 0x45, 0x58, 0x5f, 0x35, 0x30, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x10, 0x69, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58,
	0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x45, 0x10, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x48, 0x50, 0x47, 0x45, 0x10, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x46, 0x10, 0x74,
	0x1a, 0xd4, 0x01, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x75, 0x70, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x64, 0x6f, 0x77,
	0x6e, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x75, 0x70, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x64, 0x6f, 0x77,
	0x6e, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc5, 0x06, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a,
	0xcd, 0x05, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x85, 0x01,
	0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x87, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x69, 0x6e, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62,
	0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6e, 0x2d, 0x70, 0x65,
	0x61, 0x6b, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62,
	0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x61,
	0x6b, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x69, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x1a,
	0xd8, 0x02, 0x0a, 0x08, 0x48, 0x64, 0x6c, 0x63, 0x44, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x48,
	0x64, 0x6c, 0x63, 0x44, 0x61, 0x6d, 0x70, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x75,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x75, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x2d,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x61, 0x6c, 0x66, 0x2d, 0x6c, 0x69, 0x66,
	0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x61, 0x0a, 0x09, 0x44, 0x61, 0x6d, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x61, 0x6d,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x45, 0x41,
	0x56, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x3b,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x69, 0x66, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R12_ifm_proto_rawDescOnce sync.Once
	file_huaweiV8R12_ifm_proto_rawDescData = file_huaweiV8R12_ifm_proto_rawDesc
)

func file_huaweiV8R12_ifm_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_ifm_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_ifm_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_ifm_proto_rawDescData)
	})
	return file_huaweiV8R12_ifm_proto_rawDescData
}

var file_huaweiV8R12_ifm_proto_enumTypes = make([]protoimpl.EnumInfo, 287)
var file_huaweiV8R12_ifm_proto_msgTypes = make([]protoimpl.MessageInfo, 479)
var file_huaweiV8R12_ifm_proto_goTypes = []interface{}{
	(Ifm_Global_FimIfmGlobal_GlobalStrictFilter)(0),                                                                                       // 0: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.GlobalStrictFilter
	(Ifm_Global_FimIfmGlobal_DualStatEnable)(0),                                                                                           // 1: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.DualStatEnable
	(Ifm_Global_FimIfmGlobal_TrunkAdjustEnable)(0),                                                                                        // 2: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.TrunkAdjustEnable
	(Ifm_Global_FimIfmGlobal_QinqTransportEnable)(0),                                                                                      // 3: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.QinqTransportEnable
	(Ifm_Global_FimTrunkLocalfwd_Enable)(0),                                                                                               // 4: huaweiV8R12_ifm.Ifm.Global.FimTrunkLocalfwd.Enable
	(Ifm_Interfaces_Interface_Class)(0),                                                                                                   // 5: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Class
	(Ifm_Interfaces_Interface_Type)(0),                                                                                                    // 6: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Type
	(Ifm_Interfaces_Interface_AdminStatus)(0),                                                                                             // 7: huaweiV8R12_ifm.Ifm.Interfaces.Interface.AdminStatus
	(Ifm_Interfaces_Interface_LinkProtocol)(0),                                                                                            // 8: huaweiV8R12_ifm.Ifm.Interfaces.Interface.LinkProtocol
	(Ifm_Interfaces_Interface_RouterType)(0),                                                                                              // 9: huaweiV8R12_ifm.Ifm.Interfaces.Interface.RouterType
	(Ifm_Interfaces_Interface_StatisticMode)(0),                                                                                           // 10: huaweiV8R12_ifm.Ifm.Interfaces.Interface.StatisticMode
	(Ifm_Interfaces_Interface_ServiceType)(0),                                                                                             // 11: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ServiceType
	(Ifm_Interfaces_Interface_EncapsulationType)(0),                                                                                       // 12: huaweiV8R12_ifm.Ifm.Interfaces.Interface.EncapsulationType
	(Ifm_Interfaces_Interface_NetworkLayerStatus)(0),                                                                                      // 13: huaweiV8R12_ifm.Ifm.Interfaces.Interface.NetworkLayerStatus
	(Ifm_Interfaces_Interface_Dynamic_OperStatus)(0),                                                                                      // 14: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.OperStatus
	(Ifm_Interfaces_Interface_Dynamic_PhysicalStatus)(0),                                                                                  // 15: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.PhysicalStatus
	(Ifm_Interfaces_Interface_Dynamic_LinkStatus)(0),                                                                                      // 16: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.LinkStatus
	(Ifm_Interfaces_Interface_Dynamic_Ipv4Status)(0),                                                                                      // 17: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv4Status
	(Ifm_Interfaces_Interface_Dynamic_Ipv6Status)(0),                                                                                      // 18: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv6Status
	(Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade)(0),                                                                                // 19: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.LinkQualityGrade
	(Ifm_Interfaces_Interface_DampState_SuppressStatus)(0),                                                                                // 20: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DampState.SuppressStatus
	(Ifm_Interfaces_Interface_ErrorDown_Cause)(0),                                                                                         // 21: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ErrorDown.Cause
	(Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type)(0),                                                                       // 22: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address.Type
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode)(0),                                                               // 23: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.AuthenticationMode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode)(0),                                                                       // 24: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.V3Sendmode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type)(0),                                                                             // 25: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Type
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State)(0),                                                                            // 26: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.State
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode)(0),                                         // 27: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface.TrackMode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType)(0),                                                   // 28: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionType
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode)(0),                                                     // 29: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.TrackMode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState)(0),                                                  // 30: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionState
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode)(0),                                                 // 31: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp.TrackMode
	(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type)(0),                                                                       // 32: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Type
	(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType)(0),                                                              // 33: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.AlgorithmType
	(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status)(0),                                                                     // 34: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Status
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag)(0),                                                                // 35: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NsMcastFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean)(0),                                                                    // 36: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NaGlean
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag)(0),                                                                     // 37: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.MaFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag)(0),                                                                      // 38: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.OFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag)(0),                                                                 // 39: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaHaltFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference)(0),                                                               // 40: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPreference
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag)(0),                                                               // 41: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPrefixFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag)(0),                                                                  // 42: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaMtuFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag)(0),                                                            // 43: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.CollectHostFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable)(0),                                                           // 44: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.GenerateRdEnable
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy)(0),                                                                     // 45: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.RouteProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy)(0),                                                                 // 46: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InnerVlanProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy)(0),                                                                 // 47: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InterVlanProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy)(0),                                                                    // 48: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.AnywayProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type)(0),                                    // 49: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit.Type
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType)(0),                        // 50: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit.PacketType
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions)(0),                                                    // 51: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.AllOptions
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule)(0),                                     // 52: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option.FilterRule
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions)(0),                                                     // 53: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.AllOptions
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule)(0),                                      // 54: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option.FilterRule
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions)(0),                                                 // 55: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.AllOptions
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule)(0),                                  // 56: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option.FilterRule
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType)(0),                                 // 57: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.ExhType
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule)(0),                              // 58: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.FilterRule
	(Ifm_Interfaces_Interface_Trunk_Type)(0),                                                                                              // 59: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Type
	(Ifm_Interfaces_Interface_Trunk_HashType)(0),                                                                                          // 60: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.HashType
	(Ifm_Interfaces_Interface_Trunk_WorkMode)(0),                                                                                          // 61: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.WorkMode
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Status)(0),                                                                             // 62: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Status
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Role)(0),                                                                               // 63: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Role
	(Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode)(0),                                                                // 64: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.LacpNegotiationMode
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role)(0),                                                           // 65: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes.Role
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status)(0),                                                 // 66: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.Status
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType)(0),                                               // 67: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.PortType
	(Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_TrunkHashType)(0),                                                                         // 68: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk.TrunkHashType
	(Ifm_Interfaces_Interface_Trunk_FimIfmtrunk_DualReceiveEnable)(0),                                                                     // 69: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk.DualReceiveEnable
	(Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType)(0),                                                                           // 70: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.ReceiveTimeoutType
	(Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd)(0),                                                                                // 71: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SelectPortStd
	(Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource)(0),                                                                                 // 72: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SysmacSource
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap)(0),                                                                         // 73: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.VlanSwap
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType)(0),                                                             // 74: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.LinkType
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_PointToPoint)(0),                                           // 75: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.PointToPoint
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_BpduFilter)(0),                                             // 76: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.BpduFilter
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute_EdgePort)(0),                                               // 77: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.EdgePort
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_ProtocolType)(0),                          // 78: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction.ProtocolType
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction_Action)(0),                                // 79: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction.Action
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_PointToPoint)(0),                                                       // 80: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.PointToPoint
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_BpduFilter)(0),                                                         // 81: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.BpduFilter
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute_EdgePort)(0),                                                           // 82: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.EdgePort
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain_OuterVlanEnable)(0),                                                          // 83: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.FimMain.OuterVlanEnable
	(Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode)(0),                                                       // 84: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup.Mode
	(Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel_ModeChannelEnable)(0),                                                   // 85: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.ModeChannel.ModeChannelEnable
	(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch)(0),                                                                     // 86: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.LocalSwitch
	(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType)(0),                                                           // 87: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction.ActionType
	(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub_EgressStrictFilter)(0),                                                     // 88: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FimL2Sub.EgressStrictFilter
	(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type)(0),                                      // 89: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Type
	(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction)(0),                                 // 90: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Direction
	(Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict)(0),                                                                                 // 91: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry.ArpLearnStrict
	(Ifm_Interfaces_Interface_ArpEntry_GratuitousSend)(0),                                                                                 // 92: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry.GratuitousSend
	(Ifm_Interfaces_Interface_ArpStatusDetect_Mode)(0),                                                                                    // 93: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpStatusDetect.Mode
	(Ifm_Interfaces_Interface_Qos_Trusts_Trust_Type)(0),                                                                                   // 94: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust.Type
	(Ifm_Interfaces_Interface_Qos_Trusts_Trust_Direction)(0),                                                                              // 95: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust.Direction
	(Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Direction)(0),                                                    // 96: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.Direction
	(Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Layer)(0),                                                        // 97: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.Layer
	(Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply_Identifier)(0),                                                   // 98: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.Identifier
	(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Direction)(0),                                                                // 99: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.Direction
	(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_Type)(0),                                                                     // 100: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.Type
	(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_IdentifyType)(0),                                                             // 101: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.IdentifyType
	(Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply_LinkageBandwidth)(0),                                                         // 102: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.LinkageBandwidth
	(Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_Direction)(0),                                                            // 103: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.Direction
	(Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_AdjustOnCard)(0),                                                         // 104: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.AdjustOnCard
	(Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat_ServiceClass)(0),                // 105: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats.UserQueueApplysStat.ServiceClass
	(Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue_ServiceClass)(0),                                                                   // 106: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues.PortQueue.ServiceClass
	(Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState_ServiceClass)(0),                                                         // 107: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates.PortQueueState.ServiceClass
	(Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm_ServiceClass)(0),                                                         // 108: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms.PortQueueAlarm.ServiceClass
	(Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState_ServiceClass)(0),                                               // 109: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates.PortQueueAlarmState.ServiceClass
	(Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_ServiceClass)(0),                                           // 110: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm.ServiceClass
	(Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm_Type)(0),                                                   // 111: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm.Type
	(Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat_Interval)(0),                                                                 // 112: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats.SetQueueStat.Interval
	(Ifm_Interfaces_Interface_Qos_LinkAdjustment_ShapingMode)(0),                                                                          // 113: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LinkAdjustment.ShapingMode
	(Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_ServiceClass)(0),                                                                     // 114: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue.ServiceClass
	(Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue_Priority)(0),                                                                         // 115: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue.Priority
	(Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass_ServiceClass)(0),                                               // 116: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss.DefaultServiceClass.ServiceClass
	(Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue_Direction)(0),                                              // 117: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues.DefaultUserGroupQueue.Direction
	(Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue_Direction)(0),                                                  // 118: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues.DefaultSubPortQueue.Direction
	(Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping_WeightMode)(0),                                                                 // 119: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings.PortShaping.WeightMode
	(Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable_MapType)(0),                                                // 120: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables.PerHopBehaviorDisable.MapType
	(Ifm_Interfaces_Interface_Qos_PerHopBehavior_Enable)(0),                                                                               // 121: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehavior.Enable
	(Ifm_Interfaces_Interface_Qos_Cars_Car_Direction)(0),                                                                                  // 122: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.Direction
	(Ifm_Interfaces_Interface_Qos_Cars_Car_GreenAction)(0),                                                                                // 123: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.GreenAction
	(Ifm_Interfaces_Interface_Qos_Cars_Car_GreenServiceClass)(0),                                                                          // 124: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.GreenServiceClass
	(Ifm_Interfaces_Interface_Qos_Cars_Car_GreenColor)(0),                                                                                 // 125: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.GreenColor
	(Ifm_Interfaces_Interface_Qos_Cars_Car_YellowAction)(0),                                                                               // 126: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.YellowAction
	(Ifm_Interfaces_Interface_Qos_Cars_Car_YellowServiceClass)(0),                                                                         // 127: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.YellowServiceClass
	(Ifm_Interfaces_Interface_Qos_Cars_Car_YellowColor)(0),                                                                                // 128: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.YellowColor
	(Ifm_Interfaces_Interface_Qos_Cars_Car_RedAction)(0),                                                                                  // 129: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.RedAction
	(Ifm_Interfaces_Interface_Qos_Cars_Car_RedServiceClass)(0),                                                                            // 130: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.RedServiceClass
	(Ifm_Interfaces_Interface_Qos_Cars_Car_RedColor)(0),                                                                                   // 131: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.RedColor
	(Ifm_Interfaces_Interface_Qos_Cars_Car_ColorAware)(0),                                                                                 // 132: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.ColorAware
	(Ifm_Interfaces_Interface_Qos_Cars_Car_Identifier)(0),                                                                                 // 133: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.Identifier
	(Ifm_Interfaces_Interface_Qos_ConvergentPrecedence_PriorityType)(0),                                                                   // 134: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ConvergentPrecedence.PriorityType
	(Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence_Enable)(0),                                                                       // 135: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustUntagIpPrecedence.Enable
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Be)(0),                                                                                     // 136: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Be
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Af1)(0),                                                                                    // 137: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af1
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Af2)(0),                                                                                    // 138: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af2
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Af3)(0),                                                                                    // 139: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af3
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Af4)(0),                                                                                    // 140: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af4
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Ef)(0),                                                                                     // 141: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Ef
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Cs6)(0),                                                                                    // 142: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Cs6
	(Ifm_Interfaces_Interface_Qos_ShareShaping_Cs7)(0),                                                                                    // 143: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Cs7
	(Ifm_Interfaces_Interface_Qos_ShareShaping_QueueScheduleMode)(0),                                                                      // 144: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.QueueScheduleMode
	(Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply_Direction)(0),                                                      // 145: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys.SubPortQueueApply.Direction
	(Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_Direction)(0),                                  // 146: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply.Direction
	(Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply_IdentifierType)(0),                             // 147: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply.IdentifierType
	(Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_UserAccessType)(0),                                     // 148: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler.UserAccessType
	(Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler_Direction)(0),                                          // 149: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler.Direction
	(Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode_Direction)(0),                                    // 150: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes.ScheduleTreeDistributeMode.Direction
	(Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_Direction)(0),                                                                // 151: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool.Direction
	(Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool_PoolId)(0),                                                                   // 152: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool.PoolId
	(Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply_Direction)(0),                                                  // 153: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys.UserGroupQueueApply.Direction
	(Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_MemberLinkSchedulerType)(0),                                    // 154: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler.MemberLinkSchedulerType
	(Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler_Direction)(0),                                                  // 155: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler.Direction
	(Ifm_Interfaces_Interface_Qos_LdpTraffic_TrafficType)(0),                                                                              // 156: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LdpTraffic.TrafficType
	(Ifm_Interfaces_Interface_Qos_BufferPolicyMode_BufferMode)(0),                                                                         // 157: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BufferPolicyMode.BufferMode
	(Ifm_Interfaces_Interface_Qos_HardPipeApply_Mode)(0),                                                                                  // 158: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.HardPipeApply.Mode
	(Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_Direction)(0),                                                // 159: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply.Direction
	(Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply_EachVlan)(0),                                                 // 160: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply.EachVlan
	(Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass_ServiceClass)(0),                      // 161: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss.SpecificServiceClass.ServiceClass
	(Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote_ServiceClass)(0),                                                              // 162: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClassRemote.ServiceClass
	(Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type)(0),                                                                       // 163: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.Type
	(Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Direction)(0),                                                                  // 164: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.Direction
	(Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote_Type8021P)(0),                                                                  // 165: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.Type8021P
	(Ifm_Interfaces_Interface_Qos_DeficitUnit_Unit)(0),                                                                                    // 166: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DeficitUnit.Unit
	(Ifm_Interfaces_Interface_Qos_DefaultUserQueue_Direction)(0),                                                                          // 167: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserQueue.Direction
	(Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer_Direction)(0),                                                                    // 168: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers.VniCfgPeer.Direction
	(Ifm_Interfaces_Interface_Qos_QosVllPipe_PipeMode)(0),                                                                                 // 169: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.PipeMode
	(Ifm_Interfaces_Interface_Qos_QosVllPipe_IngressPipeMode)(0),                                                                          // 170: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.IngressPipeMode
	(Ifm_Interfaces_Interface_Qos_QosVllPipe_EgressPipeMode)(0),                                                                           // 171: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.EgressPipeMode
	(Ifm_Interfaces_Interface_Qos_QosVllPipe_ServiceClass)(0),                                                                             // 172: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.ServiceClass
	(Ifm_Interfaces_Interface_Qos_QosVllPipe_Color)(0),                                                                                    // 173: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.Color
	(Ifm_Interfaces_Interface_Qos_QosVllPipe_TrustType)(0),                                                                                // 174: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.TrustType
	(Ifm_Interfaces_Interface_Qos_LocalIdEnable_Mode)(0),                                                                                  // 175: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LocalIdEnable.Mode
	(Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Direction)(0),                                                                       // 176: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy.Direction
	(Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy_Mode)(0),                                                                            // 177: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy.Mode
	(Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence_Mode)(0),                                                                              // 178: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.IpPrecedence.Mode
	(Ifm_Interfaces_Interface_ArpSending_Type)(0),                                                                                         // 179: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpSending.Type
	(Ifm_Interfaces_Interface_NdSending_Type)(0),                                                                                          // 180: huaweiV8R12_ifm.Ifm.Interfaces.Interface.NdSending.Type
	(Ifm_Interfaces_Interface_Bras_LoadBalanceMode_Mode)(0),                                                                               // 181: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.LoadBalanceMode.Mode
	(Ifm_Interfaces_Interface_PppoeVt_AuthenModePriority)(0),                                                                              // 182: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.AuthenModePriority
	(Ifm_Interfaces_Interface_PppoeVt_PadnSend)(0),                                                                                        // 183: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.PadnSend
	(Ifm_Interfaces_Interface_PppoeVt_PadmSend)(0),                                                                                        // 184: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.PadmSend
	(Ifm_Interfaces_Interface_PtpPortSrcs_PortState)(0),                                                                                   // 185: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PortState
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortTypeSet)(0),                                                                  // 186: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.PortTypeSet
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortType)(0),                                                                     // 187: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.PortType
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_DelayMechanism)(0),                                                               // 188: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.DelayMechanism
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_PortCfgState)(0),                                                                 // 189: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.PortCfgState
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance_ClkStep)(0),                                                                      // 190: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.ClkStep
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PktPackType)(0),                                                                      // 191: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.PktPackType
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection_CorrectionFlag)(0),                                                       // 192: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpAsymmetryCorrection.CorrectionFlag
	(Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange_ChangeValueFlag)(0),                                                    // 193: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpRingFiberLengthChange.ChangeValueFlag
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri1)(0),                                                                    // 194: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri1
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri2)(0),                                                                    // 195: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri2
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri3)(0),                                                                    // 196: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri3
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri4)(0),                                                                    // 197: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri4
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModelPri5)(0),                                                                    // 198: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri5
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsWorkMode)(0),                                                           // 199: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.GpsWorkMode
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GpsFixStatus)(0),                                                          // 200: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.GpsFixStatus
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_GnssModel)(0),                                                             // 201: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.GnssModel
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapManualmodeEnStat)(0),                                                  // 202: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.LeapManualmodeEnStat
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule_LeapAdjustdirStat)(0),                                                     // 203: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.LeapAdjustdirStat
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpDelayMechanism)(0),                                           // 204: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.GpsPtpDelayMechanism
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsPtpClkStep)(0),                                                  // 205: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.GpsPtpClkStep
	(Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters_GpsClockSsm)(0),                                                    // 206: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.GpsClockSsm
	(Ifm_Interfaces_Interface_ClockPortSources_Source_State)(0),                                                                           // 207: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.State
	(Ifm_Interfaces_Interface_ClockPortSources_Source_PhyState)(0),                                                                        // 208: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.PhyState
	(Ifm_Interfaces_Interface_ClockPortSources_Source_E1Sabit)(0),                                                                         // 209: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.E1Sabit
	(Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmConfigured)(0),                                                          // 210: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.SsmConfigured
	(Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmLearn)(0),                                                               // 211: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.SsmLearn
	(Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass_SsmOutput)(0),                                                              // 212: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.SsmOutput
	(Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar_Type)(0),                                                                     // 213: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars.NdVlanCar.Type
	(Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit_Protocol)(0),                                                 // 214: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits.RateLimit.Protocol
	(Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy)(0),                                                                    // 215: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ReplyPacketPolicy
	(Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode)(0),                                                            // 216: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82.SubscriberIdMode
	(Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat)(0),                             // 217: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific.SubOptionFormat
	(Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable)(0),                                                                   // 218: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting.ServerEnable
	(Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType)(0),                                                     // 219: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format.SubOptionType
	(Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState)(0),                                                                      // 220: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus.FsmState
	(Ifm_Interfaces_Interface_Efm_Session_State)(0),                                                                                       // 221: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.State
	(Ifm_Interfaces_Interface_Efm_Session_Mode)(0),                                                                                        // 222: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.Mode
	(Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest)(0),                                                                       // 223: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.IgnoreLoopbackRequest
	(Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown)(0),                                                                               // 224: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.TriggerIfDown
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification)(0),                                                                     // 225: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.Notification
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit)(0),                                                                       // 226: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.PeriodUnit
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification)(0),                                                               // 227: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond.Notification
	(Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification)(0),                                                                      // 228: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode.Notification
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification)(0),                                                               // 229: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod.Notification
	(Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_ProtocolType)(0),                                                        // 230: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.ProtocolType
	(Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Action)(0),                                                              // 231: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.Action
	(Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction_Mode)(0),                                                                // 232: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.Mode
	(Ifm_Interfaces_Interface_Fim_StatisticEnable)(0),                                                                                     // 233: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.StatisticEnable
	(Ifm_Interfaces_Interface_Fim_StatisticMode)(0),                                                                                       // 234: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.StatisticMode
	(Ifm_Interfaces_Interface_Fim_MacStatisticEnable)(0),                                                                                  // 235: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.MacStatisticEnable
	(Ifm_Interfaces_Interface_FimIfmMru_MruStatisticEnable)(0),                                                                            // 236: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmMru.MruStatisticEnable
	(Ifm_Interfaces_Interface_FimIfmVeint_VeForwardMode)(0),                                                                               // 237: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmVeint.VeForwardMode
	(Ifm_Interfaces_Interface_VeGroup_Type)(0),                                                                                            // 238: huaweiV8R12_ifm.Ifm.Interfaces.Interface.VeGroup.Type
	(Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable_Direction)(0),                                                        // 239: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables.FlowEnable.Direction
	(Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable_FlowType)(0),                                                               // 240: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables.Disable.FlowType
	(Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_ProtocolType)(0),                                                             // 241: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction.ProtocolType
	(Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction_Action)(0),                                                                   // 242: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction.Action
	(Ifm_Interfaces_Interface_Lldp_Session_AdminStatus)(0),                                                                                // 243: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.AdminStatus
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType)(0),                                                        // 244: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ChassisIdSubType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType)(0),                                                           // 245: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.PortIdSubType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported)(0),                                                // 246: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationSupported
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled)(0),                                                  // 247: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationEnabled
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType)(0),                                                             // 248: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.OperMauType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported)(0),                                                // 249: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationSupported
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled)(0),                                                  // 250: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationEnabled
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type)(0),                               // 251: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.Type
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType)(0),                          // 252: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.IfSubType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported)(0),                                    // 253: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Supported
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled)(0),                                      // 254: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Enabled
	(Ifm_Interfaces_Interface_Loopdetect_LoopDetect_BlockTimeType)(0),                                                                     // 255: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.LoopDetect.BlockTimeType
	(Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak_CakType)(0),                                                                           // 256: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks.CknCak.CakType
	(Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode_Mode)(0),                                                                    // 257: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes.EncryptMode.Mode
	(Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite_Suite)(0),                                                 // 258: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites.CipherAlgorithmSuite.Suite
	(Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear_ClearType)(0),                                                               // 259: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears.VlanInClear.ClearType
	(Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror_Direction)(0),                                                                 // 260: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors.PortMirror.Direction
	(Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment_Direction)(0),                                                             // 261: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments.PortFragment.Direction
	(Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated_Direction)(0),                                                                 // 262: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds.Integrated.Direction
	(Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror_Direction)(0),                                                           // 263: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors.BasPortMirror.Direction
	(Ifm_Interfaces_Interface_Mirror_PortObserve_WithoutFilter)(0),                                                                        // 264: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.WithoutFilter
	(Ifm_Interfaces_Interface_Mirror_PortObserve_PopLabel)(0),                                                                             // 265: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.PopLabel
	(Ifm_Interfaces_Interface_Mirror_PortObserve_WithLinklayerHeader)(0),                                                                  // 266: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.WithLinklayerHeader
	(Ifm_Interfaces_Interface_Deephashcfg_FragmentField)(0),                                                                               // 267: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg.FragmentField
	(Ifm_Interfaces_Interface_Deephashcfg_Deepmplshash)(0),                                                                                // 268: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg.Deepmplshash
	(Ifm_Interfaces_Interface_IfP2MpLoadBalance_LoadbanlanceEnable)(0),                                                                    // 269: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.LoadbanlanceEnable
	(Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceEnable)(0),                                                                // 270: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.RootLoadbanlanceEnable
	(Ifm_Interfaces_Interface_IfP2MpLoadBalance_RootLoadbanlanceSpmsidis)(0),                                                              // 271: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.RootLoadbanlanceSpmsidis
	(Ifm_Interfaces_Interface_BgpLocalifnetTraffic_LocalifnetEnable)(0),                                                                   // 272: huaweiV8R12_ifm.Ifm.Interfaces.Interface.BgpLocalifnetTraffic.LocalifnetEnable
	(Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_FlowType)(0),                                                         // 273: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable.FlowType
	(Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable_Direction)(0),                                                        // 274: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable.Direction
	(Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_FlowType)(0),                                                             // 275: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate.FlowType
	(Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate_Direction)(0),                                                            // 276: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate.Direction
	(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode)(0),                                                               // 277: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Mode
	(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction)(0),                                                          // 278: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Direction
	(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action)(0),                                                                   // 279: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.Action
	(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName)(0),                                                                 // 280: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.IcmpName
	(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation)(0),                                                          // 281: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.SwitchOperation
	(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType)(0),                                                             // 282: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.OptionType
	(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch)(0),                                                                 // 283: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.Switch
	(Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType)(0),                                                                             // 284: huaweiV8R12_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.ErrorDownType
	(Ifm_StaticDimensionRanges_StaticDimensionRange_Type)(0),                                                                              // 285: huaweiV8R12_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange.Type
	(Ifm_HdlcDamp_DampLevel)(0),                                                                                                           // 286: huaweiV8R12_ifm.Ifm.HdlcDamp.DampLevel
	(*Ifm)(nil),                                                                                                                           // 287: huaweiV8R12_ifm.Ifm
	(*Ifm_Global)(nil),                                                                                                                    // 288: huaweiV8R12_ifm.Ifm.Global
	(*Ifm_Interfaces)(nil),                                                                                                                // 289: huaweiV8R12_ifm.Ifm.Interfaces
	(*Ifm_Damp)(nil),                                                                                                                      // 290: huaweiV8R12_ifm.Ifm.Damp
	(*Ifm_AutoRecoveryTimes)(nil),                                                                                                         // 291: huaweiV8R12_ifm.Ifm.AutoRecoveryTimes
	(*Ifm_StaticDimensionRanges)(nil),                                                                                                     // 292: huaweiV8R12_ifm.Ifm.StaticDimensionRanges
	(*Ifm_Ipv4InterfaceCount)(nil),                                                                                                        // 293: huaweiV8R12_ifm.Ifm.Ipv4InterfaceCount
	(*Ifm_RemoteInterfaces)(nil),                                                                                                          // 294: huaweiV8R12_ifm.Ifm.RemoteInterfaces
	(*Ifm_HdlcDamp)(nil),                                                                                                                  // 295: huaweiV8R12_ifm.Ifm.HdlcDamp
	(*Ifm_Global_Ipv4ConflictEnable)(nil),                                                                                                 // 296: huaweiV8R12_ifm.Ifm.Global.Ipv4ConflictEnable
	(*Ifm_Global_Ipv6ConflictEnable)(nil),                                                                                                 // 297: huaweiV8R12_ifm.Ifm.Global.Ipv6ConflictEnable
	(*Ifm_Global_FimIfmGlobal)(nil),                                                                                                       // 298: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal
	(*Ifm_Global_FimTrunkLocalfwd)(nil),                                                                                                   // 299: huaweiV8R12_ifm.Ifm.Global.FimTrunkLocalfwd
	(*Ifm_Global_VeGroups)(nil),                                                                                                           // 300: huaweiV8R12_ifm.Ifm.Global.VeGroups
	(*Ifm_Global_VeGroups_VeGroup)(nil),                                                                                                   // 301: huaweiV8R12_ifm.Ifm.Global.VeGroups.VeGroup
	(*Ifm_Interfaces_Interface)(nil),                                                                                                      // 302: huaweiV8R12_ifm.Ifm.Interfaces.Interface
	(*Ifm_Interfaces_Interface_Dynamic)(nil),                                                                                              // 303: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic
	(*Ifm_Interfaces_Interface_MibStatistics)(nil),                                                                                        // 304: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MibStatistics
	(*Ifm_Interfaces_Interface_CommonStatistics)(nil),                                                                                     // 305: huaweiV8R12_ifm.Ifm.Interfaces.Interface.CommonStatistics
	(*Ifm_Interfaces_Interface_ControlFlap)(nil),                                                                                          // 306: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ControlFlap
	(*Ifm_Interfaces_Interface_TrapThreshold)(nil),                                                                                        // 307: huaweiV8R12_ifm.Ifm.Interfaces.Interface.TrapThreshold
	(*Ifm_Interfaces_Interface_DampState)(nil),                                                                                            // 308: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DampState
	(*Ifm_Interfaces_Interface_ErrorDown)(nil),                                                                                            // 309: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ErrorDown
	(*Ifm_Interfaces_Interface_TunnelProtocol)(nil),                                                                                       // 310: huaweiV8R12_ifm.Ifm.Interfaces.Interface.TunnelProtocol
	(*Ifm_Interfaces_Interface_BdifAttribute)(nil),                                                                                        // 311: huaweiV8R12_ifm.Ifm.Interfaces.Interface.BdifAttribute
	(*Ifm_Interfaces_Interface_Ipv4)(nil),                                                                                                 // 312: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4
	(*Ifm_Interfaces_Interface_Ipv6)(nil),                                                                                                 // 313: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6
	(*Ifm_Interfaces_Interface_Trunk)(nil),                                                                                                // 314: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk
	(*Ifm_Interfaces_Interface_VlanifAttribute)(nil),                                                                                      // 315: huaweiV8R12_ifm.Ifm.Interfaces.Interface.VlanifAttribute
	(*Ifm_Interfaces_Interface_Ethernet)(nil),                                                                                             // 316: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet
	(*Ifm_Interfaces_Interface_ArpEntry)(nil),                                                                                             // 317: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry
	(*Ifm_Interfaces_Interface_ArpStatusDetect)(nil),                                                                                      // 318: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpStatusDetect
	(*Ifm_Interfaces_Interface_ArpPortSecurity)(nil),                                                                                      // 319: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpPortSecurity
	(*Ifm_Interfaces_Interface_Bfd)(nil),                                                                                                  // 320: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bfd
	(*Ifm_Interfaces_Interface_Qos)(nil),                                                                                                  // 321: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos
	(*Ifm_Interfaces_Interface_BfdExt)(nil),                                                                                               // 322: huaweiV8R12_ifm.Ifm.Interfaces.Interface.BfdExt
	(*Ifm_Interfaces_Interface_ArpSending)(nil),                                                                                           // 323: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpSending
	(*Ifm_Interfaces_Interface_NdSending)(nil),                                                                                            // 324: huaweiV8R12_ifm.Ifm.Interfaces.Interface.NdSending
	(*Ifm_Interfaces_Interface_Nve)(nil),                                                                                                  // 325: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve
	(*Ifm_Interfaces_Interface_Nvo3Gateway)(nil),                                                                                          // 326: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3Gateway
	(*Ifm_Interfaces_Interface_Bas)(nil),                                                                                                  // 327: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas
	(*Ifm_Interfaces_Interface_Bras)(nil),                                                                                                 // 328: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras
	(*Ifm_Interfaces_Interface_PppoeBindVt)(nil),                                                                                          // 329: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeBindVt
	(*Ifm_Interfaces_Interface_PppoeVt)(nil),                                                                                              // 330: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt
	(*Ifm_Interfaces_Interface_TcpMssValue)(nil),                                                                                          // 331: huaweiV8R12_ifm.Ifm.Interfaces.Interface.TcpMssValue
	(*Ifm_Interfaces_Interface_Ipv4Urpf)(nil),                                                                                             // 332: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4Urpf
	(*Ifm_Interfaces_Interface_Ipv6Urpf)(nil),                                                                                             // 333: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6Urpf
	(*Ifm_Interfaces_Interface_RoamDomain)(nil),                                                                                           // 334: huaweiV8R12_ifm.Ifm.Interfaces.Interface.RoamDomain
	(*Ifm_Interfaces_Interface_PtpPortSrcs)(nil),                                                                                          // 335: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs
	(*Ifm_Interfaces_Interface_VinterLinks)(nil),                                                                                          // 336: huaweiV8R12_ifm.Ifm.Interfaces.Interface.VinterLinks
	(*Ifm_Interfaces_Interface_ClocksyncFlexe)(nil),                                                                                       // 337: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe
	(*Ifm_Interfaces_Interface_GpsPortSrcs)(nil),                                                                                          // 338: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs
	(*Ifm_Interfaces_Interface_ClockPortSources)(nil),                                                                                     // 339: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources
	(*Ifm_Interfaces_Interface_PtpaPorts)(nil),                                                                                            // 340: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpaPorts
	(*Ifm_Interfaces_Interface_Cpudefend)(nil),                                                                                            // 341: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend
	(*Ifm_Interfaces_Interface_Dcn)(nil),                                                                                                  // 342: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute)(nil),                                                                                   // 343: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute
	(*Ifm_Interfaces_Interface_DhcpIf)(nil),                                                                                               // 344: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf
	(*Ifm_Interfaces_Interface_DhcpClientIf)(nil),                                                                                         // 345: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf)(nil),                                                                                       // 346: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute)(nil),                                                                                 // 347: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute
	(*Ifm_Interfaces_Interface_Efm)(nil),                                                                                                  // 348: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm
	(*Ifm_Interfaces_Interface_Evpn)(nil),                                                                                                 // 349: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn
	(*Ifm_Interfaces_Interface_Fim)(nil),                                                                                                  // 350: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim
	(*Ifm_Interfaces_Interface_FimIfmMru)(nil),                                                                                            // 351: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmMru
	(*Ifm_Interfaces_Interface_FimTcpMss)(nil),                                                                                            // 352: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimTcpMss
	(*Ifm_Interfaces_Interface_FimIfmBdifint)(nil),                                                                                        // 353: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmBdifint
	(*Ifm_Interfaces_Interface_FimIfmVeint)(nil),                                                                                          // 354: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmVeint
	(*Ifm_Interfaces_Interface_VeGroup)(nil),                                                                                              // 355: huaweiV8R12_ifm.Ifm.Interfaces.Interface.VeGroup
	(*Ifm_Interfaces_Interface_MruDiscardStatistic)(nil),                                                                                  // 356: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MruDiscardStatistic
	(*Ifm_Interfaces_Interface_MacmtuDiscardStat)(nil),                                                                                    // 357: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MacmtuDiscardStat
	(*Ifm_Interfaces_Interface_FlowRecognition)(nil),                                                                                      // 358: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition
	(*Ifm_Interfaces_Interface_FlowspecForward)(nil),                                                                                      // 359: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward
	(*Ifm_Interfaces_Interface_If8021PPriority)(nil),                                                                                      // 360: huaweiV8R12_ifm.Ifm.Interfaces.Interface.If8021PPriority
	(*Ifm_Interfaces_Interface_ManagementPlaneDefendIf)(nil),                                                                              // 361: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ManagementPlaneDefendIf
	(*Ifm_Interfaces_Interface_IgmpSnooping)(nil),                                                                                         // 362: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping
	(*Ifm_Interfaces_Interface_HwmcIfEnable)(nil),                                                                                         // 363: huaweiV8R12_ifm.Ifm.Interfaces.Interface.HwmcIfEnable
	(*Ifm_Interfaces_Interface_ProtocolActions)(nil),                                                                                      // 364: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions
	(*Ifm_Interfaces_Interface_VllPwLoopCheck)(nil),                                                                                       // 365: huaweiV8R12_ifm.Ifm.Interfaces.Interface.VllPwLoopCheck
	(*Ifm_Interfaces_Interface_EncapsulationVlan)(nil),                                                                                    // 366: huaweiV8R12_ifm.Ifm.Interfaces.Interface.EncapsulationVlan
	(*Ifm_Interfaces_Interface_Lldp)(nil),                                                                                                 // 367: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp
	(*Ifm_Interfaces_Interface_Loadbalance)(nil),                                                                                          // 368: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance
	(*Ifm_Interfaces_Interface_Loopdetect)(nil),                                                                                           // 369: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect
	(*Ifm_Interfaces_Interface_Macsec)(nil),                                                                                               // 370: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec
	(*Ifm_Interfaces_Interface_Mirror)(nil),                                                                                               // 371: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror
	(*Ifm_Interfaces_Interface_TrackMonitorGroup)(nil),                                                                                    // 372: huaweiV8R12_ifm.Ifm.Interfaces.Interface.TrackMonitorGroup
	(*Ifm_Interfaces_Interface_Deephashcfg)(nil),                                                                                          // 373: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg
	(*Ifm_Interfaces_Interface_IfPoisonReverse)(nil),                                                                                      // 374: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfPoisonReverse
	(*Ifm_Interfaces_Interface_IfP2MpLoadBalance)(nil),                                                                                    // 375: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance
	(*Ifm_Interfaces_Interface_BgpLocalifnetTraffic)(nil),                                                                                 // 376: huaweiV8R12_ifm.Ifm.Interfaces.Interface.BgpLocalifnetTraffic
	(*Ifm_Interfaces_Interface_MulticastForward)(nil),                                                                                     // 377: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MulticastForward
	(*Ifm_Interfaces_Interface_Netstream)(nil),                                                                                            // 378: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics)(nil),                                                                                   // 379: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics
	(*Ifm_Interfaces_Interface_IfIcmpSecuritys)(nil),                                                                                      // 380: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys
	(*Ifm_Interfaces_Interface_IfIpOptSecuritys)(nil),                                                                                     // 381: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys
	(*Ifm_Interfaces_Interface_IpVerifySrcAddr)(nil),                                                                                      // 382: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IpVerifySrcAddr
	(*Ifm_Interfaces_Interface_IpFwdBroadcast)(nil),                                                                                       // 383: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IpFwdBroadcast
	(*Ifm_Interfaces_Interface_Rbs)(nil),                                                                                                  // 384: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Rbs
	(*Ifm_Interfaces_Interface_Vrrp)(nil),                                                                                                 // 385: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp
	(*Ifm_Interfaces_Interface_UnicastForward)(nil),                                                                                       // 386: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward
	(*Ifm_Interfaces_Interface_UnknowUnicastThreshold)(nil),                                                                               // 387: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnknowUnicastThreshold
	(*Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts)(nil),                                                                          // 388: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MibStatistics.EthPortErrSts
	(*Ifm_Interfaces_Interface_Ipv4_State)(nil),                                                                                           // 389: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State
	(*Ifm_Interfaces_Interface_Ipv4_StaticArps)(nil),                                                                                      // 390: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp)(nil),                                                                                            // 391: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp
	(*Ifm_Interfaces_Interface_Ipv4_Rgm)(nil),                                                                                             // 392: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Rgm
	(*Ifm_Interfaces_Interface_Ipv4_State_Addresses)(nil),                                                                                 // 393: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses
	(*Ifm_Interfaces_Interface_Ipv4_State_Gateways)(nil),                                                                                  // 394: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways
	(*Ifm_Interfaces_Interface_Ipv4_State_Statistics)(nil),                                                                                // 395: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Statistics
	(*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address)(nil),                                                                         // 396: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address
	(*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway)(nil),                                                                          // 397: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways.Gateway
	(*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp)(nil),                                                                            // 398: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps.StaticArp
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups)(nil),                                                                                     // 399: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group)(nil),                                                                               // 400: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt)(nil),                                                                       // 401: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Preempt
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps)(nil),                                                                    // 402: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces)(nil),                                                               // 403: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds)(nil),                                                                     // 404: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps)(nil),                                                                   // 405: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp)(nil),                                                          // 406: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps.VirtualIp
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface)(nil),                                                // 407: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd)(nil),                                                            // 408: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp)(nil),                                                        // 409: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp
	(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs)(nil),                                                                                       // 410: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs
	(*Ifm_Interfaces_Interface_Ipv6_State)(nil),                                                                                           // 411: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State
	(*Ifm_Interfaces_Interface_Ipv6_Cgas)(nil),                                                                                            // 412: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection)(nil),                                                                                    // 413: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection
	(*Ifm_Interfaces_Interface_Ipv6_Pp6Collection)(nil),                                                                                   // 414: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.Pp6Collection
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter)(nil),                                                                           // 415: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter
	(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix)(nil),                                                                              // 416: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs.NdPrefix
	(*Ifm_Interfaces_Interface_Ipv6_State_Addresses)(nil),                                                                                 // 417: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses
	(*Ifm_Interfaces_Interface_Ipv6_State_Statistics)(nil),                                                                                // 418: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Statistics
	(*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address)(nil),                                                                         // 419: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address
	(*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga)(nil),                                                                                        // 420: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas.Cga
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty)(nil),                                                                         // 421: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys)(nil),                                                                             // 422: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack)(nil),                                                                         // 423: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits)(nil),                                                       // 424: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive)(nil),                                                         // 425: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit)(nil),                                      // 426: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits)(nil),                                            // 427: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit)(nil),                                // 428: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch)(nil),                                                            // 429: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch)(nil),                                                             // 430: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch)(nil),                                                         // 431: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs)(nil),                                                        // 432: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options)(nil),                                                    // 433: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option)(nil),                                             // 434: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options)(nil),                                                     // 435: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option)(nil),                                              // 436: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options)(nil),                                                 // 437: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option)(nil),                                          // 438: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch)(nil),                                      // 439: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch
	(*Ifm_Interfaces_Interface_Trunk_Members)(nil),                                                                                        // 440: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members
	(*Ifm_Interfaces_Interface_Trunk_Forwardings)(nil),                                                                                    // 441: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings
	(*Ifm_Interfaces_Interface_Trunk_FimIfmtrunk)(nil),                                                                                    // 442: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk
	(*Ifm_Interfaces_Interface_Trunk_Lacp)(nil),                                                                                           // 443: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp
	(*Ifm_Interfaces_Interface_Trunk_Members_Member)(nil),                                                                                 // 444: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember)(nil),                                                               // 445: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.FimIfmtrunkMember
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp)(nil),                                                                            // 446: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes)(nil),                                                             // 447: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter)(nil),                                                     // 448: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic)(nil),                                                               // 449: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PduStatistic
	(*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding)(nil),                                                                         // 450: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings.Forwarding
	(*Ifm_Interfaces_Interface_Trunk_Lacp_MLag)(nil),                                                                                      // 451: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.MLag
	(*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp)(nil),                                                                                 // 452: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.TrackVrrp
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface)(nil),                                                                               // 453: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface)(nil),                                                                              // 454: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface)(nil),                                                                              // 455: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface
	(*Ifm_Interfaces_Interface_Ethernet_Mac)(nil),                                                                                         // 456: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute)(nil),                                                                   // 457: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute)(nil),                                                                 // 458: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain)(nil),                                                                       // 459: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.FimMain
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings)(nil),                                                     // 460: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans)(nil),                                             // 461: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.StatisticsEnableVlans
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups)(nil),                                                 // 462: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute)(nil),                                                     // 463: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions)(nil),                                                   // 464: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel)(nil),                                                        // 465: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.BpduTunnel
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute)(nil),                                              // 466: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanIsolateAttribute
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking)(nil),                                        // 467: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings.VlanStacking
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup)(nil),                                // 468: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups.PortIsolateGroup
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction)(nil),                                    // 469: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups)(nil),                                                                   // 470: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel)(nil),                                                                  // 471: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.ModeChannel
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup)(nil),                                                         // 472: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction)(nil),                                                                   // 473: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub)(nil),                                                                     // 474: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FimL2Sub
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit)(nil),                                                                    // 475: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions)(nil),                                                                // 476: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression)(nil),                                        // 477: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression
	(*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface)(nil),                                                                       // 478: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpPortSecurity.L2SubInterface
	(*Ifm_Interfaces_Interface_Qos_Trusts)(nil),                                                                                           // 479: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts
	(*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys)(nil),                                                                              // 480: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys
	(*Ifm_Interfaces_Interface_Qos_ProfileApplys)(nil),                                                                                    // 481: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys
	(*Ifm_Interfaces_Interface_Qos_UserQueueApplys)(nil),                                                                                  // 482: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys
	(*Ifm_Interfaces_Interface_Qos_PortQueues)(nil),                                                                                       // 483: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues
	(*Ifm_Interfaces_Interface_Qos_PortQueueStates)(nil),                                                                                  // 484: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates
	(*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys)(nil),                                                                          // 485: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueTemplateApplys
	(*Ifm_Interfaces_Interface_Qos_PortQueueAlarms)(nil),                                                                                  // 486: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms
	(*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates)(nil),                                                                             // 487: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates
	(*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms)(nil),                                                                           // 488: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms
	(*Ifm_Interfaces_Interface_Qos_SetQueueStats)(nil),                                                                                    // 489: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats
	(*Ifm_Interfaces_Interface_Qos_LinkAdjustment)(nil),                                                                                   // 490: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LinkAdjustment
	(*Ifm_Interfaces_Interface_Qos_QosQueues)(nil),                                                                                        // 491: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues
	(*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys)(nil),                                                                              // 492: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QueueTemplateApplys
	(*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms)(nil),                                                                                   // 493: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SoftPipeAlarms
	(*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys)(nil),                                                                          // 494: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.FlowQueueTemplateApplys
	(*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys)(nil),                                                                            // 495: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateApplys
	(*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss)(nil),                                                                             // 496: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss
	(*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues)(nil),                                                                           // 497: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues
	(*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues)(nil),                                                                             // 498: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues
	(*Ifm_Interfaces_Interface_Qos_PortShapings)(nil),                                                                                     // 499: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings
	(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables)(nil),                                                                           // 500: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables
	(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables)(nil),                                                                            // 501: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnables
	(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans)(nil),                                                                        // 502: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnableVlans
	(*Ifm_Interfaces_Interface_Qos_PerHopBehavior)(nil),                                                                                   // 503: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehavior
	(*Ifm_Interfaces_Interface_Qos_Cars)(nil),                                                                                             // 504: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars
	(*Ifm_Interfaces_Interface_Qos_ConvergentPrecedence)(nil),                                                                             // 505: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ConvergentPrecedence
	(*Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan)(nil),                                                                        // 506: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DropEligibleIndicatorVlan
	(*Ifm_Interfaces_Interface_Qos_DropEligibleIndicator)(nil),                                                                            // 507: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DropEligibleIndicator
	(*Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence)(nil),                                                                           // 508: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustUntagIpPrecedence
	(*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences)(nil),                                                                               // 509: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustIpPrecedences
	(*Ifm_Interfaces_Interface_Qos_ShareShaping)(nil),                                                                                     // 510: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping
	(*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys)(nil),                                                                               // 511: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys
	(*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys)(nil),                                                                     // 512: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys
	(*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers)(nil),                                                                         // 513: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers
	(*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes)(nil),                                                                      // 514: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes
	(*Ifm_Interfaces_Interface_Qos_LoopMode)(nil),                                                                                         // 515: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LoopMode
	(*Ifm_Interfaces_Interface_Qos_ResourcePools)(nil),                                                                                    // 516: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools
	(*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys)(nil),                                                                             // 517: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys
	(*Ifm_Interfaces_Interface_Qos_MplsL2Vc)(nil),                                                                                         // 518: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MplsL2Vc
	(*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers)(nil),                                                                             // 519: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers
	(*Ifm_Interfaces_Interface_Qos_QosLr)(nil),                                                                                            // 520: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosLr
	(*Ifm_Interfaces_Interface_Qos_LdpTraffic)(nil),                                                                                       // 521: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LdpTraffic
	(*Ifm_Interfaces_Interface_Qos_BufferPolicyMode)(nil),                                                                                 // 522: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BufferPolicyMode
	(*Ifm_Interfaces_Interface_Qos_HardPipeApply)(nil),                                                                                    // 523: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.HardPipeApply
	(*Ifm_Interfaces_Interface_Qos_ChannelAdjustment)(nil),                                                                                // 524: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ChannelAdjustment
	(*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys)(nil),                                                                            // 525: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys
	(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping)(nil),                                                                           // 526: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping
	(*Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote)(nil),                                                                        // 527: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClassRemote
	(*Ifm_Interfaces_Interface_Qos_TrustRemotes)(nil),                                                                                     // 528: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes
	(*Ifm_Interfaces_Interface_Qos_WfqShaping)(nil),                                                                                       // 529: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.WfqShaping
	(*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights)(nil),                                                                       // 530: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SourceBoardScheduleWeights
	(*Ifm_Interfaces_Interface_Qos_DeficitUnit)(nil),                                                                                      // 531: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DeficitUnit
	(*Ifm_Interfaces_Interface_Qos_DefaultUserQueue)(nil),                                                                                 // 532: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserQueue
	(*Ifm_Interfaces_Interface_Qos_VniCfgPeers)(nil),                                                                                      // 533: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers
	(*Ifm_Interfaces_Interface_Qos_QosVllPipe)(nil),                                                                                       // 534: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe
	(*Ifm_Interfaces_Interface_Qos_LocalIdEnable)(nil),                                                                                    // 535: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LocalIdEnable
	(*Ifm_Interfaces_Interface_Qos_Qppb)(nil),                                                                                             // 536: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb
	(*Ifm_Interfaces_Interface_Qos_Trusts_Trust)(nil),                                                                                     // 537: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust
	(*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply)(nil),                                                           // 538: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply
	(*Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply)(nil),                                                                       // 539: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply
	(*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply)(nil),                                                                   // 540: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply
	(*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats)(nil),                                              // 541: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats
	(*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat)(nil),                          // 542: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats.UserQueueApplysStat
	(*Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue)(nil),                                                                             // 543: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues.PortQueue
	(*Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState)(nil),                                                                   // 544: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates.PortQueueState
	(*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply)(nil),                                                   // 545: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueTemplateApplys.PortQueueTemplateApply
	(*Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm)(nil),                                                                   // 546: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms.PortQueueAlarm
	(*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState)(nil),                                                         // 547: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates.PortQueueAlarmState
	(*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm)(nil),                                                     // 548: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm
	(*Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat)(nil),                                                                       // 549: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats.SetQueueStat
	(*Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue)(nil),                                                                               // 550: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue
	(*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply)(nil),                                                           // 551: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QueueTemplateApplys.QueueTemplateApply
	(*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm)(nil),                                                                     // 552: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SoftPipeAlarms.SoftPipeAlarm
	(*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply)(nil),                                                   // 553: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.FlowQueueTemplateApplys.FlowQueueTemplateApply
	(*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply)(nil),                                                       // 554: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateApplys.ServiceTemplateApply
	(*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass)(nil),                                                         // 555: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss.DefaultServiceClass
	(*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue)(nil),                                                     // 556: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues.DefaultUserGroupQueue
	(*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue)(nil),                                                         // 557: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues.DefaultSubPortQueue
	(*Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping)(nil),                                                                         // 558: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings.PortShaping
	(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable)(nil),                                                     // 559: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables.PerHopBehaviorDisable
	(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable)(nil),                                                       // 560: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnables.PerHopBehaviorEnable
	(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan)(nil),                                               // 561: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnableVlans.PerHopBehaviorEnableVlan
	(*Ifm_Interfaces_Interface_Qos_Cars_Car)(nil),                                                                                         // 562: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car
	(*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence)(nil),                                                             // 563: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustIpPrecedences.TrustIpPrecedence
	(*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply)(nil),                                                             // 564: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys.SubPortQueueApply
	(*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply)(nil),                                         // 565: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply
	(*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler)(nil),                                                 // 566: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler
	(*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode)(nil),                                           // 567: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes.ScheduleTreeDistributeMode
	(*Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool)(nil),                                                                       // 568: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool
	(*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply)(nil),                                                         // 569: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys.UserGroupQueueApply
	(*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler)(nil),                                                         // 570: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler
	(*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply)(nil),                                                       // 571: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply
	(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass)(nil),                                                           // 572: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.AllServiceClass
	(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss)(nil),                                                     // 573: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss
	(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass)(nil),                                // 574: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss.SpecificServiceClass
	(*Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote)(nil),                                                                         // 575: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote
	(*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight)(nil),                                             // 576: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SourceBoardScheduleWeights.SourceBoardScheduleWeight
	(*Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer)(nil),                                                                           // 577: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers.VniCfgPeer
	(*Ifm_Interfaces_Interface_Qos_Qppb_Policys)(nil),                                                                                     // 578: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys
	(*Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence)(nil),                                                                                // 579: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.IpPrecedence
	(*Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy)(nil),                                                                              // 580: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy
	(*Ifm_Interfaces_Interface_Nve_Attribute)(nil),                                                                                        // 581: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve.Attribute
	(*Ifm_Interfaces_Interface_Nve_Pip)(nil),                                                                                              // 582: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve.Pip
	(*Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual)(nil),                                                                // 583: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.EapAuthenticationDomainIndividual
	(*Ifm_Interfaces_Interface_Bas_BasInterface)(nil),                                                                                     // 584: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface
	(*Ifm_Interfaces_Interface_Bas_PppoeBasStatics)(nil),                                                                                  // 585: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.PppoeBasStatics
	(*Ifm_Interfaces_Interface_Bas_PppBasStatistics)(nil),                                                                                 // 586: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.PppBasStatistics
	(*Ifm_Interfaces_Interface_Bas_BasInterface_Information)(nil),                                                                         // 587: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.Information
	(*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers)(nil),                                                                         // 588: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.AccessUsers
	(*Ifm_Interfaces_Interface_Bas_BasInterface_Statistics)(nil),                                                                          // 589: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.Statistics
	(*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser)(nil),                                                              // 590: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.AccessUsers.AccessUser
	(*Ifm_Interfaces_Interface_Bras_LoadBalanceMode)(nil),                                                                                 // 591: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.LoadBalanceMode
	(*Ifm_Interfaces_Interface_Bras_Multicast)(nil),                                                                                       // 592: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.Multicast
	(*Ifm_Interfaces_Interface_Bras_BrasUserManage)(nil),                                                                                  // 593: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.BrasUserManage
	(*Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy)(nil),                                                                  // 594: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.Multicast.BandwidthLimitPolicy
	(*Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit)(nil),                                                                  // 595: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.BrasUserManage.PortAccessLimit
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance)(nil),                                                                           // 596: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack)(nil),                                                                               // 597: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock)(nil),                                                                             // 598: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPeerClock
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl)(nil),                                                                            // 599: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktControl
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection)(nil),                                                                   // 600: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpAsymmetryCorrection
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc)(nil),                                                                    // 601: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpTcocStaticClockSrc
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange)(nil),                                                                 // 602: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpRingFiberLengthChange
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack)(nil),                                                                 // 603: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.PtpPktMacPack
	(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack)(nil),                                                                 // 604: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.PtpPktUdpPack
	(*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts)(nil),                                                                              // 605: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe.PhyPorts
	(*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort)(nil),                                                                      // 606: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe.PhyPorts.PhyPort
	(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc)(nil),                                                                               // 607: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc
	(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates)(nil),                                                              // 608: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSfpWorkStates
	(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule)(nil),                                                                    // 609: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule
	(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters)(nil),                                                             // 610: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters
	(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard)(nil),                                                                      // 611: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsBoard
	(*Ifm_Interfaces_Interface_ClockPortSources_Source)(nil),                                                                              // 612: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source
	(*Ifm_Interfaces_Interface_ClockPortSources_Source_Priority)(nil),                                                                     // 613: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.Priority
	(*Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass)(nil),                                                                     // 614: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass
	(*Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId)(nil),                                                                      // 615: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.ClockId
	(*Ifm_Interfaces_Interface_PtpaPorts_PtpaPort)(nil),                                                                                   // 616: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpaPorts.PtpaPort
	(*Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards)(nil),                                                                              // 617: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpSafeguards
	(*Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs)(nil),                                                                           // 618: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.HostCarQinqHashs
	(*Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf)(nil),                                                                                   // 619: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.Ipv4Urpf
	(*Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf)(nil),                                                                                   // 620: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.Ipv6Urpf
	(*Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar)(nil),                                                                                 // 621: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpVlanCar
	(*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars)(nil),                                                                                 // 622: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars
	(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar)(nil),                                                                            // 623: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar
	(*Ifm_Interfaces_Interface_Cpudefend_ArpCheck)(nil),                                                                                   // 624: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpCheck
	(*Ifm_Interfaces_Interface_Cpudefend_ArpFilter)(nil),                                                                                  // 625: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpFilter
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit)(nil),                                                                                // 626: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit
	(*Ifm_Interfaces_Interface_Cpudefend_MacFilter)(nil),                                                                                  // 627: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter
	(*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar)(nil),                                                                       // 628: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars.NdVlanCar
	(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits)(nil),                                                                 // 629: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits
	(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm)(nil),                                                                      // 630: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.Alarm
	(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit)(nil),                                                       // 631: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits.RateLimit
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp)(nil),                                                                           // 632: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports)(nil),                                                                          // 633: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance)(nil),                                                                        // 634: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Enhance
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General)(nil),                                                                   // 635: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.General
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations)(nil),                                                         // 636: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.Dot1QTerminations
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations)(nil),                                                          // 637: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.QinqTerminations
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination)(nil),                                        // 638: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.Dot1QTerminations.Dot1QTermination
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination)(nil),                                          // 639: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.QinqTerminations.QinqTermination
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General)(nil),                                                                  // 640: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.General
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations)(nil),                                                        // 641: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.Dot1QTerminations
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations)(nil),                                                         // 642: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.QinqTerminations
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination)(nil),                                       // 643: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.Dot1QTerminations.Dot1QTermination
	(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination)(nil),                                         // 644: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.QinqTerminations.QinqTermination
	(*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss)(nil),                                                                      // 645: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter.MacAddresss
	(*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress)(nil),                                                           // 646: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter.MacAddresss.MacAddress
	(*Ifm_Interfaces_Interface_Dcn_Dcnv4)(nil),                                                                                            // 647: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn.Dcnv4
	(*Ifm_Interfaces_Interface_Dcn_TcDcn)(nil),                                                                                            // 648: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn.TcDcn
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82)(nil),                                                                          // 649: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses)(nil),                                                                   // 650: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses)(nil),                                                                  // 651: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress)(nil),                                                                // 652: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses)(nil),                                                        // 653: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics)(nil),                                                              // 654: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress)(nil),                                                     // 655: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses.ServerAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress)(nil),                                                   // 656: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses.GatewayAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress)(nil),                               // 657: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses.RelaySourceOptionAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific)(nil),                                          // 658: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific
	(*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting)(nil),                                                                             // 659: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting
	(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats)(nil),                                                                               // 660: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats
	(*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting)(nil),                                                                         // 661: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82InsertSetting
	(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format)(nil),                                                                // 662: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format
	(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus)(nil),                                                                            // 663: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus
	(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics)(nil),                                                                        // 664: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatistics
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute)(nil),                                                                        // 665: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.BasicAttribute
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds)(nil),                                                                           // 666: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind)(nil),                                                                // 667: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds.StaticBind
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses)(nil),                                                            // 668: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs)(nil),                                                                  // 669: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption)(nil),                                                                   // 670: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.RebuildOption
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting)(nil),                                                              // 671: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.AccessLimitSetting
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp)(nil),                                                                // 672: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.PdRouteTrackVrrp
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress)(nil),                                         // 673: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses.DestinationAddress
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf)(nil),                                                    // 674: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs.DestinationIf
	(*Ifm_Interfaces_Interface_Efm_Session)(nil),                                                                                          // 675: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame)(nil),                                                                               // 676: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond)(nil),                                                                         // 677: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorCode)(nil),                                                                                // 678: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod)(nil),                                                                         // 679: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod
	(*Ifm_Interfaces_Interface_Evpn_ProtocolActions)(nil),                                                                                 // 680: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions
	(*Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction)(nil),                                                                  // 681: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction
	(*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables)(nil),                                                                          // 682: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables
	(*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable)(nil),                                                               // 683: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables.FlowEnable
	(*Ifm_Interfaces_Interface_FlowspecForward_Refluence)(nil),                                                                            // 684: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Refluence
	(*Ifm_Interfaces_Interface_FlowspecForward_TunnelPop)(nil),                                                                            // 685: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.TunnelPop
	(*Ifm_Interfaces_Interface_FlowspecForward_Disables)(nil),                                                                             // 686: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables
	(*Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable)(nil),                                                                     // 687: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables.Disable
	(*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits)(nil),                                                                            // 688: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping.NumberLimits
	(*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit)(nil),                                                                // 689: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping.NumberLimits.NumberLimit
	(*Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction)(nil),                                                                       // 690: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction
	(*Ifm_Interfaces_Interface_Lldp_Session)(nil),                                                                                         // 691: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session
	(*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable)(nil),                                                                               // 692: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.TlvEnable
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors)(nil),                                                                               // 693: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor)(nil),                                                                      // 694: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss)(nil),                                                   // 695: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans)(nil),                                                        // 696: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames)(nil),                                                            // 697: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs)(nil),                                                          // 698: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs)(nil),                                   // 699: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv)(nil),                                                               // 700: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.DdpTlv
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv)(nil),                                                          // 701: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.IdentityTlv
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress)(nil),                                 // 702: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan)(nil),                                           // 703: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName)(nil),                                                   // 704: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames.VlanName
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv)(nil),                                               // 705: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs.UnknownTlv
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv)(nil), // 706: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs.UnknownOrganizationallyDefinedTlv
	(*Ifm_Interfaces_Interface_Loadbalance_Ucmp)(nil),                                                                                     // 707: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance.Ucmp
	(*Ifm_Interfaces_Interface_Loadbalance_Packet)(nil),                                                                                   // 708: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance.Packet
	(*Ifm_Interfaces_Interface_Loopdetect_MacWithdraw)(nil),                                                                               // 709: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.MacWithdraw
	(*Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect)(nil),                                                                            // 710: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.LoopbackDetect
	(*Ifm_Interfaces_Interface_Loopdetect_LoopDetect)(nil),                                                                                // 711: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.LoopDetect
	(*Ifm_Interfaces_Interface_Macsec_CknCaks)(nil),                                                                                       // 712: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks
	(*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets)(nil),                                                                        // 713: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ConfidentialityOffsets
	(*Ifm_Interfaces_Interface_Macsec_ReplayWindows)(nil),                                                                                 // 714: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ReplayWindows
	(*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys)(nil),                                                                            // 715: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.KeyserverPrioritys
	(*Ifm_Interfaces_Interface_Macsec_SakLifeTimes)(nil),                                                                                  // 716: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.SakLifeTimes
	(*Ifm_Interfaces_Interface_Macsec_EncryptModes)(nil),                                                                                  // 717: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes
	(*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites)(nil),                                                                         // 718: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites
	(*Ifm_Interfaces_Interface_Macsec_VlanInClears)(nil),                                                                                  // 719: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears
	(*Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak)(nil),                                                                                // 720: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks.CknCak
	(*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset)(nil),                                                  // 721: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ConfidentialityOffsets.ConfidentialityOffset
	(*Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow)(nil),                                                                    // 722: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ReplayWindows.ReplayWindow
	(*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority)(nil),                                                          // 723: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.KeyserverPrioritys.KeyserverPriority
	(*Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime)(nil),                                                                      // 724: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.SakLifeTimes.SakLifeTime
	(*Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode)(nil),                                                                      // 725: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes.EncryptMode
	(*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite)(nil),                                                    // 726: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites.CipherAlgorithmSuite
	(*Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear)(nil),                                                                      // 727: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears.VlanInClear
	(*Ifm_Interfaces_Interface_Mirror_PortMirrors)(nil),                                                                                   // 728: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors
	(*Ifm_Interfaces_Interface_Mirror_PortMirrorSlice)(nil),                                                                               // 729: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrorSlice
	(*Ifm_Interfaces_Interface_Mirror_WithoutHeader)(nil),                                                                                 // 730: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.WithoutHeader
	(*Ifm_Interfaces_Interface_Mirror_PortMirrorCar)(nil),                                                                                 // 731: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrorCar
	(*Ifm_Interfaces_Interface_Mirror_PortMirrorTo)(nil),                                                                                  // 732: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrorTo
	(*Ifm_Interfaces_Interface_Mirror_PortFragments)(nil),                                                                                 // 733: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments
	(*Ifm_Interfaces_Interface_Mirror_Integrateds)(nil),                                                                                   // 734: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds
	(*Ifm_Interfaces_Interface_Mirror_BasPortMirrors)(nil),                                                                                // 735: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors
	(*Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors)(nil),                                                                              // 736: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.EvcL2PortMirrors
	(*Ifm_Interfaces_Interface_Mirror_PortObserve)(nil),                                                                                   // 737: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve
	(*Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror)(nil),                                                                        // 738: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors.PortMirror
	(*Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment)(nil),                                                                    // 739: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments.PortFragment
	(*Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated)(nil),                                                                        // 740: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds.Integrated
	(*Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror)(nil),                                                                  // 741: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors.BasPortMirror
	(*Ifm_Interfaces_Interface_MulticastForward_Shaping)(nil),                                                                             // 742: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MulticastForward.Shaping
	(*Ifm_Interfaces_Interface_Netstream_SamplerEnables)(nil),                                                                             // 743: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables
	(*Ifm_Interfaces_Interface_Netstream_SamplerRates)(nil),                                                                               // 744: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates
	(*Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable)(nil),                                                               // 745: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable
	(*Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate)(nil),                                                                   // 746: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic)(nil),                                                                 // 747: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections)(nil),                                                     // 748: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection)(nil),                                          // 749: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections.Collection
	(*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity)(nil),                                                                       // 750: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity
	(*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity)(nil),                                                                     // 751: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity
	(*Ifm_Interfaces_Interface_Rbs_BindRbp)(nil),                                                                                          // 752: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Rbs.BindRbp
	(*Ifm_Interfaces_Interface_Vrrp_BackupGroups)(nil),                                                                                    // 753: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups
	(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins)(nil),                                                                                     // 754: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins
	(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin)(nil),                                                                          // 755: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins.TrackAdmin
	(*Ifm_Interfaces_Interface_UnicastForward_PoisonReverse)(nil),                                                                         // 756: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.PoisonReverse
	(*Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect)(nil),                                                                          // 757: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.Ipv6Redirect
	(*Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack)(nil),                                                                      // 758: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.Ipv6NaAntiAttack
	(*Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect)(nil),                                                                      // 759: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.IpPrioritySelect
	(*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp)(nil),                                                                    // 760: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.MacChangeNotifyArp
	(*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable)(nil),                                                              // 761: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.MacChangeNotifyNdDisable
	(*Ifm_AutoRecoveryTimes_AutoRecoveryTime)(nil),                                                                                        // 762: huaweiV8R12_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime
	(*Ifm_StaticDimensionRanges_StaticDimensionRange)(nil),                                                                                // 763: huaweiV8R12_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange
	(*Ifm_RemoteInterfaces_RemoteInterface)(nil),                                                                                          // 764: huaweiV8R12_ifm.Ifm.RemoteInterfaces.RemoteInterface
	(*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState)(nil),                                                                    // 765: huaweiV8R12_ifm.Ifm.RemoteInterfaces.RemoteInterface.RemoteStatisticsState
}
var file_huaweiV8R12_ifm_proto_depIdxs = []int32{
	288, // 0: huaweiV8R12_ifm.Ifm.global:type_name -> huaweiV8R12_ifm.Ifm.Global
	289, // 1: huaweiV8R12_ifm.Ifm.interfaces:type_name -> huaweiV8R12_ifm.Ifm.Interfaces
	290, // 2: huaweiV8R12_ifm.Ifm.damp:type_name -> huaweiV8R12_ifm.Ifm.Damp
	291, // 3: huaweiV8R12_ifm.Ifm.auto_recovery_times:type_name -> huaweiV8R12_ifm.Ifm.AutoRecoveryTimes
	292, // 4: huaweiV8R12_ifm.Ifm.static_dimension_ranges:type_name -> huaweiV8R12_ifm.Ifm.StaticDimensionRanges
	293, // 5: huaweiV8R12_ifm.Ifm.ipv4_interface_count:type_name -> huaweiV8R12_ifm.Ifm.Ipv4InterfaceCount
	294, // 6: huaweiV8R12_ifm.Ifm.remote_interfaces:type_name -> huaweiV8R12_ifm.Ifm.RemoteInterfaces
	295, // 7: huaweiV8R12_ifm.Ifm.hdlc_damp:type_name -> huaweiV8R12_ifm.Ifm.HdlcDamp
	296, // 8: huaweiV8R12_ifm.Ifm.Global.ipv4_conflict_enable:type_name -> huaweiV8R12_ifm.Ifm.Global.Ipv4ConflictEnable
	297, // 9: huaweiV8R12_ifm.Ifm.Global.ipv6_conflict_enable:type_name -> huaweiV8R12_ifm.Ifm.Global.Ipv6ConflictEnable
	298, // 10: huaweiV8R12_ifm.Ifm.Global.fim_ifm_global:type_name -> huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal
	299, // 11: huaweiV8R12_ifm.Ifm.Global.fim_trunk_localfwd:type_name -> huaweiV8R12_ifm.Ifm.Global.FimTrunkLocalfwd
	300, // 12: huaweiV8R12_ifm.Ifm.Global.ve_groups:type_name -> huaweiV8R12_ifm.Ifm.Global.VeGroups
	302, // 13: huaweiV8R12_ifm.Ifm.Interfaces.interface:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface
	762, // 14: huaweiV8R12_ifm.Ifm.AutoRecoveryTimes.auto_recovery_time:type_name -> huaweiV8R12_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime
	763, // 15: huaweiV8R12_ifm.Ifm.StaticDimensionRanges.static_dimension_range:type_name -> huaweiV8R12_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange
	764, // 16: huaweiV8R12_ifm.Ifm.RemoteInterfaces.remote_interface:type_name -> huaweiV8R12_ifm.Ifm.RemoteInterfaces.RemoteInterface
	286, // 17: huaweiV8R12_ifm.Ifm.HdlcDamp.damp_level:type_name -> huaweiV8R12_ifm.Ifm.HdlcDamp.DampLevel
	0,   // 18: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.global_strict_filter:type_name -> huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.GlobalStrictFilter
	1,   // 19: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.dual_stat_enable:type_name -> huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.DualStatEnable
	2,   // 20: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.trunk_adjust_enable:type_name -> huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.TrunkAdjustEnable
	3,   // 21: huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.qinq_transport_enable:type_name -> huaweiV8R12_ifm.Ifm.Global.FimIfmGlobal.QinqTransportEnable
	4,   // 22: huaweiV8R12_ifm.Ifm.Global.FimTrunkLocalfwd.enable:type_name -> huaweiV8R12_ifm.Ifm.Global.FimTrunkLocalfwd.Enable
	301, // 23: huaweiV8R12_ifm.Ifm.Global.VeGroups.ve_group:type_name -> huaweiV8R12_ifm.Ifm.Global.VeGroups.VeGroup
	5,   // 24: huaweiV8R12_ifm.Ifm.Interfaces.Interface.class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Class
	6,   // 25: huaweiV8R12_ifm.Ifm.Interfaces.Interface.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Type
	7,   // 26: huaweiV8R12_ifm.Ifm.Interfaces.Interface.admin_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.AdminStatus
	8,   // 27: huaweiV8R12_ifm.Ifm.Interfaces.Interface.link_protocol:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.LinkProtocol
	9,   // 28: huaweiV8R12_ifm.Ifm.Interfaces.Interface.router_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.RouterType
	10,  // 29: huaweiV8R12_ifm.Ifm.Interfaces.Interface.statistic_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.StatisticMode
	303, // 30: huaweiV8R12_ifm.Ifm.Interfaces.Interface.dynamic:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic
	304, // 31: huaweiV8R12_ifm.Ifm.Interfaces.Interface.mib_statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.MibStatistics
	305, // 32: huaweiV8R12_ifm.Ifm.Interfaces.Interface.common_statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.CommonStatistics
	11,  // 33: huaweiV8R12_ifm.Ifm.Interfaces.Interface.service_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ServiceType
	12,  // 34: huaweiV8R12_ifm.Ifm.Interfaces.Interface.encapsulation_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.EncapsulationType
	13,  // 35: huaweiV8R12_ifm.Ifm.Interfaces.Interface.network_layer_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.NetworkLayerStatus
	306, // 36: huaweiV8R12_ifm.Ifm.Interfaces.Interface.control_flap:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ControlFlap
	307, // 37: huaweiV8R12_ifm.Ifm.Interfaces.Interface.trap_threshold:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.TrapThreshold
	308, // 38: huaweiV8R12_ifm.Ifm.Interfaces.Interface.damp_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DampState
	309, // 39: huaweiV8R12_ifm.Ifm.Interfaces.Interface.error_down:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ErrorDown
	310, // 40: huaweiV8R12_ifm.Ifm.Interfaces.Interface.tunnel_protocol:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.TunnelProtocol
	311, // 41: huaweiV8R12_ifm.Ifm.Interfaces.Interface.bdif_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.BdifAttribute
	312, // 42: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ipv4:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4
	313, // 43: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ipv6:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6
	314, // 44: huaweiV8R12_ifm.Ifm.Interfaces.Interface.trunk:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk
	315, // 45: huaweiV8R12_ifm.Ifm.Interfaces.Interface.vlanif_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.VlanifAttribute
	316, // 46: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ethernet:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet
	317, // 47: huaweiV8R12_ifm.Ifm.Interfaces.Interface.arp_entry:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry
	318, // 48: huaweiV8R12_ifm.Ifm.Interfaces.Interface.arp_status_detect:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpStatusDetect
	319, // 49: huaweiV8R12_ifm.Ifm.Interfaces.Interface.arp_port_security:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpPortSecurity
	320, // 50: huaweiV8R12_ifm.Ifm.Interfaces.Interface.bfd:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bfd
	321, // 51: huaweiV8R12_ifm.Ifm.Interfaces.Interface.qos:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos
	322, // 52: huaweiV8R12_ifm.Ifm.Interfaces.Interface.bfd_ext:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.BfdExt
	323, // 53: huaweiV8R12_ifm.Ifm.Interfaces.Interface.arp_sending:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpSending
	324, // 54: huaweiV8R12_ifm.Ifm.Interfaces.Interface.nd_sending:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.NdSending
	325, // 55: huaweiV8R12_ifm.Ifm.Interfaces.Interface.nve:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve
	326, // 56: huaweiV8R12_ifm.Ifm.Interfaces.Interface.nvo3_gateway:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3Gateway
	327, // 57: huaweiV8R12_ifm.Ifm.Interfaces.Interface.bas:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas
	328, // 58: huaweiV8R12_ifm.Ifm.Interfaces.Interface.bras:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras
	329, // 59: huaweiV8R12_ifm.Ifm.Interfaces.Interface.pppoe_bind_vt:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeBindVt
	330, // 60: huaweiV8R12_ifm.Ifm.Interfaces.Interface.pppoe_vt:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt
	331, // 61: huaweiV8R12_ifm.Ifm.Interfaces.Interface.tcp_mss_value:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.TcpMssValue
	332, // 62: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ipv4_urpf:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4Urpf
	333, // 63: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ipv6_urpf:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6Urpf
	334, // 64: huaweiV8R12_ifm.Ifm.Interfaces.Interface.roam_domain:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.RoamDomain
	335, // 65: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ptp_port_srcs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs
	336, // 66: huaweiV8R12_ifm.Ifm.Interfaces.Interface.vinter_links:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.VinterLinks
	337, // 67: huaweiV8R12_ifm.Ifm.Interfaces.Interface.clocksync_flexe:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe
	338, // 68: huaweiV8R12_ifm.Ifm.Interfaces.Interface.gps_port_srcs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs
	339, // 69: huaweiV8R12_ifm.Ifm.Interfaces.Interface.clock_port_sources:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources
	340, // 70: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ptpa_ports:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpaPorts
	341, // 71: huaweiV8R12_ifm.Ifm.Interfaces.Interface.cpudefend:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend
	342, // 72: huaweiV8R12_ifm.Ifm.Interfaces.Interface.dcn:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn
	343, // 73: huaweiV8R12_ifm.Ifm.Interfaces.Interface.dhcp_relay_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute
	344, // 74: huaweiV8R12_ifm.Ifm.Interfaces.Interface.dhcp_if:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf
	345, // 75: huaweiV8R12_ifm.Ifm.Interfaces.Interface.dhcp_client_if:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf
	346, // 76: huaweiV8R12_ifm.Ifm.Interfaces.Interface.dhcp_snooping_if:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf
	347, // 77: huaweiV8R12_ifm.Ifm.Interfaces.Interface.dhcpv6_relay_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute
	348, // 78: huaweiV8R12_ifm.Ifm.Interfaces.Interface.efm:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm
	349, // 79: huaweiV8R12_ifm.Ifm.Interfaces.Interface.evpn:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn
	350, // 80: huaweiV8R12_ifm.Ifm.Interfaces.Interface.fim:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim
	351, // 81: huaweiV8R12_ifm.Ifm.Interfaces.Interface.fim_ifm_mru:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmMru
	352, // 82: huaweiV8R12_ifm.Ifm.Interfaces.Interface.fim_tcp_mss:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimTcpMss
	353, // 83: huaweiV8R12_ifm.Ifm.Interfaces.Interface.fim_ifm_bdifint:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmBdifint
	354, // 84: huaweiV8R12_ifm.Ifm.Interfaces.Interface.fim_ifm_veint:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmVeint
	355, // 85: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ve_group:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.VeGroup
	356, // 86: huaweiV8R12_ifm.Ifm.Interfaces.Interface.mru_discard_statistic:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.MruDiscardStatistic
	357, // 87: huaweiV8R12_ifm.Ifm.Interfaces.Interface.macmtu_discard_stat:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.MacmtuDiscardStat
	358, // 88: huaweiV8R12_ifm.Ifm.Interfaces.Interface.flow_recognition:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition
	359, // 89: huaweiV8R12_ifm.Ifm.Interfaces.Interface.flowspec_forward:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward
	360, // 90: huaweiV8R12_ifm.Ifm.Interfaces.Interface.if_8021p_priority:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.If8021PPriority
	361, // 91: huaweiV8R12_ifm.Ifm.Interfaces.Interface.management_plane_defend_if:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ManagementPlaneDefendIf
	362, // 92: huaweiV8R12_ifm.Ifm.Interfaces.Interface.igmp_snooping:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping
	363, // 93: huaweiV8R12_ifm.Ifm.Interfaces.Interface.hwmc_if_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.HwmcIfEnable
	364, // 94: huaweiV8R12_ifm.Ifm.Interfaces.Interface.protocol_actions:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions
	365, // 95: huaweiV8R12_ifm.Ifm.Interfaces.Interface.vll_pw_loop_check:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.VllPwLoopCheck
	366, // 96: huaweiV8R12_ifm.Ifm.Interfaces.Interface.encapsulation_vlan:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.EncapsulationVlan
	367, // 97: huaweiV8R12_ifm.Ifm.Interfaces.Interface.lldp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp
	368, // 98: huaweiV8R12_ifm.Ifm.Interfaces.Interface.loadbalance:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance
	369, // 99: huaweiV8R12_ifm.Ifm.Interfaces.Interface.loopdetect:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect
	370, // 100: huaweiV8R12_ifm.Ifm.Interfaces.Interface.macsec:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec
	371, // 101: huaweiV8R12_ifm.Ifm.Interfaces.Interface.mirror:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror
	372, // 102: huaweiV8R12_ifm.Ifm.Interfaces.Interface.track_monitor_group:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.TrackMonitorGroup
	373, // 103: huaweiV8R12_ifm.Ifm.Interfaces.Interface.deephashcfg:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg
	374, // 104: huaweiV8R12_ifm.Ifm.Interfaces.Interface.if_poison_reverse:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfPoisonReverse
	375, // 105: huaweiV8R12_ifm.Ifm.Interfaces.Interface.if_p2mp_load_balance:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance
	376, // 106: huaweiV8R12_ifm.Ifm.Interfaces.Interface.bgp_localifnet_traffic:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.BgpLocalifnetTraffic
	377, // 107: huaweiV8R12_ifm.Ifm.Interfaces.Interface.multicast_forward:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.MulticastForward
	378, // 108: huaweiV8R12_ifm.Ifm.Interfaces.Interface.netstream:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream
	379, // 109: huaweiV8R12_ifm.Ifm.Interfaces.Interface.nvo3_vtep_statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics
	380, // 110: huaweiV8R12_ifm.Ifm.Interfaces.Interface.if_icmp_securitys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys
	381, // 111: huaweiV8R12_ifm.Ifm.Interfaces.Interface.if_ip_opt_securitys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys
	382, // 112: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ip_verify_src_addr:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IpVerifySrcAddr
	383, // 113: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ip_fwd_broadcast:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IpFwdBroadcast
	384, // 114: huaweiV8R12_ifm.Ifm.Interfaces.Interface.rbs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Rbs
	385, // 115: huaweiV8R12_ifm.Ifm.Interfaces.Interface.vrrp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp
	386, // 116: huaweiV8R12_ifm.Ifm.Interfaces.Interface.unicast_forward:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward
	387, // 117: huaweiV8R12_ifm.Ifm.Interfaces.Interface.unknow_unicast_threshold:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnknowUnicastThreshold
	14,  // 118: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.oper_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.OperStatus
	15,  // 119: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.physical_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.PhysicalStatus
	16,  // 120: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.link_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.LinkStatus
	17,  // 121: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.ipv4_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv4Status
	18,  // 122: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.ipv6_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv6Status
	19,  // 123: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.link_quality_grade:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dynamic.LinkQualityGrade
	388, // 124: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MibStatistics.eth_port_err_sts:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.MibStatistics.EthPortErrSts
	20,  // 125: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DampState.suppress_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DampState.SuppressStatus
	21,  // 126: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ErrorDown.cause:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ErrorDown.Cause
	389, // 127: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State
	390, // 128: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.static_arps:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps
	391, // 129: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.vrrp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp
	392, // 130: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.rgm:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Rgm
	410, // 131: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.nd_prefixs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs
	411, // 132: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State
	412, // 133: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.cgas:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas
	413, // 134: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.nd_collection:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection
	414, // 135: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.pp6_collection:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.Pp6Collection
	415, // 136: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.extension_header_filter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter
	59,  // 137: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Type
	60,  // 138: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.hash_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.HashType
	61,  // 139: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.work_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.WorkMode
	440, // 140: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.members:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members
	441, // 141: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.forwardings:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings
	442, // 142: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.fim_ifmtrunk:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk
	443, // 143: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.lacp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp
	453, // 144: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.main_interface:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface
	454, // 145: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.l3_sub_interface:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface
	455, // 146: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.l2_sub_interface:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface
	456, // 147: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.mac:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac
	91,  // 148: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry.arp_learn_strict:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry.ArpLearnStrict
	92,  // 149: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry.gratuitous_send:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpEntry.GratuitousSend
	93,  // 150: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpStatusDetect.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpStatusDetect.Mode
	478, // 151: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpPortSecurity.l2_sub_interface:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpPortSecurity.L2SubInterface
	479, // 152: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.trusts:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts
	480, // 153: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.traffic_policy_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys
	481, // 154: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.profile_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys
	482, // 155: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.user_queue_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys
	483, // 156: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.port_queues:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues
	484, // 157: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.port_queue_states:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates
	485, // 158: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.port_queue_template_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueTemplateApplys
	486, // 159: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.port_queue_alarms:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms
	487, // 160: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.port_queue_alarm_states:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates
	488, // 161: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.port_queue_discard_alarms:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms
	489, // 162: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.set_queue_stats:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats
	490, // 163: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.link_adjustment:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LinkAdjustment
	491, // 164: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.qos_queues:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues
	492, // 165: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.queue_template_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QueueTemplateApplys
	493, // 166: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.soft_pipe_alarms:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SoftPipeAlarms
	494, // 167: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.flow_queue_template_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.FlowQueueTemplateApplys
	495, // 168: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.service_template_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateApplys
	496, // 169: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.default_service_classs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss
	497, // 170: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.default_user_group_queues:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues
	498, // 171: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.default_sub_port_queues:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues
	499, // 172: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.port_shapings:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings
	500, // 173: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.per_hop_behavior_disables:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables
	501, // 174: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.per_hop_behavior_enables:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnables
	502, // 175: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.per_hop_behavior_enable_vlans:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnableVlans
	503, // 176: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.per_hop_behavior:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehavior
	504, // 177: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.cars:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars
	505, // 178: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.convergent_precedence:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ConvergentPrecedence
	506, // 179: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.drop_eligible_indicator_vlan:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DropEligibleIndicatorVlan
	507, // 180: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.drop_eligible_indicator:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DropEligibleIndicator
	508, // 181: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.trust_untag_ip_precedence:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustUntagIpPrecedence
	509, // 182: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.trust_ip_precedences:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustIpPrecedences
	510, // 183: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.share_shaping:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping
	511, // 184: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.sub_port_queue_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys
	512, // 185: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.user_vlan_user_group_queue_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys
	513, // 186: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.bras_member_link_schedulers:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers
	514, // 187: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.schedule_tree_distribute_modes:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes
	515, // 188: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.loop_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LoopMode
	516, // 189: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.resource_pools:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools
	517, // 190: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.user_group_queue_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys
	518, // 191: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.mpls_l2vc:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MplsL2Vc
	519, // 192: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.member_link_schedulers:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers
	520, // 193: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.qos_lr:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosLr
	521, // 194: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ldp_traffic:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LdpTraffic
	522, // 195: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.buffer_policy_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BufferPolicyMode
	523, // 196: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.hard_pipe_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.HardPipeApply
	524, // 197: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.channel_adjustment:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ChannelAdjustment
	525, // 198: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.user_vlan_profile_applys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys
	526, // 199: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.service_template_shaping:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping
	527, // 200: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.default_service_class_remote:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClassRemote
	528, // 201: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.trust_remotes:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes
	529, // 202: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.wfq_shaping:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.WfqShaping
	530, // 203: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.source_board_schedule_weights:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SourceBoardScheduleWeights
	531, // 204: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.deficit_unit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DeficitUnit
	532, // 205: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.default_user_queue:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserQueue
	533, // 206: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.vni_cfg_peers:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers
	534, // 207: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.qos_vll_pipe:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe
	535, // 208: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.local_id_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LocalIdEnable
	536, // 209: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.qppb:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb
	179, // 210: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpSending.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ArpSending.Type
	180, // 211: huaweiV8R12_ifm.Ifm.Interfaces.Interface.NdSending.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.NdSending.Type
	581, // 212: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve.attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve.Attribute
	582, // 213: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve.pip:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nve.Pip
	583, // 214: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.eap_authentication_domain_individual:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.EapAuthenticationDomainIndividual
	584, // 215: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.bas_interface:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface
	585, // 216: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.pppoe_bas_statics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.PppoeBasStatics
	586, // 217: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.ppp_bas_statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.PppBasStatistics
	591, // 218: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.load_balance_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.LoadBalanceMode
	592, // 219: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.multicast:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.Multicast
	593, // 220: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.bras_user_manage:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.BrasUserManage
	182, // 221: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.authen_mode_priority:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.AuthenModePriority
	183, // 222: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.padn_send:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.PadnSend
	184, // 223: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.padm_send:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PppoeVt.PadmSend
	185, // 224: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.port_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PortState
	596, // 225: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.ptp_port_advance:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance
	597, // 226: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.ptp_pkt_pack:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack
	598, // 227: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.ptp_peer_clock:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPeerClock
	599, // 228: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.ptp_pkt_control:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktControl
	600, // 229: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.ptp_asymmetry_correction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpAsymmetryCorrection
	601, // 230: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.ptp_tcoc_static_clock_src:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpTcocStaticClockSrc
	602, // 231: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.ptp_ring_fiber_length_change:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpRingFiberLengthChange
	605, // 232: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe.phy_ports:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe.PhyPorts
	607, // 233: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.gps_port_src:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc
	612, // 234: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.source:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source
	616, // 235: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpaPorts.ptpa_port:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpaPorts.PtpaPort
	617, // 236: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.arp_safeguards:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpSafeguards
	618, // 237: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.host_car_qinq_hashs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.HostCarQinqHashs
	619, // 238: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ipv4_urpf:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.Ipv4Urpf
	620, // 239: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ipv6_urpf:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.Ipv6Urpf
	621, // 240: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.arp_vlan_car:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpVlanCar
	622, // 241: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.nd_vlan_cars:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars
	623, // 242: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.protocol_port_car:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar
	624, // 243: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.arp_check:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpCheck
	625, // 244: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.arp_filter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ArpFilter
	626, // 245: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.cp_rate_limit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit
	627, // 246: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.mac_filter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter
	647, // 247: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn.dcnv4:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn.Dcnv4
	648, // 248: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn.tc_dcn:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dcn.TcDcn
	215, // 249: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.reply_packet_policy:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ReplyPacketPolicy
	649, // 250: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.option82:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82
	650, // 251: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.server_addresses:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses
	651, // 252: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.gateway_addresses:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses
	652, // 253: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.relay_source_address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceAddress
	653, // 254: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.relay_source_option_addresses:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses
	654, // 255: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.opt82_vendor_specifics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics
	659, // 256: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.dhcp_packet_setting:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting
	660, // 257: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.option82_formats:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats
	661, // 258: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.option82_insert_setting:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82InsertSetting
	663, // 259: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.client_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus
	664, // 260: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.client_statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatistics
	665, // 261: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.basic_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.BasicAttribute
	666, // 262: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.static_binds:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds
	668, // 263: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.destination_addresses:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses
	669, // 264: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.destination_ifs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs
	670, // 265: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.rebuild_option:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.RebuildOption
	671, // 266: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.access_limit_setting:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.AccessLimitSetting
	672, // 267: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.pd_route_track_vrrp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.PdRouteTrackVrrp
	675, // 268: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.session:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session
	680, // 269: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.protocol_actions:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions
	233, // 270: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.statistic_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.StatisticEnable
	234, // 271: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.statistic_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.StatisticMode
	235, // 272: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.mac_statistic_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Fim.MacStatisticEnable
	236, // 273: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmMru.mru_statistic_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmMru.MruStatisticEnable
	237, // 274: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmVeint.ve_forward_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FimIfmVeint.VeForwardMode
	238, // 275: huaweiV8R12_ifm.Ifm.Interfaces.Interface.VeGroup.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.VeGroup.Type
	682, // 276: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.flow_enables:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables
	684, // 277: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.refluence:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Refluence
	685, // 278: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.tunnel_pop:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.TunnelPop
	686, // 279: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.disables:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables
	688, // 280: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping.number_limits:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping.NumberLimits
	690, // 281: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.protocol_action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction
	691, // 282: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.session:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session
	707, // 283: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance.ucmp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance.Ucmp
	708, // 284: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance.packet:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loadbalance.Packet
	709, // 285: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.mac_withdraw:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.MacWithdraw
	710, // 286: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.loopback_detect:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.LoopbackDetect
	711, // 287: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.loop_detect:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.LoopDetect
	712, // 288: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ckn_caks:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks
	713, // 289: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.confidentiality_offsets:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ConfidentialityOffsets
	714, // 290: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.replay_windows:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ReplayWindows
	715, // 291: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.keyserver_prioritys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.KeyserverPrioritys
	716, // 292: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.sak_life_times:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.SakLifeTimes
	717, // 293: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.encrypt_modes:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes
	718, // 294: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.cipher_algorithm_suites:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites
	719, // 295: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.vlan_in_clears:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears
	728, // 296: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.port_mirrors:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors
	729, // 297: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.port_mirror_slice:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrorSlice
	730, // 298: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.without_header:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.WithoutHeader
	731, // 299: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.port_mirror_car:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrorCar
	732, // 300: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.port_mirror_to:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrorTo
	733, // 301: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.port_fragments:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments
	734, // 302: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.integrateds:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds
	735, // 303: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.bas_port_mirrors:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors
	736, // 304: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.evc_l2_port_mirrors:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.EvcL2PortMirrors
	737, // 305: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.port_observe:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve
	267, // 306: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg.fragment_field:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg.FragmentField
	268, // 307: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg.deepmplshash:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Deephashcfg.Deepmplshash
	269, // 308: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.loadbanlance_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.LoadbanlanceEnable
	270, // 309: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.root_loadbanlance_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.RootLoadbanlanceEnable
	271, // 310: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.root_loadbanlance_spmsidis:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfP2MpLoadBalance.RootLoadbanlanceSpmsidis
	272, // 311: huaweiV8R12_ifm.Ifm.Interfaces.Interface.BgpLocalifnetTraffic.localifnet_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.BgpLocalifnetTraffic.LocalifnetEnable
	742, // 312: huaweiV8R12_ifm.Ifm.Interfaces.Interface.MulticastForward.shaping:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.MulticastForward.Shaping
	743, // 313: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.sampler_enables:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables
	744, // 314: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.sampler_rates:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates
	747, // 315: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.nvo3_vtep_statistic:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic
	750, // 316: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.if_icmp_security:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity
	751, // 317: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.if_ip_opt_security:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity
	752, // 318: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Rbs.bind_rbp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Rbs.BindRbp
	753, // 319: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.backup_groups:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups
	754, // 320: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.track_admins:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins
	756, // 321: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.poison_reverse:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.PoisonReverse
	757, // 322: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.ipv6_redirect:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.Ipv6Redirect
	758, // 323: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.ipv6_na_anti_attack:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.Ipv6NaAntiAttack
	759, // 324: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.ip_priority_select:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.IpPrioritySelect
	760, // 325: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.mac_change_notify_arp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.MacChangeNotifyArp
	761, // 326: huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.mac_change_notify_nd_disable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.UnicastForward.MacChangeNotifyNdDisable
	393, // 327: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.addresses:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses
	394, // 328: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.gateways:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways
	395, // 329: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Statistics
	398, // 330: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps.static_arp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps.StaticArp
	399, // 331: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.groups:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups
	396, // 332: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address
	397, // 333: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways.gateway:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways.Gateway
	22,  // 334: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address.Type
	400, // 335: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.group:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group
	401, // 336: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.preempt:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Preempt
	23,  // 337: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.authentication_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.AuthenticationMode
	24,  // 338: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.v3_sendmode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.V3Sendmode
	25,  // 339: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Type
	26,  // 340: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.State
	402, // 341: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.virtual_ips:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps
	403, // 342: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.track_interfaces:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces
	404, // 343: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.track_bfds:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds
	405, // 344: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.track_mtgrps:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps
	406, // 345: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps.virtual_ip:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps.VirtualIp
	407, // 346: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.track_interface:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface
	408, // 347: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.track_bfd:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd
	409, // 348: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.track_mtgrp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp
	27,  // 349: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface.track_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface.TrackMode
	28,  // 350: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.session_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionType
	29,  // 351: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.track_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.TrackMode
	30,  // 352: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.session_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionState
	31,  // 353: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp.track_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp.TrackMode
	416, // 354: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs.nd_prefix:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs.NdPrefix
	417, // 355: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.addresses:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses
	418, // 356: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Statistics
	420, // 357: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas.cga:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas.Cga
	421, // 358: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.if_property:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty
	422, // 359: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.proxys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys
	423, // 360: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.anti_attack:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack
	429, // 361: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.hop_by_hop_switch:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch
	430, // 362: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.routing_switch:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch
	431, // 363: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.destination_switch:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch
	432, // 364: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.no_option_exh_switchs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs
	419, // 365: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address
	32,  // 366: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Type
	33,  // 367: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.algorithm_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.AlgorithmType
	34,  // 368: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Status
	35,  // 369: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ns_mcast_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NsMcastFlag
	36,  // 370: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.na_glean:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NaGlean
	37,  // 371: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ma_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.MaFlag
	38,  // 372: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.o_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.OFlag
	39,  // 373: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_halt_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaHaltFlag
	40,  // 374: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_preference:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPreference
	41,  // 375: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_prefix_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPrefixFlag
	42,  // 376: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_mtu_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaMtuFlag
	43,  // 377: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.collect_host_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.CollectHostFlag
	44,  // 378: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.generate_rd_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.GenerateRdEnable
	45,  // 379: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.route_proxy:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.RouteProxy
	46,  // 380: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.inner_vlan_proxy:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InnerVlanProxy
	47,  // 381: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.inter_vlan_proxy:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InterVlanProxy
	48,  // 382: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.anyway_proxy:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.AnywayProxy
	424, // 383: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.receive_rate_limits:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits
	425, // 384: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.source_ip_receive:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive
	426, // 385: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.receive_rate_limit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit
	427, // 386: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.ip_rate_limits:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits
	49,  // 387: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit.Type
	428, // 388: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.ip_rate_limit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit
	50,  // 389: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit.packet_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit.PacketType
	51,  // 390: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.all_options:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.AllOptions
	433, // 391: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.options:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options
	53,  // 392: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.all_options:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.AllOptions
	435, // 393: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.options:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options
	55,  // 394: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.all_options:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.AllOptions
	437, // 395: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.options:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options
	439, // 396: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.no_option_exh_switch:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch
	434, // 397: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.option:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option
	52,  // 398: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option.filter_rule:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option.FilterRule
	436, // 399: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.option:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option
	54,  // 400: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option.filter_rule:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option.FilterRule
	438, // 401: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.option:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option
	56,  // 402: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option.filter_rule:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option.FilterRule
	57,  // 403: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.exh_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.ExhType
	58,  // 404: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.filter_rule:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.FilterRule
	444, // 405: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.member:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member
	450, // 406: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings.forwarding:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings.Forwarding
	68,  // 407: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk.trunk_hash_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk.TrunkHashType
	69,  // 408: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk.dual_receive_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.FimIfmtrunk.DualReceiveEnable
	70,  // 409: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.receive_timeout_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.ReceiveTimeoutType
	71,  // 410: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.select_port_std:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SelectPortStd
	451, // 411: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.m_lag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.MLag
	452, // 412: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.track_vrrp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.TrackVrrp
	72,  // 413: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.sysmac_source:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SysmacSource
	62,  // 414: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Status
	63,  // 415: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.role:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Role
	64,  // 416: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.lacp_negotiation_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.LacpNegotiationMode
	445, // 417: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.fim_ifmtrunk_member:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.FimIfmtrunkMember
	446, // 418: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.lacp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp
	447, // 419: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.port_attributes:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes
	448, // 420: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.port_negotiate_parameter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter
	449, // 421: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.pdu_statistic:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PduStatistic
	65,  // 422: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes.role:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes.Role
	66,  // 423: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.Status
	67,  // 424: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.port_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.PortType
	73,  // 425: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.vlan_swap:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.VlanSwap
	457, // 426: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.l2_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute
	458, // 427: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.mstp_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute
	459, // 428: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.fim_main:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.FimMain
	470, // 429: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.vlan_groups:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups
	471, // 430: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.mode_channel:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.ModeChannel
	86,  // 431: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.local_switch:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.LocalSwitch
	473, // 432: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.flow_action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction
	474, // 433: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.fim_l2_sub:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FimL2Sub
	475, // 434: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.sub_interface_mac_limit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit
	476, // 435: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.sub_interface_suppressions:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions
	74,  // 436: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.link_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.LinkType
	460, // 437: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.vlan_stackings:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings
	461, // 438: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.statistics_enable_vlans:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.StatisticsEnableVlans
	462, // 439: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.port_isolate_groups:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups
	463, // 440: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.mstp_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute
	464, // 441: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.protocol_actions:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions
	465, // 442: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.bpdu_tunnel:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.BpduTunnel
	466, // 443: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.vlan_isolate_attribute:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanIsolateAttribute
	80,  // 444: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.point_to_point:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.PointToPoint
	81,  // 445: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.bpdu_filter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.BpduFilter
	82,  // 446: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.edge_port:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.MstpAttribute.EdgePort
	83,  // 447: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.FimMain.outer_vlan_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.FimMain.OuterVlanEnable
	467, // 448: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings.vlan_stacking:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings.VlanStacking
	468, // 449: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups.port_isolate_group:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups.PortIsolateGroup
	75,  // 450: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.point_to_point:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.PointToPoint
	76,  // 451: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.bpdu_filter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.BpduFilter
	77,  // 452: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.edge_port:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.MstpAttribute.EdgePort
	469, // 453: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.protocol_action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction
	78,  // 454: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction.protocol_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction.ProtocolType
	79,  // 455: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction.action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.ProtocolActions.ProtocolAction.Action
	472, // 456: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.vlan_group:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup
	85,  // 457: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.ModeChannel.mode_channel_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.ModeChannel.ModeChannelEnable
	84,  // 458: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup.Mode
	87,  // 459: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction.action_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction.ActionType
	88,  // 460: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FimL2Sub.egress_strict_filter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FimL2Sub.EgressStrictFilter
	477, // 461: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.sub_interface_suppression:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression
	89,  // 462: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Type
	90,  // 463: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Direction
	537, // 464: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.trust:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust
	538, // 465: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.traffic_policy_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply
	539, // 466: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.profile_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply
	540, // 467: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.user_queue_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply
	543, // 468: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues.port_queue:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues.PortQueue
	544, // 469: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates.port_queue_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates.PortQueueState
	545, // 470: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueTemplateApplys.port_queue_template_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueTemplateApplys.PortQueueTemplateApply
	546, // 471: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms.port_queue_alarm:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms.PortQueueAlarm
	547, // 472: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates.port_queue_alarm_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates.PortQueueAlarmState
	548, // 473: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.port_queue_discard_alarm:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm
	549, // 474: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats.set_queue_stat:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats.SetQueueStat
	113, // 475: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LinkAdjustment.shaping_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LinkAdjustment.ShapingMode
	550, // 476: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.qos_queue:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue
	551, // 477: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QueueTemplateApplys.queue_template_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QueueTemplateApplys.QueueTemplateApply
	552, // 478: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SoftPipeAlarms.soft_pipe_alarm:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SoftPipeAlarms.SoftPipeAlarm
	553, // 479: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.FlowQueueTemplateApplys.flow_queue_template_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.FlowQueueTemplateApplys.FlowQueueTemplateApply
	554, // 480: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateApplys.service_template_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateApplys.ServiceTemplateApply
	555, // 481: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss.default_service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss.DefaultServiceClass
	556, // 482: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues.default_user_group_queue:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues.DefaultUserGroupQueue
	557, // 483: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues.default_sub_port_queue:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues.DefaultSubPortQueue
	558, // 484: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings.port_shaping:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings.PortShaping
	559, // 485: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables.per_hop_behavior_disable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables.PerHopBehaviorDisable
	560, // 486: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnables.per_hop_behavior_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnables.PerHopBehaviorEnable
	561, // 487: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnableVlans.per_hop_behavior_enable_vlan:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorEnableVlans.PerHopBehaviorEnableVlan
	121, // 488: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehavior.enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehavior.Enable
	562, // 489: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.car:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car
	134, // 490: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ConvergentPrecedence.priority_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ConvergentPrecedence.PriorityType
	135, // 491: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustUntagIpPrecedence.enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustUntagIpPrecedence.Enable
	563, // 492: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustIpPrecedences.trust_ip_precedence:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustIpPrecedences.TrustIpPrecedence
	136, // 493: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.be:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Be
	137, // 494: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.af1:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af1
	138, // 495: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.af2:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af2
	139, // 496: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.af3:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af3
	140, // 497: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.af4:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Af4
	141, // 498: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.ef:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Ef
	142, // 499: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.cs6:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Cs6
	143, // 500: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.cs7:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.Cs7
	144, // 501: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.queue_schedule_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ShareShaping.QueueScheduleMode
	564, // 502: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys.sub_port_queue_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys.SubPortQueueApply
	565, // 503: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.user_vlan_user_group_queue_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply
	566, // 504: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.bras_member_link_scheduler:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler
	567, // 505: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes.schedule_tree_distribute_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes.ScheduleTreeDistributeMode
	568, // 506: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.resource_pool:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool
	569, // 507: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys.user_group_queue_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys.UserGroupQueueApply
	570, // 508: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.member_link_scheduler:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler
	156, // 509: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LdpTraffic.traffic_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LdpTraffic.TrafficType
	157, // 510: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BufferPolicyMode.buffer_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BufferPolicyMode.BufferMode
	158, // 511: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.HardPipeApply.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.HardPipeApply.Mode
	571, // 512: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.user_vlan_profile_apply:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply
	572, // 513: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.all_service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.AllServiceClass
	573, // 514: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.specific_service_classs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss
	162, // 515: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClassRemote.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClassRemote.ServiceClass
	575, // 516: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.trust_remote:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote
	576, // 517: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SourceBoardScheduleWeights.source_board_schedule_weight:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SourceBoardScheduleWeights.SourceBoardScheduleWeight
	166, // 518: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DeficitUnit.unit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DeficitUnit.Unit
	167, // 519: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserQueue.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserQueue.Direction
	577, // 520: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers.vni_cfg_peer:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers.VniCfgPeer
	169, // 521: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.pipe_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.PipeMode
	170, // 522: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.ingress_pipe_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.IngressPipeMode
	171, // 523: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.egress_pipe_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.EgressPipeMode
	172, // 524: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.ServiceClass
	173, // 525: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.color:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.Color
	174, // 526: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.trust_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosVllPipe.TrustType
	175, // 527: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LocalIdEnable.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.LocalIdEnable.Mode
	578, // 528: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.policys:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys
	579, // 529: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.ip_precedence:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.IpPrecedence
	94,  // 530: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust.Type
	95,  // 531: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Trusts.Trust.Direction
	96,  // 532: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.Direction
	97,  // 533: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.layer:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.Layer
	98,  // 534: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.identifier:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrafficPolicyApplys.TrafficPolicyApply.Identifier
	99,  // 535: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.Direction
	100, // 536: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.Type
	101, // 537: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.identify_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.IdentifyType
	102, // 538: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.linkage_bandwidth:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ProfileApplys.ProfileApply.LinkageBandwidth
	103, // 539: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.Direction
	104, // 540: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.adjust_on_card:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.AdjustOnCard
	541, // 541: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.user_queue_applys_stats:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats
	542, // 542: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats.user_queue_applys_stat:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats.UserQueueApplysStat
	105, // 543: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats.UserQueueApplysStat.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserQueueApplys.UserQueueApply.UserQueueApplysStats.UserQueueApplysStat.ServiceClass
	106, // 544: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues.PortQueue.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueues.PortQueue.ServiceClass
	107, // 545: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates.PortQueueState.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueStates.PortQueueState.ServiceClass
	108, // 546: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms.PortQueueAlarm.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarms.PortQueueAlarm.ServiceClass
	109, // 547: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates.PortQueueAlarmState.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueAlarmStates.PortQueueAlarmState.ServiceClass
	110, // 548: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm.ServiceClass
	111, // 549: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortQueueDiscardAlarms.PortQueueDiscardAlarm.Type
	112, // 550: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats.SetQueueStat.interval:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SetQueueStats.SetQueueStat.Interval
	114, // 551: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue.ServiceClass
	115, // 552: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue.priority:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.QosQueues.QosQueue.Priority
	116, // 553: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss.DefaultServiceClass.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultServiceClasss.DefaultServiceClass.ServiceClass
	117, // 554: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues.DefaultUserGroupQueue.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultUserGroupQueues.DefaultUserGroupQueue.Direction
	118, // 555: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues.DefaultSubPortQueue.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.DefaultSubPortQueues.DefaultSubPortQueue.Direction
	119, // 556: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings.PortShaping.weight_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PortShapings.PortShaping.WeightMode
	120, // 557: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables.PerHopBehaviorDisable.map_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.PerHopBehaviorDisables.PerHopBehaviorDisable.MapType
	122, // 558: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.Direction
	123, // 559: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.green_action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.GreenAction
	124, // 560: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.green_service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.GreenServiceClass
	125, // 561: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.green_color:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.GreenColor
	126, // 562: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.yellow_action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.YellowAction
	127, // 563: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.yellow_service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.YellowServiceClass
	128, // 564: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.yellow_color:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.YellowColor
	129, // 565: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.red_action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.RedAction
	130, // 566: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.red_service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.RedServiceClass
	131, // 567: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.red_color:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.RedColor
	132, // 568: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.color_aware:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.ColorAware
	133, // 569: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.identifier:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Cars.Car.Identifier
	145, // 570: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys.SubPortQueueApply.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.SubPortQueueApplys.SubPortQueueApply.Direction
	146, // 571: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply.Direction
	147, // 572: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply.identifier_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanUserGroupQueueApplys.UserVlanUserGroupQueueApply.IdentifierType
	148, // 573: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler.user_access_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler.UserAccessType
	149, // 574: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.BrasMemberLinkSchedulers.BrasMemberLinkScheduler.Direction
	150, // 575: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes.ScheduleTreeDistributeMode.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ScheduleTreeDistributeModes.ScheduleTreeDistributeMode.Direction
	151, // 576: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool.Direction
	152, // 577: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool.pool_id:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ResourcePools.ResourcePool.PoolId
	153, // 578: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys.UserGroupQueueApply.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserGroupQueueApplys.UserGroupQueueApply.Direction
	154, // 579: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler.member_link_scheduler_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler.MemberLinkSchedulerType
	155, // 580: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.MemberLinkSchedulers.MemberLinkScheduler.Direction
	159, // 581: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply.Direction
	160, // 582: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply.each_vlan:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.UserVlanProfileApplys.UserVlanProfileApply.EachVlan
	574, // 583: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss.specific_service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss.SpecificServiceClass
	161, // 584: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss.SpecificServiceClass.service_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.ServiceTemplateShaping.SpecificServiceClasss.SpecificServiceClass.ServiceClass
	163, // 585: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.Type
	164, // 586: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.Direction
	165, // 587: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.type_8021p:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.TrustRemotes.TrustRemote.Type8021P
	168, // 588: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers.VniCfgPeer.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.VniCfgPeers.VniCfgPeer.Direction
	580, // 589: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.policy:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy
	178, // 590: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.IpPrecedence.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.IpPrecedence.Mode
	176, // 591: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy.Direction
	177, // 592: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Qos.Qppb.Policys.Policy.Mode
	587, // 593: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.information:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.Information
	588, // 594: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.access_users:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.AccessUsers
	589, // 595: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.statistics:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.Statistics
	590, // 596: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.AccessUsers.access_user:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bas.BasInterface.AccessUsers.AccessUser
	181, // 597: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.LoadBalanceMode.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.LoadBalanceMode.Mode
	594, // 598: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.Multicast.bandwidth_limit_policy:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.Multicast.BandwidthLimitPolicy
	595, // 599: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.BrasUserManage.port_access_limit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Bras.BrasUserManage.PortAccessLimit
	186, // 600: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.port_type_set:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.PortTypeSet
	187, // 601: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.port_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.PortType
	188, // 602: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.delay_mechanism:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.DelayMechanism
	189, // 603: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.port_cfg_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.PortCfgState
	190, // 604: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.clk_step:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPortAdvance.ClkStep
	191, // 605: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.pkt_pack_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.PktPackType
	603, // 606: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.ptp_pkt_mac_pack:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.PtpPktMacPack
	604, // 607: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.ptp_pkt_udp_pack:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpPktPack.PtpPktUdpPack
	192, // 608: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpAsymmetryCorrection.correction_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpAsymmetryCorrection.CorrectionFlag
	193, // 609: huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpRingFiberLengthChange.change_value_flag:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.PtpPortSrcs.PtpRingFiberLengthChange.ChangeValueFlag
	606, // 610: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe.PhyPorts.phy_port:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClocksyncFlexe.PhyPorts.PhyPort
	194, // 611: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gnss_model_pri1:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri1
	195, // 612: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gnss_model_pri2:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri2
	196, // 613: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gnss_model_pri3:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri3
	197, // 614: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gnss_model_pri4:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri4
	198, // 615: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gnss_model_pri5:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModelPri5
	608, // 616: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gps_sfp_work_states:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSfpWorkStates
	609, // 617: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gnss_module:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule
	610, // 618: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gps_sync_parameters:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters
	611, // 619: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.gps_board:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsBoard
	199, // 620: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.gps_work_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.GpsWorkMode
	200, // 621: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.gps_fix_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.GpsFixStatus
	201, // 622: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.gnss_model:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.GnssModel
	202, // 623: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.leap_manualmode_en_stat:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.LeapManualmodeEnStat
	203, // 624: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.leap_adjustdir_stat:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GnssModule.LeapAdjustdirStat
	204, // 625: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.gps_ptp_delay_mechanism:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.GpsPtpDelayMechanism
	205, // 626: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.gps_ptp_clk_step:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.GpsPtpClkStep
	206, // 627: huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.gps_clock_ssm:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.GpsPortSrcs.GpsPortSrc.GpsSyncParameters.GpsClockSsm
	207, // 628: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.State
	208, // 629: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.phy_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.PhyState
	209, // 630: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.e1_sabit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.E1Sabit
	613, // 631: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.priority:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.Priority
	614, // 632: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.ssm_class:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass
	615, // 633: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.clock_id:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.ClockId
	210, // 634: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.ssm_configured:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.SsmConfigured
	211, // 635: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.ssm_learn:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.SsmLearn
	212, // 636: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.ssm_output:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ClockPortSources.Source.SsmClass.SsmOutput
	628, // 637: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars.nd_vlan_car:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars.NdVlanCar
	629, // 638: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.rate_limits:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits
	630, // 639: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.alarm:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.Alarm
	632, // 640: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.igmp:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp
	633, // 641: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.ports:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports
	634, // 642: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.enhance:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Enhance
	645, // 643: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter.mac_addresss:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter.MacAddresss
	213, // 644: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars.NdVlanCar.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.NdVlanCars.NdVlanCar.Type
	631, // 645: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits.rate_limit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits.RateLimit
	214, // 646: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits.RateLimit.protocol:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.ProtocolPortCar.RateLimits.RateLimit.Protocol
	635, // 647: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.general:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.General
	636, // 648: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.dot1q_terminations:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.Dot1QTerminations
	637, // 649: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.qinq_terminations:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.QinqTerminations
	640, // 650: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.general:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.General
	641, // 651: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.dot1q_terminations:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.Dot1QTerminations
	642, // 652: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.qinq_terminations:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.QinqTerminations
	638, // 653: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.Dot1QTerminations.dot1q_termination:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.Dot1QTerminations.Dot1QTermination
	639, // 654: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.QinqTerminations.qinq_termination:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Igmp.QinqTerminations.QinqTermination
	643, // 655: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.Dot1QTerminations.dot1q_termination:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.Dot1QTerminations.Dot1QTermination
	644, // 656: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.QinqTerminations.qinq_termination:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.CpRateLimit.Ports.QinqTerminations.QinqTermination
	646, // 657: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter.MacAddresss.mac_address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Cpudefend.MacFilter.MacAddresss.MacAddress
	216, // 658: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82.subscriber_id_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82.SubscriberIdMode
	655, // 659: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses.server_address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses.ServerAddress
	656, // 660: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses.gateway_address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses.GatewayAddress
	657, // 661: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses.relay_source_option_address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses.RelaySourceOptionAddress
	658, // 662: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.opt82_vendor_specific:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific
	217, // 663: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific.sub_option_format:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific.SubOptionFormat
	218, // 664: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting.server_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting.ServerEnable
	662, // 665: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.option82_format:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format
	219, // 666: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format.sub_option_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format.SubOptionType
	220, // 667: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus.fsm_state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus.FsmState
	667, // 668: huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds.static_bind:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds.StaticBind
	673, // 669: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses.destination_address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses.DestinationAddress
	674, // 670: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs.destination_if:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs.DestinationIf
	221, // 671: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.state:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.State
	222, // 672: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.Mode
	223, // 673: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ignore_loopback_request:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.IgnoreLoopbackRequest
	224, // 674: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.trigger_if_down:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.TriggerIfDown
	676, // 675: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.error_frame:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame
	677, // 676: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.error_frame_second:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond
	678, // 677: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.error_code:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode
	679, // 678: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.error_frame_period:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod
	225, // 679: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.notification:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.Notification
	226, // 680: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.period_unit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.PeriodUnit
	227, // 681: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond.notification:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond.Notification
	228, // 682: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode.notification:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode.Notification
	229, // 683: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod.notification:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod.Notification
	681, // 684: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.protocol_action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction
	230, // 685: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.protocol_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.ProtocolType
	231, // 686: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.Action
	232, // 687: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Evpn.ProtocolActions.ProtocolAction.Mode
	683, // 688: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables.flow_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables.FlowEnable
	239, // 689: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables.FlowEnable.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowRecognition.FlowEnables.FlowEnable.Direction
	687, // 690: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables.disable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables.Disable
	240, // 691: huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables.Disable.flow_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.FlowspecForward.Disables.Disable.FlowType
	689, // 692: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping.NumberLimits.number_limit:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IgmpSnooping.NumberLimits.NumberLimit
	241, // 693: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction.protocol_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction.ProtocolType
	242, // 694: huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction.action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.ProtocolActions.ProtocolAction.Action
	243, // 695: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.admin_status:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.AdminStatus
	692, // 696: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.tlv_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.TlvEnable
	693, // 697: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.neighbors:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors
	694, // 698: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.neighbor:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor
	244, // 699: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.chassis_id_sub_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ChassisIdSubType
	245, // 700: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.port_id_sub_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.PortIdSubType
	246, // 701: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.auto_negotiation_supported:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationSupported
	247, // 702: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.auto_negotiation_enabled:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationEnabled
	248, // 703: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.oper_mau_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.OperMauType
	249, // 704: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.link_aggregation_supported:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationSupported
	250, // 705: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.link_aggregation_enabled:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationEnabled
	695, // 706: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.management_addresss:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss
	696, // 707: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.protocol_vlans:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans
	697, // 708: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.vlan_names:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames
	698, // 709: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.unknown_tlvs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs
	699, // 710: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.unknown_organizationally_defined_tlvs:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs
	700, // 711: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ddp_tlv:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.DdpTlv
	701, // 712: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.identity_tlv:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.IdentityTlv
	702, // 713: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.management_address:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress
	703, // 714: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.protocol_vlan:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan
	704, // 715: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames.vlan_name:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames.VlanName
	705, // 716: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs.unknown_tlv:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs.UnknownTlv
	706, // 717: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs.unknown_organizationally_defined_tlv:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs.UnknownOrganizationallyDefinedTlv
	251, // 718: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.Type
	252, // 719: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.if_sub_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.IfSubType
	253, // 720: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.supported:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Supported
	254, // 721: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.enabled:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Enabled
	255, // 722: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.LoopDetect.block_time_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Loopdetect.LoopDetect.BlockTimeType
	720, // 723: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks.ckn_cak:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks.CknCak
	721, // 724: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ConfidentialityOffsets.confidentiality_offset:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ConfidentialityOffsets.ConfidentialityOffset
	722, // 725: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ReplayWindows.replay_window:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.ReplayWindows.ReplayWindow
	723, // 726: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.KeyserverPrioritys.keyserver_priority:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.KeyserverPrioritys.KeyserverPriority
	724, // 727: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.SakLifeTimes.sak_life_time:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.SakLifeTimes.SakLifeTime
	725, // 728: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes.encrypt_mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes.EncryptMode
	726, // 729: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites.cipher_algorithm_suite:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites.CipherAlgorithmSuite
	727, // 730: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears.vlan_in_clear:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears.VlanInClear
	256, // 731: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks.CknCak.cak_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CknCaks.CknCak.CakType
	257, // 732: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes.EncryptMode.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.EncryptModes.EncryptMode.Mode
	258, // 733: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites.CipherAlgorithmSuite.suite:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.CipherAlgorithmSuites.CipherAlgorithmSuite.Suite
	259, // 734: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears.VlanInClear.clear_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Macsec.VlanInClears.VlanInClear.ClearType
	738, // 735: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors.port_mirror:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors.PortMirror
	739, // 736: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments.port_fragment:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments.PortFragment
	740, // 737: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds.integrated:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds.Integrated
	741, // 738: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors.bas_port_mirror:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors.BasPortMirror
	264, // 739: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.without_filter:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.WithoutFilter
	265, // 740: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.pop_label:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.PopLabel
	266, // 741: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.with_linklayer_header:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortObserve.WithLinklayerHeader
	260, // 742: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors.PortMirror.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortMirrors.PortMirror.Direction
	261, // 743: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments.PortFragment.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.PortFragments.PortFragment.Direction
	262, // 744: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds.Integrated.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.Integrateds.Integrated.Direction
	263, // 745: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors.BasPortMirror.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Mirror.BasPortMirrors.BasPortMirror.Direction
	745, // 746: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.sampler_enable:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable
	746, // 747: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.sampler_rate:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate
	273, // 748: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable.flow_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable.FlowType
	274, // 749: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerEnables.SamplerEnable.Direction
	275, // 750: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate.flow_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate.FlowType
	276, // 751: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Netstream.SamplerRates.SamplerRate.Direction
	277, // 752: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.mode:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Mode
	278, // 753: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.direction:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Direction
	748, // 754: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.collections:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections
	749, // 755: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections.collection:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections.Collection
	279, // 756: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.action:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.Action
	280, // 757: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.icmp_name:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.IcmpName
	281, // 758: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.switch_operation:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.SwitchOperation
	282, // 759: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.option_type:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.OptionType
	283, // 760: huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.switch:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.Switch
	755, // 761: huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins.track_admin:type_name -> huaweiV8R12_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins.TrackAdmin
	284, // 762: huaweiV8R12_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.error_down_type:type_name -> huaweiV8R12_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.ErrorDownType
	285, // 763: huaweiV8R12_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange.type:type_name -> huaweiV8R12_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange.Type
	765, // 764: huaweiV8R12_ifm.Ifm.RemoteInterfaces.RemoteInterface.remote_statistics_state:type_name -> huaweiV8R12_ifm.Ifm.RemoteInterfaces.RemoteInterface.RemoteStatisticsState
	765, // [765:765] is the sub-list for method output_type
	765, // [765:765] is the sub-list for method input_type
	765, // [765:765] is the sub-list for extension type_name
	765, // [765:765] is the sub-list for extension extendee
	0,   // [0:765] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_ifm_proto_init() }
func file_huaweiV8R12_ifm_proto_init() {
	if File_huaweiV8R12_ifm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_ifm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Damp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_AutoRecoveryTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_StaticDimensionRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Ipv4InterfaceCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_RemoteInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_HdlcDamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_Ipv4ConflictEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_Ipv6ConflictEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_FimIfmGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_FimTrunkLocalfwd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_VeGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_VeGroups_VeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MibStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_CommonStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ControlFlap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TrapThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DampState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ErrorDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_BdifAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_VlanifAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpStatusDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpPortSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_BfdExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpSending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_NdSending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bras); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PppoeBindVt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PppoeVt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TcpMssValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4Urpf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6Urpf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_RoamDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_VinterLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClocksyncFlexe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_GpsPortSrcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClockPortSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpaPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dcn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpClientIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Evpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Fim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FimIfmMru); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FimTcpMss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FimIfmBdifint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FimIfmVeint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_VeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MruDiscardStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MacmtuDiscardStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowRecognition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowspecForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_If8021PPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ManagementPlaneDefendIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IgmpSnooping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_HwmcIfEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ProtocolActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_VllPwLoopCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_EncapsulationVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Loadbalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Loopdetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TrackMonitorGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Deephashcfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfPoisonReverse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfP2MpLoadBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_BgpLocalifnetTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MulticastForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Netstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIcmpSecuritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIpOptSecuritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IpVerifySrcAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IpFwdBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Rbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnicastForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnknowUnicastThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MibStatistics_EthPortErrSts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_StaticArps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Rgm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Gateways); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Cgas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Pp6Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Forwardings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_FimIfmtrunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Lacp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_FimIfmtrunkMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Lacp_MLag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_MstpAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_FimMain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_MstpAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_BpduTunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanIsolateAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_ProtocolActions_ProtocolAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_ModeChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FimL2Sub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Trusts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ProfileApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserQueueApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SetQueueStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_LinkAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_QosQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortShapings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PerHopBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Cars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ConvergentPrecedence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DropEligibleIndicatorVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DropEligibleIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_TrustUntagIpPrecedence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ShareShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_LoopMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ResourcePools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_MplsL2Vc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_QosLr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_LdpTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_BufferPolicyMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_HardPipeApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ChannelAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultServiceClassRemote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_TrustRemotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_WfqShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DeficitUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultUserQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_VniCfgPeers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_QosVllPipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_LocalIdEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Qppb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Trusts_Trust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_TrafficPolicyApplys_TrafficPolicyApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ProfileApplys_ProfileApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserQueueApplys_UserQueueApply_UserQueueApplysStats_UserQueueApplysStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueues_PortQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueStates_PortQueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueTemplateApplys_PortQueueTemplateApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueAlarms_PortQueueAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueAlarmStates_PortQueueAlarmState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortQueueDiscardAlarms_PortQueueDiscardAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SetQueueStats_SetQueueStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_QosQueues_QosQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_QueueTemplateApplys_QueueTemplateApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SoftPipeAlarms_SoftPipeAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_FlowQueueTemplateApplys_FlowQueueTemplateApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ServiceTemplateApplys_ServiceTemplateApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultServiceClasss_DefaultServiceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultUserGroupQueues_DefaultUserGroupQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_DefaultSubPortQueues_DefaultSubPortQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PortShapings_PortShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorDisables_PerHopBehaviorDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnables_PerHopBehaviorEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_PerHopBehaviorEnableVlans_PerHopBehaviorEnableVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Cars_Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_TrustIpPrecedences_TrustIpPrecedence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SubPortQueueApplys_SubPortQueueApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserVlanUserGroupQueueApplys_UserVlanUserGroupQueueApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_BrasMemberLinkSchedulers_BrasMemberLinkScheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ScheduleTreeDistributeModes_ScheduleTreeDistributeMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ResourcePools_ResourcePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserGroupQueueApplys_UserGroupQueueApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_MemberLinkSchedulers_MemberLinkScheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_UserVlanProfileApplys_UserVlanProfileApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_AllServiceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_ServiceTemplateShaping_SpecificServiceClasss_SpecificServiceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_TrustRemotes_TrustRemote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_SourceBoardScheduleWeights_SourceBoardScheduleWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_VniCfgPeers_VniCfgPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Qppb_Policys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Qppb_IpPrecedence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Qos_Qppb_Policys_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nve_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nve_Pip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_EapAuthenticationDomainIndividual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_BasInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_PppoeBasStatics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_PppBasStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_BasInterface_Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_BasInterface_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_BasInterface_AccessUsers_AccessUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bras_LoadBalanceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bras_Multicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bras_BrasUserManage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bras_Multicast_BandwidthLimitPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bras_BrasUserManage_PortAccessLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPortAdvance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPeerClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpAsymmetryCorrection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpTcocStaticClockSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpRingFiberLengthChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktMacPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpPortSrcs_PtpPktPack_PtpPktUdpPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClocksyncFlexe_PhyPorts_PhyPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSfpWorkStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GnssModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsSyncParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_GpsPortSrcs_GpsPortSrc_GpsBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClockPortSources_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClockPortSources_Source_Priority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClockPortSources_Source_SsmClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ClockPortSources_Source_ClockId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_PtpaPorts_PtpaPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ArpSafeguards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_HostCarQinqHashs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_Ipv4Urpf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_Ipv6Urpf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ArpVlanCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ArpCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ArpFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_MacFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_NdVlanCars_NdVlanCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_ProtocolPortCar_RateLimits_RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Enhance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_General); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_Dot1QTerminations_Dot1QTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Igmp_QinqTerminations_QinqTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_General); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_Dot1QTerminations_Dot1QTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_CpRateLimit_Ports_QinqTerminations_QinqTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Cpudefend_MacFilter_MacAddresss_MacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dcn_Dcnv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dcn_TcDcn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Evpn_ProtocolActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Evpn_ProtocolActions_ProtocolAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowRecognition_FlowEnables_FlowEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowspecForward_Refluence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowspecForward_TunnelPop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowspecForward_Disables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FlowspecForward_Disables_Disable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IgmpSnooping_NumberLimits_NumberLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ProtocolActions_ProtocolAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Loadbalance_Ucmp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Loadbalance_Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Loopdetect_MacWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Loopdetect_LoopbackDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Loopdetect_LoopDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_CknCaks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_ReplayWindows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_SakLifeTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_EncryptModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_VlanInClears); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_CknCaks_CknCak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_ConfidentialityOffsets_ConfidentialityOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_ReplayWindows_ReplayWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_KeyserverPrioritys_KeyserverPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_SakLifeTimes_SakLifeTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_EncryptModes_EncryptMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_CipherAlgorithmSuites_CipherAlgorithmSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Macsec_VlanInClears_VlanInClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortMirrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortMirrorSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_WithoutHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortMirrorCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortMirrorTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortFragments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_Integrateds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_BasPortMirrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_EvcL2PortMirrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortObserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortMirrors_PortMirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_PortFragments_PortFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_Integrateds_Integrated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Mirror_BasPortMirrors_BasPortMirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MulticastForward_Shaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Netstream_SamplerEnables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Netstream_SamplerRates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Netstream_SamplerEnables_SamplerEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Netstream_SamplerRates_SamplerRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Rbs_BindRbp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_BackupGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnicastForward_PoisonReverse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnicastForward_Ipv6Redirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnicastForward_Ipv6NaAntiAttack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnicastForward_IpPrioritySelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_UnicastForward_MacChangeNotifyNdDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_AutoRecoveryTimes_AutoRecoveryTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_StaticDimensionRanges_StaticDimensionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_RemoteInterfaces_RemoteInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_ifm_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_ifm_proto_rawDesc,
			NumEnums:      287,
			NumMessages:   479,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_ifm_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_ifm_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_ifm_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_ifm_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_ifm_proto = out.File
	file_huaweiV8R12_ifm_proto_rawDesc = nil
	file_huaweiV8R12_ifm_proto_goTypes = nil
	file_huaweiV8R12_ifm_proto_depIdxs = nil
}
