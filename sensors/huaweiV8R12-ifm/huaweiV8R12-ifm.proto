// ---------------------------------------------------------------------------
// Protofilename : huawei-ifm.proto
syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-ifm
// revision 2020-06-10
// revision 2020-02-15
// revision 2020-01-20
// revision 2020-01-15
// revision 2020-01-10
// revision 2019-09-29
// revision 2019-08-22
// revision 2019-04-15
// revision 2019-04-10
// namespace urn:huawei:yang:huawei-ifm

option go_package = ".;huaweiV8R12_ifm";
package huaweiV8R12_ifm;

message Ifm {
   message Global {
      uint32 statistic_interval = 1 [json_name = "statistic-interval"];
      bool ipv4_ignore_primary_sub = 2 [json_name = "ipv4-ignore-primary-sub"];
      bool sub_interface_link_trap_enable = 3 [json_name = "sub-interface-link-trap-enable"];
      message Ipv4ConflictEnable {
         bool preempt_enable = 1 [json_name = "preempt-enable"];
      }
      Ipv4ConflictEnable ipv4_conflict_enable = 4 [json_name = "ipv4-conflict-enable"];
      message Ipv6ConflictEnable {
         bool preempt_enable = 1 [json_name = "preempt-enable"];
      }
      Ipv6ConflictEnable ipv6_conflict_enable = 5 [json_name = "ipv6-conflict-enable"];
      message FimIfmGlobal {
         enum GlobalStrictFilter {
            GlobalStrictFilter_DISABLE = 0;
            GlobalStrictFilter_ENABLE = 1;
         };
         GlobalStrictFilter global_strict_filter = 1 [json_name = "global-strict-filter"];
         enum DualStatEnable {
            DualStatEnable_DISABLE = 0;
            DualStatEnable_ENABLE = 1;
         };
         DualStatEnable dual_stat_enable = 2 [json_name = "dual-stat-enable"];
         uint32 trunk_delaysend_time = 3 [json_name = "trunk-delaysend-time"];
         enum TrunkAdjustEnable {
            TrunkAdjustEnable_DISABLE = 0;
            TrunkAdjustEnable_ENABLE = 1;
         };
         TrunkAdjustEnable trunk_adjust_enable = 4 [json_name = "trunk-adjust-enable"];
         enum QinqTransportEnable {
            QinqTransportEnable_DISABLE = 0;
            QinqTransportEnable_ENABLE = 1;
         };
         QinqTransportEnable qinq_transport_enable = 5 [json_name = "qinq-transport-enable"];
      }
      FimIfmGlobal fim_ifm_global = 6 [json_name = "fim-ifm-global"];
      message FimTrunkLocalfwd {
         enum Enable {
            Enable_DISABLE = 0;
            Enable_ENABLE = 1;
         };
         Enable enable = 1 [json_name = "enable"];
      }
      FimTrunkLocalfwd fim_trunk_localfwd = 7 [json_name = "fim-trunk-localfwd"];
      message VeGroups {
         message VeGroup {
            uint32 ve_group_id = 1 [json_name = "ve-group-id"];
            string slot_id = 2 [json_name = "slot-id"];
            string l2_ve_ifname = 3 [json_name = "l2-ve-ifname"];
            string l3_ve_ifname = 4 [json_name = "l3-ve-ifname"];
         }
         repeated VeGroup ve_group = 1 [json_name = "ve-group"];
      }
      VeGroups ve_groups = 8 [json_name = "ve-groups"];
   }
   Global global = 1 [json_name = "global"];
   message Interfaces {
      message Interface {
         string name = 1 [json_name = "name"];
         uint32 index = 2 [json_name = "index"];
         enum Class {
            Class_MAINX_INTERFACE = 0;
            Class_SUBX_INTERFACE = 1;
         };
         Class class = 3 [json_name = "class"];
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPGE = 114;
            Type_VIRTUALX_IF = 116;
         };
         Type type = 4 [json_name = "type"];
         string position = 5 [json_name = "position"];
         string parent_name = 6 [json_name = "parent-name"];
         string number = 7 [json_name = "number"];
         string description = 8 [json_name = "description"];
         string aggregation_name = 9 [json_name = "aggregation-name"];
         bool is_l2_switch = 10 [json_name = "is-l2-switch"];
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_UP = 1;
         };
         AdminStatus admin_status = 11 [json_name = "admin-status"];
         enum LinkProtocol {
            LinkProtocol_ETHERNET = 0;
            LinkProtocol_PPP = 1;
            LinkProtocol_HDLC = 2;
            LinkProtocol_FR = 3;
            LinkProtocol_ATM = 6;
            LinkProtocol_TDM = 7;
         };
         LinkProtocol link_protocol = 12 [json_name = "link-protocol"];
         enum RouterType {
            RouterType_PTOP = 0;
            RouterType_PTOMP = 1;
            RouterType_BROADCAST = 2;
            RouterType_NBMA = 3;
            RouterType_INVALID = 255;
         };
         RouterType router_type = 13 [json_name = "router-type"];
         bool clear_ip_df = 14 [json_name = "clear-ip-df"];
         bool link_up_down_trap_enable = 15 [json_name = "link-up-down-trap-enable"];
         bool statistic_enable = 16 [json_name = "statistic-enable"];
         enum StatisticMode {
            INVALID_ENUM_VALUE_StatisticMode = 0;
            StatisticMode_INTERFACEX_BASED = 1;
            StatisticMode_VLANX_GROUPX_BASED = 2;
         };
         StatisticMode statistic_mode = 17 [json_name = "statistic-mode"];
         uint32 bandwidth = 18 [json_name = "bandwidth"];
         uint32 mtu = 19 [json_name = "mtu"];
         bool spread_mtu_flag = 20 [json_name = "spread-mtu-flag"];
         uint32 statistic_interval = 21 [json_name = "statistic-interval"];
         string vrf_name = 22 [json_name = "vrf-name"];
         bool l2_mode_enable = 23 [json_name = "l2-mode-enable"];
         uint32 down_delay_time = 24 [json_name = "down-delay-time"];
         string mac_address = 25 [json_name = "mac-address"];
         message Dynamic {
            enum OperStatus {
               OperStatus_DOWN = 0;
               OperStatus_UP = 1;
            };
            OperStatus oper_status = 1 [json_name = "oper-status"];
            enum PhysicalStatus {
               PhysicalStatus_DOWN = 0;
               PhysicalStatus_UP = 1;
            };
            PhysicalStatus physical_status = 2 [json_name = "physical-status"];
            enum LinkStatus {
               LinkStatus_DOWN = 0;
               LinkStatus_UP = 1;
            };
            LinkStatus link_status = 3 [json_name = "link-status"];
            uint32 mtu = 4 [json_name = "mtu"];
            uint64 bandwidth = 5 [json_name = "bandwidth"];
            enum Ipv4Status {
               Ipv4Status_DOWN = 0;
               Ipv4Status_UP = 1;
            };
            Ipv4Status ipv4_status = 6 [json_name = "ipv4-status"];
            enum Ipv6Status {
               Ipv6Status_DOWN = 0;
               Ipv6Status_UP = 1;
            };
            Ipv6Status ipv6_status = 7 [json_name = "ipv6-status"];
            bool is_control_flap_damp = 8 [json_name = "is-control-flap-damp"];
            string mac_address = 9 [json_name = "mac-address"];
            string line_protocol_up_time = 10 [json_name = "line-protocol-up-time"];
            bool is_offline = 11 [json_name = "is-offline"];
            enum LinkQualityGrade {
               LinkQualityGrade_GOOD = 0;
               LinkQualityGrade_HIGH = 1;
               LinkQualityGrade_MIDDLE = 2;
               LinkQualityGrade_LOW = 4;
            };
            LinkQualityGrade link_quality_grade = 12 [json_name = "link-quality-grade"];
            uint32 sub_if_counts = 13 [json_name = "sub-if-counts"];
         }
         Dynamic dynamic = 26 [json_name = "dynamic"];
         message MibStatistics {
            uint64 receive_byte = 1 [json_name = "receive-byte"];
            uint64 send_byte = 2 [json_name = "send-byte"];
            uint64 receive_packet = 3 [json_name = "receive-packet"];
            uint64 send_packet = 4 [json_name = "send-packet"];
            uint64 receive_unicast_packet = 5 [json_name = "receive-unicast-packet"];
            uint64 receive_multicast_packet = 6 [json_name = "receive-multicast-packet"];
            uint64 receive_broad_packet = 7 [json_name = "receive-broad-packet"];
            uint64 send_unicast_packet = 8 [json_name = "send-unicast-packet"];
            uint64 send_multicast_packet = 9 [json_name = "send-multicast-packet"];
            uint64 send_broad_packet = 10 [json_name = "send-broad-packet"];
            uint64 receive_error_packet = 11 [json_name = "receive-error-packet"];
            uint64 receive_drop_packet = 12 [json_name = "receive-drop-packet"];
            uint64 send_error_packet = 13 [json_name = "send-error-packet"];
            uint64 send_drop_packet = 14 [json_name = "send-drop-packet"];
            message EthPortErrSts {
               uint64 rx_pause = 1 [json_name = "rx-pause"];
               uint64 rx_jumbo_octets = 2 [json_name = "rx-jumbo-octets"];
               uint64 rx_crc = 3 [json_name = "rx-crc"];
               uint64 rx_symbol = 4 [json_name = "rx-symbol"];
               uint64 rx_over_run = 5 [json_name = "rx-over-run"];
               uint64 rx_inrange_len = 6 [json_name = "rx-inrange-len"];
               uint64 rx_long = 7 [json_name = "rx-long"];
               uint64 rx_jabber = 8 [json_name = "rx-jabber"];
               uint64 rx_alignment = 9 [json_name = "rx-alignment"];
               uint64 rx_fragment = 10 [json_name = "rx-fragment"];
               uint64 rx_undersize = 11 [json_name = "rx-undersize"];
               uint64 tx_pause = 12 [json_name = "tx-pause"];
               uint64 tx_jumbo_octets = 13 [json_name = "tx-jumbo-octets"];
               uint64 tx_over_run = 14 [json_name = "tx-over-run"];
               uint64 tx_under_run = 15 [json_name = "tx-under-run"];
               uint64 tx_system = 16 [json_name = "tx-system"];
               uint64 tx_lost = 17 [json_name = "tx-lost"];
            }
            EthPortErrSts eth_port_err_sts = 15 [json_name = "eth-port-err-sts"];
         }
         MibStatistics mib_statistics = 27 [json_name = "mib-statistics"];
         message CommonStatistics {
            uint32 stati_interval = 1 [json_name = "stati-interval"];
            uint64 in_byte_rate = 2 [json_name = "in-byte-rate"];
            uint64 in_bit_rate = 3 [json_name = "in-bit-rate"];
            uint64 in_packet_rate = 4 [json_name = "in-packet-rate"];
            string in_use_rate = 5 [json_name = "in-use-rate"];
            uint64 out_byte_rate = 6 [json_name = "out-byte-rate"];
            uint64 out_bit_rate = 7 [json_name = "out-bit-rate"];
            uint64 out_packet_rate = 8 [json_name = "out-packet-rate"];
            string out_use_rate = 9 [json_name = "out-use-rate"];
            uint64 receive_byte = 10 [json_name = "receive-byte"];
            uint64 send_byte = 11 [json_name = "send-byte"];
            uint64 receive_packet = 12 [json_name = "receive-packet"];
            uint64 send_packet = 13 [json_name = "send-packet"];
            uint64 receive_unicast_packet = 14 [json_name = "receive-unicast-packet"];
            uint64 receive_multicast_packet = 15 [json_name = "receive-multicast-packet"];
            uint64 receive_broad_packet = 16 [json_name = "receive-broad-packet"];
            uint64 send_unicast_packet = 17 [json_name = "send-unicast-packet"];
            uint64 send_multicast_packet = 18 [json_name = "send-multicast-packet"];
            uint64 send_broad_packet = 19 [json_name = "send-broad-packet"];
            uint64 receive_error_packet = 20 [json_name = "receive-error-packet"];
            uint64 receive_drop_packet = 21 [json_name = "receive-drop-packet"];
            uint64 send_error_packet = 22 [json_name = "send-error-packet"];
            uint64 send_drop_packet = 23 [json_name = "send-drop-packet"];
            uint64 send_unicast_bit = 24 [json_name = "send-unicast-bit"];
            uint64 receive_unicast_bit = 25 [json_name = "receive-unicast-bit"];
            uint64 send_multicast_bit = 26 [json_name = "send-multicast-bit"];
            uint64 receive_multicast_bit = 27 [json_name = "receive-multicast-bit"];
            uint64 send_broad_bit = 28 [json_name = "send-broad-bit"];
            uint64 receive_broad_bit = 29 [json_name = "receive-broad-bit"];
            uint64 send_unicast_bit_rate = 30 [json_name = "send-unicast-bit-rate"];
            uint64 receive_unicast_bit_rate = 31 [json_name = "receive-unicast-bit-rate"];
            uint64 send_multicast_bit_rate = 32 [json_name = "send-multicast-bit-rate"];
            uint64 receive_multicast_bit_rate = 33 [json_name = "receive-multicast-bit-rate"];
            uint64 send_broad_bit_rate = 34 [json_name = "send-broad-bit-rate"];
            uint64 receive_broad_bit_rate = 35 [json_name = "receive-broad-bit-rate"];
            uint64 send_unicast_packet_rate = 36 [json_name = "send-unicast-packet-rate"];
            uint64 receive_unicast_packet_rate = 37 [json_name = "receive-unicast-packet-rate"];
            uint64 send_multicast_packet_rate = 38 [json_name = "send-multicast-packet-rate"];
            uint64 receive_multicast_packet_rate = 39 [json_name = "receive-multicast-packet-rate"];
            uint64 send_broadcast_packet_rate = 40 [json_name = "send-broadcast-packet-rate"];
            uint64 receive_broadcast_packet_rate = 41 [json_name = "receive-broadcast-packet-rate"];
         }
         CommonStatistics common_statistics = 28 [json_name = "common-statistics"];
         string vs_name = 29 [json_name = "vs-name"];
         uint32 l2_switch_port_index = 30 [json_name = "l2-switch-port-index"];
         enum ServiceType {
            ServiceType_NONE = 0;
            ServiceType_TRUNKX_MEMBER = 2;
            ServiceType_STACKX_MEMBER = 6;
            ServiceType_MPX_MEMBER = 7;
            ServiceType_VBRIDGEX_MEMBER = 8;
            ServiceType_IMAX_MEMBER = 9;
            ServiceType_BUNDLEX_MEMBER = 10;
            ServiceType_FABRICX_MEMBER = 11;
            ServiceType_LAGX_MASTERX_MEMBER = 12;
            ServiceType_LAGX_SLAVEX_MEMBER = 13;
            ServiceType_CPOSX_TRUNKX_MEMBER = 15;
            ServiceType_POSX_TRUNKX_MEMBER = 16;
            ServiceType_GLOBALX_MPX_MEMBER = 17;
            ServiceType_GLOBALX_IMAX_MEMBER = 18;
         };
         ServiceType service_type = 31 [json_name = "service-type"];
         enum EncapsulationType {
            EncapsulationType_VLANX_TYPE = 0;
            EncapsulationType_DOT1Q = 1;
            EncapsulationType_QINQ = 2;
            EncapsulationType_P2P = 3;
            EncapsulationType_P2MP = 4;
            EncapsulationType_L2VE = 5;
            EncapsulationType_L3VE = 6;
            EncapsulationType_VLANX_TYPEX_POLICY = 7;
            EncapsulationType_DOT1QX_POLICY = 8;
            EncapsulationType_STACKINGX_POLICY = 9;
            EncapsulationType_UNTAGX_POLICY = 10;
            EncapsulationType_QINQX_MAPPING = 11;
            EncapsulationType_L2VC = 12;
            EncapsulationType_L3VC = 13;
            EncapsulationType_EVCX_UNTAG = 14;
            EncapsulationType_EVCX_DOT1Q = 15;
            EncapsulationType_EVCX_QINQ = 16;
            EncapsulationType_EVCX_DEFAULT = 17;
            EncapsulationType_EVCX_DOT1QX_POLICY = 18;
            EncapsulationType_IETF = 19;
            EncapsulationType_NONSTANDARD = 20;
            EncapsulationType_USERX_VLAN = 21;
            EncapsulationType_USERX_VLANX_ANYOTHER = 22;
            EncapsulationType_QINX_LINK = 23;
            EncapsulationType_SOFTX_GREX_VE = 24;
            EncapsulationType_L3VEX_TER = 25;
            EncapsulationType_L3VEX_ACC = 26;
            EncapsulationType_INVALID = 255;
         };
         EncapsulationType encapsulation_type = 32 [json_name = "encapsulation-type"];
         enum NetworkLayerStatus {
            NetworkLayerStatus_IPV4X_IPV6X_UP = 0;
            NetworkLayerStatus_IPV4X_IPV6X_DOWN = 196608;
         };
         NetworkLayerStatus network_layer_status = 33 [json_name = "network-layer-status"];
         uint32 protocol_up_delay_time = 34 [json_name = "protocol-up-delay-time"];
         message ControlFlap {
            uint32 suppress = 1 [json_name = "suppress"];
            uint32 reuse = 2 [json_name = "reuse"];
            uint32 ceiling = 3 [json_name = "ceiling"];
            uint32 decay_ok = 4 [json_name = "decay-ok"];
            uint32 decay_ng = 5 [json_name = "decay-ng"];
            uint32 control_flap_count = 6 [json_name = "control-flap-count"];
         }
         ControlFlap control_flap = 35 [json_name = "control-flap"];
         message TrapThreshold {
            uint32 input_rising_rate = 1 [json_name = "input-rising-rate"];
            uint32 input_resume_rate = 2 [json_name = "input-resume-rate"];
            uint32 output_rising_rate = 3 [json_name = "output-rising-rate"];
            uint32 output_resume_rate = 4 [json_name = "output-resume-rate"];
         }
         TrapThreshold trap_threshold = 36 [json_name = "trap-threshold"];
         message DampState {
            enum SuppressStatus {
               SuppressStatus_SUPPRESSED = 0;
               SuppressStatus_UNSUPPRESSED = 1;
            };
            SuppressStatus suppress_status = 1 [json_name = "suppress-status"];
            uint32 suppress = 2 [json_name = "suppress"];
            uint32 reuse = 3 [json_name = "reuse"];
            uint32 max_suppress_time = 4 [json_name = "max-suppress-time"];
            uint32 half_life_period = 5 [json_name = "half-life-period"];
            uint32 damp_reuse_time = 6 [json_name = "damp-reuse-time"];
            uint32 current_penalty = 7 [json_name = "current-penalty"];
            uint32 max_penalty = 8 [json_name = "max-penalty"];
         }
         DampState damp_state = 37 [json_name = "damp-state"];
         message ErrorDown {
            enum Cause {
               Cause_BPDUX_PROTECTION = 0;
               Cause_AUTOX_DEFEND = 1;
               Cause_MONITORX_LINK = 2;
               Cause_PORTSECX_REACHEDX_LIMIT = 65;
               Cause_STORMX_CONTROL = 66;
               Cause_LOOPBACKX_DETECT = 67;
               Cause_DUALX_ACTIVE = 68;
               Cause_MACX_ADDRESSX_FLAPPING = 69;
               Cause_NOX_STACKX_LINK = 70;
               Cause_CRCX_STATISTICS = 71;
               Cause_TRANSCEIVERX_POWERX_LOW = 72;
               Cause_LINKX_FLAP = 73;
               Cause_L2X_LOOPX_OCCURED = 74;
               Cause_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
               Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
               Cause_RESOURCEX_MISMATCH = 77;
               Cause_LEAFX_MSTP = 78;
               Cause_MX_LAG = 79;
               Cause_FABRICX_UPLINKX_THRESHOLD = 80;
               Cause_STACKX_CONFIGX_CONFLICT = 81;
               Cause_SPINEX_TYPEX_UNSUPPORTED = 82;
               Cause_STACKX_PACKETX_DEFENSIVE = 83;
               Cause_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
               Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
               Cause_FABRICX_LINKX_FAILURE = 87;
               Cause_MX_LAGX_CONSISTENCYX_CHECK = 88;
               Cause_PFCX_DEADLOCK = 89;
            };
            Cause cause = 1 [json_name = "cause"];
            uint32 recovery_time = 2 [json_name = "recovery-time"];
            uint32 remainder_time = 3 [json_name = "remainder-time"];
         }
         ErrorDown error_down = 38 [json_name = "error-down"];
         message TunnelProtocol {
         }
         TunnelProtocol tunnel_protocol = 39 [json_name = "tunnel-protocol"];
         message BdifAttribute {
            uint32 damping_time = 1 [json_name = "damping-time"];
         }
         BdifAttribute bdif_attribute = 40 [json_name = "bdif-attribute"];
         message Ipv4 {
            message State {
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     string mask = 2 [json_name = "mask"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_MAIN = 1;
                        Type_UNNUMBER = 2;
                        Type_NEG = 4;
                        Type_SUB = 32;
                        Type_DHCP = 256;
                     };
                     Type type = 3 [json_name = "type"];
                     bool is_block = 4 [json_name = "is-block"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 1 [json_name = "addresses"];
               message Gateways {
                  message Gateway {
                     string gateway = 1 [json_name = "gateway"];
                  }
                  repeated Gateway gateway = 1 [json_name = "gateway"];
               }
               Gateways gateways = 2 [json_name = "gateways"];
               message Statistics {
                  uint64 in_receives = 1 [json_name = "in-receives"];
                  uint64 in_octets = 2 [json_name = "in-octets"];
                  uint64 in_rate_pkts = 3 [json_name = "in-rate-pkts"];
                  uint64 in_rate_bits = 4 [json_name = "in-rate-bits"];
                  string in_rate_byte_bandwidth_usage = 5 [json_name = "in-rate-byte-bandwidth-usage"];
                  uint64 in_ucast_pkts = 6 [json_name = "in-ucast-pkts"];
                  uint64 in_ucast_octets = 7 [json_name = "in-ucast-octets"];
                  uint64 in_mcast_pkts = 8 [json_name = "in-mcast-pkts"];
                  uint64 in_mcast_octets = 9 [json_name = "in-mcast-octets"];
                  uint64 in_bcast_pkts = 10 [json_name = "in-bcast-pkts"];
                  uint64 in_bcast_octets = 11 [json_name = "in-bcast-octets"];
                  uint64 out_ucast_pkts = 12 [json_name = "out-ucast-pkts"];
                  uint64 out_ucast_octets = 13 [json_name = "out-ucast-octets"];
                  uint64 out_mcast_pkts = 14 [json_name = "out-mcast-pkts"];
                  uint64 out_mcast_octets = 15 [json_name = "out-mcast-octets"];
                  uint64 out_bcast_pkts = 16 [json_name = "out-bcast-pkts"];
                  uint64 out_bcast_octets = 17 [json_name = "out-bcast-octets"];
                  uint64 out_rate_pkts = 18 [json_name = "out-rate-pkts"];
                  uint64 out_rate_bits = 19 [json_name = "out-rate-bits"];
                  string out_rate_byte_bandwidth_usage = 20 [json_name = "out-rate-byte-bandwidth-usage"];
                  uint64 out_transmits = 21 [json_name = "out-transmits"];
                  uint64 out_octets = 22 [json_name = "out-octets"];
                  uint64 out_frag_requires = 23 [json_name = "out-frag-requires"];
                  uint32 out_frag_fails = 24 [json_name = "out-frag-fails"];
                  uint64 out_frag_oks = 25 [json_name = "out-frag-oks"];
                  uint64 out_frag_creates = 26 [json_name = "out-frag-creates"];
               }
               Statistics statistics = 3 [json_name = "statistics"];
            }
            State state = 1 [json_name = "state"];
            message StaticArps {
               message StaticArp {
                  string ip_addr = 1 [json_name = "ip-addr"];
                  string mac_addr = 2 [json_name = "mac-addr"];
                  uint32 pevid = 3 [json_name = "pevid"];
                  uint32 cevid = 4 [json_name = "cevid"];
               }
               repeated StaticArp static_arp = 1 [json_name = "static-arp"];
            }
            StaticArps static_arps = 2 [json_name = "static-arps"];
            message Vrrp {
               message Groups {
                  message Group {
                     uint32 id = 1 [json_name = "id"];
                     uint32 priority = 2 [json_name = "priority"];
                     message Preempt {
                        bool preempt_enable = 1 [json_name = "preempt-enable"];
                        uint32 delay_time = 2 [json_name = "delay-time"];
                     }
                     Preempt preempt = 3 [json_name = "preempt"];
                     uint32 adver_interval = 4 [json_name = "adver-interval"];
                     enum AuthenticationMode {
                        AuthenticationMode_NONE = 0;
                        AuthenticationMode_SIMPLE = 1;
                        AuthenticationMode_MD5 = 2;
                        AuthenticationMode_HMACX_SHA256 = 3;
                     };
                     AuthenticationMode authentication_mode = 5 [json_name = "authentication-mode"];
                     bool isplain = 6 [json_name = "isplain"];
                     string authentication_key = 7 [json_name = "authentication-key"];
                     uint32 link_bfddown_num = 8 [json_name = "link-bfddown-num"];
                     uint32 hold_multiper = 9 [json_name = "hold-multiper"];
                     bool backup_forward = 10 [json_name = "backup-forward"];
                     bool fast_resume = 11 [json_name = "fast-resume"];
                     enum V3Sendmode {
                        V3Sendmode_V3X_ONLY = 0;
                        V3Sendmode_V2V3X_BOTH = 1;
                        V3Sendmode_V2X_ONLY = 2;
                     };
                     V3Sendmode v3_sendmode = 12 [json_name = "v3-sendmode"];
                     enum Type {
                        Type_NORMAL = 0;
                        Type_ADMIN = 1;
                        Type_MEMBER = 2;
                        Type_LBRG = 3;
                        Type_LBRGX_MEM = 4;
                        Type_MEMX_LBRG = 5;
                        Type_MEMX_LBRGX_MEM = 6;
                        Type_UNICAST = 7;
                     };
                     Type type = 13 [json_name = "type"];
                     enum State {
                        State_INITIALIZE = 0;
                        State_BACKUP = 1;
                        State_MASTER = 2;
                     };
                     State state = 14 [json_name = "state"];
                     string create_time = 15 [json_name = "create-time"];
                     string last_change_time = 16 [json_name = "last-change-time"];
                     message VirtualIps {
                        message VirtualIp {
                           string address = 1 [json_name = "address"];
                        }
                        repeated VirtualIp virtual_ip = 1 [json_name = "virtual-ip"];
                     }
                     VirtualIps virtual_ips = 17 [json_name = "virtual-ips"];
                     message TrackInterfaces {
                        message TrackInterface {
                           string if_name = 1 [json_name = "if-name"];
                           uint32 priority_change = 2 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 3 [json_name = "track-mode"];
                        }
                        repeated TrackInterface track_interface = 1 [json_name = "track-interface"];
                     }
                     TrackInterfaces track_interfaces = 18 [json_name = "track-interfaces"];
                     message TrackBfds {
                        message TrackBfd {
                           string session_name = 1 [json_name = "session-name"];
                           enum SessionType {
                              SessionType_NORMAL = 0;
                              SessionType_LINK = 1;
                              SessionType_PEER = 2;
                           };
                           SessionType session_type = 2 [json_name = "session-type"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 4 [json_name = "track-mode"];
                           uint32 session_id = 5 [json_name = "session-id"];
                           enum SessionState {
                              SessionState_DOWN = 0;
                              SessionState_UP = 1;
                              SessionState_ADMINX_DOWN = 2;
                              SessionState_UNKNOW = 3;
                           };
                           SessionState session_state = 6 [json_name = "session-state"];
                        }
                        repeated TrackBfd track_bfd = 1 [json_name = "track-bfd"];
                     }
                     TrackBfds track_bfds = 19 [json_name = "track-bfds"];
                     message TrackMtgrps {
                        message TrackMtgrp {
                           string monitor_group_name = 1 [json_name = "monitor-group-name"];
                           uint32 failure_ratio = 2 [json_name = "failure-ratio"];
                           uint32 priority_change = 3 [json_name = "priority-change"];
                           enum TrackMode {
                              TrackMode_LINK = 0;
                              TrackMode_REDUCE = 1;
                           };
                           TrackMode track_mode = 4 [json_name = "track-mode"];
                        }
                        repeated TrackMtgrp track_mtgrp = 1 [json_name = "track-mtgrp"];
                     }
                     TrackMtgrps track_mtgrps = 20 [json_name = "track-mtgrps"];
                  }
                  repeated Group group = 1 [json_name = "group"];
               }
               Groups groups = 1 [json_name = "groups"];
            }
            Vrrp vrrp = 3 [json_name = "vrrp"];
            message Rgm {
            }
            Rgm rgm = 4 [json_name = "rgm"];
         }
         Ipv4 ipv4 = 41 [json_name = "ipv4"];
         message Ipv6 {
            uint32 mtu6 = 1 [json_name = "mtu6"];
            bool spread_mtu_flag = 2 [json_name = "spread-mtu-flag"];
            bool auto_link_local = 3 [json_name = "auto-link-local"];
            message NdPrefixs {
               message NdPrefix {
                  string prefix = 1 [json_name = "prefix"];
                  int32 prefix_len = 2 [json_name = "prefix-len"];
                  uint32 valid_lifetime = 3 [json_name = "valid-lifetime"];
                  uint32 preferred_lifetime = 4 [json_name = "preferred-lifetime"];
                  bool auto_flag = 5 [json_name = "auto-flag"];
                  bool on_link_flag = 6 [json_name = "on-link-flag"];
               }
               repeated NdPrefix nd_prefix = 1 [json_name = "nd-prefix"];
            }
            NdPrefixs nd_prefixs = 4 [json_name = "nd-prefixs"];
            message State {
               uint32 mtu6 = 1 [json_name = "mtu6"];
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     uint32 prefix_length = 2 [json_name = "prefix-length"];
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_AUTOX_LINKX_LOCAL = 3;
                        Type_ANYCAST = 6;
                     };
                     Type type = 3 [json_name = "type"];
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     AlgorithmType algorithm_type = 4 [json_name = "algorithm-type"];
                     uint32 collision_count = 5 [json_name = "collision-count"];
                     bool is_block = 6 [json_name = "is-block"];
                     enum Status {
                        INVALID_ENUM_VALUE_Status = 0;
                        Status_PREFERRED = 1;
                        Status_INACCESSIBLE = 4;
                        Status_UNKNOWN = 5;
                        Status_TENTATIVE = 6;
                        Status_DUPLICATE = 7;
                     };
                     Status status = 7 [json_name = "status"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 2 [json_name = "addresses"];
               message Statistics {
                  uint64 in_receives = 1 [json_name = "in-receives"];
                  uint64 in_octets = 2 [json_name = "in-octets"];
                  uint64 in_rate_pkts = 3 [json_name = "in-rate-pkts"];
                  uint64 in_rate_bits = 4 [json_name = "in-rate-bits"];
                  string in_rate_byte_bandwidth_usage = 5 [json_name = "in-rate-byte-bandwidth-usage"];
                  uint64 in_ucast_pkts = 6 [json_name = "in-ucast-pkts"];
                  uint64 in_ucast_octets = 7 [json_name = "in-ucast-octets"];
                  uint64 in_mcast_pkts = 8 [json_name = "in-mcast-pkts"];
                  uint64 in_mcast_octets = 9 [json_name = "in-mcast-octets"];
                  uint64 out_ucast_pkts = 10 [json_name = "out-ucast-pkts"];
                  uint64 out_ucast_octets = 11 [json_name = "out-ucast-octets"];
                  uint64 out_mcast_pkts = 12 [json_name = "out-mcast-pkts"];
                  uint64 out_mcast_octets = 13 [json_name = "out-mcast-octets"];
                  uint64 out_rate_pkts = 14 [json_name = "out-rate-pkts"];
                  uint64 out_rate_bits = 15 [json_name = "out-rate-bits"];
                  string out_rate_byte_bandwidth_usage = 16 [json_name = "out-rate-byte-bandwidth-usage"];
                  uint64 out_transmits = 17 [json_name = "out-transmits"];
                  uint64 out_octets = 18 [json_name = "out-octets"];
               }
               Statistics statistics = 3 [json_name = "statistics"];
            }
            State state = 5 [json_name = "state"];
            message Cgas {
               message Cga {
                  string rsakey_pair = 1 [json_name = "rsakey-pair"];
                  uint32 sec_level = 2 [json_name = "sec-level"];
                  string modifier = 3 [json_name = "modifier"];
               }
               repeated Cga cga = 1 [json_name = "cga"];
            }
            Cgas cgas = 6 [json_name = "cgas"];
            message NdCollection {
               message IfProperty {
                  uint32 retrans_timer = 1 [json_name = "retrans-timer"];
                  uint32 nud_reach_time = 2 [json_name = "nud-reach-time"];
                  uint32 attempts_value = 3 [json_name = "attempts-value"];
                  enum NsMcastFlag {
                     NsMcastFlag_OFF = 0;
                     NsMcastFlag_ON = 1;
                  };
                  NsMcastFlag ns_mcast_flag = 4 [json_name = "ns-mcast-flag"];
                  uint64 max_dyn_nb_num = 5 [json_name = "max-dyn-nb-num"];
                  uint32 dad_timeout = 6 [json_name = "dad-timeout"];
                  uint32 nud_attempts = 7 [json_name = "nud-attempts"];
                  enum NaGlean {
                     NaGlean_OFF = 0;
                     NaGlean_ON = 1;
                  };
                  NaGlean na_glean = 8 [json_name = "na-glean"];
                  enum MaFlag {
                     MaFlag_OFF = 0;
                     MaFlag_ON = 1;
                  };
                  MaFlag ma_flag = 9 [json_name = "ma-flag"];
                  enum OFlag {
                     OFlag_OFF = 0;
                     OFlag_ON = 1;
                  };
                  OFlag o_flag = 10 [json_name = "o-flag"];
                  enum RaHaltFlag {
                     RaHaltFlag_OFF = 0;
                     RaHaltFlag_ON = 1;
                  };
                  RaHaltFlag ra_halt_flag = 11 [json_name = "ra-halt-flag"];
                  uint32 max_interval = 12 [json_name = "max-interval"];
                  uint32 ra_lifetime = 13 [json_name = "ra-lifetime"];
                  enum RaPreference {
                     RaPreference_MEDIUM = 0;
                     RaPreference_HIGH = 1;
                     RaPreference_LOW = 3;
                  };
                  RaPreference ra_preference = 14 [json_name = "ra-preference"];
                  enum RaPrefixFlag {
                     RaPrefixFlag_OFF = 0;
                     RaPrefixFlag_ON = 1;
                  };
                  RaPrefixFlag ra_prefix_flag = 15 [json_name = "ra-prefix-flag"];
                  enum RaMtuFlag {
                     RaMtuFlag_OFF = 0;
                     RaMtuFlag_ON = 1;
                  };
                  RaMtuFlag ra_mtu_flag = 16 [json_name = "ra-mtu-flag"];
                  bool strict_flag = 17 [json_name = "strict-flag"];
                  uint32 ts_fuzz_factor = 18 [json_name = "ts-fuzz-factor"];
                  uint32 ts_clock_drift = 19 [json_name = "ts-clock-drift"];
                  uint32 ts_delta = 20 [json_name = "ts-delta"];
                  uint32 rsa_min_key_len = 21 [json_name = "rsa-min-key-len"];
                  uint32 rsa_max_key_len = 22 [json_name = "rsa-max-key-len"];
                  uint32 stale_time = 23 [json_name = "stale-time"];
                  enum CollectHostFlag {
                     CollectHostFlag_OFF = 0;
                     CollectHostFlag_ON = 1;
                  };
                  CollectHostFlag collect_host_flag = 24 [json_name = "collect-host-flag"];
                  enum GenerateRdEnable {
                     GenerateRdEnable_OFF = 0;
                     GenerateRdEnable_ON = 1;
                  };
                  GenerateRdEnable generate_rd_enable = 25 [json_name = "generate-rd-enable"];
                  uint32 nud_interval = 26 [json_name = "nud-interval"];
               }
               IfProperty if_property = 1 [json_name = "if-property"];
               message Proxys {
                  enum RouteProxy {
                     RouteProxy_OFF = 0;
                     RouteProxy_ON = 1;
                  };
                  RouteProxy route_proxy = 1 [json_name = "route-proxy"];
                  enum InnerVlanProxy {
                     InnerVlanProxy_OFF = 0;
                     InnerVlanProxy_ON = 1;
                  };
                  InnerVlanProxy inner_vlan_proxy = 2 [json_name = "inner-vlan-proxy"];
                  enum InterVlanProxy {
                     InterVlanProxy_OFF = 0;
                     InterVlanProxy_ON = 1;
                  };
                  InterVlanProxy inter_vlan_proxy = 3 [json_name = "inter-vlan-proxy"];
                  enum AnywayProxy {
                     AnywayProxy_OFF = 0;
                     AnywayProxy_ON = 1;
                  };
                  AnywayProxy anyway_proxy = 4 [json_name = "anyway-proxy"];
               }
               Proxys proxys = 2 [json_name = "proxys"];
               message AntiAttack {
                  message ReceiveRateLimits {
                     message ReceiveRateLimit {
                        enum Type {
                           Type_RS = 0;
                           Type_RA = 1;
                           Type_NS = 2;
                           Type_NA = 3;
                           Type_NDMISS = 4;
                        };
                        Type type = 1 [json_name = "type"];
                        uint32 value = 2 [json_name = "value"];
                     }
                     repeated ReceiveRateLimit receive_rate_limit = 1 [json_name = "receive-rate-limit"];
                  }
                  ReceiveRateLimits receive_rate_limits = 1 [json_name = "receive-rate-limits"];
                  message SourceIpReceive {
                     message IpRateLimits {
                        message IpRateLimit {
                           enum PacketType {
                              PacketType_RS = 0;
                              PacketType_RA = 1;
                              PacketType_NS = 2;
                              PacketType_NA = 3;
                           };
                           PacketType packet_type = 1 [json_name = "packet-type"];
                           string ipv6_addr = 2 [json_name = "ipv6-addr"];
                           uint32 value = 3 [json_name = "value"];
                        }
                        repeated IpRateLimit ip_rate_limit = 1 [json_name = "ip-rate-limit"];
                     }
                     IpRateLimits ip_rate_limits = 1 [json_name = "ip-rate-limits"];
                  }
                  SourceIpReceive source_ip_receive = 2 [json_name = "source-ip-receive"];
               }
               AntiAttack anti_attack = 3 [json_name = "anti-attack"];
            }
            NdCollection nd_collection = 7 [json_name = "nd-collection"];
            message Pp6Collection {
               bool permit_incomplete_fragment = 1 [json_name = "permit-incomplete-fragment"];
            }
            Pp6Collection pp6_collection = 8 [json_name = "pp6-collection"];
            message ExtensionHeaderFilter {
               message HopByHopSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  AllOptions all_options = 1 [json_name = "all-options"];
                  message Options {
                     message Option {
                        uint32 option_code = 1 [json_name = "option-code"];
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        FilterRule filter_rule = 2 [json_name = "filter-rule"];
                     }
                     repeated Option option = 1 [json_name = "option"];
                  }
                  Options options = 2 [json_name = "options"];
               }
               HopByHopSwitch hop_by_hop_switch = 1 [json_name = "hop-by-hop-switch"];
               message RoutingSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  AllOptions all_options = 1 [json_name = "all-options"];
                  message Options {
                     message Option {
                        uint32 option_code = 1 [json_name = "option-code"];
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        FilterRule filter_rule = 2 [json_name = "filter-rule"];
                     }
                     repeated Option option = 1 [json_name = "option"];
                  }
                  Options options = 2 [json_name = "options"];
               }
               RoutingSwitch routing_switch = 2 [json_name = "routing-switch"];
               message DestinationSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  AllOptions all_options = 1 [json_name = "all-options"];
                  message Options {
                     message Option {
                        uint32 option_code = 1 [json_name = "option-code"];
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        FilterRule filter_rule = 2 [json_name = "filter-rule"];
                     }
                     repeated Option option = 1 [json_name = "option"];
                  }
                  Options options = 2 [json_name = "options"];
               }
               DestinationSwitch destination_switch = 3 [json_name = "destination-switch"];
               message NoOptionExhSwitchs {
                  message NoOptionExhSwitch {
                     enum ExhType {
                        INVALID_ENUM_VALUE_ExhType = 0;
                        ExhType_FRAGMENT = 44;
                        ExhType_ESP = 50;
                        ExhType_AH = 51;
                     };
                     ExhType exh_type = 1 [json_name = "exh-type"];
                     enum FilterRule {
                        FilterRule_DENY = 0;
                        FilterRule_PERMIT = 1;
                     };
                     FilterRule filter_rule = 2 [json_name = "filter-rule"];
                  }
                  repeated NoOptionExhSwitch no_option_exh_switch = 1 [json_name = "no-option-exh-switch"];
               }
               NoOptionExhSwitchs no_option_exh_switchs = 4 [json_name = "no-option-exh-switchs"];
            }
            ExtensionHeaderFilter extension_header_filter = 9 [json_name = "extension-header-filter"];
         }
         Ipv6 ipv6 = 42 [json_name = "ipv6"];
         message Trunk {
            uint32 min_up_num = 1 [json_name = "min-up-num"];
            uint32 min_up_bandwidth = 2 [json_name = "min-up-bandwidth"];
            uint32 max_up_num = 3 [json_name = "max-up-num"];
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ETHX_TRUNK = 1;
               Type_IPX_TRUNK = 2;
            };
            Type type = 4 [json_name = "type"];
            enum HashType {
               INVALID_ENUM_VALUE_HashType = 0;
               HashType_IP = 1;
               HashType_MAC = 2;
               HashType_PACKETX_ALL = 3;
               HashType_DESX_IP = 4;
               HashType_DESX_MAC = 5;
               HashType_SRCX_IP = 6;
               HashType_SRCX_MAC = 7;
               HashType_ENHANCED = 8;
               HashType_RESILIENT = 9;
               HashType_INVALID = 10;
               HashType_L4 = 11;
               HashType_RANDOM = 12;
               HashType_ROUNDX_ROBIN = 13;
               HashType_SYMMETRIC = 14;
               HashType_SYMMETRICX_COMPLEMENT = 15;
            };
            HashType hash_type = 5 [json_name = "hash-type"];
            enum WorkMode {
               INVALID_ENUM_VALUE_WorkMode = 0;
               WorkMode_MANUAL = 1;
               WorkMode_DYNAMIC = 2;
               WorkMode_STATIC = 3;
               WorkMode_BACKUP = 4;
               WorkMode_INVALID = 5;
            };
            WorkMode work_mode = 6 [json_name = "work-mode"];
            uint32 smart_link_flush_vlan = 7 [json_name = "smart-link-flush-vlan"];
            bool inactive_port_shutdown = 8 [json_name = "inactive-port-shutdown"];
            bool preempt_enable = 9 [json_name = "preempt-enable"];
            uint32 preempt_delay_minutes = 10 [json_name = "preempt-delay-minutes"];
            uint32 preempt_delay_seconds = 11 [json_name = "preempt-delay-seconds"];
            uint32 preempt_delay_milliseconds = 12 [json_name = "preempt-delay-milliseconds"];
            uint32 up_member_num = 13 [json_name = "up-member-num"];
            uint32 online_member_num = 14 [json_name = "online-member-num"];
            uint32 member_num = 15 [json_name = "member-num"];
            uint64 max_bandwidth = 16 [json_name = "max-bandwidth"];
            message Members {
               message Member {
                  string name = 1 [json_name = "name"];
                  uint32 weight = 2 [json_name = "weight"];
                  enum Status {
                     Status_DOWN = 0;
                     Status_UP = 1;
                  };
                  Status status = 3 [json_name = "status"];
                  bool is_master = 4 [json_name = "is-master"];
                  enum Role {
                     Role_SLAVE = 0;
                     Role_MASTER = 1;
                     Role_COMMON = 3;
                  };
                  Role role = 5 [json_name = "role"];
                  enum LacpNegotiationMode {
                     INVALID_ENUM_VALUE_LacpNegotiationMode = 0;
                     LacpNegotiationMode_ACTIVE = 1;
                     LacpNegotiationMode_PASSIVE = 2;
                  };
                  LacpNegotiationMode lacp_negotiation_mode = 6 [json_name = "lacp-negotiation-mode"];
                  message FimIfmtrunkMember {
                     uint32 hash_index = 1 [json_name = "hash-index"];
                  }
                  FimIfmtrunkMember fim_ifmtrunk_member = 7 [json_name = "fim-ifmtrunk-member"];
                  message Lacp {
                     message PortAttributes {
                        uint32 priority = 1 [json_name = "priority"];
                        enum Role {
                           Role_NONE = 0;
                           Role_MASTER = 1;
                           Role_SLAVE = 2;
                        };
                        Role role = 2 [json_name = "role"];
                     }
                     PortAttributes port_attributes = 1 [json_name = "port-attributes"];
                     message PortNegotiateParameter {
                        enum Status {
                           Status_UNSELECTED = 0;
                           Status_SELECTED = 1;
                           Status_INDEP = 2;
                           Status_FORCEX_UP = 3;
                        };
                        Status status = 1 [json_name = "status"];
                        enum PortType {
                           PortType_NULL = 0;
                           PortType_X_10M = 1;
                           PortType_X_100M = 2;
                           PortType_X_1GE = 3;
                           PortType_X_10GE = 4;
                           PortType_X_100GE = 5;
                           PortType_X_1TE = 6;
                           PortType_X_10TE = 7;
                           PortType_X_100TE = 8;
                           PortType_X_1000TE = 9;
                           PortType_X_40GE = 10;
                           PortType_X_400GE = 11;
                           PortType_X_25GE = 12;
                           PortType_X_200GE = 13;
                           PortType_X_50GE = 14;
                           PortType_FLEXE = 10002;
                        };
                        PortType port_type = 2 [json_name = "port-type"];
                        string actor_state = 3 [json_name = "actor-state"];
                        uint32 actor_portkey = 4 [json_name = "actor-portkey"];
                        string actor_sysid = 5 [json_name = "actor-sysid"];
                        uint32 actor_portno = 6 [json_name = "actor-portno"];
                        string partner_sysprimac = 7 [json_name = "partner-sysprimac"];
                        uint32 partner_syspri = 8 [json_name = "partner-syspri"];
                        string partner_sysid = 9 [json_name = "partner-sysid"];
                        uint32 partner_portpri = 10 [json_name = "partner-portpri"];
                        uint32 partner_id = 11 [json_name = "partner-id"];
                        uint32 partner_portkey = 12 [json_name = "partner-portkey"];
                        string partner_state = 13 [json_name = "partner-state"];
                        bool reference_port = 14 [json_name = "reference-port"];
                     }
                     PortNegotiateParameter port_negotiate_parameter = 2 [json_name = "port-negotiate-parameter"];
                     message PduStatistic {
                        uint32 recv_pdunum = 1 [json_name = "recv-pdunum"];
                        uint32 recv_err_pdunum = 2 [json_name = "recv-err-pdunum"];
                        uint32 send_pdunum = 3 [json_name = "send-pdunum"];
                        uint32 recv_marker_pdunum = 4 [json_name = "recv-marker-pdunum"];
                        uint32 recv_err_makernum = 5 [json_name = "recv-err-makernum"];
                        uint32 send_makernum = 6 [json_name = "send-makernum"];
                     }
                     PduStatistic pdu_statistic = 3 [json_name = "pdu-statistic"];
                  }
                  Lacp lacp = 8 [json_name = "lacp"];
               }
               repeated Member member = 1 [json_name = "member"];
            }
            Members members = 17 [json_name = "members"];
            message Forwardings {
               message Forwarding {
                  uint32 id = 1 [json_name = "id"];
                  string master_port = 2 [json_name = "master-port"];
                  string slave_port = 3 [json_name = "slave-port"];
               }
               repeated Forwarding forwarding = 1 [json_name = "forwarding"];
            }
            Forwardings forwardings = 18 [json_name = "forwardings"];
            message FimIfmtrunk {
               bool trunk_locality_flag = 1 [json_name = "trunk-locality-flag"];
               enum TrunkHashType {
                  TrunkHashType_CRC32X_1 = 0;
                  TrunkHashType_CRC32X_2 = 1;
                  TrunkHashType_XORX_16BIT = 2;
                  TrunkHashType_XORX_8BIT = 3;
               };
               TrunkHashType trunk_hash_type = 2 [json_name = "trunk-hash-type"];
               enum DualReceiveEnable {
                  DualReceiveEnable_DISABLE = 0;
                  DualReceiveEnable_ENABLE = 1;
               };
               DualReceiveEnable dual_receive_enable = 3 [json_name = "dual-receive-enable"];
            }
            FimIfmtrunk fim_ifmtrunk = 19 [json_name = "fim-ifmtrunk"];
            message Lacp {
               enum ReceiveTimeoutType {
                  ReceiveTimeoutType_SLOW = 0;
                  ReceiveTimeoutType_FAST = 1;
               };
               ReceiveTimeoutType receive_timeout_type = 1 [json_name = "receive-timeout-type"];
               uint32 fast_timeout_value = 2 [json_name = "fast-timeout-value"];
               bool support_preempt = 3 [json_name = "support-preempt"];
               enum SelectPortStd {
                  INVALID_ENUM_VALUE_SelectPortStd = 0;
                  SelectPortStd_SPEED = 1;
                  SelectPortStd_PRIORITY = 3;
               };
               SelectPortStd select_port_std = 4 [json_name = "select-port-std"];
               uint32 preempt_delay = 5 [json_name = "preempt-delay"];
               uint32 max_active_num = 6 [json_name = "max-active-num"];
               uint32 collect_max_delay = 7 [json_name = "collect-max-delay"];
               bool mix_rate_enable = 8 [json_name = "mix-rate-enable"];
               bool backup_enable = 9 [json_name = "backup-enable"];
               bool damp_state_enable = 10 [json_name = "damp-state-enable"];
               bool damp_mac_enable = 11 [json_name = "damp-mac-enable"];
               string sys_mac = 12 [json_name = "sys-mac"];
               uint32 sys_priority = 13 [json_name = "sys-priority"];
               message MLag {
                  uint32 sys_priority = 1 [json_name = "sys-priority"];
                  string sys_mac = 2 [json_name = "sys-mac"];
               }
               MLag m_lag = 14 [json_name = "m-lag"];
               message TrackVrrp {
                  uint32 vrrp_id = 1 [json_name = "vrrp-id"];
                  string if_name = 2 [json_name = "if-name"];
                  uint32 sys_priority = 3 [json_name = "sys-priority"];
                  bool id_ext = 4 [json_name = "id-ext"];
               }
               TrackVrrp track_vrrp = 15 [json_name = "track-vrrp"];
               uint32 portup_num = 16 [json_name = "portup-num"];
               uint32 oper_syspri = 17 [json_name = "oper-syspri"];
               string oper_sysmac = 18 [json_name = "oper-sysmac"];
               enum SysmacSource {
                  INVALID_ENUM_VALUE_SysmacSource = 0;
                  SysmacSource_LOCAL = 1;
                  SysmacSource_REMOTE = 2;
               };
               SysmacSource sysmac_source = 19 [json_name = "sysmac-source"];
               uint32 portkey = 20 [json_name = "portkey"];
            }
            Lacp lacp = 20 [json_name = "lacp"];
         }
         Trunk trunk = 43 [json_name = "trunk"];
         message VlanifAttribute {
            uint32 damping_time = 1 [json_name = "damping-time"];
         }
         VlanifAttribute vlanif_attribute = 44 [json_name = "vlanif-attribute"];
         message Ethernet {
            message MainInterface {
               enum VlanSwap {
                  VlanSwap_DISABLE = 0;
                  VlanSwap_ENABLE = 1;
               };
               VlanSwap vlan_swap = 1 [json_name = "vlan-swap"];
               string qinq_protocol = 2 [json_name = "qinq-protocol"];
               message L2Attribute {
                  enum LinkType {
                     INVALID_ENUM_VALUE_LinkType = 0;
                     LinkType_ACCESS = 1;
                     LinkType_TRUNK = 2;
                     LinkType_HYBRID = 3;
                     LinkType_DOT1QTUNNEL = 4;
                  };
                  LinkType link_type = 1 [json_name = "link-type"];
                  uint32 pvid = 2 [json_name = "pvid"];
                  string trunk_vlans = 3 [json_name = "trunk-vlans"];
                  bool untag_discarding = 4 [json_name = "untag-discarding"];
                  message VlanStackings {
                     message VlanStacking {
                        uint32 stacking_vlan = 1 [json_name = "stacking-vlan"];
                        bool ce_default = 2 [json_name = "ce-default"];
                        string trans_vlans = 3 [json_name = "trans-vlans"];
                     }
                     repeated VlanStacking vlan_stacking = 1 [json_name = "vlan-stacking"];
                  }
                  VlanStackings vlan_stackings = 5 [json_name = "vlan-stackings"];
                  message StatisticsEnableVlans {
                     string vlans = 1 [json_name = "vlans"];
                  }
                  StatisticsEnableVlans statistics_enable_vlans = 6 [json_name = "statistics-enable-vlans"];
                  message PortIsolateGroups {
                     message PortIsolateGroup {
                        int32 group_id = 1 [json_name = "group-id"];
                     }
                     repeated PortIsolateGroup port_isolate_group = 1 [json_name = "port-isolate-group"];
                  }
                  PortIsolateGroups port_isolate_groups = 7 [json_name = "port-isolate-groups"];
                  message MstpAttribute {
                     bool enable = 1 [json_name = "enable"];
                     bool loop_protection = 2 [json_name = "loop-protection"];
                     bool no_agreement_check = 3 [json_name = "no-agreement-check"];
                     enum PointToPoint {
                        INVALID_ENUM_VALUE_PointToPoint = 0;
                        PointToPoint_FORCEX_TRUE = 1;
                        PointToPoint_FORCEX_FALSE = 2;
                        PointToPoint_AUTO = 3;
                     };
                     PointToPoint point_to_point = 4 [json_name = "point-to-point"];
                     bool root_protection = 5 [json_name = "root-protection"];
                     uint32 transmit_limit = 6 [json_name = "transmit-limit"];
                     bool tc_restriction = 7 [json_name = "tc-restriction"];
                     enum BpduFilter {
                        INVALID_ENUM_VALUE_BpduFilter = 0;
                        BpduFilter_DISABLE = 1;
                        BpduFilter_ENABLE = 2;
                        BpduFilter_DEFAULT = 3;
                     };
                     BpduFilter bpdu_filter = 8 [json_name = "bpdu-filter"];
                     enum EdgePort {
                        INVALID_ENUM_VALUE_EdgePort = 0;
                        EdgePort_DISABLE = 1;
                        EdgePort_ENABLE = 2;
                        EdgePort_DEFAULT = 3;
                     };
                     EdgePort edge_port = 9 [json_name = "edge-port"];
                     bool vpls_sub_interface = 10 [json_name = "vpls-sub-interface"];
                  }
                  MstpAttribute mstp_attribute = 8 [json_name = "mstp-attribute"];
                  message ProtocolActions {
                     message ProtocolAction {
                        enum ProtocolType {
                           INVALID_ENUM_VALUE_ProtocolType = 0;
                           ProtocolType_LACP = 1;
                        };
                        ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                        enum Action {
                           INVALID_ENUM_VALUE_Action = 0;
                           Action_FORWARDING = 1;
                        };
                        Action action = 2 [json_name = "action"];
                     }
                     repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
                  }
                  ProtocolActions protocol_actions = 9 [json_name = "protocol-actions"];
                  message BpduTunnel {
                  }
                  BpduTunnel bpdu_tunnel = 10 [json_name = "bpdu-tunnel"];
                  message VlanIsolateAttribute {
                     string isolate_vlanlist = 1 [json_name = "isolate-vlanlist"];
                     bool outside_vlan_iso = 2 [json_name = "outside-vlan-iso"];
                  }
                  VlanIsolateAttribute vlan_isolate_attribute = 11 [json_name = "vlan-isolate-attribute"];
               }
               L2Attribute l2_attribute = 3 [json_name = "l2-attribute"];
               message MstpAttribute {
                  bool enable = 1 [json_name = "enable"];
                  bool loop_protection = 2 [json_name = "loop-protection"];
                  bool no_agreement_check = 3 [json_name = "no-agreement-check"];
                  enum PointToPoint {
                     INVALID_ENUM_VALUE_PointToPoint = 0;
                     PointToPoint_FORCEX_TRUE = 1;
                     PointToPoint_FORCEX_FALSE = 2;
                     PointToPoint_AUTO = 3;
                  };
                  PointToPoint point_to_point = 4 [json_name = "point-to-point"];
                  bool root_protection = 5 [json_name = "root-protection"];
                  uint32 transmit_limit = 6 [json_name = "transmit-limit"];
                  bool tc_restriction = 7 [json_name = "tc-restriction"];
                  enum BpduFilter {
                     INVALID_ENUM_VALUE_BpduFilter = 0;
                     BpduFilter_DISABLE = 1;
                     BpduFilter_ENABLE = 2;
                     BpduFilter_DEFAULT = 3;
                  };
                  BpduFilter bpdu_filter = 8 [json_name = "bpdu-filter"];
                  enum EdgePort {
                     INVALID_ENUM_VALUE_EdgePort = 0;
                     EdgePort_DISABLE = 1;
                     EdgePort_ENABLE = 2;
                     EdgePort_DEFAULT = 3;
                  };
                  EdgePort edge_port = 9 [json_name = "edge-port"];
                  bool vpls_sub_interface = 10 [json_name = "vpls-sub-interface"];
               }
               MstpAttribute mstp_attribute = 4 [json_name = "mstp-attribute"];
               message FimMain {
                  enum OuterVlanEnable {
                     OuterVlanEnable_DISABLE = 0;
                     OuterVlanEnable_ENABLE = 1;
                  };
                  OuterVlanEnable outer_vlan_enable = 1 [json_name = "outer-vlan-enable"];
               }
               FimMain fim_main = 5 [json_name = "fim-main"];
            }
            MainInterface main_interface = 1 [json_name = "main-interface"];
            message L3SubInterface {
               message VlanGroups {
                  message VlanGroup {
                     uint32 id = 1 [json_name = "id"];
                     enum Mode {
                        INVALID_ENUM_VALUE_Mode = 0;
                        Mode_MULTIPLE = 1;
                        Mode_SINGLE = 2;
                     };
                     Mode mode = 2 [json_name = "mode"];
                     bool statistic_enable = 3 [json_name = "statistic-enable"];
                     string description = 4 [json_name = "description"];
                  }
                  repeated VlanGroup vlan_group = 1 [json_name = "vlan-group"];
               }
               VlanGroups vlan_groups = 1 [json_name = "vlan-groups"];
               message ModeChannel {
                  enum ModeChannelEnable {
                     ModeChannelEnable_DISABLE = 0;
                     ModeChannelEnable_ENABLE = 1;
                  };
                  ModeChannelEnable mode_channel_enable = 1 [json_name = "mode-channel-enable"];
                  uint32 bandwidth = 2 [json_name = "bandwidth"];
               }
               ModeChannel mode_channel = 2 [json_name = "mode-channel"];
            }
            L3SubInterface l3_sub_interface = 2 [json_name = "l3-sub-interface"];
            message L2SubInterface {
               enum LocalSwitch {
                  LocalSwitch_DISABLE = 0;
                  LocalSwitch_ENABLE = 1;
               };
               LocalSwitch local_switch = 1 [json_name = "local-switch"];
               message FlowAction {
                  enum ActionType {
                     ActionType_POPX_OUTER = 0;
                     ActionType_PUSH1X_LAYER = 1;
                     ActionType_SWAP = 2;
                     ActionType_MAPX_OFFSETX_INCREASE = 3;
                     ActionType_MAPX_1X_TOX_1 = 4;
                     ActionType_MAPX_2X_TOX_1 = 5;
                     ActionType_MAPX_1X_TOX_2 = 6;
                     ActionType_MAPX_2X_TOX_2 = 7;
                     ActionType_POPX_DOUBLE = 8;
                     ActionType_PUSH2X_LAYER = 9;
                     ActionType_MAPX_OFFSETX_DECREASE = 10;
                  };
                  ActionType action_type = 1 [json_name = "action-type"];
                  uint32 out_vlan_id = 2 [json_name = "out-vlan-id"];
                  uint32 inner_vlan_id = 3 [json_name = "inner-vlan-id"];
                  uint32 outer_8021p = 4 [json_name = "outer-8021p"];
                  uint32 inner_8021p = 5 [json_name = "inner-8021p"];
                  uint32 offset_value = 6 [json_name = "offset-value"];
               }
               FlowAction flow_action = 2 [json_name = "flow-action"];
               message FimL2Sub {
                  enum EgressStrictFilter {
                     EgressStrictFilter_DISABLE = 0;
                     EgressStrictFilter_ENABLE = 1;
                  };
                  EgressStrictFilter egress_strict_filter = 1 [json_name = "egress-strict-filter"];
               }
               FimL2Sub fim_l2_sub = 3 [json_name = "fim-l2-sub"];
            }
            L2SubInterface l2_sub_interface = 3 [json_name = "l2-sub-interface"];
            message Mac {
               message SubInterfaceMacLimit {
               }
               SubInterfaceMacLimit sub_interface_mac_limit = 1 [json_name = "sub-interface-mac-limit"];
               message SubInterfaceSuppressions {
                  message SubInterfaceSuppression {
                     enum Type {
                        Type_BROADCAST = 0;
                        Type_MULTICAST = 1;
                        Type_UNKNOWNX_UNICAST = 2;
                     };
                     Type type = 1 [json_name = "type"];
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                     };
                     Direction direction = 2 [json_name = "direction"];
                     uint64 cir = 3 [json_name = "cir"];
                     uint64 cbs = 4 [json_name = "cbs"];
                  }
                  repeated SubInterfaceSuppression sub_interface_suppression = 1 [json_name = "sub-interface-suppression"];
               }
               SubInterfaceSuppressions sub_interface_suppressions = 2 [json_name = "sub-interface-suppressions"];
            }
            Mac mac = 4 [json_name = "mac"];
         }
         Ethernet ethernet = 45 [json_name = "ethernet"];
         message ArpEntry {
            uint32 expire_time = 1 [json_name = "expire-time"];
            uint32 probe_interval = 2 [json_name = "probe-interval"];
            uint32 probe_times = 3 [json_name = "probe-times"];
            bool arp_learn_disable = 4 [json_name = "arp-learn-disable"];
            enum ArpLearnStrict {
               INVALID_ENUM_VALUE_ArpLearnStrict = 0;
               ArpLearnStrict_FORCEX_DISABLE = 1;
               ArpLearnStrict_FORCEX_ENABLE = 2;
               ArpLearnStrict_TRUST = 3;
            };
            ArpLearnStrict arp_learn_strict = 5 [json_name = "arp-learn-strict"];
            bool route_proxy_enable = 6 [json_name = "route-proxy-enable"];
            bool inner_proxy_enable = 7 [json_name = "inner-proxy-enable"];
            bool inter_proxy_enable = 8 [json_name = "inter-proxy-enable"];
            bool local_proxy_enable = 9 [json_name = "local-proxy-enable"];
            uint32 fake_expire_time = 10 [json_name = "fake-expire-time"];
            bool probe_unicast = 11 [json_name = "probe-unicast"];
            bool dest_mac_check = 12 [json_name = "dest-mac-check"];
            bool src_mac_check = 13 [json_name = "src-mac-check"];
            bool distribute_enable = 14 [json_name = "distribute-enable"];
            enum GratuitousSend {
               INVALID_ENUM_VALUE_GratuitousSend = 0;
               GratuitousSend_ENABLE = 2;
               GratuitousSend_DISABLE = 3;
            };
            GratuitousSend gratuitous_send = 15 [json_name = "gratuitous-send"];
            bool host_collect_enable = 16 [json_name = "host-collect-enable"];
            bool generate_rdtbl_enable = 17 [json_name = "generate-rdtbl-enable"];
            uint32 broadcast_detect_interval = 18 [json_name = "broadcast-detect-interval"];
            uint32 broadcast_detect_times = 19 [json_name = "broadcast-detect-times"];
            bool broadcast_detect_enable = 20 [json_name = "broadcast-detect-enable"];
            uint32 fake_penalty_time = 21 [json_name = "fake-penalty-time"];
            bool gratuitous_arp_drop = 22 [json_name = "gratuitous-arp-drop"];
            uint32 broadcast_max_num = 23 [json_name = "broadcast-max-num"];
            bool smart_discover_enable = 24 [json_name = "smart-discover-enable"];
         }
         ArpEntry arp_entry = 46 [json_name = "arp-entry"];
         message ArpStatusDetect {
            string ip_addr = 1 [json_name = "ip-addr"];
            enum Mode {
               Mode_LOOSE = 0;
               Mode_STRICT = 1;
            };
            Mode mode = 2 [json_name = "mode"];
            uint32 times = 3 [json_name = "times"];
            uint32 interval = 4 [json_name = "interval"];
         }
         ArpStatusDetect arp_status_detect = 47 [json_name = "arp-status-detect"];
         message ArpPortSecurity {
            message L2SubInterface {
               bool l2proxy_dyn_learn = 1 [json_name = "l2proxy-dyn-learn"];
               uint32 l2proxy_max_num = 2 [json_name = "l2proxy-max-num"];
            }
            L2SubInterface l2_sub_interface = 1 [json_name = "l2-sub-interface"];
         }
         ArpPortSecurity arp_port_security = 48 [json_name = "arp-port-security"];
         message Bfd {
            bool enable_trunk_crc_bit_error = 1 [json_name = "enable-trunk-crc-bit-error"];
            bool enable_trigger_if_down = 2 [json_name = "enable-trigger-if-down"];
         }
         Bfd bfd = 49 [json_name = "bfd"];
         message Qos {
            message Trusts {
               message Trust {
                  enum Type {
                     Type_IPX_DSCP = 0;
                     Type_X_8021P = 1;
                     Type_OUTERX_8021P = 2;
                     Type_INNERX_8021P = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  enum Direction {
                     Direction_INX_OUTBOUND = 0;
                     Direction_INBOUND = 1;
                     Direction_OUTBOUND = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  bool vlan_mode = 3 [json_name = "vlan-mode"];
                  uint32 begin_vlan = 4 [json_name = "begin-vlan"];
                  uint32 end_vlan = 5 [json_name = "end-vlan"];
                  string diffserv_domain_name = 6 [json_name = "diffserv-domain-name"];
                  bool vpn_mode = 7 [json_name = "vpn-mode"];
               }
               repeated Trust trust = 1 [json_name = "trust"];
            }
            Trusts trusts = 1 [json_name = "trusts"];
            message TrafficPolicyApplys {
               message TrafficPolicyApply {
                  string policy_name = 1 [json_name = "policy-name"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum Layer {
                     Layer_NONE = 0;
                     Layer_LINK = 1;
                     Layer_ALL = 2;
                     Layer_MPLS = 3;
                     Layer_VXLAN = 4;
                  };
                  Layer layer = 3 [json_name = "layer"];
                  bool vlan_mode = 4 [json_name = "vlan-mode"];
                  uint32 pe_vlan_id = 5 [json_name = "pe-vlan-id"];
                  string vlan_id = 6 [json_name = "vlan-id"];
                  enum Identifier {
                     Identifier_NO = 0;
                     Identifier_NONE = 1;
                     Identifier_VID = 2;
                     Identifier_CEX_VID = 3;
                     Identifier_VIDX_CEX_VID = 4;
                  };
                  Identifier identifier = 7 [json_name = "identifier"];
               }
               repeated TrafficPolicyApply traffic_policy_apply = 1 [json_name = "traffic-policy-apply"];
            }
            TrafficPolicyApplys traffic_policy_applys = 2 [json_name = "traffic-policy-applys"];
            message ProfileApplys {
               message ProfileApply {
                  string profile_name = 1 [json_name = "profile-name"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum Type {
                     Type_INTERFACE = 0;
                     Type_VLAN = 1;
                     Type_PE = 2;
                  };
                  Type type = 3 [json_name = "type"];
                  uint32 pe_vlan_id = 4 [json_name = "pe-vlan-id"];
                  uint32 ce_begin_vlan_id = 5 [json_name = "ce-begin-vlan-id"];
                  uint32 ce_end_vlan_id = 6 [json_name = "ce-end-vlan-id"];
                  enum IdentifyType {
                     IdentifyType_NONE = 0;
                     IdentifyType_VLAN = 1;
                     IdentifyType_PEX_VID = 2;
                     IdentifyType_CEX_VID = 3;
                     IdentifyType_PEX_CEX_VID = 4;
                     IdentifyType_VID = 5;
                     IdentifyType_EVCX_CEX_VID = 6;
                     IdentifyType_VIDX_CEX_VID = 7;
                  };
                  IdentifyType identify_type = 7 [json_name = "identify-type"];
                  enum LinkageBandwidth {
                     LinkageBandwidth_DISABLE = 0;
                     LinkageBandwidth_ENABLE = 1;
                  };
                  LinkageBandwidth linkage_bandwidth = 8 [json_name = "linkage-bandwidth"];
                  string group_name = 9 [json_name = "group-name"];
               }
               repeated ProfileApply profile_apply = 1 [json_name = "profile-apply"];
            }
            ProfileApplys profile_applys = 3 [json_name = "profile-applys"];
            message UserQueueApplys {
               message UserQueueApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 pir = 3 [json_name = "pir"];
                  string flow_queue_name = 4 [json_name = "flow-queue-name"];
                  string flow_mapping_name = 5 [json_name = "flow-mapping-name"];
                  string user_group_queue_name = 6 [json_name = "user-group-queue-name"];
                  string service_template_name = 7 [json_name = "service-template-name"];
                  enum AdjustOnCard {
                     AdjustOnCard_DISABLE = 0;
                     AdjustOnCard_ENABLE = 1;
                  };
                  AdjustOnCard adjust_on_card = 8 [json_name = "adjust-on-card"];
                  message UserQueueApplysStats {
                     message UserQueueApplysStat {
                        enum ServiceClass {
                           ServiceClass_BE = 0;
                           ServiceClass_AF1 = 1;
                           ServiceClass_AF2 = 2;
                           ServiceClass_AF3 = 3;
                           ServiceClass_AF4 = 4;
                           ServiceClass_EF = 5;
                           ServiceClass_CS6 = 6;
                           ServiceClass_CS7 = 7;
                           ServiceClass_TOTAL = 8;
                           ServiceClass_COS0 = 9;
                           ServiceClass_COS1 = 10;
                           ServiceClass_COS2 = 11;
                           ServiceClass_COS3 = 12;
                        };
                        ServiceClass service_class = 1 [json_name = "service-class"];
                        uint64 pass_packets = 2 [json_name = "pass-packets"];
                        uint64 pass_bytes = 3 [json_name = "pass-bytes"];
                        uint64 pass_packet_rate = 4 [json_name = "pass-packet-rate"];
                        uint64 pass_byte_rate = 5 [json_name = "pass-byte-rate"];
                        uint64 drop_packets = 6 [json_name = "drop-packets"];
                        uint64 drop_bytes = 7 [json_name = "drop-bytes"];
                        uint64 drop_packet_rate = 8 [json_name = "drop-packet-rate"];
                        uint64 drop_byte_rate = 9 [json_name = "drop-byte-rate"];
                     }
                     repeated UserQueueApplysStat user_queue_applys_stat = 1 [json_name = "user-queue-applys-stat"];
                  }
                  UserQueueApplysStats user_queue_applys_stats = 9 [json_name = "user-queue-applys-stats"];
               }
               repeated UserQueueApply user_queue_apply = 1 [json_name = "user-queue-apply"];
            }
            UserQueueApplys user_queue_applys = 4 [json_name = "user-queue-applys"];
            message PortQueues {
               message PortQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string port_wred_name = 2 [json_name = "port-wred-name"];
               }
               repeated PortQueue port_queue = 1 [json_name = "port-queue"];
            }
            PortQueues port_queues = 5 [json_name = "port-queues"];
            message PortQueueStates {
               message PortQueueState {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string port_wred_name = 2 [json_name = "port-wred-name"];
               }
               repeated PortQueueState port_queue_state = 1 [json_name = "port-queue-state"];
            }
            PortQueueStates port_queue_states = 6 [json_name = "port-queue-states"];
            message PortQueueTemplateApplys {
               message PortQueueTemplateApply {
                  string port_queue_template_name = 1 [json_name = "port-queue-template-name"];
               }
               repeated PortQueueTemplateApply port_queue_template_apply = 1 [json_name = "port-queue-template-apply"];
            }
            PortQueueTemplateApplys port_queue_template_applys = 7 [json_name = "port-queue-template-applys"];
            message PortQueueAlarms {
               message PortQueueAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 buffer_percentage = 2 [json_name = "buffer-percentage"];
               }
               repeated PortQueueAlarm port_queue_alarm = 1 [json_name = "port-queue-alarm"];
            }
            PortQueueAlarms port_queue_alarms = 8 [json_name = "port-queue-alarms"];
            message PortQueueAlarmStates {
               message PortQueueAlarmState {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 buffer_percentage = 2 [json_name = "buffer-percentage"];
               }
               repeated PortQueueAlarmState port_queue_alarm_state = 1 [json_name = "port-queue-alarm-state"];
            }
            PortQueueAlarmStates port_queue_alarm_states = 9 [json_name = "port-queue-alarm-states"];
            message PortQueueDiscardAlarms {
               message PortQueueDiscardAlarm {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_DISCARDX_PACKET = 1;
                     Type_DISCARDX_BYTE = 2;
                     Type_DISCARDX_PACKETX_RATIO = 3;
                  };
                  Type type = 2 [json_name = "type"];
                  uint32 discard_number = 3 [json_name = "discard-number"];
                  uint32 discard_packet_coefficient = 4 [json_name = "discard-packet-coefficient"];
                  uint32 discard_packet_exponent = 5 [json_name = "discard-packet-exponent"];
                  uint32 interval_time = 6 [json_name = "interval-time"];
               }
               repeated PortQueueDiscardAlarm port_queue_discard_alarm = 1 [json_name = "port-queue-discard-alarm"];
            }
            PortQueueDiscardAlarms port_queue_discard_alarms = 10 [json_name = "port-queue-discard-alarms"];
            message SetQueueStats {
               message SetQueueStat {
                  enum Interval {
                     INVALID_ENUM_VALUE_Interval = 0;
                     Interval_X_5S = 5;
                     Interval_X_30S = 30;
                     Interval_X_300S = 300;
                  };
                  Interval interval = 1 [json_name = "interval"];
               }
               repeated SetQueueStat set_queue_stat = 1 [json_name = "set-queue-stat"];
            }
            SetQueueStats set_queue_stats = 11 [json_name = "set-queue-stats"];
            message LinkAdjustment {
               int32 adjust_value = 1 [json_name = "adjust-value"];
               enum ShapingMode {
                  INVALID_ENUM_VALUE_ShapingMode = 0;
                  ShapingMode_CELL = 1;
               };
               ShapingMode shaping_mode = 2 [json_name = "shaping-mode"];
            }
            LinkAdjustment link_adjustment = 12 [json_name = "link-adjustment"];
            message QosQueues {
               message QosQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum Priority {
                     Priority_PQ = 0;
                     Priority_WFQ = 1;
                     Priority_LPQ = 2;
                  };
                  Priority priority = 2 [json_name = "priority"];
               }
               repeated QosQueue qos_queue = 1 [json_name = "qos-queue"];
            }
            QosQueues qos_queues = 13 [json_name = "qos-queues"];
            message QueueTemplateApplys {
               message QueueTemplateApply {
                  string queue_template_name = 1 [json_name = "queue-template-name"];
               }
               repeated QueueTemplateApply queue_template_apply = 1 [json_name = "queue-template-apply"];
            }
            QueueTemplateApplys queue_template_applys = 14 [json_name = "queue-template-applys"];
            message SoftPipeAlarms {
               message SoftPipeAlarm {
                  uint32 bandwidth_usage_threshold = 1 [json_name = "bandwidth-usage-threshold"];
                  uint32 resume_threshold = 2 [json_name = "resume-threshold"];
               }
               SoftPipeAlarm soft_pipe_alarm = 1 [json_name = "soft-pipe-alarm"];
            }
            SoftPipeAlarms soft_pipe_alarms = 15 [json_name = "soft-pipe-alarms"];
            message FlowQueueTemplateApplys {
               message FlowQueueTemplateApply {
                  string flow_queue_template_name = 1 [json_name = "flow-queue-template-name"];
               }
               repeated FlowQueueTemplateApply flow_queue_template_apply = 1 [json_name = "flow-queue-template-apply"];
            }
            FlowQueueTemplateApplys flow_queue_template_applys = 16 [json_name = "flow-queue-template-applys"];
            message ServiceTemplateApplys {
               message ServiceTemplateApply {
                  string service_template_name = 1 [json_name = "service-template-name"];
               }
               repeated ServiceTemplateApply service_template_apply = 1 [json_name = "service-template-apply"];
            }
            ServiceTemplateApplys service_template_applys = 17 [json_name = "service-template-applys"];
            message DefaultServiceClasss {
               message DefaultServiceClass {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
               }
               repeated DefaultServiceClass default_service_class = 1 [json_name = "default-service-class"];
            }
            DefaultServiceClasss default_service_classs = 18 [json_name = "default-service-classs"];
            message DefaultUserGroupQueues {
               message DefaultUserGroupQueue {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 shaping = 2 [json_name = "shaping"];
                  uint32 pbs = 3 [json_name = "pbs"];
               }
               repeated DefaultUserGroupQueue default_user_group_queue = 1 [json_name = "default-user-group-queue"];
            }
            DefaultUserGroupQueues default_user_group_queues = 19 [json_name = "default-user-group-queues"];
            message DefaultSubPortQueues {
               message DefaultSubPortQueue {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 shaping = 2 [json_name = "shaping"];
                  uint32 pbs = 3 [json_name = "pbs"];
               }
               repeated DefaultSubPortQueue default_sub_port_queue = 1 [json_name = "default-sub-port-queue"];
            }
            DefaultSubPortQueues default_sub_port_queues = 20 [json_name = "default-sub-port-queues"];
            message PortShapings {
               message PortShaping {
                  uint32 pbs = 1 [json_name = "pbs"];
                  int32 network_header_length = 2 [json_name = "network-header-length"];
                  enum WeightMode {
                     INVALID_ENUM_VALUE_WeightMode = 0;
                     WeightMode_ENABLE = 1;
                  };
                  WeightMode weight_mode = 3 [json_name = "weight-mode"];
               }
               PortShaping port_shaping = 1 [json_name = "port-shaping"];
            }
            PortShapings port_shapings = 21 [json_name = "port-shapings"];
            message PerHopBehaviorDisables {
               message PerHopBehaviorDisable {
                  enum MapType {
                     INVALID_ENUM_VALUE_MapType = 0;
                     MapType_NONE = 1;
                     MapType_INNERX_8021P = 2;
                     MapType_OUTERX_8021P = 4;
                     MapType_DSCP = 8;
                     MapType_MPLSX_EXP = 16;
                  };
                  MapType map_type = 1 [json_name = "map-type"];
                  bool vlan_mode = 2 [json_name = "vlan-mode"];
                  string vlan_id = 3 [json_name = "vlan-id"];
               }
               repeated PerHopBehaviorDisable per_hop_behavior_disable = 1 [json_name = "per-hop-behavior-disable"];
            }
            PerHopBehaviorDisables per_hop_behavior_disables = 22 [json_name = "per-hop-behavior-disables"];
            message PerHopBehaviorEnables {
               message PerHopBehaviorEnable {
                  string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
               }
               PerHopBehaviorEnable per_hop_behavior_enable = 1 [json_name = "per-hop-behavior-enable"];
            }
            PerHopBehaviorEnables per_hop_behavior_enables = 23 [json_name = "per-hop-behavior-enables"];
            message PerHopBehaviorEnableVlans {
               message PerHopBehaviorEnableVlan {
                  string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
                  string vlan_id = 2 [json_name = "vlan-id"];
               }
               repeated PerHopBehaviorEnableVlan per_hop_behavior_enable_vlan = 1 [json_name = "per-hop-behavior-enable-vlan"];
            }
            PerHopBehaviorEnableVlans per_hop_behavior_enable_vlans = 24 [json_name = "per-hop-behavior-enable-vlans"];
            message PerHopBehavior {
               enum Enable {
                  INVALID_ENUM_VALUE_Enable = 0;
                  Enable_ENABLE = 1;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            PerHopBehavior per_hop_behavior = 25 [json_name = "per-hop-behavior"];
            message Cars {
               message Car {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  bool vlan_mode = 2 [json_name = "vlan-mode"];
                  uint32 begin_vlan = 3 [json_name = "begin-vlan"];
                  uint32 end_vlan = 4 [json_name = "end-vlan"];
                  uint32 cbs = 5 [json_name = "cbs"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  int32 adjust_value = 7 [json_name = "adjust-value"];
                  enum GreenAction {
                     GreenAction_PASS = 0;
                     GreenAction_DISCARD = 2;
                  };
                  GreenAction green_action = 8 [json_name = "green-action"];
                  enum GreenServiceClass {
                     GreenServiceClass_BE = 0;
                     GreenServiceClass_AF1 = 1;
                     GreenServiceClass_AF2 = 2;
                     GreenServiceClass_AF3 = 3;
                     GreenServiceClass_AF4 = 4;
                     GreenServiceClass_EF = 5;
                     GreenServiceClass_CS6 = 6;
                     GreenServiceClass_CS7 = 7;
                  };
                  GreenServiceClass green_service_class = 9 [json_name = "green-service-class"];
                  enum GreenColor {
                     GreenColor_GREEN = 0;
                     GreenColor_YELLOW = 1;
                     GreenColor_RED = 2;
                  };
                  GreenColor green_color = 10 [json_name = "green-color"];
                  enum YellowAction {
                     YellowAction_PASS = 0;
                     YellowAction_DISCARD = 2;
                  };
                  YellowAction yellow_action = 11 [json_name = "yellow-action"];
                  enum YellowServiceClass {
                     YellowServiceClass_BE = 0;
                     YellowServiceClass_AF1 = 1;
                     YellowServiceClass_AF2 = 2;
                     YellowServiceClass_AF3 = 3;
                     YellowServiceClass_AF4 = 4;
                     YellowServiceClass_EF = 5;
                     YellowServiceClass_CS6 = 6;
                     YellowServiceClass_CS7 = 7;
                  };
                  YellowServiceClass yellow_service_class = 12 [json_name = "yellow-service-class"];
                  enum YellowColor {
                     YellowColor_GREEN = 0;
                     YellowColor_YELLOW = 1;
                     YellowColor_RED = 2;
                  };
                  YellowColor yellow_color = 13 [json_name = "yellow-color"];
                  enum RedAction {
                     RedAction_PASS = 0;
                     RedAction_DISCARD = 2;
                  };
                  RedAction red_action = 14 [json_name = "red-action"];
                  enum RedServiceClass {
                     RedServiceClass_BE = 0;
                     RedServiceClass_AF1 = 1;
                     RedServiceClass_AF2 = 2;
                     RedServiceClass_AF3 = 3;
                     RedServiceClass_AF4 = 4;
                     RedServiceClass_EF = 5;
                     RedServiceClass_CS6 = 6;
                     RedServiceClass_CS7 = 7;
                  };
                  RedServiceClass red_service_class = 15 [json_name = "red-service-class"];
                  enum RedColor {
                     RedColor_GREEN = 0;
                     RedColor_YELLOW = 1;
                     RedColor_RED = 2;
                  };
                  RedColor red_color = 16 [json_name = "red-color"];
                  enum ColorAware {
                     INVALID_ENUM_VALUE_ColorAware = 0;
                     ColorAware_ENABLE = 1;
                  };
                  ColorAware color_aware = 17 [json_name = "color-aware"];
                  enum Identifier {
                     Identifier_NO = 0;
                     Identifier_NONE = 1;
                     Identifier_VID = 2;
                     Identifier_CEX_VID = 3;
                     Identifier_VIDX_CEX_VID = 4;
                  };
                  Identifier identifier = 18 [json_name = "identifier"];
               }
               repeated Car car = 1 [json_name = "car"];
            }
            Cars cars = 26 [json_name = "cars"];
            message ConvergentPrecedence {
               enum PriorityType {
                  INVALID_ENUM_VALUE_PriorityType = 0;
                  PriorityType_HIGH = 1;
               };
               PriorityType priority_type = 1 [json_name = "priority-type"];
            }
            ConvergentPrecedence convergent_precedence = 27 [json_name = "convergent-precedence"];
            message DropEligibleIndicatorVlan {
               string vlan_id = 1 [json_name = "vlan-id"];
            }
            DropEligibleIndicatorVlan drop_eligible_indicator_vlan = 28 [json_name = "drop-eligible-indicator-vlan"];
            message DropEligibleIndicator {
               bool enable = 1 [json_name = "enable"];
            }
            DropEligibleIndicator drop_eligible_indicator = 29 [json_name = "drop-eligible-indicator"];
            message TrustUntagIpPrecedence {
               enum Enable {
                  INVALID_ENUM_VALUE_Enable = 0;
                  Enable_ENABLE = 2;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            TrustUntagIpPrecedence trust_untag_ip_precedence = 30 [json_name = "trust-untag-ip-precedence"];
            message TrustIpPrecedences {
               message TrustIpPrecedence {
                  bool vlan_mode = 1 [json_name = "vlan-mode"];
                  string vlan_id = 2 [json_name = "vlan-id"];
               }
               repeated TrustIpPrecedence trust_ip_precedence = 1 [json_name = "trust-ip-precedence"];
            }
            TrustIpPrecedences trust_ip_precedences = 31 [json_name = "trust-ip-precedences"];
            message ShareShaping {
               enum Be {
                  Be_TRUE = 0;
               };
               Be be = 1 [json_name = "be"];
               enum Af1 {
                  INVALID_ENUM_VALUE_Af1 = 0;
                  Af1_TRUE = 1;
               };
               Af1 af1 = 2 [json_name = "af1"];
               enum Af2 {
                  INVALID_ENUM_VALUE_Af2 = 0;
                  Af2_TRUE = 2;
               };
               Af2 af2 = 3 [json_name = "af2"];
               enum Af3 {
                  INVALID_ENUM_VALUE_Af3 = 0;
                  Af3_TRUE = 3;
               };
               Af3 af3 = 4 [json_name = "af3"];
               enum Af4 {
                  INVALID_ENUM_VALUE_Af4 = 0;
                  Af4_TRUE = 4;
               };
               Af4 af4 = 5 [json_name = "af4"];
               enum Ef {
                  INVALID_ENUM_VALUE_Ef = 0;
                  Ef_TRUE = 5;
               };
               Ef ef = 6 [json_name = "ef"];
               enum Cs6 {
                  INVALID_ENUM_VALUE_Cs6 = 0;
                  Cs6_TRUE = 6;
               };
               Cs6 cs6 = 7 [json_name = "cs6"];
               enum Cs7 {
                  INVALID_ENUM_VALUE_Cs7 = 0;
                  Cs7_TRUE = 7;
               };
               Cs7 cs7 = 8 [json_name = "cs7"];
               enum QueueScheduleMode {
                  QueueScheduleMode_PQ = 0;
                  QueueScheduleMode_WFQ = 1;
                  QueueScheduleMode_LPQ = 2;
               };
               QueueScheduleMode queue_schedule_mode = 9 [json_name = "queue-schedule-mode"];
               uint32 weight = 10 [json_name = "weight"];
               uint32 pbs = 11 [json_name = "pbs"];
            }
            ShareShaping share_shaping = 32 [json_name = "share-shaping"];
            message SubPortQueueApplys {
               message SubPortQueueApply {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string sub_port_queue_name = 2 [json_name = "sub-port-queue-name"];
                  string group_name = 3 [json_name = "group-name"];
               }
               repeated SubPortQueueApply sub_port_queue_apply = 1 [json_name = "sub-port-queue-apply"];
            }
            SubPortQueueApplys sub_port_queue_applys = 33 [json_name = "sub-port-queue-applys"];
            message UserVlanUserGroupQueueApplys {
               message UserVlanUserGroupQueueApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pe_begin_vlan_id = 2 [json_name = "pe-begin-vlan-id"];
                  uint32 pe_end_vlan_id = 3 [json_name = "pe-end-vlan-id"];
                  uint32 ce_begin_vlan_id = 4 [json_name = "ce-begin-vlan-id"];
                  uint32 ce_end_vlan_id = 5 [json_name = "ce-end-vlan-id"];
                  enum IdentifierType {
                     IdentifierType_NONE = 0;
                     IdentifierType_VLANX_ID = 1;
                     IdentifierType_PEX_VID = 2;
                     IdentifierType_CEX_VID = 3;
                     IdentifierType_PEX_CEX_VID = 4;
                  };
                  IdentifierType identifier_type = 6 [json_name = "identifier-type"];
                  string user_group_queue_name = 7 [json_name = "user-group-queue-name"];
                  string group_name = 8 [json_name = "group-name"];
               }
               repeated UserVlanUserGroupQueueApply user_vlan_user_group_queue_apply = 1 [json_name = "user-vlan-user-group-queue-apply"];
            }
            UserVlanUserGroupQueueApplys user_vlan_user_group_queue_applys = 34 [json_name = "user-vlan-user-group-queue-applys"];
            message BrasMemberLinkSchedulers {
               message BrasMemberLinkScheduler {
                  enum UserAccessType {
                     INVALID_ENUM_VALUE_UserAccessType = 0;
                     UserAccessType_LEASEDX_LINEX_ACCESS = 10;
                     UserAccessType_SUBSCRIBERX_ACCESS = 13;
                  };
                  UserAccessType user_access_type = 1 [json_name = "user-access-type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated BrasMemberLinkScheduler bras_member_link_scheduler = 1 [json_name = "bras-member-link-scheduler"];
            }
            BrasMemberLinkSchedulers bras_member_link_schedulers = 35 [json_name = "bras-member-link-schedulers"];
            message ScheduleTreeDistributeModes {
               message ScheduleTreeDistributeMode {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               repeated ScheduleTreeDistributeMode schedule_tree_distribute_mode = 1 [json_name = "schedule-tree-distribute-mode"];
            }
            ScheduleTreeDistributeModes schedule_tree_distribute_modes = 36 [json_name = "schedule-tree-distribute-modes"];
            message LoopMode {
            }
            LoopMode loop_mode = 37 [json_name = "loop-mode"];
            message ResourcePools {
               message ResourcePool {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  enum PoolId {
                     PoolId_POOLX_0 = 0;
                     PoolId_POOLX_1 = 1;
                  };
                  PoolId pool_id = 2 [json_name = "pool-id"];
               }
               repeated ResourcePool resource_pool = 1 [json_name = "resource-pool"];
            }
            ResourcePools resource_pools = 38 [json_name = "resource-pools"];
            message UserGroupQueueApplys {
               message UserGroupQueueApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string group_queue_name = 2 [json_name = "group-queue-name"];
                  string group_name = 3 [json_name = "group-name"];
               }
               repeated UserGroupQueueApply user_group_queue_apply = 1 [json_name = "user-group-queue-apply"];
            }
            UserGroupQueueApplys user_group_queue_applys = 39 [json_name = "user-group-queue-applys"];
            message MplsL2Vc {
               string diffserv_domain_name = 1 [json_name = "diffserv-domain-name"];
            }
            MplsL2Vc mpls_l2vc = 40 [json_name = "mpls-l2vc"];
            message MemberLinkSchedulers {
               message MemberLinkScheduler {
                  enum MemberLinkSchedulerType {
                     INVALID_ENUM_VALUE_MemberLinkSchedulerType = 0;
                     MemberLinkSchedulerType_TRAFFICX_CAR = 1;
                     MemberLinkSchedulerType_QOSX_CAR = 2;
                     MemberLinkSchedulerType_PORTX_SHAPING = 3;
                     MemberLinkSchedulerType_HARDX_PIPE = 4;
                     MemberLinkSchedulerType_USERX_QUEUE = 5;
                     MemberLinkSchedulerType_PROFILEX_CAR = 7;
                     MemberLinkSchedulerType_HQOSX_OUTBOUND = 8;
                     MemberLinkSchedulerType_MPLSX_TE = 9;
                  };
                  MemberLinkSchedulerType member_link_scheduler_type = 1 [json_name = "member-link-scheduler-type"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated MemberLinkScheduler member_link_scheduler = 1 [json_name = "member-link-scheduler"];
            }
            MemberLinkSchedulers member_link_schedulers = 41 [json_name = "member-link-schedulers"];
            message QosLr {
            }
            QosLr qos_lr = 42 [json_name = "qos-lr"];
            message LdpTraffic {
               enum TrafficType {
                  INVALID_ENUM_VALUE_TrafficType = 0;
                  TrafficType_LDPX_TRAFFIC = 1;
               };
               TrafficType traffic_type = 1 [json_name = "traffic-type"];
            }
            LdpTraffic ldp_traffic = 43 [json_name = "ldp-traffic"];
            message BufferPolicyMode {
               enum BufferMode {
                  BufferMode_NORMAL = 0;
                  BufferMode_LARGE = 1;
               };
               BufferMode buffer_mode = 1 [json_name = "buffer-mode"];
            }
            BufferPolicyMode buffer_policy_mode = 44 [json_name = "buffer-policy-mode"];
            message HardPipeApply {
               enum Mode {
                  Mode_SHAREX_MODE = 0;
                  Mode_EXCLUSIVEX_MODE = 1;
               };
               Mode mode = 1 [json_name = "mode"];
               uint32 bandwidth = 2 [json_name = "bandwidth"];
            }
            HardPipeApply hard_pipe_apply = 45 [json_name = "hard-pipe-apply"];
            message ChannelAdjustment {
               uint32 adjust_value = 1 [json_name = "adjust-value"];
            }
            ChannelAdjustment channel_adjustment = 46 [json_name = "channel-adjustment"];
            message UserVlanProfileApplys {
               message UserVlanProfileApply {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pe_begin_vlan_id = 2 [json_name = "pe-begin-vlan-id"];
                  uint32 pe_end_vlan_id = 3 [json_name = "pe-end-vlan-id"];
                  uint32 ce_begin_vlan_id = 4 [json_name = "ce-begin-vlan-id"];
                  uint32 ce_end_vlan_id = 5 [json_name = "ce-end-vlan-id"];
                  string profile_name = 6 [json_name = "profile-name"];
                  enum EachVlan {
                     EachVlan_NO = 0;
                     EachVlan_YES = 1;
                  };
                  EachVlan each_vlan = 7 [json_name = "each-vlan"];
               }
               repeated UserVlanProfileApply user_vlan_profile_apply = 1 [json_name = "user-vlan-profile-apply"];
            }
            UserVlanProfileApplys user_vlan_profile_applys = 47 [json_name = "user-vlan-profile-applys"];
            message ServiceTemplateShaping {
               message AllServiceClass {
                  string service_template_name = 1 [json_name = "service-template-name"];
               }
               AllServiceClass all_service_class = 1 [json_name = "all-service-class"];
               message SpecificServiceClasss {
                  message SpecificServiceClass {
                     enum ServiceClass {
                        ServiceClass_BE = 0;
                        ServiceClass_AF1 = 1;
                        ServiceClass_AF2 = 2;
                        ServiceClass_AF3 = 3;
                        ServiceClass_AF4 = 4;
                        ServiceClass_EF = 5;
                        ServiceClass_CS6 = 6;
                        ServiceClass_CS7 = 7;
                     };
                     ServiceClass service_class = 1 [json_name = "service-class"];
                     string service_template_name = 2 [json_name = "service-template-name"];
                  }
                  repeated SpecificServiceClass specific_service_class = 1 [json_name = "specific-service-class"];
               }
               SpecificServiceClasss specific_service_classs = 2 [json_name = "specific-service-classs"];
            }
            ServiceTemplateShaping service_template_shaping = 48 [json_name = "service-template-shaping"];
            message DefaultServiceClassRemote {
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
               };
               ServiceClass service_class = 1 [json_name = "service-class"];
            }
            DefaultServiceClassRemote default_service_class_remote = 49 [json_name = "default-service-class-remote"];
            message TrustRemotes {
               message TrustRemote {
                  enum Type {
                     Type_IPX_DSCP = 0;
                     Type_X_8021P = 1;
                  };
                  Type type = 1 [json_name = "type"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_INBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  bool vlan_mode = 3 [json_name = "vlan-mode"];
                  uint32 begin_vlan = 4 [json_name = "begin-vlan"];
                  uint32 end_vlan = 5 [json_name = "end-vlan"];
                  string diffserv_domain_name = 6 [json_name = "diffserv-domain-name"];
                  enum Type8021P {
                     INVALID_ENUM_VALUE_Type8021P = 0;
                     Type8021P_X_8021P = 1;
                     Type8021P_OUTERX_8021P = 2;
                     Type8021P_INNERX_8021P = 3;
                  };
                  Type8021P type_8021p = 7 [json_name = "type-8021p"];
               }
               repeated TrustRemote trust_remote = 1 [json_name = "trust-remote"];
            }
            TrustRemotes trust_remotes = 50 [json_name = "trust-remotes"];
            message WfqShaping {
            }
            WfqShaping wfq_shaping = 51 [json_name = "wfq-shaping"];
            message SourceBoardScheduleWeights {
               message SourceBoardScheduleWeight {
                  string slot_id = 1 [json_name = "slot-id"];
                  uint32 weight_value = 2 [json_name = "weight-value"];
               }
               repeated SourceBoardScheduleWeight source_board_schedule_weight = 1 [json_name = "source-board-schedule-weight"];
            }
            SourceBoardScheduleWeights source_board_schedule_weights = 52 [json_name = "source-board-schedule-weights"];
            message DeficitUnit {
               enum Unit {
                  INVALID_ENUM_VALUE_Unit = 0;
                  Unit_X_1K = 4;
                  Unit_X_2K = 5;
               };
               Unit unit = 1 [json_name = "unit"];
            }
            DeficitUnit deficit_unit = 53 [json_name = "deficit-unit"];
            message DefaultUserQueue {
               enum Direction {
                  INVALID_ENUM_VALUE_Direction = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 1 [json_name = "direction"];
               uint32 cir = 2 [json_name = "cir"];
               uint32 cbs = 3 [json_name = "cbs"];
               uint32 pir = 4 [json_name = "pir"];
               uint32 pbs = 5 [json_name = "pbs"];
               uint32 weight = 6 [json_name = "weight"];
            }
            DefaultUserQueue default_user_queue = 54 [json_name = "default-user-queue"];
            message VniCfgPeers {
               message VniCfgPeer {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 vni_id = 2 [json_name = "vni-id"];
                  string source_ip = 3 [json_name = "source-ip"];
                  string peer_ip = 4 [json_name = "peer-ip"];
                  string profile_name = 5 [json_name = "profile-name"];
               }
               repeated VniCfgPeer vni_cfg_peer = 1 [json_name = "vni-cfg-peer"];
            }
            VniCfgPeers vni_cfg_peers = 55 [json_name = "vni-cfg-peers"];
            message QosVllPipe {
               bool split_mode = 1 [json_name = "split-mode"];
               enum PipeMode {
                  INVALID_ENUM_VALUE_PipeMode = 0;
                  PipeMode_PIPE = 1;
                  PipeMode_SHORTPIPE = 2;
                  PipeMode_UNIFORM = 3;
               };
               PipeMode pipe_mode = 2 [json_name = "pipe-mode"];
               enum IngressPipeMode {
                  INVALID_ENUM_VALUE_IngressPipeMode = 0;
                  IngressPipeMode_PIPE = 1;
                  IngressPipeMode_SHORTPIPE = 2;
                  IngressPipeMode_UNIFORM = 3;
               };
               IngressPipeMode ingress_pipe_mode = 3 [json_name = "ingress-pipe-mode"];
               enum EgressPipeMode {
                  INVALID_ENUM_VALUE_EgressPipeMode = 0;
                  EgressPipeMode_PIPE = 1;
                  EgressPipeMode_SHORTPIPE = 2;
                  EgressPipeMode_UNIFORM = 3;
               };
               EgressPipeMode egress_pipe_mode = 4 [json_name = "egress-pipe-mode"];
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
               };
               ServiceClass service_class = 5 [json_name = "service-class"];
               enum Color {
                  Color_GREEN = 0;
                  Color_YELLOW = 1;
                  Color_RED = 2;
               };
               Color color = 6 [json_name = "color"];
               string domain_name = 7 [json_name = "domain-name"];
               enum TrustType {
                  TrustType_OUTPRI = 0;
                  TrustType_INPRI = 1;
                  TrustType_IPDSCP = 2;
               };
               TrustType trust_type = 8 [json_name = "trust-type"];
            }
            QosVllPipe qos_vll_pipe = 56 [json_name = "qos-vll-pipe"];
            message LocalIdEnable {
               enum Mode {
                  Mode_SOURCE = 0;
                  Mode_DESTINATION = 1;
               };
               Mode mode = 1 [json_name = "mode"];
               bool both = 2 [json_name = "both"];
            }
            LocalIdEnable local_id_enable = 57 [json_name = "local-id-enable"];
            message Qppb {
               message Policys {
                  message Policy {
                     enum Direction {
                        INVALID_ENUM_VALUE_Direction = 0;
                        Direction_INBOUND = 2;
                        Direction_OUTBOUND = 3;
                     };
                     Direction direction = 1 [json_name = "direction"];
                     string policy_name = 2 [json_name = "policy-name"];
                     enum Mode {
                        Mode_SOURCE = 0;
                        Mode_DESTINATION = 1;
                     };
                     Mode mode = 3 [json_name = "mode"];
                     bool share_mode = 4 [json_name = "share-mode"];
                  }
                  repeated Policy policy = 1 [json_name = "policy"];
               }
               Policys policys = 1 [json_name = "policys"];
               message IpPrecedence {
                  enum Mode {
                     Mode_SOURCE = 0;
                     Mode_DESTINATION = 1;
                  };
                  Mode mode = 1 [json_name = "mode"];
               }
               IpPrecedence ip_precedence = 2 [json_name = "ip-precedence"];
            }
            Qppb qppb = 58 [json_name = "qppb"];
         }
         Qos qos = 50 [json_name = "qos"];
         message BfdExt {
            bool transparent_tx_flag = 1 [json_name = "transparent-tx-flag"];
         }
         BfdExt bfd_ext = 51 [json_name = "bfd-ext"];
         message ArpSending {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_DUALX_SEND = 1;
               Type_SINGLEX_SEND = 2;
            };
            Type type = 1 [json_name = "type"];
            uint32 expire_time = 2 [json_name = "expire-time"];
         }
         ArpSending arp_sending = 52 [json_name = "arp-sending"];
         message NdSending {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_DUALX_SEND = 1;
            };
            Type type = 1 [json_name = "type"];
            uint32 expire_time = 2 [json_name = "expire-time"];
         }
         NdSending nd_sending = 53 [json_name = "nd-sending"];
         message Nve {
            message Attribute {
               string source_vtep_ip = 1 [json_name = "source-vtep-ip"];
               string source_vtep_ipv6 = 2 [json_name = "source-vtep-ipv6"];
               string phys_address = 3 [json_name = "phys-address"];
               string bypass_vtep_ip = 4 [json_name = "bypass-vtep-ip"];
               string bypass_vtep_ipv6 = 5 [json_name = "bypass-vtep-ipv6"];
            }
            Attribute attribute = 1 [json_name = "attribute"];
            message Pip {
               string source_ip = 1 [json_name = "source-ip"];
               string peer_ip = 2 [json_name = "peer-ip"];
            }
            Pip pip = 2 [json_name = "pip"];
         }
         Nve nve = 54 [json_name = "nve"];
         message Nvo3Gateway {
            bool vxlan_anycast_gateway = 1 [json_name = "vxlan-anycast-gateway"];
            bool common_anycast_gateway = 2 [json_name = "common-anycast-gateway"];
         }
         Nvo3Gateway nvo3_gateway = 55 [json_name = "nvo3-gateway"];
         message Bas {
            message EapAuthenticationDomainIndividual {
               bool enable = 1 [json_name = "enable"];
            }
            EapAuthenticationDomainIndividual eap_authentication_domain_individual = 1 [json_name = "eap-authentication-domain-individual"];
            message BasInterface {
               message Information {
                  bool is_static_user_exist = 1 [json_name = "is-static-user-exist"];
                  bool is_selected = 2 [json_name = "is-selected"];
                  int32 increased_user_num = 3 [json_name = "increased-user-num"];
               }
               Information information = 1 [json_name = "information"];
               message AccessUsers {
                  message AccessUser {
                     uint32 pe_vlan = 1 [json_name = "pe-vlan"];
                     uint32 ce_vlan = 2 [json_name = "ce-vlan"];
                     uint32 user_number = 3 [json_name = "user-number"];
                     uint32 ipoe_user_number = 4 [json_name = "ipoe-user-number"];
                     uint32 pppoe_user_number = 5 [json_name = "pppoe-user-number"];
                  }
                  repeated AccessUser access_user = 1 [json_name = "access-user"];
               }
               AccessUsers access_users = 2 [json_name = "access-users"];
               message Statistics {
                  string last_statistics_time = 1 [json_name = "last-statistics-time"];
                  uint32 input_rate = 2 [json_name = "input-rate"];
                  uint32 output_rate = 3 [json_name = "output-rate"];
               }
               Statistics statistics = 3 [json_name = "statistics"];
            }
            BasInterface bas_interface = 2 [json_name = "bas-interface"];
            message PppoeBasStatics {
               uint32 active_session = 1 [json_name = "active-session"];
               uint32 total_sessions = 2 [json_name = "total-sessions"];
               uint32 receive_padi_packets = 3 [json_name = "receive-padi-packets"];
               uint32 discard_padi_packets = 4 [json_name = "discard-padi-packets"];
               uint32 send_pado_packets = 5 [json_name = "send-pado-packets"];
               uint32 receive_padr_packets = 6 [json_name = "receive-padr-packets"];
               uint32 discard_padr_packets = 7 [json_name = "discard-padr-packets"];
               uint32 send_pads_packets = 8 [json_name = "send-pads-packets"];
               uint32 discard_padr_same_mac = 9 [json_name = "discard-padr-same-mac"];
               uint32 receive_padt_packets = 10 [json_name = "receive-padt-packets"];
               uint32 discard_padt_packets = 11 [json_name = "discard-padt-packets"];
               uint32 send_padt_packets = 12 [json_name = "send-padt-packets"];
               uint32 send_padm_packets = 13 [json_name = "send-padm-packets"];
               uint32 send_padm_url_packets = 14 [json_name = "send-padm-url-packets"];
               uint32 send_padm_motm_packets = 15 [json_name = "send-padm-motm-packets"];
               uint32 send_padn_packets = 16 [json_name = "send-padn-packets"];
               uint32 receive_session_packets = 17 [json_name = "receive-session-packets"];
               uint32 discard_session_packets = 18 [json_name = "discard-session-packets"];
               uint32 send_session_packets = 19 [json_name = "send-session-packets"];
               uint32 receive_packets = 20 [json_name = "receive-packets"];
               uint32 discard_packets = 21 [json_name = "discard-packets"];
               uint32 invalid_version = 22 [json_name = "invalid-version"];
               uint32 invalid_pad_code = 23 [json_name = "invalid-pad-code"];
               uint32 invalid_pad_tags = 24 [json_name = "invalid-pad-tags"];
               uint32 invalid_pad_tag_length = 25 [json_name = "invalid-pad-tag-length"];
               uint32 invalid_pad_type = 26 [json_name = "invalid-pad-type"];
               uint32 invalid_padi_sessions = 27 [json_name = "invalid-padi-sessions"];
               uint32 invalid_padr_sessions = 28 [json_name = "invalid-padr-sessions"];
               uint32 invalid_pad_packet_length = 29 [json_name = "invalid-pad-packet-length"];
               uint32 other_invalid_pad_packets = 30 [json_name = "other-invalid-pad-packets"];
               uint32 total_invalid_pad_packets = 31 [json_name = "total-invalid-pad-packets"];
            }
            PppoeBasStatics pppoe_bas_statics = 3 [json_name = "pppoe-bas-statics"];
            message PppBasStatistics {
               uint32 send_echo_request = 1 [json_name = "send-echo-request"];
               uint32 send_echo_reply = 2 [json_name = "send-echo-reply"];
               uint32 send_echo_failed = 3 [json_name = "send-echo-failed"];
               uint32 receive_echo_reply = 4 [json_name = "receive-echo-reply"];
               uint32 receive_echo_request = 5 [json_name = "receive-echo-request"];
               uint32 send_echo_receipt_fast = 6 [json_name = "send-echo-receipt-fast"];
               uint32 receive_echo_request_fast = 7 [json_name = "receive-echo-request-fast"];
               uint32 send_lcp_connection_request = 8 [json_name = "send-lcp-connection-request"];
               uint32 send_lcp_connection_nak = 9 [json_name = "send-lcp-connection-nak"];
               uint32 send_lcp_connection_rejection = 10 [json_name = "send-lcp-connection-rejection"];
               uint32 send_lcp_connection_ack = 11 [json_name = "send-lcp-connection-ack"];
               uint32 send_lcp_code_rejection = 12 [json_name = "send-lcp-code-rejection"];
               uint32 send_lcp_protocol_rejection = 13 [json_name = "send-lcp-protocol-rejection"];
               uint32 send_lcp_termination_request = 14 [json_name = "send-lcp-termination-request"];
               uint32 send_lcp_termination_ack = 15 [json_name = "send-lcp-termination-ack"];
               uint32 receive_lcp_connection_request = 16 [json_name = "receive-lcp-connection-request"];
               uint32 receive_lcp_connection_nak = 17 [json_name = "receive-lcp-connection-nak"];
               uint32 receive_lcp_connection_rejection = 18 [json_name = "receive-lcp-connection-rejection"];
               uint32 receive_lcp_connection_ack = 19 [json_name = "receive-lcp-connection-ack"];
               uint32 receive_lcp_code_rejection = 20 [json_name = "receive-lcp-code-rejection"];
               uint32 receive_lcp_protocol_rejection = 21 [json_name = "receive-lcp-protocol-rejection"];
               uint32 receive_lcp_termination_request = 22 [json_name = "receive-lcp-termination-request"];
               uint32 receive_lcp_termination_ack = 23 [json_name = "receive-lcp-termination-ack"];
               uint32 send_ipcp_connection_request = 24 [json_name = "send-ipcp-connection-request"];
               uint32 send_ipcp_connection_nak = 25 [json_name = "send-ipcp-connection-nak"];
               uint32 send_ipcp_connection_rejection = 26 [json_name = "send-ipcp-connection-rejection"];
               uint32 send_ipcp_connection_ack = 27 [json_name = "send-ipcp-connection-ack"];
               uint32 send_ipcp_code_rejection = 28 [json_name = "send-ipcp-code-rejection"];
               uint32 send_ipcp_protocol_rejection = 29 [json_name = "send-ipcp-protocol-rejection"];
               uint32 send_ipcp_termination_request = 30 [json_name = "send-ipcp-termination-request"];
               uint32 send_ipccp_termination_ack = 31 [json_name = "send-ipccp-termination-ack"];
               uint32 receive_ipcp_connection_request = 32 [json_name = "receive-ipcp-connection-request"];
               uint32 receive_ipcp_connection_nak = 33 [json_name = "receive-ipcp-connection-nak"];
               uint32 receive_ipcp_connection_rejection = 34 [json_name = "receive-ipcp-connection-rejection"];
               uint32 receive_ipcp_connection_ack = 35 [json_name = "receive-ipcp-connection-ack"];
               uint32 receive_ipcp_code_rejection = 36 [json_name = "receive-ipcp-code-rejection"];
               uint32 receive_ipcp_protocol_rejection = 37 [json_name = "receive-ipcp-protocol-rejection"];
               uint32 receive_ipcp_termination_request = 38 [json_name = "receive-ipcp-termination-request"];
               uint32 receive_ipcp_termination_ack = 39 [json_name = "receive-ipcp-termination-ack"];
               uint32 send_ip6cp_connection_request = 40 [json_name = "send-ip6cp-connection-request"];
               uint32 send_ip6cp_connection_nak = 41 [json_name = "send-ip6cp-connection-nak"];
               uint32 send_ip6cp_connection_rejection = 42 [json_name = "send-ip6cp-connection-rejection"];
               uint32 send_ip6cp_connection_ack = 43 [json_name = "send-ip6cp-connection-ack"];
               uint32 send_ip6cp_code_rejection = 44 [json_name = "send-ip6cp-code-rejection"];
               uint32 send_ip6cp_protocol_rejection = 45 [json_name = "send-ip6cp-protocol-rejection"];
               uint32 send_ip6cp_termination_request = 46 [json_name = "send-ip6cp-termination-request"];
               uint32 send_ip6cp_termination_ack = 47 [json_name = "send-ip6cp-termination-ack"];
               uint32 receive_ip6cp_connection_request = 48 [json_name = "receive-ip6cp-connection-request"];
               uint32 receive_ip6cp_connection_nak = 49 [json_name = "receive-ip6cp-connection-nak"];
               uint32 receive_ip6cp_connection_reject = 50 [json_name = "receive-ip6cp-connection-reject"];
               uint32 receive_ip6cp_connection_ack = 51 [json_name = "receive-ip6cp-connection-ack"];
               uint32 receive_ip6cp_code_rejection = 52 [json_name = "receive-ip6cp-code-rejection"];
               uint32 receive_ip6cp_protocol_rejection = 53 [json_name = "receive-ip6cp-protocol-rejection"];
               uint32 receive_ip6cp_termination_request = 54 [json_name = "receive-ip6cp-termination-request"];
               uint32 receive_ip6cp_termination_ack = 55 [json_name = "receive-ip6cp-termination-ack"];
               uint32 send_pap_authentication_ack = 56 [json_name = "send-pap-authentication-ack"];
               uint32 send_pap_authentication_nak = 57 [json_name = "send-pap-authentication-nak"];
               uint32 send_chap_challenge = 58 [json_name = "send-chap-challenge"];
               uint32 send_chap_authentication_ack = 59 [json_name = "send-chap-authentication-ack"];
               uint32 send_chap_authentication_fail = 60 [json_name = "send-chap-authentication-fail"];
               uint32 discard_dail_fast = 61 [json_name = "discard-dail-fast"];
               uint32 discard_chasten = 62 [json_name = "discard-chasten"];
               uint32 receive_pap_authentication_request = 63 [json_name = "receive-pap-authentication-request"];
               uint32 receive_chap_response = 64 [json_name = "receive-chap-response"];
            }
            PppBasStatistics ppp_bas_statistics = 4 [json_name = "ppp-bas-statistics"];
         }
         Bas bas = 56 [json_name = "bas"];
         message Bras {
            message LoadBalanceMode {
               enum Mode {
                  Mode_USERX_MODE = 0;
                  Mode_FLOWX_MODE = 1;
                  Mode_REALX_FLOWX_MODE = 2;
               };
               Mode mode = 1 [json_name = "mode"];
            }
            LoadBalanceMode load_balance_mode = 1 [json_name = "load-balance-mode"];
            message Multicast {
               message BandwidthLimitPolicy {
                  string name = 1 [json_name = "name"];
                  uint32 total = 2 [json_name = "total"];
                  uint32 level1 = 3 [json_name = "level1"];
               }
               BandwidthLimitPolicy bandwidth_limit_policy = 1 [json_name = "bandwidth-limit-policy"];
            }
            Multicast multicast = 2 [json_name = "multicast"];
            message BrasUserManage {
               message PortAccessLimit {
                  uint32 number = 1 [json_name = "number"];
               }
               PortAccessLimit port_access_limit = 1 [json_name = "port-access-limit"];
            }
            BrasUserManage bras_user_manage = 3 [json_name = "bras-user-manage"];
         }
         Bras bras = 57 [json_name = "bras"];
         message PppoeBindVt {
            string name = 1 [json_name = "name"];
         }
         PppoeBindVt pppoe_bind_vt = 58 [json_name = "pppoe-bind-vt"];
         message PppoeVt {
            enum AuthenModePriority {
               INVALID_ENUM_VALUE_AuthenModePriority = 0;
               AuthenModePriority_PAP = 1;
               AuthenModePriority_CHAP = 2;
               AuthenModePriority_MSCHAPV1 = 3;
               AuthenModePriority_MSCHAPV2 = 4;
            };
            repeated AuthenModePriority authen_mode_priority = 1 [json_name = "authen-mode-priority"];
            uint32 keep_alive_interval = 2 [json_name = "keep-alive-interval"];
            uint32 keep_alive_times = 3 [json_name = "keep-alive-times"];
            uint32 keep_alive_response_interval = 4 [json_name = "keep-alive-response-interval"];
            bool keep_alive_data_check = 5 [json_name = "keep-alive-data-check"];
            string motm = 6 [json_name = "motm"];
            string motm_delimiter = 7 [json_name = "motm-delimiter"];
            uint32 negotiate_interval = 8 [json_name = "negotiate-interval"];
            uint32 negotiate_times = 9 [json_name = "negotiate-times"];
            string ac_name = 10 [json_name = "ac-name"];
            repeated string service_name = 11 [json_name = "service-name"];
            bool exact_match = 12 [json_name = "exact-match"];
            enum PadnSend {
               INVALID_ENUM_VALUE_PadnSend = 0;
               PadnSend_IPCP = 1;
               PadnSend_IPV6CP = 2;
               PadnSend_FIRSTNCP = 3;
               PadnSend_LASTNCP = 4;
               PadnSend_ALLNCP = 5;
            };
            PadnSend padn_send = 13 [json_name = "padn-send"];
            enum PadmSend {
               INVALID_ENUM_VALUE_PadmSend = 0;
               PadmSend_IPCP = 1;
               PadmSend_IPV6CP = 2;
               PadmSend_FIRSTNCP = 3;
               PadmSend_LASTNCP = 4;
               PadmSend_ALLNCP = 5;
            };
            PadmSend padm_send = 14 [json_name = "padm-send"];
            bool keep_alive_adjust_system = 15 [json_name = "keep-alive-adjust-system"];
            bool keep_alive_adjust_retransmit = 16 [json_name = "keep-alive-adjust-retransmit"];
            uint32 mru = 17 [json_name = "mru"];
            bool lcp_delay = 18 [json_name = "lcp-delay"];
            bool lcp_delay_force = 19 [json_name = "lcp-delay-force"];
            string chap_user_name = 20 [json_name = "chap-user-name"];
         }
         PppoeVt pppoe_vt = 59 [json_name = "pppoe-vt"];
         message TcpMssValue {
            uint32 mss_value = 1 [json_name = "mss-value"];
         }
         TcpMssValue tcp_mss_value = 60 [json_name = "tcp-mss-value"];
         message Ipv4Urpf {
            bool strict_check = 1 [json_name = "strict-check"];
            bool subnet_check = 2 [json_name = "subnet-check"];
         }
         Ipv4Urpf ipv4_urpf = 61 [json_name = "ipv4-urpf"];
         message Ipv6Urpf {
            bool strict_check = 1 [json_name = "strict-check"];
            bool subnet_check = 2 [json_name = "subnet-check"];
         }
         Ipv6Urpf ipv6_urpf = 62 [json_name = "ipv6-urpf"];
         message RoamDomain {
            string roam_domain_name = 1 [json_name = "roam-domain-name"];
         }
         RoamDomain roam_domain = 63 [json_name = "roam-domain"];
         message PtpPortSrcs {
            bool port_enable = 1 [json_name = "port-enable"];
            int32 port_num = 2 [json_name = "port-num"];
            enum PortState {
               PortState_SLAVE = 0;
               PortState_UNCALIBRATED = 1;
               PortState_PASSIVE = 2;
               PortState_MASTER = 3;
               PortState_PREMASTER = 4;
               PortState_LISTENING = 5;
               PortState_FAULTY = 6;
               PortState_DISABLED = 7;
               PortState_INITIALIZING = 8;
            };
            PortState port_state = 3 [json_name = "port-state"];
            string permit_dmac = 4 [json_name = "permit-dmac"];
            message PtpPortAdvance {
               uint32 port_domain = 1 [json_name = "port-domain"];
               enum PortTypeSet {
                  PortTypeSet_NONE = 0;
                  PortTypeSet_OC = 1;
                  PortTypeSet_BC = 2;
                  PortTypeSet_TC = 3;
                  PortTypeSet_TCOC = 4;
                  PortTypeSet_TX_BC = 5;
                  PortTypeSet_TX_TC = 6;
               };
               PortTypeSet port_type_set = 2 [json_name = "port-type-set"];
               enum PortType {
                  PortType_NONE = 0;
                  PortType_OC = 1;
                  PortType_BC = 2;
                  PortType_TC = 3;
                  PortType_TCOC = 4;
                  PortType_TX_BC = 5;
                  PortType_TX_TC = 6;
               };
               PortType port_type = 3 [json_name = "port-type"];
               enum DelayMechanism {
                  DelayMechanism_DELAY = 0;
                  DelayMechanism_PDELAY = 1;
               };
               DelayMechanism delay_mechanism = 4 [json_name = "delay-mechanism"];
               enum PortCfgState {
                  PortCfgState_SLAVE = 0;
                  PortCfgState_UNCALIBRATED = 1;
                  PortCfgState_PASSIVE = 2;
                  PortCfgState_MASTER = 3;
                  PortCfgState_PREMASTER = 4;
                  PortCfgState_LISTENING = 5;
                  PortCfgState_FAULTY = 6;
                  PortCfgState_DISABLED = 7;
                  PortCfgState_INITIALIZING = 8;
               };
               PortCfgState port_cfg_state = 5 [json_name = "port-cfg-state"];
               enum ClkStep {
                  ClkStep_ONESTEP = 0;
                  ClkStep_TWOSTEP = 1;
               };
               ClkStep clk_step = 6 [json_name = "clk-step"];
               bool not_slave = 7 [json_name = "not-slave"];
               int32 port_local_priority = 8 [json_name = "port-local-priority"];
            }
            PtpPortAdvance ptp_port_advance = 5 [json_name = "ptp-port-advance"];
            message PtpPktPack {
               enum PktPackType {
                  PktPackType_MAC = 0;
                  PktPackType_UDP = 1;
                  PktPackType_NONE = 2;
               };
               PktPackType pkt_pack_type = 1 [json_name = "pkt-pack-type"];
               message PtpPktMacPack {
                  string mac_egress_dest_mac = 1 [json_name = "mac-egress-dest-mac"];
                  int32 mac_egress_vlan_id = 2 [json_name = "mac-egress-vlan-id"];
                  int32 mac_egress_pkt_priority = 3 [json_name = "mac-egress-pkt-priority"];
               }
               PtpPktMacPack ptp_pkt_mac_pack = 2 [json_name = "ptp-pkt-mac-pack"];
               message PtpPktUdpPack {
                  string udp_egress_src_ip = 1 [json_name = "udp-egress-src-ip"];
                  string udp_egress_dest_ip = 2 [json_name = "udp-egress-dest-ip"];
                  int32 udp_egress_dscp = 3 [json_name = "udp-egress-dscp"];
                  int32 udp_egress_vlan_id = 4 [json_name = "udp-egress-vlan-id"];
                  int32 udp_egress_pkt_priority = 5 [json_name = "udp-egress-pkt-priority"];
                  string udp_egress_dest_mac = 6 [json_name = "udp-egress-dest-mac"];
               }
               PtpPktUdpPack ptp_pkt_udp_pack = 3 [json_name = "ptp-pkt-udp-pack"];
            }
            PtpPktPack ptp_pkt_pack = 6 [json_name = "ptp-pkt-pack"];
            message PtpPeerClock {
               string peer_port_clk_id = 1 [json_name = "peer-port-clk-id"];
               int32 peer_port_num = 2 [json_name = "peer-port-num"];
               int32 peer_announce_send_interval = 3 [json_name = "peer-announce-send-interval"];
            }
            PtpPeerClock ptp_peer_clock = 7 [json_name = "ptp-peer-clock"];
            message PtpPktControl {
               bool announce_drop = 1 [json_name = "announce-drop"];
               bool delay_req_send_disable = 2 [json_name = "delay-req-send-disable"];
               int32 announce_interval = 3 [json_name = "announce-interval"];
               int32 announce_receipt_timeout = 4 [json_name = "announce-receipt-timeout"];
               int32 sync_interval = 5 [json_name = "sync-interval"];
               int32 min_delay_req_interval = 6 [json_name = "min-delay-req-interval"];
               int32 min_pdelay_req_interval = 7 [json_name = "min-pdelay-req-interval"];
            }
            PtpPktControl ptp_pkt_control = 8 [json_name = "ptp-pkt-control"];
            message PtpAsymmetryCorrection {
               enum CorrectionFlag {
                  CorrectionFlag_NEGATIVE = 0;
                  CorrectionFlag_POSITIVE = 1;
               };
               CorrectionFlag correction_flag = 1 [json_name = "correction-flag"];
               int32 correction_value = 2 [json_name = "correction-value"];
            }
            PtpAsymmetryCorrection ptp_asymmetry_correction = 9 [json_name = "ptp-asymmetry-correction"];
            message PtpTcocStaticClockSrc {
               string tcoc_static_clk_id = 1 [json_name = "tcoc-static-clk-id"];
               int32 tcoc_static_clk_port_num = 2 [json_name = "tcoc-static-clk-port-num"];
            }
            PtpTcocStaticClockSrc ptp_tcoc_static_clock_src = 10 [json_name = "ptp-tcoc-static-clock-src"];
            message PtpRingFiberLengthChange {
               enum ChangeValueFlag {
                  ChangeValueFlag_NEGATIVE = 0;
                  ChangeValueFlag_POSITIVE = 1;
               };
               ChangeValueFlag change_value_flag = 1 [json_name = "change-value-flag"];
               uint32 change_value = 2 [json_name = "change-value"];
            }
            PtpRingFiberLengthChange ptp_ring_fiber_length_change = 11 [json_name = "ptp-ring-fiber-length-change"];
         }
         PtpPortSrcs ptp_port_srcs = 64 [json_name = "ptp-port-srcs"];
         message VinterLinks {
            string src_name = 1 [json_name = "src-name"];
         }
         VinterLinks vinter_links = 65 [json_name = "vinter-links"];
         message ClocksyncFlexe {
            message PhyPorts {
               message PhyPort {
                  string lgc_port_name = 1 [json_name = "lgc-port-name"];
               }
               PhyPort phy_port = 1 [json_name = "phy-port"];
            }
            PhyPorts phy_ports = 1 [json_name = "phy-ports"];
         }
         ClocksyncFlexe clocksync_flexe = 66 [json_name = "clocksync-flexe"];
         message GpsPortSrcs {
            message GpsPortSrc {
               int32 gps_sfp_ptp_priority1 = 1 [json_name = "gps-sfp-ptp-priority1"];
               int32 gps_sfp_ptp_priority2 = 2 [json_name = "gps-sfp-ptp-priority2"];
               int32 gps_sfp_ptp_domain = 3 [json_name = "gps-sfp-ptp-domain"];
               bool gps_sfp_recovery_enable = 4 [json_name = "gps-sfp-recovery-enable"];
               enum GnssModelPri1 {
                  INVALID_ENUM_VALUE_GnssModelPri1 = 0;
                  GnssModelPri1_GPS = 1;
                  GnssModelPri1_GLONASS = 2;
                  GnssModelPri1_BEIDOU = 3;
                  GnssModelPri1_GPSX_GLONASS = 4;
                  GnssModelPri1_GPSX_BEIDOU = 5;
               };
               GnssModelPri1 gnss_model_pri1 = 5 [json_name = "gnss-model-pri1"];
               enum GnssModelPri2 {
                  INVALID_ENUM_VALUE_GnssModelPri2 = 0;
                  GnssModelPri2_GPS = 1;
                  GnssModelPri2_GLONASS = 2;
                  GnssModelPri2_BEIDOU = 3;
                  GnssModelPri2_GPSX_GLONASS = 4;
                  GnssModelPri2_GPSX_BEIDOU = 5;
               };
               GnssModelPri2 gnss_model_pri2 = 6 [json_name = "gnss-model-pri2"];
               enum GnssModelPri3 {
                  INVALID_ENUM_VALUE_GnssModelPri3 = 0;
                  GnssModelPri3_GPS = 1;
                  GnssModelPri3_GLONASS = 2;
                  GnssModelPri3_BEIDOU = 3;
                  GnssModelPri3_GPSX_GLONASS = 4;
                  GnssModelPri3_GPSX_BEIDOU = 5;
               };
               GnssModelPri3 gnss_model_pri3 = 7 [json_name = "gnss-model-pri3"];
               enum GnssModelPri4 {
                  INVALID_ENUM_VALUE_GnssModelPri4 = 0;
                  GnssModelPri4_GPS = 1;
                  GnssModelPri4_GLONASS = 2;
                  GnssModelPri4_BEIDOU = 3;
                  GnssModelPri4_GPSX_GLONASS = 4;
                  GnssModelPri4_GPSX_BEIDOU = 5;
               };
               GnssModelPri4 gnss_model_pri4 = 8 [json_name = "gnss-model-pri4"];
               enum GnssModelPri5 {
                  INVALID_ENUM_VALUE_GnssModelPri5 = 0;
                  GnssModelPri5_GPS = 1;
                  GnssModelPri5_GLONASS = 2;
                  GnssModelPri5_BEIDOU = 3;
                  GnssModelPri5_GPSX_GLONASS = 4;
                  GnssModelPri5_GPSX_BEIDOU = 5;
               };
               GnssModelPri5 gnss_model_pri5 = 9 [json_name = "gnss-model-pri5"];
               int32 leap_manualmode_enable = 10 [json_name = "leap-manualmode-enable"];
               int32 cable_delay = 11 [json_name = "cable-delay"];
               bool gps_sfp_online = 12 [json_name = "gps-sfp-online"];
               message GpsSfpWorkStates {
                  bool gps_sfp_is_timelock = 1 [json_name = "gps-sfp-is-timelock"];
                  bool gps_sfp_is_freqlock = 2 [json_name = "gps-sfp-is-freqlock"];
                  bool gps_sfp_self_recoveryen = 3 [json_name = "gps-sfp-self-recoveryen"];
                  bool gps_sfp_is_self_recovering = 4 [json_name = "gps-sfp-is-self-recovering"];
               }
               GpsSfpWorkStates gps_sfp_work_states = 13 [json_name = "gps-sfp-work-states"];
               message GnssModule {
                  string gps_latitude = 1 [json_name = "gps-latitude"];
                  string gps_longitude = 2 [json_name = "gps-longitude"];
                  string gps_altitude = 3 [json_name = "gps-altitude"];
                  enum GpsWorkMode {
                     GpsWorkMode_POSITION = 0;
                     GpsWorkMode_HOLD = 1;
                     GpsWorkMode_AUTO = 2;
                  };
                  GpsWorkMode gps_work_mode = 4 [json_name = "gps-work-mode"];
                  int32 gps_satellite_number = 5 [json_name = "gps-satellite-number"];
                  int32 gps_leap_second = 6 [json_name = "gps-leap-second"];
                  string gps_satellite_cno = 7 [json_name = "gps-satellite-cno"];
                  int32 glonass_satellite_number = 8 [json_name = "glonass-satellite-number"];
                  string glonass_satellite_cno = 9 [json_name = "glonass-satellite-cno"];
                  int32 beidou_satellite_number = 10 [json_name = "beidou-satellite-number"];
                  string beidou_satellite_cno = 11 [json_name = "beidou-satellite-cno"];
                  string gps_time = 12 [json_name = "gps-time"];
                  enum GpsFixStatus {
                     GpsFixStatus_NOFIXSTATUS = 0;
                     GpsFixStatus_FIXSTATUS = 1;
                     GpsFixStatus_HOLDSTATUS = 2;
                  };
                  GpsFixStatus gps_fix_status = 13 [json_name = "gps-fix-status"];
                  enum GnssModel {
                     INVALID_ENUM_VALUE_GnssModel = 0;
                     GnssModel_GPS = 1;
                     GnssModel_GLONASS = 2;
                     GnssModel_BEIDOU = 3;
                     GnssModel_GPSX_GLONASS = 4;
                     GnssModel_GPSX_BEIDOU = 5;
                  };
                  GnssModel gnss_model = 14 [json_name = "gnss-model"];
                  string gnss_model_priority = 15 [json_name = "gnss-model-priority"];
                  enum LeapManualmodeEnStat {
                     LeapManualmodeEnStat_DISABLE = 0;
                     LeapManualmodeEnStat_ENABLE = 1;
                  };
                  LeapManualmodeEnStat leap_manualmode_en_stat = 16 [json_name = "leap-manualmode-en-stat"];
                  enum LeapAdjustdirStat {
                     INVALID_ENUM_VALUE_LeapAdjustdirStat = 0;
                     LeapAdjustdirStat_LEAP59 = 59;
                     LeapAdjustdirStat_LEAP61 = 61;
                  };
                  LeapAdjustdirStat leap_adjustdir_stat = 17 [json_name = "leap-adjustdir-stat"];
                  string leap_adjustdate_stat = 18 [json_name = "leap-adjustdate-stat"];
                  int32 cable_delay_stat = 19 [json_name = "cable-delay-stat"];
               }
               GnssModule gnss_module = 14 [json_name = "gnss-module"];
               message GpsSyncParameters {
                  int32 gps_sync_domain = 1 [json_name = "gps-sync-domain"];
                  int32 gps_sync_priority1 = 2 [json_name = "gps-sync-priority1"];
                  int32 gps_sync_priority2 = 3 [json_name = "gps-sync-priority2"];
                  enum GpsPtpDelayMechanism {
                     GpsPtpDelayMechanism_DELAY = 0;
                     GpsPtpDelayMechanism_PDELAY = 1;
                  };
                  GpsPtpDelayMechanism gps_ptp_delay_mechanism = 4 [json_name = "gps-ptp-delay-mechanism"];
                  uint32 gps_ptp_clk_class = 5 [json_name = "gps-ptp-clk-class"];
                  enum GpsPtpClkStep {
                     GpsPtpClkStep_ONESTEP = 0;
                     GpsPtpClkStep_TWOSTEP = 1;
                  };
                  GpsPtpClkStep gps_ptp_clk_step = 6 [json_name = "gps-ptp-clk-step"];
                  int32 gps_ptp_announce_interval = 7 [json_name = "gps-ptp-announce-interval"];
                  int32 gps_ptp_sync_interval = 8 [json_name = "gps-ptp-sync-interval"];
                  int32 gps_ptp_delayreq_interval = 9 [json_name = "gps-ptp-delayreq-interval"];
                  string gps_ptp_clkid = 10 [json_name = "gps-ptp-clkid"];
                  enum GpsClockSsm {
                     GpsClockSsm_UNK = 0;
                     GpsClockSsm_PRC = 2;
                     GpsClockSsm_SSUA = 4;
                     GpsClockSsm_SSUB = 8;
                     GpsClockSsm_SEC = 11;
                     GpsClockSsm_DNU = 15;
                     GpsClockSsm_NONE = 16;
                  };
                  GpsClockSsm gps_clock_ssm = 11 [json_name = "gps-clock-ssm"];
               }
               GpsSyncParameters gps_sync_parameters = 15 [json_name = "gps-sync-parameters"];
               message GpsBoard {
                  string gps_board_version = 1 [json_name = "gps-board-version"];
                  string gps_mac_address = 2 [json_name = "gps-mac-address"];
               }
               GpsBoard gps_board = 16 [json_name = "gps-board"];
            }
            GpsPortSrc gps_port_src = 1 [json_name = "gps-port-src"];
         }
         GpsPortSrcs gps_port_srcs = 67 [json_name = "gps-port-srcs"];
         message ClockPortSources {
            message Source {
               enum State {
                  State_INITIAL = 0;
                  State_NORMAL = 1;
                  State_ABNORMAL = 2;
                  State_WAITWTR = 3;
                  State_HOLDOFF = 4;
               };
               State state = 1 [json_name = "state"];
               bool sync_enable = 2 [json_name = "sync-enable"];
               bool esmc_send_disable = 3 [json_name = "esmc-send-disable"];
               bool reference_enable = 4 [json_name = "reference-enable"];
               bool slave_nego_enable = 5 [json_name = "slave-nego-enable"];
               enum PhyState {
                  PhyState_DOWN = 0;
                  PhyState_UP = 1;
                  PhyState_NA = 2;
               };
               PhyState phy_state = 6 [json_name = "phy-state"];
               enum E1Sabit {
                  INVALID_ENUM_VALUE_E1Sabit = 0;
                  E1Sabit_SA4 = 4;
                  E1Sabit_SA5 = 5;
                  E1Sabit_SA6 = 6;
                  E1Sabit_SA7 = 7;
                  E1Sabit_SA8 = 8;
               };
               E1Sabit e1_sabit = 7 [json_name = "e1-sabit"];
               bool e1_ais_enable = 8 [json_name = "e1-ais-enable"];
               bool cpos_ais_enable = 9 [json_name = "cpos-ais-enable"];
               bool cpos_exc_enable = 10 [json_name = "cpos-exc-enable"];
               message Priority {
                  int32 system = 1 [json_name = "system"];
                  int32 sync2m1 = 2 [json_name = "sync2m1"];
                  int32 sync2m2 = 3 [json_name = "sync2m2"];
               }
               Priority priority = 11 [json_name = "priority"];
               message SsmClass {
                  enum SsmConfigured {
                     SsmConfigured_UNK = 0;
                     SsmConfigured_PRC = 2;
                     SsmConfigured_SSUA = 4;
                     SsmConfigured_SSUB = 8;
                     SsmConfigured_SEC = 11;
                     SsmConfigured_DNU = 15;
                     SsmConfigured_NONE = 16;
                  };
                  SsmConfigured ssm_configured = 1 [json_name = "ssm-configured"];
                  enum SsmLearn {
                     SsmLearn_UNK = 0;
                     SsmLearn_PRC = 2;
                     SsmLearn_SSUA = 4;
                     SsmLearn_SSUB = 8;
                     SsmLearn_SEC = 11;
                     SsmLearn_DNU = 15;
                     SsmLearn_NONE = 16;
                  };
                  SsmLearn ssm_learn = 2 [json_name = "ssm-learn"];
                  enum SsmOutput {
                     SsmOutput_UNK = 0;
                     SsmOutput_PRC = 2;
                     SsmOutput_SSUA = 4;
                     SsmOutput_SSUB = 8;
                     SsmOutput_SEC = 11;
                     SsmOutput_DNU = 15;
                     SsmOutput_NONE = 16;
                  };
                  SsmOutput ssm_output = 3 [json_name = "ssm-output"];
               }
               SsmClass ssm_class = 12 [json_name = "ssm-class"];
               message ClockId {
                  uint32 clock_id_configured = 1 [json_name = "clock-id-configured"];
                  uint32 clock_id_learn = 2 [json_name = "clock-id-learn"];
                  uint32 clock_id_out = 3 [json_name = "clock-id-out"];
               }
               ClockId clock_id = 13 [json_name = "clock-id"];
               int32 bundle_group = 14 [json_name = "bundle-group"];
            }
            Source source = 1 [json_name = "source"];
         }
         ClockPortSources clock_port_sources = 68 [json_name = "clock-port-sources"];
         message PtpaPorts {
            message PtpaPort {
               bool ptp_atr_en = 1 [json_name = "ptp-atr-en"];
            }
            PtpaPort ptpa_port = 1 [json_name = "ptpa-port"];
         }
         PtpaPorts ptpa_ports = 69 [json_name = "ptpa-ports"];
         message Cpudefend {
            message ArpSafeguards {
               bool arp_safeguard = 1 [json_name = "arp-safeguard"];
            }
            ArpSafeguards arp_safeguards = 1 [json_name = "arp-safeguards"];
            message HostCarQinqHashs {
               bool host_car_qinq_hash = 1 [json_name = "host-car-qinq-hash"];
            }
            HostCarQinqHashs host_car_qinq_hashs = 2 [json_name = "host-car-qinq-hashs"];
            message Ipv4Urpf {
               bool statistics_enable = 1 [json_name = "statistics-enable"];
            }
            Ipv4Urpf ipv4_urpf = 3 [json_name = "ipv4-urpf"];
            message Ipv6Urpf {
               bool statistics_enable = 1 [json_name = "statistics-enable"];
            }
            Ipv6Urpf ipv6_urpf = 4 [json_name = "ipv6-urpf"];
            message ArpVlanCar {
               uint32 rate_limit = 1 [json_name = "rate-limit"];
            }
            ArpVlanCar arp_vlan_car = 5 [json_name = "arp-vlan-car"];
            message NdVlanCars {
               message NdVlanCar {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_NA = 1;
                     Type_NSX_UNICAST = 2;
                     Type_NSX_MULTICAST = 3;
                  };
                  Type type = 1 [json_name = "type"];
                  uint32 rate_limit = 2 [json_name = "rate-limit"];
               }
               repeated NdVlanCar nd_vlan_car = 1 [json_name = "nd-vlan-car"];
            }
            NdVlanCars nd_vlan_cars = 6 [json_name = "nd-vlan-cars"];
            message ProtocolPortCar {
               message RateLimits {
                  message RateLimit {
                     enum Protocol {
                        INVALID_ENUM_VALUE_Protocol = 0;
                        Protocol_ARP = 1;
                        Protocol_DHCP = 2;
                        Protocol_SNMP = 3;
                        Protocol_TELNET = 4;
                        Protocol_ICMP = 5;
                        Protocol_SSH = 6;
                        Protocol_ICMPX_ND = 7;
                        Protocol_ICMPV6 = 8;
                        Protocol_PORT = 9;
                     };
                     Protocol protocol = 1 [json_name = "protocol"];
                     uint32 cp_rate_limit = 2 [json_name = "cp-rate-limit"];
                  }
                  repeated RateLimit rate_limit = 1 [json_name = "rate-limit"];
               }
               RateLimits rate_limits = 1 [json_name = "rate-limits"];
               message Alarm {
                  bool enable = 1 [json_name = "enable"];
                  uint32 threshold = 2 [json_name = "threshold"];
                  uint32 interval = 3 [json_name = "interval"];
               }
               Alarm alarm = 2 [json_name = "alarm"];
            }
            ProtocolPortCar protocol_port_car = 7 [json_name = "protocol-port-car"];
            message ArpCheck {
               bool check_destination_ip = 1 [json_name = "check-destination-ip"];
            }
            ArpCheck arp_check = 8 [json_name = "arp-check"];
            message ArpFilter {
               bool filter_gratuitous = 1 [json_name = "filter-gratuitous"];
               bool filter_mac_illegal = 2 [json_name = "filter-mac-illegal"];
               bool filter_tha_filled_request = 3 [json_name = "filter-tha-filled-request"];
            }
            ArpFilter arp_filter = 9 [json_name = "arp-filter"];
            message CpRateLimit {
               message Igmp {
                  message General {
                     uint32 cir = 1 [json_name = "cir"];
                     uint32 cbs = 2 [json_name = "cbs"];
                     bool prior = 3 [json_name = "prior"];
                  }
                  General general = 1 [json_name = "general"];
                  message Dot1QTerminations {
                     message Dot1QTermination {
                        uint32 vlan_begin = 1 [json_name = "vlan-begin"];
                        uint32 vlan_end = 2 [json_name = "vlan-end"];
                        uint32 cir = 3 [json_name = "cir"];
                        uint32 cbs = 4 [json_name = "cbs"];
                        bool prior = 5 [json_name = "prior"];
                     }
                     repeated Dot1QTermination dot1q_termination = 1 [json_name = "dot1q-termination"];
                  }
                  Dot1QTerminations dot1q_terminations = 2 [json_name = "dot1q-terminations"];
                  message QinqTerminations {
                     message QinqTermination {
                        uint32 pe_vlan = 1 [json_name = "pe-vlan"];
                        uint32 ce_vlan_begin = 2 [json_name = "ce-vlan-begin"];
                        uint32 ce_vlan_end = 3 [json_name = "ce-vlan-end"];
                        uint32 cir = 4 [json_name = "cir"];
                        uint32 cbs = 5 [json_name = "cbs"];
                        bool prior = 6 [json_name = "prior"];
                     }
                     repeated QinqTermination qinq_termination = 1 [json_name = "qinq-termination"];
                  }
                  QinqTerminations qinq_terminations = 3 [json_name = "qinq-terminations"];
               }
               Igmp igmp = 1 [json_name = "igmp"];
               message Ports {
                  message General {
                  }
                  General general = 1 [json_name = "general"];
                  message Dot1QTerminations {
                     message Dot1QTermination {
                        uint32 vlan_begin = 1 [json_name = "vlan-begin"];
                        uint32 vlan_end = 2 [json_name = "vlan-end"];
                     }
                     repeated Dot1QTermination dot1q_termination = 1 [json_name = "dot1q-termination"];
                  }
                  Dot1QTerminations dot1q_terminations = 2 [json_name = "dot1q-terminations"];
                  message QinqTerminations {
                     message QinqTermination {
                        uint32 pe_vlan = 1 [json_name = "pe-vlan"];
                        uint32 ce_vlan_begin = 2 [json_name = "ce-vlan-begin"];
                        uint32 ce_vlan_end = 3 [json_name = "ce-vlan-end"];
                     }
                     repeated QinqTermination qinq_termination = 1 [json_name = "qinq-termination"];
                  }
                  QinqTerminations qinq_terminations = 3 [json_name = "qinq-terminations"];
               }
               Ports ports = 2 [json_name = "ports"];
               message Enhance {
               }
               Enhance enhance = 3 [json_name = "enhance"];
            }
            CpRateLimit cp_rate_limit = 10 [json_name = "cp-rate-limit"];
            message MacFilter {
               bool whitelist_enable = 1 [json_name = "whitelist-enable"];
               bool blacklist_enable = 2 [json_name = "blacklist-enable"];
               message MacAddresss {
                  message MacAddress {
                     string mac = 1 [json_name = "mac"];
                  }
                  repeated MacAddress mac_address = 1 [json_name = "mac-address"];
               }
               MacAddresss mac_addresss = 3 [json_name = "mac-addresss"];
            }
            MacFilter mac_filter = 11 [json_name = "mac-filter"];
         }
         Cpudefend cpudefend = 70 [json_name = "cpudefend"];
         message Dcn {
            message Dcnv4 {
               bool default_port = 1 [json_name = "default-port"];
               bool enable = 2 [json_name = "enable"];
            }
            Dcnv4 dcnv4 = 1 [json_name = "dcnv4"];
            message TcDcn {
               bool default_port = 1 [json_name = "default-port"];
               bool enable = 2 [json_name = "enable"];
            }
            TcDcn tc_dcn = 2 [json_name = "tc-dcn"];
         }
         Dcn dcn = 71 [json_name = "dcn"];
         message DhcpRelayAttribute {
            bool enable = 1 [json_name = "enable"];
            enum ReplyPacketPolicy {
               INVALID_ENUM_VALUE_ReplyPacketPolicy = 0;
               ReplyPacketPolicy_BROADCASTX_ALWAYS = 1;
            };
            ReplyPacketPolicy reply_packet_policy = 2 [json_name = "reply-packet-policy"];
            message Option82 {
               bool link_selection_enable = 1 [json_name = "link-selection-enable"];
               string link_selection_address = 2 [json_name = "link-selection-address"];
               bool vendor_specific_enable = 3 [json_name = "vendor-specific-enable"];
               bool subscriber_id_enable = 4 [json_name = "subscriber-id-enable"];
               enum SubscriberIdMode {
                  INVALID_ENUM_VALUE_SubscriberIdMode = 0;
                  SubscriberIdMode_SELFX_DEFINE = 1;
               };
               SubscriberIdMode subscriber_id_mode = 5 [json_name = "subscriber-id-mode"];
               string subscriber_id_self_define_text = 6 [json_name = "subscriber-id-self-define-text"];
            }
            Option82 option82 = 3 [json_name = "option82"];
            message ServerAddresses {
               message ServerAddress {
                  string address = 1 [json_name = "address"];
                  bool vendor = 2 [json_name = "vendor"];
                  uint32 option_code = 3 [json_name = "option-code"];
                  string vendor_class = 4 [json_name = "vendor-class"];
               }
               repeated ServerAddress server_address = 1 [json_name = "server-address"];
            }
            ServerAddresses server_addresses = 4 [json_name = "server-addresses"];
            message GatewayAddresses {
               message GatewayAddress {
                  bool vendor = 1 [json_name = "vendor"];
                  uint32 option_code = 2 [json_name = "option-code"];
                  string vendor_class = 3 [json_name = "vendor-class"];
                  string ip_address = 4 [json_name = "ip-address"];
               }
               repeated GatewayAddress gateway_address = 1 [json_name = "gateway-address"];
            }
            GatewayAddresses gateway_addresses = 5 [json_name = "gateway-addresses"];
            message RelaySourceAddress {
               string vpn_name = 1 [json_name = "vpn-name"];
               string source_address = 2 [json_name = "source-address"];
            }
            RelaySourceAddress relay_source_address = 6 [json_name = "relay-source-address"];
            message RelaySourceOptionAddresses {
               message RelaySourceOptionAddress {
                  bool vendor = 1 [json_name = "vendor"];
                  uint32 option_code = 2 [json_name = "option-code"];
                  string vendor_class = 3 [json_name = "vendor-class"];
                  string source_address = 4 [json_name = "source-address"];
               }
               repeated RelaySourceOptionAddress relay_source_option_address = 1 [json_name = "relay-source-option-address"];
            }
            RelaySourceOptionAddresses relay_source_option_addresses = 7 [json_name = "relay-source-option-addresses"];
            message Opt82VendorSpecifics {
               message Opt82VendorSpecific {
                  uint32 sub_option_number = 1 [json_name = "sub-option-number"];
                  enum SubOptionFormat {
                     SubOptionFormat_SOURCEX_IPX_ADDRESS = 0;
                  };
                  SubOptionFormat sub_option_format = 2 [json_name = "sub-option-format"];
                  string ip_address = 3 [json_name = "ip-address"];
               }
               repeated Opt82VendorSpecific opt82_vendor_specific = 1 [json_name = "opt82-vendor-specific"];
            }
            Opt82VendorSpecifics opt82_vendor_specifics = 8 [json_name = "opt82-vendor-specifics"];
         }
         DhcpRelayAttribute dhcp_relay_attribute = 72 [json_name = "dhcp-relay-attribute"];
         message DhcpIf {
            message DhcpPacketSetting {
               uint32 ip_ttl = 1 [json_name = "ip-ttl"];
               uint32 dscp_outbound = 2 [json_name = "dscp-outbound"];
               enum ServerEnable {
                  INVALID_ENUM_VALUE_ServerEnable = 0;
                  ServerEnable_ENABLE = 1;
                  ServerEnable_DISABLE = 2;
               };
               ServerEnable server_enable = 3 [json_name = "server-enable"];
            }
            DhcpPacketSetting dhcp_packet_setting = 1 [json_name = "dhcp-packet-setting"];
            message Option82Formats {
               message Option82Format {
                  enum SubOptionType {
                     INVALID_ENUM_VALUE_SubOptionType = 0;
                     SubOptionType_CIRCUITX_ID = 1;
                     SubOptionType_REMOTEX_ID = 2;
                     SubOptionType_CIRCUITX_REMOTE = 3;
                  };
                  SubOptionType sub_option_type = 1 [json_name = "sub-option-type"];
                  string user_define_text = 3 [json_name = "user-define-text"];
               }
               repeated Option82Format option82_format = 1 [json_name = "option82-format"];
            }
            Option82Formats option82_formats = 2 [json_name = "option82-formats"];
            message Option82InsertSetting {
            }
            Option82InsertSetting option82_insert_setting = 3 [json_name = "option82-insert-setting"];
         }
         DhcpIf dhcp_if = 73 [json_name = "dhcp-if"];
         message DhcpClientIf {
            bool address_allocation = 1 [json_name = "address-allocation"];
            uint32 expected_lease = 2 [json_name = "expected-lease"];
            string option60 = 3 [json_name = "option60"];
            message ClientStatus {
               enum FsmState {
                  FsmState_INIT = 0;
                  FsmState_SELECTING = 1;
                  FsmState_REQUESTING = 2;
                  FsmState_BOUND = 3;
                  FsmState_RENEWING = 4;
                  FsmState_REBINDING = 5;
               };
               FsmState fsm_state = 1 [json_name = "fsm-state"];
               string mac_address = 2 [json_name = "mac-address"];
               string ip_address = 3 [json_name = "ip-address"];
               string ip_mask = 4 [json_name = "ip-mask"];
               string server_address = 5 [json_name = "server-address"];
               string lease_obtained_time = 6 [json_name = "lease-obtained-time"];
               string lease_expire_time = 7 [json_name = "lease-expire-time"];
               string lease_renew_time = 8 [json_name = "lease-renew-time"];
               string lease_rebind_time = 9 [json_name = "lease-rebind-time"];
            }
            ClientStatus client_status = 4 [json_name = "client-status"];
            message ClientStatistics {
               uint32 total_packets_received = 1 [json_name = "total-packets-received"];
               uint32 offer_packets_received = 2 [json_name = "offer-packets-received"];
               uint32 ack_packets_received = 3 [json_name = "ack-packets-received"];
               uint32 nak_packets_received = 4 [json_name = "nak-packets-received"];
               uint32 total_packets_send = 5 [json_name = "total-packets-send"];
               uint32 discovery_packets_send = 6 [json_name = "discovery-packets-send"];
               uint32 request_packets_send = 7 [json_name = "request-packets-send"];
               uint32 reboot_request_packets_send = 8 [json_name = "reboot-request-packets-send"];
               uint32 select_request_packets_send = 9 [json_name = "select-request-packets-send"];
               uint32 renew_request_packets_send = 10 [json_name = "renew-request-packets-send"];
               uint32 rebind_request_packets_send = 11 [json_name = "rebind-request-packets-send"];
               uint32 decline_packets_send = 12 [json_name = "decline-packets-send"];
               uint32 release_packets_send = 13 [json_name = "release-packets-send"];
            }
            ClientStatistics client_statistics = 5 [json_name = "client-statistics"];
         }
         DhcpClientIf dhcp_client_if = 74 [json_name = "dhcp-client-if"];
         message DhcpSnoopingIf {
            message BasicAttribute {
               bool enable = 1 [json_name = "enable"];
               bool trust_enable = 2 [json_name = "trust-enable"];
               bool check_arp_enable = 3 [json_name = "check-arp-enable"];
               bool alarm_arp_enable = 4 [json_name = "alarm-arp-enable"];
               uint32 alarm_arp_threshold = 5 [json_name = "alarm-arp-threshold"];
               bool check_ip_enable = 6 [json_name = "check-ip-enable"];
               bool alarm_ip_enable = 7 [json_name = "alarm-ip-enable"];
               uint32 alarm_ip_threshold = 8 [json_name = "alarm-ip-threshold"];
               bool alarm_reply_enable = 9 [json_name = "alarm-reply-enable"];
               uint32 alarm_reply_threshold = 10 [json_name = "alarm-reply-threshold"];
               bool check_mac_enable = 11 [json_name = "check-mac-enable"];
               bool alarm_mac_enable = 12 [json_name = "alarm-mac-enable"];
               uint32 alarm_mac_threshold = 13 [json_name = "alarm-mac-threshold"];
               bool check_user_bind_enable = 14 [json_name = "check-user-bind-enable"];
               bool alarm_user_bind_enable = 15 [json_name = "alarm-user-bind-enable"];
               uint32 alarm_user_bind_threshold = 16 [json_name = "alarm-user-bind-threshold"];
               uint32 max_user_number = 17 [json_name = "max-user-number"];
               bool alarm_user_limit_enable = 18 [json_name = "alarm-user-limit-enable"];
               uint32 alarm_user_limit_threshold = 19 [json_name = "alarm-user-limit-threshold"];
            }
            BasicAttribute basic_attribute = 1 [json_name = "basic-attribute"];
            message StaticBinds {
               message StaticBind {
                  string ip_address = 1 [json_name = "ip-address"];
                  uint32 vlan_id = 2 [json_name = "vlan-id"];
                  uint32 cevlan_id = 3 [json_name = "cevlan-id"];
                  string mac_address = 4 [json_name = "mac-address"];
               }
               repeated StaticBind static_bind = 1 [json_name = "static-bind"];
            }
            StaticBinds static_binds = 2 [json_name = "static-binds"];
         }
         DhcpSnoopingIf dhcp_snooping_if = 75 [json_name = "dhcp-snooping-if"];
         message Dhcpv6RelayAttribute {
            string source_address = 1 [json_name = "source-address"];
            string link_address = 2 [json_name = "link-address"];
            bool strict_check = 3 [json_name = "strict-check"];
            string server_group_name = 4 [json_name = "server-group-name"];
            message DestinationAddresses {
               message DestinationAddress {
                  string ipv6_address = 1 [json_name = "ipv6-address"];
               }
               repeated DestinationAddress destination_address = 1 [json_name = "destination-address"];
            }
            DestinationAddresses destination_addresses = 5 [json_name = "destination-addresses"];
            message DestinationIfs {
               message DestinationIf {
                  string if_name = 1 [json_name = "if-name"];
               }
               repeated DestinationIf destination_if = 1 [json_name = "destination-if"];
            }
            DestinationIfs destination_ifs = 6 [json_name = "destination-ifs"];
            message RebuildOption {
               bool rebuild_interface_id = 1 [json_name = "rebuild-interface-id"];
               bool rebuild_remote_id = 2 [json_name = "rebuild-remote-id"];
            }
            RebuildOption rebuild_option = 7 [json_name = "rebuild-option"];
            message AccessLimitSetting {
               uint32 access_limit = 1 [json_name = "access-limit"];
               uint32 access_vlan_limit = 2 [json_name = "access-vlan-limit"];
            }
            AccessLimitSetting access_limit_setting = 8 [json_name = "access-limit-setting"];
            message PdRouteTrackVrrp {
               uint32 degrade_cost = 1 [json_name = "degrade-cost"];
            }
            PdRouteTrackVrrp pd_route_track_vrrp = 9 [json_name = "pd-route-track-vrrp"];
         }
         Dhcpv6RelayAttribute dhcpv6_relay_attribute = 76 [json_name = "dhcpv6-relay-attribute"];
         message Efm {
            message Session {
               enum State {
                  State_DISABLE = 0;
                  State_ENABLE = 1;
               };
               State state = 1 [json_name = "state"];
               enum Mode {
                  Mode_PASSIVE = 0;
                  Mode_ACTIVE = 1;
               };
               Mode mode = 2 [json_name = "mode"];
               uint32 packet_max_size = 3 [json_name = "packet-max-size"];
               uint32 interval = 4 [json_name = "interval"];
               uint32 timeout = 5 [json_name = "timeout"];
               enum IgnoreLoopbackRequest {
                  IgnoreLoopbackRequest_DISABLE = 0;
                  IgnoreLoopbackRequest_ENABLE = 1;
               };
               IgnoreLoopbackRequest ignore_loopback_request = 6 [json_name = "ignore-loopback-request"];
               enum TriggerIfDown {
                  TriggerIfDown_DISABLE = 0;
                  TriggerIfDown_ENABLE = 1;
               };
               TriggerIfDown trigger_if_down = 7 [json_name = "trigger-if-down"];
               uint32 hold_up_time = 8 [json_name = "hold-up-time"];
               bool trigger_mac_renew = 9 [json_name = "trigger-mac-renew"];
               message ErrorFrame {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
                  enum PeriodUnit {
                     PeriodUnit_SECOND = 0;
                     PeriodUnit_MILLISECOND = 1;
                  };
                  PeriodUnit period_unit = 4 [json_name = "period-unit"];
               }
               ErrorFrame error_frame = 10 [json_name = "error-frame"];
               message ErrorFrameSecond {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
               }
               ErrorFrameSecond error_frame_second = 11 [json_name = "error-frame-second"];
               message ErrorCode {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
               }
               ErrorCode error_code = 12 [json_name = "error-code"];
               message ErrorFramePeriod {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  Notification notification = 1 [json_name = "notification"];
                  uint32 period = 2 [json_name = "period"];
                  uint32 threshold = 3 [json_name = "threshold"];
               }
               ErrorFramePeriod error_frame_period = 13 [json_name = "error-frame-period"];
            }
            Session session = 1 [json_name = "session"];
         }
         Efm efm = 77 [json_name = "efm"];
         message Evpn {
            string name = 1 [json_name = "name"];
            string pbb_source_mac = 2 [json_name = "pbb-source-mac"];
            string esi = 3 [json_name = "esi"];
            string esi_name = 4 [json_name = "esi-name"];
            uint32 es_recovery_timer = 5 [json_name = "es-recovery-timer"];
            string track_bfd_name = 6 [json_name = "track-bfd-name"];
            bool e_tree_leaf = 7 [json_name = "e-tree-leaf"];
            message ProtocolActions {
               message ProtocolAction {
                  enum ProtocolType {
                     INVALID_ENUM_VALUE_ProtocolType = 0;
                     ProtocolType_LACP = 1;
                     ProtocolType_LLDP = 2;
                     ProtocolType_BPDU = 4;
                     ProtocolType_CDP = 5;
                     ProtocolType_UDLD = 6;
                  };
                  ProtocolType protocol_type = 1 [json_name = "protocol-type"];
                  enum Action {
                     INVALID_ENUM_VALUE_Action = 0;
                     Action_FORWARDING = 1;
                     Action_DISCARD = 2;
                     Action_TRANSPORT = 3;
                     Action_TRANSPORTX_TAGGED = 4;
                  };
                  Action action = 2 [json_name = "action"];
                  enum Mode {
                     Mode_NORMAL = 0;
                     Mode_UNTAG = 1;
                  };
                  Mode mode = 3 [json_name = "mode"];
               }
               repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
            }
            ProtocolActions protocol_actions = 8 [json_name = "protocol-actions"];
         }
         Evpn evpn = 78 [json_name = "evpn"];
         message Fim {
            enum StatisticEnable {
               StatisticEnable_DISABLE = 0;
               StatisticEnable_ENABLE = 1;
            };
            StatisticEnable statistic_enable = 1 [json_name = "statistic-enable"];
            enum StatisticMode {
               StatisticMode_MAC = 0;
               StatisticMode_FORWARD = 1;
            };
            StatisticMode statistic_mode = 2 [json_name = "statistic-mode"];
            enum MacStatisticEnable {
               MacStatisticEnable_DISABLE = 0;
               MacStatisticEnable_ENABLE = 1;
            };
            MacStatisticEnable mac_statistic_enable = 3 [json_name = "mac-statistic-enable"];
         }
         Fim fim = 79 [json_name = "fim"];
         message FimIfmMru {
            uint32 mru = 1 [json_name = "mru"];
            enum MruStatisticEnable {
               MruStatisticEnable_DISABLE = 0;
               MruStatisticEnable_ENABLE = 1;
            };
            MruStatisticEnable mru_statistic_enable = 2 [json_name = "mru-statistic-enable"];
         }
         FimIfmMru fim_ifm_mru = 80 [json_name = "fim-ifm-mru"];
         message FimTcpMss {
            uint32 tcp_mss = 1 [json_name = "tcp-mss"];
         }
         FimTcpMss fim_tcp_mss = 81 [json_name = "fim-tcp-mss"];
         message FimIfmBdifint {
            bool vbdif_loopback_enable = 1 [json_name = "vbdif-loopback-enable"];
         }
         FimIfmBdifint fim_ifm_bdifint = 82 [json_name = "fim-ifm-bdifint"];
         message FimIfmVeint {
            enum VeForwardMode {
               VeForwardMode_LOOPBACK = 0;
               VeForwardMode_THROUGH = 1;
               VeForwardMode_HALFX_THROUGH = 3;
            };
            VeForwardMode ve_forward_mode = 1 [json_name = "ve-forward-mode"];
            string ve_slot_id = 2 [json_name = "ve-slot-id"];
         }
         FimIfmVeint fim_ifm_veint = 83 [json_name = "fim-ifm-veint"];
         message VeGroup {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_L2VE = 1;
               Type_L3VE = 2;
               Type_TERMINATEX_VE = 7;
            };
            Type type = 1 [json_name = "type"];
            uint32 id = 2 [json_name = "id"];
         }
         VeGroup ve_group = 84 [json_name = "ve-group"];
         message MruDiscardStatistic {
            uint64 packet = 1 [json_name = "packet"];
            uint64 byte = 2 [json_name = "byte"];
         }
         MruDiscardStatistic mru_discard_statistic = 85 [json_name = "mru-discard-statistic"];
         message MacmtuDiscardStat {
            uint64 mtu_ipv4 = 1 [json_name = "mtu-ipv4"];
            uint64 mtu_ipv6 = 2 [json_name = "mtu-ipv6"];
            uint64 mac_ipv4 = 3 [json_name = "mac-ipv4"];
            uint64 mac_ipv6 = 4 [json_name = "mac-ipv6"];
         }
         MacmtuDiscardStat macmtu_discard_stat = 86 [json_name = "macmtu-discard-stat"];
         message FlowRecognition {
            message FlowEnables {
               message FlowEnable {
                  enum Direction {
                     Direction_INBOUND = 0;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               repeated FlowEnable flow_enable = 1 [json_name = "flow-enable"];
            }
            FlowEnables flow_enables = 1 [json_name = "flow-enables"];
         }
         FlowRecognition flow_recognition = 87 [json_name = "flow-recognition"];
         message FlowspecForward {
            message Refluence {
            }
            Refluence refluence = 1 [json_name = "refluence"];
            message TunnelPop {
            }
            TunnelPop tunnel_pop = 2 [json_name = "tunnel-pop"];
            message Disables {
               message Disable {
                  enum FlowType {
                     INVALID_ENUM_VALUE_FlowType = 0;
                     FlowType_IPV4 = 1;
                     FlowType_IPV6 = 2;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
               }
               repeated Disable disable = 1 [json_name = "disable"];
            }
            Disables disables = 3 [json_name = "disables"];
         }
         FlowspecForward flowspec_forward = 88 [json_name = "flowspec-forward"];
         message If8021PPriority {
            uint32 value = 1 [json_name = "value"];
         }
         If8021PPriority if_8021p_priority = 89 [json_name = "if-8021p-priority"];
         message ManagementPlaneDefendIf {
            uint32 policy_id = 1 [json_name = "policy-id"];
         }
         ManagementPlaneDefendIf management_plane_defend_if = 90 [json_name = "management-plane-defend-if"];
         message IgmpSnooping {
            string learning_disable_vlans = 1 [json_name = "learning-disable-vlans"];
            string static_router_port_vlans = 2 [json_name = "static-router-port-vlans"];
            uint32 limit_max_entry = 3 [json_name = "limit-max-entry"];
            string except_acl = 4 [json_name = "except-acl"];
            message NumberLimits {
               message NumberLimit {
                  uint32 limit_max_entry = 1 [json_name = "limit-max-entry"];
                  uint32 vlan_id_begin = 2 [json_name = "vlan-id-begin"];
                  uint32 vlan_id_end = 3 [json_name = "vlan-id-end"];
               }
               repeated NumberLimit number_limit = 1 [json_name = "number-limit"];
            }
            NumberLimits number_limits = 5 [json_name = "number-limits"];
         }
         IgmpSnooping igmp_snooping = 91 [json_name = "igmp-snooping"];
         message HwmcIfEnable {
            bool status = 1 [json_name = "status"];
         }
         HwmcIfEnable hwmc_if_enable = 92 [json_name = "hwmc-if-enable"];
         message ProtocolActions {
            message ProtocolAction {
               enum ProtocolType {
                  INVALID_ENUM_VALUE_ProtocolType = 0;
                  ProtocolType_CX_STP = 2;
                  ProtocolType_SX_STP = 3;
                  ProtocolType_ELMI = 4;
                  ProtocolType_LACP = 5;
                  ProtocolType_LAMP = 6;
                  ProtocolType_MRP = 7;
                  ProtocolType_EAPOL = 8;
                  ProtocolType_ESMC = 9;
                  ProtocolType_LLDP = 10;
                  ProtocolType_BPDU = 13;
                  ProtocolType_LINKX_OAM = 14;
                  ProtocolType_PTP = 15;
               };
               ProtocolType protocol_type = 1 [json_name = "protocol-type"];
               enum Action {
                  Action_TRANSPORT = 0;
                  Action_FORWARDING = 1;
                  Action_DISCARD = 2;
               };
               Action action = 2 [json_name = "action"];
            }
            repeated ProtocolAction protocol_action = 1 [json_name = "protocol-action"];
         }
         ProtocolActions protocol_actions = 93 [json_name = "protocol-actions"];
         message VllPwLoopCheck {
            uint32 time = 1 [json_name = "time"];
         }
         VllPwLoopCheck vll_pw_loop_check = 94 [json_name = "vll-pw-loop-check"];
         message EncapsulationVlan {
            bool vlan_pass = 1 [json_name = "vlan-pass"];
         }
         EncapsulationVlan encapsulation_vlan = 95 [json_name = "encapsulation-vlan"];
         message Lldp {
            message Session {
               enum AdminStatus {
                  INVALID_ENUM_VALUE_AdminStatus = 0;
                  AdminStatus_TXX_ONLY = 1;
                  AdminStatus_RXX_ONLY = 2;
                  AdminStatus_TXX_RX = 3;
                  AdminStatus_DISABLED = 4;
               };
               AdminStatus admin_status = 1 [json_name = "admin-status"];
               message TlvEnable {
                  bool management_address = 1 [json_name = "management-address"];
                  bool port_description = 2 [json_name = "port-description"];
                  bool system_capability = 3 [json_name = "system-capability"];
                  bool system_description = 4 [json_name = "system-description"];
                  bool system_name = 5 [json_name = "system-name"];
                  bool port_vlan_id = 6 [json_name = "port-vlan-id"];
                  bool protocol_vlan_id_enable = 7 [json_name = "protocol-vlan-id-enable"];
                  int32 protocol_vlan_id = 8 [json_name = "protocol-vlan-id"];
                  bool vlan_name_enable = 9 [json_name = "vlan-name-enable"];
                  int32 vlan_name_id = 10 [json_name = "vlan-name-id"];
                  bool protocol_identity = 11 [json_name = "protocol-identity"];
                  bool mac_physic = 12 [json_name = "mac-physic"];
                  bool link_aggregation = 13 [json_name = "link-aggregation"];
                  bool max_frame_size = 14 [json_name = "max-frame-size"];
                  bool ddp = 15 [json_name = "ddp"];
                  bool identity = 16 [json_name = "identity"];
               }
               TlvEnable tlv_enable = 2 [json_name = "tlv-enable"];
               message Neighbors {
                  message Neighbor {
                     uint32 index = 1 [json_name = "index"];
                     enum ChassisIdSubType {
                        ChassisIdSubType_OTHER = 0;
                        ChassisIdSubType_CHASSISX_COMPONENT = 1;
                        ChassisIdSubType_INTERFACEX_ALIAS = 2;
                        ChassisIdSubType_PORTX_COMPONENT = 3;
                        ChassisIdSubType_MACX_ADDRESS = 4;
                        ChassisIdSubType_NETWORKX_ADDRESS = 5;
                        ChassisIdSubType_INTERFACEX_NAME = 6;
                        ChassisIdSubType_LOCAL = 7;
                     };
                     ChassisIdSubType chassis_id_sub_type = 2 [json_name = "chassis-id-sub-type"];
                     string chassis_id = 3 [json_name = "chassis-id"];
                     enum PortIdSubType {
                        PortIdSubType_OTHER = 0;
                        PortIdSubType_INTERFACEX_ALIAS = 1;
                        PortIdSubType_PORTX_COMPONENT = 2;
                        PortIdSubType_MACX_ADDRESS = 3;
                        PortIdSubType_NETWORKX_ADDRESS = 4;
                        PortIdSubType_INTERFACEX_NAME = 5;
                        PortIdSubType_AGENTX_CIRCUITX_ID = 6;
                        PortIdSubType_LOCAL = 7;
                     };
                     PortIdSubType port_id_sub_type = 4 [json_name = "port-id-sub-type"];
                     string port_id = 5 [json_name = "port-id"];
                     string port_description = 6 [json_name = "port-description"];
                     string system_name = 7 [json_name = "system-name"];
                     string system_description = 8 [json_name = "system-description"];
                     string system_capabilities_enabled = 9 [json_name = "system-capabilities-enabled"];
                     string system_capabilities_supported = 10 [json_name = "system-capabilities-supported"];
                     int32 expired_time = 11 [json_name = "expired-time"];
                     int32 port_vlan_id = 12 [json_name = "port-vlan-id"];
                     string protocol_identity = 13 [json_name = "protocol-identity"];
                     enum AutoNegotiationSupported {
                        AutoNegotiationSupported_NO = 0;
                        AutoNegotiationSupported_YES = 1;
                     };
                     AutoNegotiationSupported auto_negotiation_supported = 14 [json_name = "auto-negotiation-supported"];
                     enum AutoNegotiationEnabled {
                        AutoNegotiationEnabled_NO = 0;
                        AutoNegotiationEnabled_YES = 1;
                     };
                     AutoNegotiationEnabled auto_negotiation_enabled = 15 [json_name = "auto-negotiation-enabled"];
                     string auto_negotiation_capability = 16 [json_name = "auto-negotiation-capability"];
                     enum OperMauType {
                        OperMauType_UNKNOWN = 0;
                        OperMauType_DOT3X_MAUX_TYPEX_AUI = 1;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5 = 2;
                        OperMauType_DOT3X_MAUX_TYPEX_FOIRL = 3;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2 = 4;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T = 5;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP = 6;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB = 7;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL = 8;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36 = 9;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD = 10;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD = 11;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD = 12;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD = 13;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4 = 14;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD = 15;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD = 16;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD = 17;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD = 18;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD = 19;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD = 20;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD = 21;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD = 22;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD = 23;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD = 24;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD = 25;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD = 26;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD = 27;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD = 28;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD = 29;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD = 30;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X = 31;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4 = 32;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R = 33;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER = 34;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR = 35;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR = 36;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W = 37;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW = 38;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW = 39;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW = 40;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4 = 70;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4 = 71;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4 = 72;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR = 73;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4 = 74;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10 = 75;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10 = 76;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4 = 77;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4 = 78;
                     };
                     OperMauType oper_mau_type = 17 [json_name = "oper-mau-type"];
                     enum LinkAggregationSupported {
                        LinkAggregationSupported_NO = 0;
                        LinkAggregationSupported_YES = 1;
                     };
                     LinkAggregationSupported link_aggregation_supported = 18 [json_name = "link-aggregation-supported"];
                     enum LinkAggregationEnabled {
                        LinkAggregationEnabled_NO = 0;
                        LinkAggregationEnabled_YES = 1;
                     };
                     LinkAggregationEnabled link_aggregation_enabled = 19 [json_name = "link-aggregation-enabled"];
                     int32 aggregation_port_id = 20 [json_name = "aggregation-port-id"];
                     int32 maximum_frame_size = 21 [json_name = "maximum-frame-size"];
                     string discovered_time = 22 [json_name = "discovered-time"];
                     message ManagementAddresss {
                        message ManagementAddress {
                           enum Type {
                              Type_OTHER = 0;
                              Type_IPV4 = 1;
                              Type_IPV6 = 2;
                              Type_NSAP = 3;
                              Type_HDLC = 4;
                              Type_BBN1822 = 5;
                              Type_MAC = 6;
                              Type_E163 = 7;
                              Type_E164 = 8;
                              Type_F69 = 9;
                              Type_X121 = 10;
                              Type_IPX = 11;
                              Type_APPLEX_TALK = 12;
                              Type_DECNETX_IV = 13;
                              Type_BANYANX_VINES = 14;
                              Type_E164X_WITHX_NSAP = 15;
                              Type_DNS = 16;
                              Type_DISTINGUISHEDX_NAME = 17;
                              Type_ASX_NUMBER = 18;
                              Type_XTPX_OVERX_IPV4 = 19;
                              Type_XTPX_OVERX_IPV6 = 20;
                              Type_XTPX_NATIVEX_MODEX_XTP = 21;
                              Type_FIBREX_CHANNELX_WWPN = 22;
                              Type_FIBREX_CHANNELX_WWN = 23;
                              Type_GWID = 24;
                           };
                           Type type = 1 [json_name = "type"];
                           string value = 2 [json_name = "value"];
                           int32 length = 3 [json_name = "length"];
                           enum IfSubType {
                              IfSubType_OTHER = 0;
                              IfSubType_UNKNOWN = 1;
                              IfSubType_IFX_INDEX = 2;
                              IfSubType_SYSTEMX_PORTX_NUMBER = 3;
                           };
                           IfSubType if_sub_type = 4 [json_name = "if-sub-type"];
                           int32 if_id = 5 [json_name = "if-id"];
                           string oid = 6 [json_name = "oid"];
                        }
                        repeated ManagementAddress management_address = 1 [json_name = "management-address"];
                     }
                     ManagementAddresss management_addresss = 23 [json_name = "management-addresss"];
                     message ProtocolVlans {
                        message ProtocolVlan {
                           int32 id = 1 [json_name = "id"];
                           enum Supported {
                              Supported_NO = 0;
                              Supported_YES = 1;
                           };
                           Supported supported = 2 [json_name = "supported"];
                           enum Enabled {
                              Enabled_NO = 0;
                              Enabled_YES = 1;
                           };
                           Enabled enabled = 3 [json_name = "enabled"];
                        }
                        repeated ProtocolVlan protocol_vlan = 1 [json_name = "protocol-vlan"];
                     }
                     ProtocolVlans protocol_vlans = 24 [json_name = "protocol-vlans"];
                     message VlanNames {
                        message VlanName {
                           int32 id = 1 [json_name = "id"];
                           string value = 2 [json_name = "value"];
                        }
                        repeated VlanName vlan_name = 1 [json_name = "vlan-name"];
                     }
                     VlanNames vlan_names = 25 [json_name = "vlan-names"];
                     message UnknownTlvs {
                        message UnknownTlv {
                           int32 type = 1 [json_name = "type"];
                           string info = 2 [json_name = "info"];
                        }
                        repeated UnknownTlv unknown_tlv = 1 [json_name = "unknown-tlv"];
                     }
                     UnknownTlvs unknown_tlvs = 26 [json_name = "unknown-tlvs"];
                     message UnknownOrganizationallyDefinedTlvs {
                        message UnknownOrganizationallyDefinedTlv {
                           string oui = 1 [json_name = "oui"];
                           int32 sub_type = 2 [json_name = "sub-type"];
                           int32 index = 3 [json_name = "index"];
                           string info = 4 [json_name = "info"];
                        }
                        repeated UnknownOrganizationallyDefinedTlv unknown_organizationally_defined_tlv = 1 [json_name = "unknown-organizationally-defined-tlv"];
                     }
                     UnknownOrganizationallyDefinedTlvs unknown_organizationally_defined_tlvs = 27 [json_name = "unknown-organizationally-defined-tlvs"];
                     message DdpTlv {
                        string serial_number = 1 [json_name = "serial-number"];
                        uint32 if_index = 2 [json_name = "if-index"];
                        string ipv4_address = 3 [json_name = "ipv4-address"];
                        string mac_address = 4 [json_name = "mac-address"];
                     }
                     DdpTlv ddp_tlv = 28 [json_name = "ddp-tlv"];
                     message IdentityTlv {
                        string identity = 1 [json_name = "identity"];
                     }
                     IdentityTlv identity_tlv = 29 [json_name = "identity-tlv"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 3 [json_name = "neighbors"];
            }
            Session session = 1 [json_name = "session"];
         }
         Lldp lldp = 96 [json_name = "lldp"];
         message Loadbalance {
            message Ucmp {
            }
            Ucmp ucmp = 1 [json_name = "ucmp"];
            message Packet {
            }
            Packet packet = 2 [json_name = "packet"];
         }
         Loadbalance loadbalance = 97 [json_name = "loadbalance"];
         message Loopdetect {
            message MacWithdraw {
            }
            MacWithdraw mac_withdraw = 1 [json_name = "mac-withdraw"];
            message LoopbackDetect {
               uint32 block_time = 1 [json_name = "block-time"];
            }
            LoopbackDetect loopback_detect = 2 [json_name = "loopback-detect"];
            message LoopDetect {
               enum BlockTimeType {
                  INVALID_ENUM_VALUE_BlockTimeType = 0;
                  BlockTimeType_PERPX_BLOCKX_TIME = 1;
                  BlockTimeType_NORMX_BLOCKX_TIME = 2;
               };
               BlockTimeType block_time_type = 1 [json_name = "block-time-type"];
               uint32 block_time_value = 2 [json_name = "block-time-value"];
               bool trigger_down = 3 [json_name = "trigger-down"];
               uint32 packet_priority = 4 [json_name = "packet-priority"];
               bool only_alarm = 5 [json_name = "only-alarm"];
            }
            LoopDetect loop_detect = 3 [json_name = "loop-detect"];
         }
         Loopdetect loopdetect = 98 [json_name = "loopdetect"];
         message Macsec {
            message CknCaks {
               message CknCak {
                  string ckn = 1 [json_name = "ckn"];
                  enum CakType {
                     INVALID_ENUM_VALUE_CakType = 0;
                     CakType_SIMPLE = 1;
                     CakType_CIPHER = 2;
                  };
                  CakType cak_type = 2 [json_name = "cak-type"];
                  string cak = 3 [json_name = "cak"];
               }
               CknCak ckn_cak = 1 [json_name = "ckn-cak"];
            }
            CknCaks ckn_caks = 1 [json_name = "ckn-caks"];
            message ConfidentialityOffsets {
               message ConfidentialityOffset {
                  uint32 offset_value = 1 [json_name = "offset-value"];
               }
               ConfidentialityOffset confidentiality_offset = 1 [json_name = "confidentiality-offset"];
            }
            ConfidentialityOffsets confidentiality_offsets = 2 [json_name = "confidentiality-offsets"];
            message ReplayWindows {
               message ReplayWindow {
                  uint32 window_size = 1 [json_name = "window-size"];
               }
               ReplayWindow replay_window = 1 [json_name = "replay-window"];
            }
            ReplayWindows replay_windows = 3 [json_name = "replay-windows"];
            message KeyserverPrioritys {
               message KeyserverPriority {
                  uint32 priority = 1 [json_name = "priority"];
               }
               KeyserverPriority keyserver_priority = 1 [json_name = "keyserver-priority"];
            }
            KeyserverPrioritys keyserver_prioritys = 4 [json_name = "keyserver-prioritys"];
            message SakLifeTimes {
               message SakLifeTime {
                  uint32 life_time = 1 [json_name = "life-time"];
               }
               SakLifeTime sak_life_time = 1 [json_name = "sak-life-time"];
            }
            SakLifeTimes sak_life_times = 5 [json_name = "sak-life-times"];
            message EncryptModes {
               message EncryptMode {
                  enum Mode {
                     INVALID_ENUM_VALUE_Mode = 0;
                     Mode_NORMAL = 1;
                     Mode_INTEGRITYX_ONLY = 2;
                  };
                  Mode mode = 1 [json_name = "mode"];
               }
               EncryptMode encrypt_mode = 1 [json_name = "encrypt-mode"];
            }
            EncryptModes encrypt_modes = 6 [json_name = "encrypt-modes"];
            message CipherAlgorithmSuites {
               message CipherAlgorithmSuite {
                  enum Suite {
                     INVALID_ENUM_VALUE_Suite = 0;
                     Suite_GCMX_AESX_128 = 1;
                     Suite_GCMX_AESX_XPNX_128 = 2;
                  };
                  Suite suite = 1 [json_name = "suite"];
               }
               CipherAlgorithmSuite cipher_algorithm_suite = 1 [json_name = "cipher-algorithm-suite"];
            }
            CipherAlgorithmSuites cipher_algorithm_suites = 7 [json_name = "cipher-algorithm-suites"];
            message VlanInClears {
               message VlanInClear {
                  enum ClearType {
                     INVALID_ENUM_VALUE_ClearType = 0;
                     ClearType_DOT1QX_INX_CLEAR = 1;
                     ClearType_QINQX_INX_CLEAR = 2;
                  };
                  ClearType clear_type = 1 [json_name = "clear-type"];
               }
               VlanInClear vlan_in_clear = 1 [json_name = "vlan-in-clear"];
            }
            VlanInClears vlan_in_clears = 8 [json_name = "vlan-in-clears"];
         }
         Macsec macsec = 99 [json_name = "macsec"];
         message Mirror {
            message PortMirrors {
               message PortMirror {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  bool cpu_packet = 2 [json_name = "cpu-packet"];
               }
               repeated PortMirror port_mirror = 1 [json_name = "port-mirror"];
            }
            PortMirrors port_mirrors = 1 [json_name = "port-mirrors"];
            message PortMirrorSlice {
               uint32 slice_size = 1 [json_name = "slice-size"];
            }
            PortMirrorSlice port_mirror_slice = 2 [json_name = "port-mirror-slice"];
            message WithoutHeader {
            }
            WithoutHeader without_header = 3 [json_name = "without-header"];
            message PortMirrorCar {
               uint32 cir = 1 [json_name = "cir"];
               uint32 pir = 2 [json_name = "pir"];
               uint32 cbs = 3 [json_name = "cbs"];
               uint32 pbs = 4 [json_name = "pbs"];
            }
            PortMirrorCar port_mirror_car = 4 [json_name = "port-mirror-car"];
            message PortMirrorTo {
               string observe_index = 1 [json_name = "observe-index"];
            }
            PortMirrorTo port_mirror_to = 5 [json_name = "port-mirror-to"];
            message PortFragments {
               message PortFragment {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
               }
               repeated PortFragment port_fragment = 1 [json_name = "port-fragment"];
            }
            PortFragments port_fragments = 6 [json_name = "port-fragments"];
            message Integrateds {
               message Integrated {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  bool cpu_packet = 2 [json_name = "cpu-packet"];
                  uint32 filter_id = 3 [json_name = "filter-id"];
               }
               repeated Integrated integrated = 1 [json_name = "integrated"];
            }
            Integrateds integrateds = 7 [json_name = "integrateds"];
            message BasPortMirrors {
               message BasPortMirror {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pevlan_begin = 2 [json_name = "pevlan-begin"];
                  uint32 pevlan_end = 3 [json_name = "pevlan-end"];
                  uint32 cevlan_begin = 4 [json_name = "cevlan-begin"];
                  uint32 cevlan_end = 5 [json_name = "cevlan-end"];
               }
               repeated BasPortMirror bas_port_mirror = 1 [json_name = "bas-port-mirror"];
            }
            BasPortMirrors bas_port_mirrors = 8 [json_name = "bas-port-mirrors"];
            message EvcL2PortMirrors {
            }
            EvcL2PortMirrors evc_l2_port_mirrors = 9 [json_name = "evc-l2-port-mirrors"];
            message PortObserve {
               uint32 observe_index = 1 [json_name = "observe-index"];
               enum WithoutFilter {
                  WithoutFilter_FALSE = 0;
                  WithoutFilter_TRUE = 1;
               };
               WithoutFilter without_filter = 2 [json_name = "without-filter"];
               string destination_mac = 3 [json_name = "destination-mac"];
               enum PopLabel {
                  INVALID_ENUM_VALUE_PopLabel = 0;
                  PopLabel_ONE = 1;
                  PopLabel_TWO = 2;
                  PopLabel_ALL = 3;
               };
               PopLabel pop_label = 4 [json_name = "pop-label"];
               bool sub_extend = 5 [json_name = "sub-extend"];
               enum WithLinklayerHeader {
                  WithLinklayerHeader_FALSE = 0;
                  WithLinklayerHeader_TRUE = 1;
               };
               WithLinklayerHeader with_linklayer_header = 6 [json_name = "with-linklayer-header"];
            }
            PortObserve port_observe = 10 [json_name = "port-observe"];
         }
         Mirror mirror = 100 [json_name = "mirror"];
         message TrackMonitorGroup {
            string name = 1 [json_name = "name"];
            uint32 down_weight = 2 [json_name = "down-weight"];
         }
         TrackMonitorGroup track_monitor_group = 101 [json_name = "track-monitor-group"];
         message Deephashcfg {
            enum FragmentField {
               INVALID_ENUM_VALUE_FragmentField = 0;
               FragmentField_IP = 1;
               FragmentField_DISABLE = 3;
            };
            FragmentField fragment_field = 1 [json_name = "fragment-field"];
            enum Deepmplshash {
               INVALID_ENUM_VALUE_Deepmplshash = 0;
               Deepmplshash_L3 = 1;
            };
            Deepmplshash deepmplshash = 2 [json_name = "deepmplshash"];
         }
         Deephashcfg deephashcfg = 102 [json_name = "deephashcfg"];
         message IfPoisonReverse {
         }
         IfPoisonReverse if_poison_reverse = 103 [json_name = "if-poison-reverse"];
         message IfP2MpLoadBalance {
            enum LoadbanlanceEnable {
               LoadbanlanceEnable_DISABLE = 0;
               LoadbanlanceEnable_ENABLE = 1;
            };
            LoadbanlanceEnable loadbanlance_enable = 1 [json_name = "loadbanlance-enable"];
            enum RootLoadbanlanceEnable {
               RootLoadbanlanceEnable_DISABLE = 0;
               RootLoadbanlanceEnable_ENABLE = 1;
            };
            RootLoadbanlanceEnable root_loadbanlance_enable = 2 [json_name = "root-loadbanlance-enable"];
            enum RootLoadbanlanceSpmsidis {
               RootLoadbanlanceSpmsidis_DISABLE = 0;
               RootLoadbanlanceSpmsidis_ENABLE = 1;
            };
            RootLoadbanlanceSpmsidis root_loadbanlance_spmsidis = 3 [json_name = "root-loadbanlance-spmsidis"];
         }
         IfP2MpLoadBalance if_p2mp_load_balance = 104 [json_name = "if-p2mp-load-balance"];
         message BgpLocalifnetTraffic {
            enum LocalifnetEnable {
               LocalifnetEnable_DISABLE = 0;
               LocalifnetEnable_ENABLE = 1;
            };
            LocalifnetEnable localifnet_enable = 1 [json_name = "localifnet-enable"];
         }
         BgpLocalifnetTraffic bgp_localifnet_traffic = 105 [json_name = "bgp-localifnet-traffic"];
         message MulticastForward {
            message Shaping {
               bool shaping_enable = 1 [json_name = "shaping-enable"];
            }
            Shaping shaping = 1 [json_name = "shaping"];
         }
         MulticastForward multicast_forward = 106 [json_name = "multicast-forward"];
         message Netstream {
            message SamplerEnables {
               message SamplerEnable {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated SamplerEnable sampler_enable = 1 [json_name = "sampler-enable"];
            }
            SamplerEnables sampler_enables = 1 [json_name = "sampler-enables"];
            message SamplerRates {
               message SamplerRate {
                  enum FlowType {
                     FlowType_IPX_FLOW = 0;
                     FlowType_IPV6X_FLOW = 1;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated SamplerRate sampler_rate = 1 [json_name = "sampler-rate"];
            }
            SamplerRates sampler_rates = 2 [json_name = "sampler-rates"];
         }
         Netstream netstream = 107 [json_name = "netstream"];
         message Nvo3VtepStatistics {
            message Nvo3VtepStatistic {
               uint32 vni = 1 [json_name = "vni"];
               string peer = 2 [json_name = "peer"];
               enum Mode {
                  Mode_L2 = 0;
                  Mode_L3 = 1;
                  Mode_BOTH = 2;
               };
               Mode mode = 3 [json_name = "mode"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
                  Direction_BIDIRECTION = 2;
               };
               Direction direction = 4 [json_name = "direction"];
               message Collections {
                  message Collection {
                     string source_addr = 1 [json_name = "source-addr"];
                     uint64 send_bits_rate = 2 [json_name = "send-bits-rate"];
                     uint64 send_pkts_rate = 3 [json_name = "send-pkts-rate"];
                     uint64 send_unicast_pkts = 4 [json_name = "send-unicast-pkts"];
                     uint64 send_multicast_pkts = 5 [json_name = "send-multicast-pkts"];
                     uint64 send_broadcast_pkts = 6 [json_name = "send-broadcast-pkts"];
                     uint64 send_total_bytes = 7 [json_name = "send-total-bytes"];
                     uint64 send_total_pkts = 8 [json_name = "send-total-pkts"];
                     uint64 receive_bits_rate = 9 [json_name = "receive-bits-rate"];
                     uint64 receive_pkts_rate = 10 [json_name = "receive-pkts-rate"];
                     uint64 receive_unicast_pkts = 11 [json_name = "receive-unicast-pkts"];
                     uint64 receive_multicast_pkts = 12 [json_name = "receive-multicast-pkts"];
                     uint64 receive_broadcast_pkts = 13 [json_name = "receive-broadcast-pkts"];
                     uint64 receive_total_bytes = 14 [json_name = "receive-total-bytes"];
                     uint64 receive_total_pkts = 15 [json_name = "receive-total-pkts"];
                     uint64 drop_unicast_pkts = 16 [json_name = "drop-unicast-pkts"];
                     uint64 drop_multicast_pkts = 17 [json_name = "drop-multicast-pkts"];
                     uint64 drop_broadcast_pkts = 18 [json_name = "drop-broadcast-pkts"];
                  }
                  repeated Collection collection = 1 [json_name = "collection"];
               }
               Collections collections = 5 [json_name = "collections"];
            }
            repeated Nvo3VtepStatistic nvo3_vtep_statistic = 1 [json_name = "nvo3-vtep-statistic"];
         }
         Nvo3VtepStatistics nvo3_vtep_statistics = 108 [json_name = "nvo3-vtep-statistics"];
         message IfIcmpSecuritys {
            message IfIcmpSecurity {
               enum Action {
                  Action_RECEIVEX_PKT = 0;
                  Action_SENDX_PKT = 1;
               };
               Action action = 1 [json_name = "action"];
               enum IcmpName {
                  IcmpName_USERX_DEFINED = 0;
                  IcmpName_ECHO = 1;
                  IcmpName_ECHOX_REPLY = 2;
                  IcmpName_FRAGMENTNEEDX_DFSET = 3;
                  IcmpName_HOSTX_REDIRECT = 4;
                  IcmpName_HOSTX_TOSX_REDIRECT = 5;
                  IcmpName_HOSTX_UNREACHABLE = 6;
                  IcmpName_INFORMATIONX_REPLY = 7;
                  IcmpName_INFORMATIONX_REQUEST = 8;
                  IcmpName_NETX_REDIRECT = 9;
                  IcmpName_NETX_TOSX_REDIRECT = 10;
                  IcmpName_NETX_UNREACHABLE = 11;
                  IcmpName_PARAMETERX_PROBLEM = 12;
                  IcmpName_PORTX_UNREACHABLE = 13;
                  IcmpName_PROTOCOLX_UNREACHABLE = 14;
                  IcmpName_REASSEMBLYX_TIMEOUT = 15;
                  IcmpName_SOURCEX_QUENCH = 16;
                  IcmpName_SOURCEX_ROUTEX_FAILED = 17;
                  IcmpName_TIMESTAMPX_REPLY = 18;
                  IcmpName_TIMESTAMPX_REQUEST = 19;
                  IcmpName_TTLX_EXCEEDED = 20;
               };
               IcmpName icmp_name = 2 [json_name = "icmp-name"];
               uint32 icmp_type = 3 [json_name = "icmp-type"];
               uint32 icmp_code = 4 [json_name = "icmp-code"];
               enum SwitchOperation {
                  SwitchOperation_ENABLE = 0;
                  SwitchOperation_DISABLE = 1;
               };
               SwitchOperation switch_operation = 5 [json_name = "switch-operation"];
            }
            repeated IfIcmpSecurity if_icmp_security = 1 [json_name = "if-icmp-security"];
         }
         IfIcmpSecuritys if_icmp_securitys = 109 [json_name = "if-icmp-securitys"];
         message IfIpOptSecuritys {
            message IfIpOptSecurity {
               enum OptionType {
                  OptionType_ROUTEX_ALERT = 0;
                  OptionType_ROUTEX_RECORD = 1;
                  OptionType_SOURCEX_ROUTE = 2;
                  OptionType_TIMEX_STAMP = 3;
               };
               OptionType option_type = 1 [json_name = "option-type"];
               enum Switch {
                  Switch_ENABLE = 0;
                  Switch_DISABLE = 1;
               };
               Switch switch = 2 [json_name = "switch"];
            }
            repeated IfIpOptSecurity if_ip_opt_security = 1 [json_name = "if-ip-opt-security"];
         }
         IfIpOptSecuritys if_ip_opt_securitys = 110 [json_name = "if-ip-opt-securitys"];
         message IpVerifySrcAddr {
         }
         IpVerifySrcAddr ip_verify_src_addr = 111 [json_name = "ip-verify-src-addr"];
         message IpFwdBroadcast {
            string acl_name_or_num = 1 [json_name = "acl-name-or-num"];
         }
         IpFwdBroadcast ip_fwd_broadcast = 112 [json_name = "ip-fwd-broadcast"];
         message Rbs {
            message BindRbp {
               string name = 1 [json_name = "name"];
            }
            BindRbp bind_rbp = 1 [json_name = "bind-rbp"];
         }
         Rbs rbs = 113 [json_name = "rbs"];
         message Vrrp {
            message BackupGroups {
               bool ttlcheck_flag = 1 [json_name = "ttlcheck-flag"];
               uint32 recover_delay = 2 [json_name = "recover-delay"];
               bool arpsend_simple = 3 [json_name = "arpsend-simple"];
            }
            BackupGroups backup_groups = 1 [json_name = "backup-groups"];
            message TrackAdmins {
               message TrackAdmin {
                  uint32 id = 1 [json_name = "id"];
                  string if_name = 2 [json_name = "if-name"];
               }
               repeated TrackAdmin track_admin = 1 [json_name = "track-admin"];
            }
            TrackAdmins track_admins = 2 [json_name = "track-admins"];
         }
         Vrrp vrrp = 114 [json_name = "vrrp"];
         message UnicastForward {
            message PoisonReverse {
            }
            PoisonReverse poison_reverse = 1 [json_name = "poison-reverse"];
            message Ipv6Redirect {
            }
            Ipv6Redirect ipv6_redirect = 2 [json_name = "ipv6-redirect"];
            message Ipv6NaAntiAttack {
            }
            Ipv6NaAntiAttack ipv6_na_anti_attack = 3 [json_name = "ipv6-na-anti-attack"];
            message IpPrioritySelect {
               string if_name = 1 [json_name = "if-name"];
            }
            IpPrioritySelect ip_priority_select = 4 [json_name = "ip-priority-select"];
            message MacChangeNotifyArp {
               bool enable = 1 [json_name = "enable"];
            }
            MacChangeNotifyArp mac_change_notify_arp = 5 [json_name = "mac-change-notify-arp"];
            message MacChangeNotifyNdDisable {
            }
            MacChangeNotifyNdDisable mac_change_notify_nd_disable = 6 [json_name = "mac-change-notify-nd-disable"];
         }
         UnicastForward unicast_forward = 115 [json_name = "unicast-forward"];
         message UnknowUnicastThreshold {
            uint32 threshold = 1 [json_name = "threshold"];
         }
         UnknowUnicastThreshold unknow_unicast_threshold = 116 [json_name = "unknow-unicast-threshold"];
      }
      repeated Interface interface = 1 [json_name = "interface"];
   }
   Interfaces interfaces = 2 [json_name = "interfaces"];
   message Damp {
      bool tx_off = 1 [json_name = "tx-off"];
   }
   Damp damp = 3 [json_name = "damp"];
   message AutoRecoveryTimes {
      message AutoRecoveryTime {
         enum ErrorDownType {
            ErrorDownType_BPDUX_PROTECTION = 0;
            ErrorDownType_AUTOX_DEFEND = 1;
            ErrorDownType_MONITORX_LINK = 2;
            ErrorDownType_PORTSECX_REACHEDX_LIMIT = 65;
            ErrorDownType_STORMX_CONTROL = 66;
            ErrorDownType_LOOPBACKX_DETECT = 67;
            ErrorDownType_DUALX_ACTIVE = 68;
            ErrorDownType_MACX_ADDRESSX_FLAPPING = 69;
            ErrorDownType_NOX_STACKX_LINK = 70;
            ErrorDownType_CRCX_STATISTICS = 71;
            ErrorDownType_TRANSCEIVERX_POWERX_LOW = 72;
            ErrorDownType_LINKX_FLAP = 73;
            ErrorDownType_L2X_LOOPX_OCCURED = 74;
            ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
            ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
            ErrorDownType_RESOURCEX_MISMATCH = 77;
            ErrorDownType_LEAFX_MSTP = 78;
            ErrorDownType_MX_LAG = 79;
            ErrorDownType_FABRICX_UPLINKX_THRESHOLD = 80;
            ErrorDownType_STACKX_CONFIGX_CONFLICT = 81;
            ErrorDownType_SPINEX_TYPEX_UNSUPPORTED = 82;
            ErrorDownType_STACKX_PACKETX_DEFENSIVE = 83;
            ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
            ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
            ErrorDownType_FABRICX_LINKX_FAILURE = 87;
            ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK = 88;
            ErrorDownType_PFCX_DEADLOCK = 89;
         };
         ErrorDownType error_down_type = 1 [json_name = "error-down-type"];
         uint32 time_value = 2 [json_name = "time-value"];
      }
      repeated AutoRecoveryTime auto_recovery_time = 1 [json_name = "auto-recovery-time"];
   }
   AutoRecoveryTimes auto_recovery_times = 4 [json_name = "auto-recovery-times"];
   message StaticDimensionRanges {
      message StaticDimensionRange {
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPGE = 114;
            Type_VIRTUALX_IF = 116;
         };
         Type type = 1 [json_name = "type"];
         string chassis_range = 2 [json_name = "chassis-range"];
         string slot_range = 3 [json_name = "slot-range"];
         string card_range = 4 [json_name = "card-range"];
         string port_range = 5 [json_name = "port-range"];
      }
      repeated StaticDimensionRange static_dimension_range = 1 [json_name = "static-dimension-range"];
   }
   StaticDimensionRanges static_dimension_ranges = 5 [json_name = "static-dimension-ranges"];
   message Ipv4InterfaceCount {
      uint32 physical_up_count = 1 [json_name = "physical-up-count"];
      uint32 physical_down_count = 2 [json_name = "physical-down-count"];
      uint32 protocol_up_count = 3 [json_name = "protocol-up-count"];
      uint32 protocol_down_count = 4 [json_name = "protocol-down-count"];
   }
   Ipv4InterfaceCount ipv4_interface_count = 6 [json_name = "ipv4-interface-count"];
   message RemoteInterfaces {
      message RemoteInterface {
         string name = 1 [json_name = "name"];
         uint32 index = 2 [json_name = "index"];
         message RemoteStatisticsState {
            string last_cleared_time = 1 [json_name = "last-cleared-time"];
            uint64 in_bit_rate = 2 [json_name = "in-bit-rate"];
            uint64 in_packet_rate = 3 [json_name = "in-packet-rate"];
            uint64 in_peak_bit_rate = 4 [json_name = "in-peak-bit-rate"];
            string in_peak_bit_rate_record_time = 5 [json_name = "in-peak-bit-rate-record-time"];
            uint64 out_bit_rate = 6 [json_name = "out-bit-rate"];
            uint64 out_packet_rate = 7 [json_name = "out-packet-rate"];
            uint64 out_peak_bit_rate = 8 [json_name = "out-peak-bit-rate"];
            string out_peak_bit_rate_record_time = 9 [json_name = "out-peak-bit-rate-record-time"];
            string in_use_rate = 10 [json_name = "in-use-rate"];
            string out_use_rate = 11 [json_name = "out-use-rate"];
         }
         RemoteStatisticsState remote_statistics_state = 3 [json_name = "remote-statistics-state"];
      }
      repeated RemoteInterface remote_interface = 1 [json_name = "remote-interface"];
   }
   RemoteInterfaces remote_interfaces = 7 [json_name = "remote-interfaces"];
   message HdlcDamp {
      bool enable = 1 [json_name = "enable"];
      enum DampLevel {
         DampLevel_LIGHT = 0;
         DampLevel_MIDDLE = 1;
         DampLevel_HEAVY = 2;
         DampLevel_MANUAL = 3;
      };
      DampLevel damp_level = 2 [json_name = "damp-level"];
      uint32 suppress = 3 [json_name = "suppress"];
      uint32 reuse = 4 [json_name = "reuse"];
      uint32 max_suppress_time = 5 [json_name = "max-suppress-time"];
      uint32 half_lifeperiod = 6 [json_name = "half-lifeperiod"];
   }
   HdlcDamp hdlc_damp = 8 [json_name = "hdlc-damp"];
}
