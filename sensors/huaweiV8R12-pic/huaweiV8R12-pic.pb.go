// ---------------------------------------------------------------------------
// Protofilename : huawei-pic.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-pic.proto

package huaweiV8R12_pic

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pic_PortStatistics_Statistic_PortType int32

const (
	Pic_PortStatistics_Statistic_PortType_ATM       Pic_PortStatistics_Statistic_PortType = 0
	Pic_PortStatistics_Statistic_PortType_C37       Pic_PortStatistics_Statistic_PortType = 1
	Pic_PortStatistics_Statistic_PortType_CODIR     Pic_PortStatistics_Statistic_PortType = 2
	Pic_PortStatistics_Statistic_PortType_CPOS      Pic_PortStatistics_Statistic_PortType = 3
	Pic_PortStatistics_Statistic_PortType_E1        Pic_PortStatistics_Statistic_PortType = 4
	Pic_PortStatistics_Statistic_PortType_E3        Pic_PortStatistics_Statistic_PortType = 5
	Pic_PortStatistics_Statistic_PortType_ECMSERIAL Pic_PortStatistics_Statistic_PortType = 6
	Pic_PortStatistics_Statistic_PortType_ETH       Pic_PortStatistics_Statistic_PortType = 7
	Pic_PortStatistics_Statistic_PortType_FLEXEPHY  Pic_PortStatistics_Statistic_PortType = 8
	Pic_PortStatistics_Statistic_PortType_FLEXE     Pic_PortStatistics_Statistic_PortType = 9
	Pic_PortStatistics_Statistic_PortType_OTN       Pic_PortStatistics_Statistic_PortType = 10
	Pic_PortStatistics_Statistic_PortType_POS       Pic_PortStatistics_Statistic_PortType = 11
	Pic_PortStatistics_Statistic_PortType_VOICE     Pic_PortStatistics_Statistic_PortType = 12
)

// Enum value maps for Pic_PortStatistics_Statistic_PortType.
var (
	Pic_PortStatistics_Statistic_PortType_name = map[int32]string{
		0:  "PortType_ATM",
		1:  "PortType_C37",
		2:  "PortType_CODIR",
		3:  "PortType_CPOS",
		4:  "PortType_E1",
		5:  "PortType_E3",
		6:  "PortType_ECMSERIAL",
		7:  "PortType_ETH",
		8:  "PortType_FLEXEPHY",
		9:  "PortType_FLEXE",
		10: "PortType_OTN",
		11: "PortType_POS",
		12: "PortType_VOICE",
	}
	Pic_PortStatistics_Statistic_PortType_value = map[string]int32{
		"PortType_ATM":       0,
		"PortType_C37":       1,
		"PortType_CODIR":     2,
		"PortType_CPOS":      3,
		"PortType_E1":        4,
		"PortType_E3":        5,
		"PortType_ECMSERIAL": 6,
		"PortType_ETH":       7,
		"PortType_FLEXEPHY":  8,
		"PortType_FLEXE":     9,
		"PortType_OTN":       10,
		"PortType_POS":       11,
		"PortType_VOICE":     12,
	}
)

func (x Pic_PortStatistics_Statistic_PortType) Enum() *Pic_PortStatistics_Statistic_PortType {
	p := new(Pic_PortStatistics_Statistic_PortType)
	*p = x
	return p
}

func (x Pic_PortStatistics_Statistic_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pic_PortStatistics_Statistic_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_pic_proto_enumTypes[0].Descriptor()
}

func (Pic_PortStatistics_Statistic_PortType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_pic_proto_enumTypes[0]
}

func (x Pic_PortStatistics_Statistic_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pic_PortStatistics_Statistic_PortType.Descriptor instead.
func (Pic_PortStatistics_Statistic_PortType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Pic_PanelSplitPorts_PanelSplitPort_SplitType int32

const (
	Pic_PanelSplitPorts_PanelSplitPort_INVALID_ENUM_VALUE_SplitType Pic_PanelSplitPorts_PanelSplitPort_SplitType = 0
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_4X10GE           Pic_PanelSplitPorts_PanelSplitPort_SplitType = 1
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X40GE           Pic_PanelSplitPorts_PanelSplitPort_SplitType = 2
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X100GE          Pic_PanelSplitPorts_PanelSplitPort_SplitType = 3
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_10X10GE          Pic_PanelSplitPorts_PanelSplitPort_SplitType = 4
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_4X25GEX_NULL     Pic_PanelSplitPorts_PanelSplitPort_SplitType = 5
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_4X10GEX_1X40GE   Pic_PanelSplitPorts_PanelSplitPort_SplitType = 9
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_4X10GEX_4X10GE   Pic_PanelSplitPorts_PanelSplitPort_SplitType = 10
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_NULLX_1X100GE      Pic_PanelSplitPorts_PanelSplitPort_SplitType = 12
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_NULLX_2X25GE       Pic_PanelSplitPorts_PanelSplitPort_SplitType = 15
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X50GEX_NULL     Pic_PanelSplitPorts_PanelSplitPort_SplitType = 16
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X25GEX_2X1GE    Pic_PanelSplitPorts_PanelSplitPort_SplitType = 17
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X10GEX_2X10GE   Pic_PanelSplitPorts_PanelSplitPort_SplitType = 18
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X25GEX_NULL     Pic_PanelSplitPorts_PanelSplitPort_SplitType = 19
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X10GEX_1X10GE   Pic_PanelSplitPorts_PanelSplitPort_SplitType = 20
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_ADAPT              Pic_PanelSplitPorts_PanelSplitPort_SplitType = 21
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_4X25GE           Pic_PanelSplitPorts_PanelSplitPort_SplitType = 22
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_X_1X50GE           Pic_PanelSplitPorts_PanelSplitPort_SplitType = 23
)

// Enum value maps for Pic_PanelSplitPorts_PanelSplitPort_SplitType.
var (
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_SplitType",
		1:  "SplitType_X_4X10GE",
		2:  "SplitType_X_1X40GE",
		3:  "SplitType_X_1X100GE",
		4:  "SplitType_X_10X10GE",
		5:  "SplitType_X_4X25GEX_NULL",
		9:  "SplitType_X_4X10GEX_1X40GE",
		10: "SplitType_X_4X10GEX_4X10GE",
		12: "SplitType_NULLX_1X100GE",
		15: "SplitType_NULLX_2X25GE",
		16: "SplitType_X_1X50GEX_NULL",
		17: "SplitType_X_1X25GEX_2X1GE",
		18: "SplitType_X_1X10GEX_2X10GE",
		19: "SplitType_X_1X25GEX_NULL",
		20: "SplitType_X_1X10GEX_1X10GE",
		21: "SplitType_ADAPT",
		22: "SplitType_X_4X25GE",
		23: "SplitType_X_1X50GE",
	}
	Pic_PanelSplitPorts_PanelSplitPort_SplitType_value = map[string]int32{
		"INVALID_ENUM_VALUE_SplitType": 0,
		"SplitType_X_4X10GE":           1,
		"SplitType_X_1X40GE":           2,
		"SplitType_X_1X100GE":          3,
		"SplitType_X_10X10GE":          4,
		"SplitType_X_4X25GEX_NULL":     5,
		"SplitType_X_4X10GEX_1X40GE":   9,
		"SplitType_X_4X10GEX_4X10GE":   10,
		"SplitType_NULLX_1X100GE":      12,
		"SplitType_NULLX_2X25GE":       15,
		"SplitType_X_1X50GEX_NULL":     16,
		"SplitType_X_1X25GEX_2X1GE":    17,
		"SplitType_X_1X10GEX_2X10GE":   18,
		"SplitType_X_1X25GEX_NULL":     19,
		"SplitType_X_1X10GEX_1X10GE":   20,
		"SplitType_ADAPT":              21,
		"SplitType_X_4X25GE":           22,
		"SplitType_X_1X50GE":           23,
	}
)

func (x Pic_PanelSplitPorts_PanelSplitPort_SplitType) Enum() *Pic_PanelSplitPorts_PanelSplitPort_SplitType {
	p := new(Pic_PanelSplitPorts_PanelSplitPort_SplitType)
	*p = x
	return p
}

func (x Pic_PanelSplitPorts_PanelSplitPort_SplitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pic_PanelSplitPorts_PanelSplitPort_SplitType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_pic_proto_enumTypes[1].Descriptor()
}

func (Pic_PanelSplitPorts_PanelSplitPort_SplitType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_pic_proto_enumTypes[1]
}

func (x Pic_PanelSplitPorts_PanelSplitPort_SplitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pic_PanelSplitPorts_PanelSplitPort_SplitType.Descriptor instead.
func (Pic_PanelSplitPorts_PanelSplitPort_SplitType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Pic_AutoClears_AutoClear_Type int32

const (
	Pic_AutoClears_AutoClear_INVALID_ENUM_VALUE_Type Pic_AutoClears_AutoClear_Type = 0
	Pic_AutoClears_AutoClear_Type_LSRCLOSE           Pic_AutoClears_AutoClear_Type = 7
	Pic_AutoClears_AutoClear_Type_PHYSICALX_MODE     Pic_AutoClears_AutoClear_Type = 14
)

// Enum value maps for Pic_AutoClears_AutoClear_Type.
var (
	Pic_AutoClears_AutoClear_Type_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_Type",
		7:  "Type_LSRCLOSE",
		14: "Type_PHYSICALX_MODE",
	}
	Pic_AutoClears_AutoClear_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_LSRCLOSE":           7,
		"Type_PHYSICALX_MODE":     14,
	}
)

func (x Pic_AutoClears_AutoClear_Type) Enum() *Pic_AutoClears_AutoClear_Type {
	p := new(Pic_AutoClears_AutoClear_Type)
	*p = x
	return p
}

func (x Pic_AutoClears_AutoClear_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pic_AutoClears_AutoClear_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_pic_proto_enumTypes[2].Descriptor()
}

func (Pic_AutoClears_AutoClear_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_pic_proto_enumTypes[2]
}

func (x Pic_AutoClears_AutoClear_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pic_AutoClears_AutoClear_Type.Descriptor instead.
func (Pic_AutoClears_AutoClear_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type Pic_AutoClears_AutoClear_Status int32

const (
	Pic_AutoClears_AutoClear_Status_DISABLED Pic_AutoClears_AutoClear_Status = 0
	Pic_AutoClears_AutoClear_Status_ENABLED  Pic_AutoClears_AutoClear_Status = 1
)

// Enum value maps for Pic_AutoClears_AutoClear_Status.
var (
	Pic_AutoClears_AutoClear_Status_name = map[int32]string{
		0: "Status_DISABLED",
		1: "Status_ENABLED",
	}
	Pic_AutoClears_AutoClear_Status_value = map[string]int32{
		"Status_DISABLED": 0,
		"Status_ENABLED":  1,
	}
)

func (x Pic_AutoClears_AutoClear_Status) Enum() *Pic_AutoClears_AutoClear_Status {
	p := new(Pic_AutoClears_AutoClear_Status)
	*p = x
	return p
}

func (x Pic_AutoClears_AutoClear_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pic_AutoClears_AutoClear_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_pic_proto_enumTypes[3].Descriptor()
}

func (Pic_AutoClears_AutoClear_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_pic_proto_enumTypes[3]
}

func (x Pic_AutoClears_AutoClear_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pic_AutoClears_AutoClear_Status.Descriptor instead.
func (Pic_AutoClears_AutoClear_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

type Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType int32

const (
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_INVALID_ENUM_VALUE_PortType Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType = 0
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType_WAN                Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType = 1
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType_POS                Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType = 2
)

// Enum value maps for Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType.
var (
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PortType",
		1: "PortType_WAN",
		2: "PortType_POS",
	}
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType_value = map[string]int32{
		"INVALID_ENUM_VALUE_PortType": 0,
		"PortType_WAN":                1,
		"PortType_POS":                2,
	}
)

func (x Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType) Enum() *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType {
	p := new(Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType)
	*p = x
	return p
}

func (x Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_pic_proto_enumTypes[4].Descriptor()
}

func (Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_pic_proto_enumTypes[4]
}

func (x Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType.Descriptor instead.
func (Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

type Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType int32

const (
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_AUAIS  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 0
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_B3TCA  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 1
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LAIS   Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 2
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LOF    Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 3
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LOM    Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 4
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LOP    Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 5
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LOS    Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 6
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LRDI   Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 7
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LREI   Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 8
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_OOF    Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 9
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_PAIS   Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 10
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_PRDI   Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 11
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_PREI   Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 12
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_PPLM   Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 13
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_RDOOL  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 14
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_RROOL  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 15
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_SDBERE Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 16
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_SFBERE Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 17
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_TROOL  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 18
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_PUNEQ  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 19
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_LCD    Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 20
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_B1TCA  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 40
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_B2TCA  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType = 41
)

// Enum value maps for Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType.
var (
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_name = map[int32]string{
		0:  "AlarmType_AUAIS",
		1:  "AlarmType_B3TCA",
		2:  "AlarmType_LAIS",
		3:  "AlarmType_LOF",
		4:  "AlarmType_LOM",
		5:  "AlarmType_LOP",
		6:  "AlarmType_LOS",
		7:  "AlarmType_LRDI",
		8:  "AlarmType_LREI",
		9:  "AlarmType_OOF",
		10: "AlarmType_PAIS",
		11: "AlarmType_PRDI",
		12: "AlarmType_PREI",
		13: "AlarmType_PPLM",
		14: "AlarmType_RDOOL",
		15: "AlarmType_RROOL",
		16: "AlarmType_SDBERE",
		17: "AlarmType_SFBERE",
		18: "AlarmType_TROOL",
		19: "AlarmType_PUNEQ",
		20: "AlarmType_LCD",
		40: "AlarmType_B1TCA",
		41: "AlarmType_B2TCA",
	}
	Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_value = map[string]int32{
		"AlarmType_AUAIS":  0,
		"AlarmType_B3TCA":  1,
		"AlarmType_LAIS":   2,
		"AlarmType_LOF":    3,
		"AlarmType_LOM":    4,
		"AlarmType_LOP":    5,
		"AlarmType_LOS":    6,
		"AlarmType_LRDI":   7,
		"AlarmType_LREI":   8,
		"AlarmType_OOF":    9,
		"AlarmType_PAIS":   10,
		"AlarmType_PRDI":   11,
		"AlarmType_PREI":   12,
		"AlarmType_PPLM":   13,
		"AlarmType_RDOOL":  14,
		"AlarmType_RROOL":  15,
		"AlarmType_SDBERE": 16,
		"AlarmType_SFBERE": 17,
		"AlarmType_TROOL":  18,
		"AlarmType_PUNEQ":  19,
		"AlarmType_LCD":    20,
		"AlarmType_B1TCA":  40,
		"AlarmType_B2TCA":  41,
	}
)

func (x Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType) Enum() *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType {
	p := new(Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType)
	*p = x
	return p
}

func (x Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_pic_proto_enumTypes[5].Descriptor()
}

func (Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_pic_proto_enumTypes[5]
}

func (x Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType.Descriptor instead.
func (Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

type Pic_AlarmAisInserts_AlarmAisInsert_Name int32

const (
	Pic_AlarmAisInserts_AlarmAisInsert_INVALID_ENUM_VALUE_Name Pic_AlarmAisInserts_AlarmAisInsert_Name = 0
	Pic_AlarmAisInserts_AlarmAisInsert_Name_HPTIM              Pic_AlarmAisInserts_AlarmAisInsert_Name = 1
	Pic_AlarmAisInserts_AlarmAisInsert_Name_LPTIM              Pic_AlarmAisInserts_AlarmAisInsert_Name = 2
	Pic_AlarmAisInserts_AlarmAisInsert_Name_RSTIM              Pic_AlarmAisInserts_AlarmAisInsert_Name = 3
	Pic_AlarmAisInserts_AlarmAisInsert_Name_HPTIMATM           Pic_AlarmAisInserts_AlarmAisInsert_Name = 4
	Pic_AlarmAisInserts_AlarmAisInsert_Name_HPUNEQATM          Pic_AlarmAisInserts_AlarmAisInsert_Name = 5
	Pic_AlarmAisInserts_AlarmAisInsert_Name_HPUNEQ             Pic_AlarmAisInserts_AlarmAisInsert_Name = 6
	Pic_AlarmAisInserts_AlarmAisInsert_Name_HPPLM              Pic_AlarmAisInserts_AlarmAisInsert_Name = 7
	Pic_AlarmAisInserts_AlarmAisInsert_Name_LPUNEQ             Pic_AlarmAisInserts_AlarmAisInsert_Name = 8
)

// Enum value maps for Pic_AlarmAisInserts_AlarmAisInsert_Name.
var (
	Pic_AlarmAisInserts_AlarmAisInsert_Name_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Name",
		1: "Name_HPTIM",
		2: "Name_LPTIM",
		3: "Name_RSTIM",
		4: "Name_HPTIMATM",
		5: "Name_HPUNEQATM",
		6: "Name_HPUNEQ",
		7: "Name_HPPLM",
		8: "Name_LPUNEQ",
	}
	Pic_AlarmAisInserts_AlarmAisInsert_Name_value = map[string]int32{
		"INVALID_ENUM_VALUE_Name": 0,
		"Name_HPTIM":              1,
		"Name_LPTIM":              2,
		"Name_RSTIM":              3,
		"Name_HPTIMATM":           4,
		"Name_HPUNEQATM":          5,
		"Name_HPUNEQ":             6,
		"Name_HPPLM":              7,
		"Name_LPUNEQ":             8,
	}
)

func (x Pic_AlarmAisInserts_AlarmAisInsert_Name) Enum() *Pic_AlarmAisInserts_AlarmAisInsert_Name {
	p := new(Pic_AlarmAisInserts_AlarmAisInsert_Name)
	*p = x
	return p
}

func (x Pic_AlarmAisInserts_AlarmAisInsert_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pic_AlarmAisInserts_AlarmAisInsert_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_pic_proto_enumTypes[6].Descriptor()
}

func (Pic_AlarmAisInserts_AlarmAisInsert_Name) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_pic_proto_enumTypes[6]
}

func (x Pic_AlarmAisInserts_AlarmAisInsert_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pic_AlarmAisInserts_AlarmAisInsert_Name.Descriptor instead.
func (Pic_AlarmAisInserts_AlarmAisInsert_Name) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

type Pic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortStatistics       *Pic_PortStatistics       `protobuf:"bytes,1,opt,name=port_statistics,json=port-statistics,proto3" json:"port_statistics,omitempty"`
	PanelSplitPorts      *Pic_PanelSplitPorts      `protobuf:"bytes,2,opt,name=panel_split_ports,json=panel-split-ports,proto3" json:"panel_split_ports,omitempty"`
	AutoClears           *Pic_AutoClears           `protobuf:"bytes,3,opt,name=auto_clears,json=auto-clears,proto3" json:"auto_clears,omitempty"`
	TadTransAlarmIfDowns *Pic_TadTransAlarmIfDowns `protobuf:"bytes,4,opt,name=tad_trans_alarm_if_downs,json=tad-trans-alarm-if-downs,proto3" json:"tad_trans_alarm_if_downs,omitempty"`
	AlarmAisInserts      *Pic_AlarmAisInserts      `protobuf:"bytes,5,opt,name=alarm_ais_inserts,json=alarm-ais-inserts,proto3" json:"alarm_ais_inserts,omitempty"`
}

func (x *Pic) Reset() {
	*x = Pic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic) ProtoMessage() {}

func (x *Pic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic.ProtoReflect.Descriptor instead.
func (*Pic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0}
}

func (x *Pic) GetPortStatistics() *Pic_PortStatistics {
	if x != nil {
		return x.PortStatistics
	}
	return nil
}

func (x *Pic) GetPanelSplitPorts() *Pic_PanelSplitPorts {
	if x != nil {
		return x.PanelSplitPorts
	}
	return nil
}

func (x *Pic) GetAutoClears() *Pic_AutoClears {
	if x != nil {
		return x.AutoClears
	}
	return nil
}

func (x *Pic) GetTadTransAlarmIfDowns() *Pic_TadTransAlarmIfDowns {
	if x != nil {
		return x.TadTransAlarmIfDowns
	}
	return nil
}

func (x *Pic) GetAlarmAisInserts() *Pic_AlarmAisInserts {
	if x != nil {
		return x.AlarmAisInserts
	}
	return nil
}

type Pic_PortStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistic []*Pic_PortStatistics_Statistic `protobuf:"bytes,1,rep,name=statistic,proto3" json:"statistic,omitempty"`
}

func (x *Pic_PortStatistics) Reset() {
	*x = Pic_PortStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_PortStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_PortStatistics) ProtoMessage() {}

func (x *Pic_PortStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_PortStatistics.ProtoReflect.Descriptor instead.
func (*Pic_PortStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Pic_PortStatistics) GetStatistic() []*Pic_PortStatistics_Statistic {
	if x != nil {
		return x.Statistic
	}
	return nil
}

type Pic_PanelSplitPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelSplitPort []*Pic_PanelSplitPorts_PanelSplitPort `protobuf:"bytes,1,rep,name=panel_split_port,json=panel-split-port,proto3" json:"panel_split_port,omitempty"`
}

func (x *Pic_PanelSplitPorts) Reset() {
	*x = Pic_PanelSplitPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_PanelSplitPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_PanelSplitPorts) ProtoMessage() {}

func (x *Pic_PanelSplitPorts) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_PanelSplitPorts.ProtoReflect.Descriptor instead.
func (*Pic_PanelSplitPorts) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Pic_PanelSplitPorts) GetPanelSplitPort() []*Pic_PanelSplitPorts_PanelSplitPort {
	if x != nil {
		return x.PanelSplitPort
	}
	return nil
}

type Pic_AutoClears struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoClear []*Pic_AutoClears_AutoClear `protobuf:"bytes,1,rep,name=auto_clear,json=auto-clear,proto3" json:"auto_clear,omitempty"`
}

func (x *Pic_AutoClears) Reset() {
	*x = Pic_AutoClears{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_AutoClears) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_AutoClears) ProtoMessage() {}

func (x *Pic_AutoClears) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_AutoClears.ProtoReflect.Descriptor instead.
func (*Pic_AutoClears) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Pic_AutoClears) GetAutoClear() []*Pic_AutoClears_AutoClear {
	if x != nil {
		return x.AutoClear
	}
	return nil
}

type Pic_TadTransAlarmIfDowns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TadTransAlarmIfDown []*Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown `protobuf:"bytes,1,rep,name=tad_trans_alarm_if_down,json=tad-trans-alarm-if-down,proto3" json:"tad_trans_alarm_if_down,omitempty"`
}

func (x *Pic_TadTransAlarmIfDowns) Reset() {
	*x = Pic_TadTransAlarmIfDowns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_TadTransAlarmIfDowns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_TadTransAlarmIfDowns) ProtoMessage() {}

func (x *Pic_TadTransAlarmIfDowns) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_TadTransAlarmIfDowns.ProtoReflect.Descriptor instead.
func (*Pic_TadTransAlarmIfDowns) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Pic_TadTransAlarmIfDowns) GetTadTransAlarmIfDown() []*Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown {
	if x != nil {
		return x.TadTransAlarmIfDown
	}
	return nil
}

type Pic_AlarmAisInserts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmAisInsert []*Pic_AlarmAisInserts_AlarmAisInsert `protobuf:"bytes,1,rep,name=alarm_ais_insert,json=alarm-ais-insert,proto3" json:"alarm_ais_insert,omitempty"`
}

func (x *Pic_AlarmAisInserts) Reset() {
	*x = Pic_AlarmAisInserts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_AlarmAisInserts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_AlarmAisInserts) ProtoMessage() {}

func (x *Pic_AlarmAisInserts) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_AlarmAisInserts.ProtoReflect.Descriptor instead.
func (*Pic_AlarmAisInserts) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Pic_AlarmAisInserts) GetAlarmAisInsert() []*Pic_AlarmAisInserts_AlarmAisInsert {
	if x != nil {
		return x.AlarmAisInsert
	}
	return nil
}

type Pic_PortStatistics_Statistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChassisId    string                                `protobuf:"bytes,1,opt,name=chassis_id,json=chassis-id,proto3" json:"chassis_id,omitempty"`
	BoardId      uint32                                `protobuf:"varint,2,opt,name=board_id,json=board-id,proto3" json:"board_id,omitempty"`
	PortType     Pic_PortStatistics_Statistic_PortType `protobuf:"varint,3,opt,name=port_type,json=port-type,proto3,enum=huaweiV8R12_pic.Pic_PortStatistics_Statistic_PortType" json:"port_type,omitempty"`
	TotalPortNum uint32                                `protobuf:"varint,4,opt,name=total_port_num,json=total-port-num,proto3" json:"total_port_num,omitempty"`
	PhyUpPortNum uint32                                `protobuf:"varint,5,opt,name=phy_up_port_num,json=phy-up-port-num,proto3" json:"phy_up_port_num,omitempty"`
}

func (x *Pic_PortStatistics_Statistic) Reset() {
	*x = Pic_PortStatistics_Statistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_PortStatistics_Statistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_PortStatistics_Statistic) ProtoMessage() {}

func (x *Pic_PortStatistics_Statistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_PortStatistics_Statistic.ProtoReflect.Descriptor instead.
func (*Pic_PortStatistics_Statistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Pic_PortStatistics_Statistic) GetChassisId() string {
	if x != nil {
		return x.ChassisId
	}
	return ""
}

func (x *Pic_PortStatistics_Statistic) GetBoardId() uint32 {
	if x != nil {
		return x.BoardId
	}
	return 0
}

func (x *Pic_PortStatistics_Statistic) GetPortType() Pic_PortStatistics_Statistic_PortType {
	if x != nil {
		return x.PortType
	}
	return Pic_PortStatistics_Statistic_PortType_ATM
}

func (x *Pic_PortStatistics_Statistic) GetTotalPortNum() uint32 {
	if x != nil {
		return x.TotalPortNum
	}
	return 0
}

func (x *Pic_PortStatistics_Statistic) GetPhyUpPortNum() uint32 {
	if x != nil {
		return x.PhyUpPortNum
	}
	return 0
}

type Pic_PanelSplitPorts_PanelSplitPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position   string                                         `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SplitType  Pic_PanelSplitPorts_PanelSplitPort_SplitType   `protobuf:"varint,2,opt,name=split_type,json=split-type,proto3,enum=huaweiV8R12_pic.Pic_PanelSplitPorts_PanelSplitPort_SplitType" json:"split_type,omitempty"`
	SplitPorts *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts `protobuf:"bytes,3,opt,name=split_ports,json=split-ports,proto3" json:"split_ports,omitempty"`
}

func (x *Pic_PanelSplitPorts_PanelSplitPort) Reset() {
	*x = Pic_PanelSplitPorts_PanelSplitPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_PanelSplitPorts_PanelSplitPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_PanelSplitPorts_PanelSplitPort) ProtoMessage() {}

func (x *Pic_PanelSplitPorts_PanelSplitPort) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_PanelSplitPorts_PanelSplitPort.ProtoReflect.Descriptor instead.
func (*Pic_PanelSplitPorts_PanelSplitPort) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Pic_PanelSplitPorts_PanelSplitPort) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Pic_PanelSplitPorts_PanelSplitPort) GetSplitType() Pic_PanelSplitPorts_PanelSplitPort_SplitType {
	if x != nil {
		return x.SplitType
	}
	return Pic_PanelSplitPorts_PanelSplitPort_INVALID_ENUM_VALUE_SplitType
}

func (x *Pic_PanelSplitPorts_PanelSplitPort) GetSplitPorts() *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts {
	if x != nil {
		return x.SplitPorts
	}
	return nil
}

type Pic_PanelSplitPorts_PanelSplitPort_SplitPorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port []*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port `protobuf:"bytes,1,rep,name=port,proto3" json:"port,omitempty"`
}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts) Reset() {
	*x = Pic_PanelSplitPorts_PanelSplitPort_SplitPorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts) ProtoMessage() {}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_PanelSplitPorts_PanelSplitPort_SplitPorts.ProtoReflect.Descriptor instead.
func (*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts) GetPort() []*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitPosition string `protobuf:"bytes,1,opt,name=split_position,json=split-position,proto3" json:"split_position,omitempty"`
	PortName      string `protobuf:"bytes,2,opt,name=port_name,json=port-name,proto3" json:"port_name,omitempty"`
}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port) Reset() {
	*x = Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port) ProtoMessage() {}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port.ProtoReflect.Descriptor instead.
func (*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port) GetSplitPosition() string {
	if x != nil {
		return x.SplitPosition
	}
	return ""
}

func (x *Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

type Pic_AutoClears_AutoClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Pic_AutoClears_AutoClear_Type   `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_pic.Pic_AutoClears_AutoClear_Type" json:"type,omitempty"`
	Status Pic_AutoClears_AutoClear_Status `protobuf:"varint,2,opt,name=status,proto3,enum=huaweiV8R12_pic.Pic_AutoClears_AutoClear_Status" json:"status,omitempty"`
	Time   uint32                          `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Pic_AutoClears_AutoClear) Reset() {
	*x = Pic_AutoClears_AutoClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_AutoClears_AutoClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_AutoClears_AutoClear) ProtoMessage() {}

func (x *Pic_AutoClears_AutoClear) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_AutoClears_AutoClear.ProtoReflect.Descriptor instead.
func (*Pic_AutoClears_AutoClear) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Pic_AutoClears_AutoClear) GetType() Pic_AutoClears_AutoClear_Type {
	if x != nil {
		return x.Type
	}
	return Pic_AutoClears_AutoClear_INVALID_ENUM_VALUE_Type
}

func (x *Pic_AutoClears_AutoClear) GetStatus() Pic_AutoClears_AutoClear_Status {
	if x != nil {
		return x.Status
	}
	return Pic_AutoClears_AutoClear_Status_DISABLED
}

func (x *Pic_AutoClears_AutoClear) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortType  Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType  `protobuf:"varint,1,opt,name=port_type,json=port-type,proto3,enum=huaweiV8R12_pic.Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType" json:"port_type,omitempty"`
	AlarmType Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType `protobuf:"varint,2,opt,name=alarm_type,json=alarm-type,proto3,enum=huaweiV8R12_pic.Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType" json:"alarm_type,omitempty"`
	IfDown    bool                                                   `protobuf:"varint,3,opt,name=if_down,json=if-down,proto3" json:"if_down,omitempty"`
}

func (x *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) Reset() {
	*x = Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) ProtoMessage() {}

func (x *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown.ProtoReflect.Descriptor instead.
func (*Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) GetPortType() Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType {
	if x != nil {
		return x.PortType
	}
	return Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_INVALID_ENUM_VALUE_PortType
}

func (x *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) GetAlarmType() Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType {
	if x != nil {
		return x.AlarmType
	}
	return Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType_AUAIS
}

func (x *Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown) GetIfDown() bool {
	if x != nil {
		return x.IfDown
	}
	return false
}

type Pic_AlarmAisInserts_AlarmAisInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name Pic_AlarmAisInserts_AlarmAisInsert_Name `protobuf:"varint,1,opt,name=name,proto3,enum=huaweiV8R12_pic.Pic_AlarmAisInserts_AlarmAisInsert_Name" json:"name,omitempty"`
	Ais  bool                                    `protobuf:"varint,2,opt,name=ais,proto3" json:"ais,omitempty"`
	Rdi  bool                                    `protobuf:"varint,3,opt,name=rdi,proto3" json:"rdi,omitempty"`
}

func (x *Pic_AlarmAisInserts_AlarmAisInsert) Reset() {
	*x = Pic_AlarmAisInserts_AlarmAisInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_pic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pic_AlarmAisInserts_AlarmAisInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pic_AlarmAisInserts_AlarmAisInsert) ProtoMessage() {}

func (x *Pic_AlarmAisInserts_AlarmAisInsert) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_pic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pic_AlarmAisInserts_AlarmAisInsert.ProtoReflect.Descriptor instead.
func (*Pic_AlarmAisInserts_AlarmAisInsert) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_pic_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Pic_AlarmAisInserts_AlarmAisInsert) GetName() Pic_AlarmAisInserts_AlarmAisInsert_Name {
	if x != nil {
		return x.Name
	}
	return Pic_AlarmAisInserts_AlarmAisInsert_INVALID_ENUM_VALUE_Name
}

func (x *Pic_AlarmAisInserts_AlarmAisInsert) GetAis() bool {
	if x != nil {
		return x.Ais
	}
	return false
}

func (x *Pic_AlarmAisInserts_AlarmAisInsert) GetRdi() bool {
	if x != nil {
		return x.Rdi
	}
	return false
}

var File_huaweiV8R12_pic_proto protoreflect.FileDescriptor

var file_huaweiV8R12_pic_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x70, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x22, 0x9e, 0x1e, 0x0a, 0x03, 0x50, 0x69, 0x63,
	0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x52, 0x0a, 0x11, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63,
	0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x11, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x2d,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x74, 0x61, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x54,
	0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x52, 0x18, 0x74, 0x61, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x66, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x52, 0x0a,
	0x11, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x41, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x73, 0x52, 0x11,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x61, 0x69, 0x73, 0x2d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x73, 0x1a, 0xd6, 0x04, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x1a, 0xf6, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63,
	0x2e, 0x50, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x68, 0x79,
	0x5f, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x68, 0x79, 0x2d, 0x75, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x6e, 0x75, 0x6d, 0x22, 0x84, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43,
	0x33, 0x37, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x4f, 0x44, 0x49, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x33, 0x10, 0x05, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x43, 0x4d, 0x53, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x50, 0x48, 0x59, 0x10, 0x08, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45,
	0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f,
	0x54, 0x4e, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x4f, 0x53, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x1a, 0xa1, 0x08, 0x0a, 0x0f, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5f,
	0x0a, 0x10, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0xac, 0x07, 0x0a, 0x0e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a,
	0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a,
	0xb3, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x57,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50,
	0x69, 0x63, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x4c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x04, 0x0a, 0x09, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58, 0x34,
	0x30, 0x47, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30,
	0x58, 0x31, 0x30, 0x47, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x32, 0x35, 0x47, 0x45, 0x58, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x45, 0x58, 0x5f, 0x31, 0x58, 0x34,
	0x30, 0x47, 0x45, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x45, 0x58, 0x5f, 0x34, 0x58, 0x31,
	0x30, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x31, 0x58, 0x31, 0x30, 0x30, 0x47, 0x45,
	0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x58, 0x5f, 0x32, 0x58, 0x32, 0x35, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58,
	0x35, 0x30, 0x47, 0x45, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58, 0x32, 0x35,
	0x47, 0x45, 0x58, 0x5f, 0x32, 0x58, 0x31, 0x47, 0x45, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58, 0x31, 0x30, 0x47,
	0x45, 0x58, 0x5f, 0x32, 0x58, 0x31, 0x30, 0x47, 0x45, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58, 0x32, 0x35, 0x47,
	0x45, 0x58, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58, 0x31, 0x30, 0x47, 0x45, 0x58,
	0x5f, 0x31, 0x58, 0x31, 0x30, 0x47, 0x45, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x10, 0x15, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58,
	0x32, 0x35, 0x47, 0x45, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x58, 0x35, 0x30, 0x47, 0x45, 0x10, 0x17, 0x1a, 0x8b,
	0x03, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x1a, 0xb1, 0x02, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x6f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x53, 0x52, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x07,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0e, 0x22, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x1a, 0xc1, 0x07, 0x0a,
	0x14, 0x54, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x17, 0x74, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x54, 0x61, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x2e, 0x54, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x66, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x17, 0x74, 0x61, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x69, 0x66, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0xaf,
	0x06, 0x0a, 0x13, 0x54, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x64, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e,
	0x54, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x0a,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70,
	0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x54, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x2e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x66, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x22,
	0x4f, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x02,
	0x22, 0xdd, 0x03, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x41, 0x49,
	0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x33, 0x54, 0x43, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x49, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x46, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x4d,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x53, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x52, 0x44, 0x49, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x52, 0x45, 0x49, 0x10, 0x08,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x4f,
	0x46, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x41, 0x49, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x44, 0x49, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x45, 0x49, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x50, 0x4c,
	0x4d, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x44, 0x4f, 0x4f, 0x4c, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x52, 0x4f, 0x4f, 0x4c, 0x10, 0x0f, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x44, 0x42, 0x45, 0x52,
	0x45, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x46, 0x42, 0x45, 0x52, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x4f, 0x4f, 0x4c, 0x10, 0x12, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x55, 0x4e, 0x45,
	0x51, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x43, 0x44, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x31, 0x54, 0x43, 0x41, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x32, 0x54, 0x43, 0x41, 0x10, 0x29,
	0x1a, 0xa6, 0x03, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63,
	0x2e, 0x50, 0x69, 0x63, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x61, 0x69, 0x73, 0x2d, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x1a, 0xb1, 0x02, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41,
	0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x69, 0x63, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x41, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x41, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x69, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x64, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x64, 0x69, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x50, 0x54, 0x49, 0x4d, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4c, 0x50, 0x54, 0x49, 0x4d, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x53, 0x54, 0x49, 0x4d, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x50, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x4d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x50, 0x55, 0x4e,
	0x45, 0x51, 0x41, 0x54, 0x4d, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
	0x48, 0x50, 0x55, 0x4e, 0x45, 0x51, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x5f, 0x48, 0x50, 0x50, 0x4c, 0x4d, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65,
	0x5f, 0x4c, 0x50, 0x55, 0x4e, 0x45, 0x51, 0x10, 0x08, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x3b, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x70, 0x69, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R12_pic_proto_rawDescOnce sync.Once
	file_huaweiV8R12_pic_proto_rawDescData = file_huaweiV8R12_pic_proto_rawDesc
)

func file_huaweiV8R12_pic_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_pic_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_pic_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_pic_proto_rawDescData)
	})
	return file_huaweiV8R12_pic_proto_rawDescData
}

var file_huaweiV8R12_pic_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_huaweiV8R12_pic_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_huaweiV8R12_pic_proto_goTypes = []interface{}{
	(Pic_PortStatistics_Statistic_PortType)(0),                  // 0: huaweiV8R12_pic.Pic.PortStatistics.Statistic.PortType
	(Pic_PanelSplitPorts_PanelSplitPort_SplitType)(0),           // 1: huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.SplitType
	(Pic_AutoClears_AutoClear_Type)(0),                          // 2: huaweiV8R12_pic.Pic.AutoClears.AutoClear.Type
	(Pic_AutoClears_AutoClear_Status)(0),                        // 3: huaweiV8R12_pic.Pic.AutoClears.AutoClear.Status
	(Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_PortType)(0),  // 4: huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown.PortType
	(Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown_AlarmType)(0), // 5: huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown.AlarmType
	(Pic_AlarmAisInserts_AlarmAisInsert_Name)(0),                // 6: huaweiV8R12_pic.Pic.AlarmAisInserts.AlarmAisInsert.Name
	(*Pic)(nil),                                                // 7: huaweiV8R12_pic.Pic
	(*Pic_PortStatistics)(nil),                                 // 8: huaweiV8R12_pic.Pic.PortStatistics
	(*Pic_PanelSplitPorts)(nil),                                // 9: huaweiV8R12_pic.Pic.PanelSplitPorts
	(*Pic_AutoClears)(nil),                                     // 10: huaweiV8R12_pic.Pic.AutoClears
	(*Pic_TadTransAlarmIfDowns)(nil),                           // 11: huaweiV8R12_pic.Pic.TadTransAlarmIfDowns
	(*Pic_AlarmAisInserts)(nil),                                // 12: huaweiV8R12_pic.Pic.AlarmAisInserts
	(*Pic_PortStatistics_Statistic)(nil),                       // 13: huaweiV8R12_pic.Pic.PortStatistics.Statistic
	(*Pic_PanelSplitPorts_PanelSplitPort)(nil),                 // 14: huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort
	(*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts)(nil),      // 15: huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.SplitPorts
	(*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port)(nil), // 16: huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.SplitPorts.Port
	(*Pic_AutoClears_AutoClear)(nil),                           // 17: huaweiV8R12_pic.Pic.AutoClears.AutoClear
	(*Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown)(nil),       // 18: huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown
	(*Pic_AlarmAisInserts_AlarmAisInsert)(nil),                 // 19: huaweiV8R12_pic.Pic.AlarmAisInserts.AlarmAisInsert
}
var file_huaweiV8R12_pic_proto_depIdxs = []int32{
	8,  // 0: huaweiV8R12_pic.Pic.port_statistics:type_name -> huaweiV8R12_pic.Pic.PortStatistics
	9,  // 1: huaweiV8R12_pic.Pic.panel_split_ports:type_name -> huaweiV8R12_pic.Pic.PanelSplitPorts
	10, // 2: huaweiV8R12_pic.Pic.auto_clears:type_name -> huaweiV8R12_pic.Pic.AutoClears
	11, // 3: huaweiV8R12_pic.Pic.tad_trans_alarm_if_downs:type_name -> huaweiV8R12_pic.Pic.TadTransAlarmIfDowns
	12, // 4: huaweiV8R12_pic.Pic.alarm_ais_inserts:type_name -> huaweiV8R12_pic.Pic.AlarmAisInserts
	13, // 5: huaweiV8R12_pic.Pic.PortStatistics.statistic:type_name -> huaweiV8R12_pic.Pic.PortStatistics.Statistic
	14, // 6: huaweiV8R12_pic.Pic.PanelSplitPorts.panel_split_port:type_name -> huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort
	17, // 7: huaweiV8R12_pic.Pic.AutoClears.auto_clear:type_name -> huaweiV8R12_pic.Pic.AutoClears.AutoClear
	18, // 8: huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.tad_trans_alarm_if_down:type_name -> huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown
	19, // 9: huaweiV8R12_pic.Pic.AlarmAisInserts.alarm_ais_insert:type_name -> huaweiV8R12_pic.Pic.AlarmAisInserts.AlarmAisInsert
	0,  // 10: huaweiV8R12_pic.Pic.PortStatistics.Statistic.port_type:type_name -> huaweiV8R12_pic.Pic.PortStatistics.Statistic.PortType
	1,  // 11: huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.split_type:type_name -> huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.SplitType
	15, // 12: huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.split_ports:type_name -> huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.SplitPorts
	16, // 13: huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.SplitPorts.port:type_name -> huaweiV8R12_pic.Pic.PanelSplitPorts.PanelSplitPort.SplitPorts.Port
	2,  // 14: huaweiV8R12_pic.Pic.AutoClears.AutoClear.type:type_name -> huaweiV8R12_pic.Pic.AutoClears.AutoClear.Type
	3,  // 15: huaweiV8R12_pic.Pic.AutoClears.AutoClear.status:type_name -> huaweiV8R12_pic.Pic.AutoClears.AutoClear.Status
	4,  // 16: huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown.port_type:type_name -> huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown.PortType
	5,  // 17: huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown.alarm_type:type_name -> huaweiV8R12_pic.Pic.TadTransAlarmIfDowns.TadTransAlarmIfDown.AlarmType
	6,  // 18: huaweiV8R12_pic.Pic.AlarmAisInserts.AlarmAisInsert.name:type_name -> huaweiV8R12_pic.Pic.AlarmAisInserts.AlarmAisInsert.Name
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_pic_proto_init() }
func file_huaweiV8R12_pic_proto_init() {
	if File_huaweiV8R12_pic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_pic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_PortStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_PanelSplitPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_AutoClears); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_TadTransAlarmIfDowns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_AlarmAisInserts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_PortStatistics_Statistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_PanelSplitPorts_PanelSplitPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_PanelSplitPorts_PanelSplitPort_SplitPorts_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_AutoClears_AutoClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_TadTransAlarmIfDowns_TadTransAlarmIfDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_pic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pic_AlarmAisInserts_AlarmAisInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_pic_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_pic_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_pic_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_pic_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_pic_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_pic_proto = out.File
	file_huaweiV8R12_pic_proto_rawDesc = nil
	file_huaweiV8R12_pic_proto_goTypes = nil
	file_huaweiV8R12_pic_proto_depIdxs = nil
}
