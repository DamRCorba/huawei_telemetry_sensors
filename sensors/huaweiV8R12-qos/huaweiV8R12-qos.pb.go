// ---------------------------------------------------------------------------
// Protofilename : huawei-qos.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-qos.proto

package huaweiV8R12_qos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color int32

const (
	Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color_GREEN  Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color = 0
	Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color_YELLOW Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color = 1
	Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color_RED    Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color = 2
)

// Enum value maps for Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color.
var (
	Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color) Enum() *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color {
	p := new(Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color)
	*p = x
	return p
}

func (x Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[0].Descriptor()
}

func (Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[0]
}

func (x Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color.Descriptor instead.
func (Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

type Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color int32

const (
	Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color_GREEN  Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color = 0
	Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color_YELLOW Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color = 1
	Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color_RED    Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color = 2
)

// Enum value maps for Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color.
var (
	Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color) Enum() *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color {
	p := new(Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color)
	*p = x
	return p
}

func (x Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[1].Descriptor()
}

func (Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[1]
}

func (x Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color.Descriptor instead.
func (Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0, 0}
}

type Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color int32

const (
	Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color_GREEN  Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color = 0
	Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color_YELLOW Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color = 1
	Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color_RED    Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color = 2
)

// Enum value maps for Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color.
var (
	Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color) Enum() *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color {
	p := new(Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color)
	*p = x
	return p
}

func (x Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[2].Descriptor()
}

func (Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[2]
}

func (x Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color.Descriptor instead.
func (Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode_NORMAL          Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode_PRIORITY        Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode_X_4COS          Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode_X_8COSX_ENHANCE Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode = 5
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode_name = map[int32]string{
		0: "Mode_NORMAL",
		1: "Mode_PRIORITY",
		2: "Mode_X_4COS",
		5: "Mode_X_8COSX_ENHANCE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode_value = map[string]int32{
		"Mode_NORMAL":          0,
		"Mode_PRIORITY":        1,
		"Mode_X_4COS":          2,
		"Mode_X_8COSX_ENHANCE": 5,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[3].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[3]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_BE  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_AF1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_AF2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_AF3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 3
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_AF4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 4
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_EF  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 5
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_CS6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 6
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_CS7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[4].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[4]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode_PQ  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode_WFQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode_LPQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode_name = map[int32]string{
		0: "ScheduleMode_PQ",
		1: "ScheduleMode_WFQ",
		2: "ScheduleMode_LPQ",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode_value = map[string]int32{
		"ScheduleMode_PQ":  0,
		"ScheduleMode_WFQ": 1,
		"ScheduleMode_LPQ": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[5].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[5]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_INVALID_ENUM_VALUE_LowLatency Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency_ENABLE             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_LowLatency",
		1: "LowLatency_ENABLE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency_value = map[string]int32{
		"INVALID_ENUM_VALUE_LowLatency": 0,
		"LowLatency_ENABLE":             1,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[6].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[6]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_INVALID_ENUM_VALUE_LowJitter Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter_ENABLE             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_LowJitter",
		1: "LowJitter_ENABLE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter_value = map[string]int32{
		"INVALID_ENUM_VALUE_LowJitter": 0,
		"LowJitter_ENABLE":             1,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[7].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[7]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 2}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode_PQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode = 0
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode_name = map[int32]string{
		0: "CirScheduleMode_PQ",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode_value = map[string]int32{
		"CirScheduleMode_PQ": 0,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[8].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[8]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 1, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode_PQ  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode_WFQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode_LPQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode_name = map[int32]string{
		0: "PirScheduleMode_PQ",
		1: "PirScheduleMode_WFQ",
		2: "PirScheduleMode_LPQ",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode_value = map[string]int32{
		"PirScheduleMode_PQ":  0,
		"PirScheduleMode_WFQ": 1,
		"PirScheduleMode_LPQ": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[9].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[9]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 1, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_BE  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_AF1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_AF2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_AF3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 3
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_AF4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 4
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_EF  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 5
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_CS6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 6
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_CS7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[10].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[10]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be_TRUE  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be_FALSE Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be_name = map[int32]string{
		0: "Be_TRUE",
		8: "Be_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be_value = map[string]int32{
		"Be_TRUE":  0,
		"Be_FALSE": 8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[11].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[11]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1 = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af1",
		1: "Af1_TRUE",
		8: "Af1_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af1": 0,
		"Af1_TRUE":               1,
		"Af1_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[12].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[12]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2 = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af2",
		2: "Af2_TRUE",
		8: "Af2_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af2": 0,
		"Af2_TRUE":               2,
		"Af2_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[13].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[13]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 2}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3 = 3
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af3",
		3: "Af3_TRUE",
		8: "Af3_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af3": 0,
		"Af3_TRUE":               3,
		"Af3_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[14].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[14]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 3}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4 = 4
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af4",
		4: "Af4_TRUE",
		8: "Af4_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af4": 0,
		"Af4_TRUE":               4,
		"Af4_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[15].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[15]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 4}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Ef Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef = 5
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ef",
		5: "Ef_TRUE",
		8: "Ef_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ef": 0,
		"Ef_TRUE":               5,
		"Ef_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[16].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[16]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 5}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Cs6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6 = 6
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs6",
		6: "Cs6_TRUE",
		8: "Cs6_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs6": 0,
		"Cs6_TRUE":               6,
		"Cs6_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[17].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[17]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 6}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Cs7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7 = 7
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs7",
		7: "Cs7_TRUE",
		8: "Cs7_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs7": 0,
		"Cs7_TRUE":               7,
		"Cs7_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[18].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[18]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 7}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode_PQ          Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode_WFQ         Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode_LPQ         Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode_NOTX_CONFIG Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode = 3
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode_name = map[int32]string{
		0: "QueueScheduleMode_PQ",
		1: "QueueScheduleMode_WFQ",
		2: "QueueScheduleMode_LPQ",
		3: "QueueScheduleMode_NOTX_CONFIG",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode_value = map[string]int32{
		"QueueScheduleMode_PQ":          0,
		"QueueScheduleMode_WFQ":         1,
		"QueueScheduleMode_LPQ":         2,
		"QueueScheduleMode_NOTX_CONFIG": 3,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[19].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[19]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0, 8}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_ShapId Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId_X_1                Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ShapId",
		1: "ShapId_X_1",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId_value = map[string]int32{
		"INVALID_ENUM_VALUE_ShapId": 0,
		"ShapId_X_1":                1,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[20].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[20]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be_TRUE  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be_FALSE Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be_name = map[int32]string{
		0: "Be_TRUE",
		8: "Be_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be_value = map[string]int32{
		"Be_TRUE":  0,
		"Be_FALSE": 8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[21].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[21]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1 = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af1",
		1: "Af1_TRUE",
		8: "Af1_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af1": 0,
		"Af1_TRUE":               1,
		"Af1_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[22].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[22]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 2}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2 = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af2",
		2: "Af2_TRUE",
		8: "Af2_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af2": 0,
		"Af2_TRUE":               2,
		"Af2_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[23].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[23]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 3}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3 = 3
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af3",
		3: "Af3_TRUE",
		8: "Af3_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af3": 0,
		"Af3_TRUE":               3,
		"Af3_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[24].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[24]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 4}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4 = 4
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af4",
		4: "Af4_TRUE",
		8: "Af4_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af4": 0,
		"Af4_TRUE":               4,
		"Af4_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[25].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[25]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 5}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Ef Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef = 5
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ef",
		5: "Ef_TRUE",
		8: "Ef_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ef": 0,
		"Ef_TRUE":               5,
		"Ef_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[26].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[26]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 6}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Cs6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6 = 6
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs6",
		6: "Cs6_TRUE",
		8: "Cs6_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs6": 0,
		"Cs6_TRUE":               6,
		"Cs6_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[27].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[27]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 7}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Cs7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7 = 7
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs7",
		7: "Cs7_TRUE",
		8: "Cs7_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs7": 0,
		"Cs7_TRUE":               7,
		"Cs7_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[28].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[28]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 8}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode_PQ          Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode_WFQ         Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode_LPQ         Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode_NOTX_CONFIG Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode = 3
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode_name = map[int32]string{
		0: "QueueScheduleMode_PQ",
		1: "QueueScheduleMode_WFQ",
		2: "QueueScheduleMode_LPQ",
		3: "QueueScheduleMode_NOTX_CONFIG",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode_value = map[string]int32{
		"QueueScheduleMode_PQ":          0,
		"QueueScheduleMode_WFQ":         1,
		"QueueScheduleMode_LPQ":         2,
		"QueueScheduleMode_NOTX_CONFIG": 3,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[29].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[29]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0, 9}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be_TRUE  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be_FALSE Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be_name = map[int32]string{
		0: "Be_TRUE",
		8: "Be_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be_value = map[string]int32{
		"Be_TRUE":  0,
		"Be_FALSE": 8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[30].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[30]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1 = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af1",
		1: "Af1_TRUE",
		8: "Af1_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af1": 0,
		"Af1_TRUE":               1,
		"Af1_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[31].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[31]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2 = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af2",
		2: "Af2_TRUE",
		8: "Af2_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af2": 0,
		"Af2_TRUE":               2,
		"Af2_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[32].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[32]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 2}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3 = 3
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af3",
		3: "Af3_TRUE",
		8: "Af3_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af3": 0,
		"Af3_TRUE":               3,
		"Af3_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[33].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[33]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 3}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4 = 4
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af4",
		4: "Af4_TRUE",
		8: "Af4_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af4": 0,
		"Af4_TRUE":               4,
		"Af4_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[34].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[34]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 4}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Ef Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef = 5
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ef",
		5: "Ef_TRUE",
		8: "Ef_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ef": 0,
		"Ef_TRUE":               5,
		"Ef_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[35].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[35]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 5}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Cs6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6 = 6
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs6",
		6: "Cs6_TRUE",
		8: "Cs6_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs6": 0,
		"Cs6_TRUE":               6,
		"Cs6_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[36].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[36]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 6}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Cs7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7 = 7
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7_FALSE              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs7",
		7: "Cs7_TRUE",
		8: "Cs7_FALSE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs7": 0,
		"Cs7_TRUE":               7,
		"Cs7_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[37].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[37]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0, 7}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_BE  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_AF1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_AF2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_AF3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 3
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_AF4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 4
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_EF  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 5
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_CS6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 6
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_CS7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[38].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[38]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 5, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue_COS0 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue_COS1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue_COS2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue_COS3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue = 3
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue_name = map[int32]string{
		0: "CosValue_COS0",
		1: "CosValue_COS1",
		2: "CosValue_COS2",
		3: "CosValue_COS3",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue_value = map[string]int32{
		"CosValue_COS0": 0,
		"CosValue_COS1": 1,
		"CosValue_COS2": 2,
		"CosValue_COS3": 3,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[39].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[39]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 6, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode_PQ  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode_WFQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode_LPQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode_name = map[int32]string{
		0: "ScheduleMode_PQ",
		1: "ScheduleMode_WFQ",
		2: "ScheduleMode_LPQ",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode_value = map[string]int32{
		"ScheduleMode_PQ":  0,
		"ScheduleMode_WFQ": 1,
		"ScheduleMode_LPQ": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[40].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[40]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 6, 0, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_BE  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_AF1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_AF2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 2
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_AF3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 3
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_AF4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 4
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_EF  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 5
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_CS6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 6
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_CS7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[41].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[41]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 7, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode_PQ  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode_WFQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode_name = map[int32]string{
		0: "ScheduleMode_PQ",
		1: "ScheduleMode_WFQ",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode_value = map[string]int32{
		"ScheduleMode_PQ":  0,
		"ScheduleMode_WFQ": 1,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[42].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[42]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 8, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_ShapId Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId_X_1                Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId = 1
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId_NOTX_CONFIG        Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ShapId",
		1: "ShapId_X_1",
		2: "ShapId_NOTX_CONFIG",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId_value = map[string]int32{
		"INVALID_ENUM_VALUE_ShapId": 0,
		"ShapId_X_1":                1,
		"ShapId_NOTX_CONFIG":        2,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[43].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[43]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be_TRUE Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be = 0
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be_name = map[int32]string{
		0: "Be_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be_value = map[string]int32{
		"Be_TRUE": 0,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[44].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[44]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af1 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1 = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af1",
		1: "Af1_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af1": 0,
		"Af1_TRUE":               1,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[45].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[45]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 2}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af2 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2 = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af2",
		2: "Af2_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af2": 0,
		"Af2_TRUE":               2,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[46].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[46]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 3}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af3 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3 = 3
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af3",
		3: "Af3_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af3": 0,
		"Af3_TRUE":               3,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[47].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[47]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 4}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af4 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4 = 4
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af4",
		4: "Af4_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af4": 0,
		"Af4_TRUE":               4,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[48].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[48]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 5}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Ef Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef = 5
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ef",
		5: "Ef_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ef": 0,
		"Ef_TRUE":               5,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[49].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[49]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 6}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Cs6 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6 = 6
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs6",
		6: "Cs6_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs6": 0,
		"Cs6_TRUE":               6,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[50].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[50]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 7}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7 int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Cs7 Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7 = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7_TRUE               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7 = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs7",
		7: "Cs7_TRUE",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs7": 0,
		"Cs7_TRUE":               7,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7 {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[51].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[51]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 8}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode_PQ  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode = 0
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode_WFQ Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode.
var (
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode_name = map[int32]string{
		0: "ScheduleMode_PQ",
		1: "ScheduleMode_WFQ",
	}
	Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode_value = map[string]int32{
		"ScheduleMode_PQ":  0,
		"ScheduleMode_WFQ": 1,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode) Enum() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[52].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[52]
}

func (x Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0, 9}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Mode int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Mode_NORMAL          Qos_QueueSchedulerTemplate_Profiles_Profile_Mode = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Mode_TIMEX_RANGE     Qos_QueueSchedulerTemplate_Profiles_Profile_Mode = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Mode_X_8COSX_ENHANCE Qos_QueueSchedulerTemplate_Profiles_Profile_Mode = 5
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Mode.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Mode_name = map[int32]string{
		0: "Mode_NORMAL",
		1: "Mode_TIMEX_RANGE",
		5: "Mode_X_8COSX_ENHANCE",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Mode_value = map[string]int32{
		"Mode_NORMAL":          0,
		"Mode_TIMEX_RANGE":     1,
		"Mode_X_8COSX_ENHANCE": 5,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Mode) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Mode {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Mode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[53].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[53]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Mode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction_INBOUND  Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction_OUTBOUND Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction_ALL      Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[54].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[54]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_INVALID_ENUM_VALUE_PriorityLevelId Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId_HIGH               Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId_LOW                Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId = 255
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_PriorityLevelId",
		1:   "PriorityLevelId_HIGH",
		255: "PriorityLevelId_LOW",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId_value = map[string]int32{
		"INVALID_ENUM_VALUE_PriorityLevelId": 0,
		"PriorityLevelId_HIGH":               1,
		"PriorityLevelId_LOW":                255,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[55].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[55]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0, 0, 1}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard_DISABLE Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard_ENABLE  Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard_name = map[int32]string{
		0: "AdjustOnCard_DISABLE",
		1: "AdjustOnCard_ENABLE",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard_value = map[string]int32{
		"AdjustOnCard_DISABLE": 0,
		"AdjustOnCard_ENABLE":  1,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[56].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[56]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0, 0, 2}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction_INBOUND  Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction_OUTBOUND Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction_ALL      Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[57].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[57]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1, 0, 0}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction_INBOUND  Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction_OUTBOUND Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction_ALL      Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[58].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[58]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 0, 0}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_INVALID_ENUM_VALUE_PriorityLevelId Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId_HIGH               Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId_LOW                Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId = 255
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_PriorityLevelId",
		1:   "PriorityLevelId_HIGH",
		255: "PriorityLevelId_LOW",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId_value = map[string]int32{
		"INVALID_ENUM_VALUE_PriorityLevelId": 0,
		"PriorityLevelId_HIGH":               1,
		"PriorityLevelId_LOW":                255,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[59].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[59]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 0, 1}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard_DISABLE Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard_ENABLE  Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard_name = map[int32]string{
		0: "AdjustOnCard_DISABLE",
		1: "AdjustOnCard_ENABLE",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard_value = map[string]int32{
		"AdjustOnCard_DISABLE": 0,
		"AdjustOnCard_ENABLE":  1,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[60].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[60]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 0, 2}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_INVALID_ENUM_VALUE_Type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type_CAR                Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_CAR",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_CAR":                1,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[61].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[61]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 0}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction_INBOUND  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction_OUTBOUND Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction_ALL      Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[62].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[62]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 1}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction_PASS    Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction_DISCARD Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction_name = map[int32]string{
		0: "GreenAction_PASS",
		2: "GreenAction_DISCARD",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction_value = map[string]int32{
		"GreenAction_PASS":    0,
		"GreenAction_DISCARD": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[63].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[63]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 2}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_BE  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_AF1 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_AF2 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 2
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_AF3 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 3
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_AF4 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 4
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_EF  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 5
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_CS6 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 6
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_CS7 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_name = map[int32]string{
		0: "GreenServiceClass_BE",
		1: "GreenServiceClass_AF1",
		2: "GreenServiceClass_AF2",
		3: "GreenServiceClass_AF3",
		4: "GreenServiceClass_AF4",
		5: "GreenServiceClass_EF",
		6: "GreenServiceClass_CS6",
		7: "GreenServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_value = map[string]int32{
		"GreenServiceClass_BE":  0,
		"GreenServiceClass_AF1": 1,
		"GreenServiceClass_AF2": 2,
		"GreenServiceClass_AF3": 3,
		"GreenServiceClass_AF4": 4,
		"GreenServiceClass_EF":  5,
		"GreenServiceClass_CS6": 6,
		"GreenServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[64].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[64]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 3}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor_GREEN  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor_YELLOW Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor_RED    Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor_name = map[int32]string{
		0: "GreenColor_GREEN",
		1: "GreenColor_YELLOW",
		2: "GreenColor_RED",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor_value = map[string]int32{
		"GreenColor_GREEN":  0,
		"GreenColor_YELLOW": 1,
		"GreenColor_RED":    2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[65].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[65]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 4}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction_PASS    Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction_DISCARD Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction_name = map[int32]string{
		0: "YellowAction_PASS",
		2: "YellowAction_DISCARD",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction_value = map[string]int32{
		"YellowAction_PASS":    0,
		"YellowAction_DISCARD": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[66].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[66]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 5}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_BE  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_AF1 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_AF2 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 2
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_AF3 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 3
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_AF4 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 4
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_EF  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 5
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_CS6 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 6
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_CS7 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_name = map[int32]string{
		0: "YellowServiceClass_BE",
		1: "YellowServiceClass_AF1",
		2: "YellowServiceClass_AF2",
		3: "YellowServiceClass_AF3",
		4: "YellowServiceClass_AF4",
		5: "YellowServiceClass_EF",
		6: "YellowServiceClass_CS6",
		7: "YellowServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_value = map[string]int32{
		"YellowServiceClass_BE":  0,
		"YellowServiceClass_AF1": 1,
		"YellowServiceClass_AF2": 2,
		"YellowServiceClass_AF3": 3,
		"YellowServiceClass_AF4": 4,
		"YellowServiceClass_EF":  5,
		"YellowServiceClass_CS6": 6,
		"YellowServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[67].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[67]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 6}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor_GREEN  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor_YELLOW Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor_RED    Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor_name = map[int32]string{
		0: "YellowColor_GREEN",
		1: "YellowColor_YELLOW",
		2: "YellowColor_RED",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor_value = map[string]int32{
		"YellowColor_GREEN":  0,
		"YellowColor_YELLOW": 1,
		"YellowColor_RED":    2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[68].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[68]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 7}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction_PASS    Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction_DISCARD Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction_name = map[int32]string{
		0: "RedAction_PASS",
		2: "RedAction_DISCARD",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction_value = map[string]int32{
		"RedAction_PASS":    0,
		"RedAction_DISCARD": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[69].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[69]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 8}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_BE  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_AF1 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_AF2 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 2
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_AF3 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 3
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_AF4 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 4
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_EF  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 5
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_CS6 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 6
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_CS7 Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_name = map[int32]string{
		0: "RedServiceClass_BE",
		1: "RedServiceClass_AF1",
		2: "RedServiceClass_AF2",
		3: "RedServiceClass_AF3",
		4: "RedServiceClass_AF4",
		5: "RedServiceClass_EF",
		6: "RedServiceClass_CS6",
		7: "RedServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_value = map[string]int32{
		"RedServiceClass_BE":  0,
		"RedServiceClass_AF1": 1,
		"RedServiceClass_AF2": 2,
		"RedServiceClass_AF3": 3,
		"RedServiceClass_AF4": 4,
		"RedServiceClass_EF":  5,
		"RedServiceClass_CS6": 6,
		"RedServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[70].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[70]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 9}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor_GREEN  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor_YELLOW Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor_RED    Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor_name = map[int32]string{
		0: "RedColor_GREEN",
		1: "RedColor_YELLOW",
		2: "RedColor_RED",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor_value = map[string]int32{
		"RedColor_GREEN":  0,
		"RedColor_YELLOW": 1,
		"RedColor_RED":    2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[71].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[71]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 10}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_INVALID_ENUM_VALUE_ColorAware Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware_ENABLE             Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ColorAware",
		1: "ColorAware_ENABLE",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware_value = map[string]int32{
		"INVALID_ENUM_VALUE_ColorAware": 0,
		"ColorAware_ENABLE":             1,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[72].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[72]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0, 11}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_Type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type_CAR                Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_CAR",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_CAR":                1,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[73].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[73]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 0}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_Direction Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction_ALL                Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		2: "Direction_ALL",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_ALL":                2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[74].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[74]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 1}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_PriorityAware Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware_ENABLE             Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PriorityAware",
		1: "PriorityAware_ENABLE",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware_value = map[string]int32{
		"INVALID_ENUM_VALUE_PriorityAware": 0,
		"PriorityAware_ENABLE":             1,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[75].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[75]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 2}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction_PASS    Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction_DISCARD Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction_name = map[int32]string{
		0: "GreenAction_PASS",
		2: "GreenAction_DISCARD",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction_value = map[string]int32{
		"GreenAction_PASS":    0,
		"GreenAction_DISCARD": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[76].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[76]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 3}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_BE  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_AF1 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_AF2 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 2
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_AF3 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 3
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_AF4 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 4
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_EF  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 5
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_CS6 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 6
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_CS7 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_name = map[int32]string{
		0: "GreenServiceClass_BE",
		1: "GreenServiceClass_AF1",
		2: "GreenServiceClass_AF2",
		3: "GreenServiceClass_AF3",
		4: "GreenServiceClass_AF4",
		5: "GreenServiceClass_EF",
		6: "GreenServiceClass_CS6",
		7: "GreenServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_value = map[string]int32{
		"GreenServiceClass_BE":  0,
		"GreenServiceClass_AF1": 1,
		"GreenServiceClass_AF2": 2,
		"GreenServiceClass_AF3": 3,
		"GreenServiceClass_AF4": 4,
		"GreenServiceClass_EF":  5,
		"GreenServiceClass_CS6": 6,
		"GreenServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[77].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[77]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 4}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor_GREEN  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor_YELLOW Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor_RED    Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor_name = map[int32]string{
		0: "GreenColor_GREEN",
		1: "GreenColor_YELLOW",
		2: "GreenColor_RED",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor_value = map[string]int32{
		"GreenColor_GREEN":  0,
		"GreenColor_YELLOW": 1,
		"GreenColor_RED":    2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[78].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[78]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 5}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction_PASS    Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction_DISCARD Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction_name = map[int32]string{
		0: "YellowAction_PASS",
		2: "YellowAction_DISCARD",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction_value = map[string]int32{
		"YellowAction_PASS":    0,
		"YellowAction_DISCARD": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[79].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[79]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 6}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_BE  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_AF1 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_AF2 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 2
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_AF3 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 3
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_AF4 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 4
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_EF  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 5
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_CS6 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 6
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_CS7 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_name = map[int32]string{
		0: "YellowServiceClass_BE",
		1: "YellowServiceClass_AF1",
		2: "YellowServiceClass_AF2",
		3: "YellowServiceClass_AF3",
		4: "YellowServiceClass_AF4",
		5: "YellowServiceClass_EF",
		6: "YellowServiceClass_CS6",
		7: "YellowServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_value = map[string]int32{
		"YellowServiceClass_BE":  0,
		"YellowServiceClass_AF1": 1,
		"YellowServiceClass_AF2": 2,
		"YellowServiceClass_AF3": 3,
		"YellowServiceClass_AF4": 4,
		"YellowServiceClass_EF":  5,
		"YellowServiceClass_CS6": 6,
		"YellowServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[80].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[80]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 7}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor_GREEN  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor_YELLOW Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor_RED    Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor_name = map[int32]string{
		0: "YellowColor_GREEN",
		1: "YellowColor_YELLOW",
		2: "YellowColor_RED",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor_value = map[string]int32{
		"YellowColor_GREEN":  0,
		"YellowColor_YELLOW": 1,
		"YellowColor_RED":    2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[81].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[81]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 8}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction_PASS    Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction_DISCARD Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction_name = map[int32]string{
		0: "RedAction_PASS",
		2: "RedAction_DISCARD",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction_value = map[string]int32{
		"RedAction_PASS":    0,
		"RedAction_DISCARD": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[82].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[82]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 9}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_BE  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_AF1 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_AF2 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 2
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_AF3 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 3
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_AF4 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 4
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_EF  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 5
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_CS6 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 6
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_CS7 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_name = map[int32]string{
		0: "RedServiceClass_BE",
		1: "RedServiceClass_AF1",
		2: "RedServiceClass_AF2",
		3: "RedServiceClass_AF3",
		4: "RedServiceClass_AF4",
		5: "RedServiceClass_EF",
		6: "RedServiceClass_CS6",
		7: "RedServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_value = map[string]int32{
		"RedServiceClass_BE":  0,
		"RedServiceClass_AF1": 1,
		"RedServiceClass_AF2": 2,
		"RedServiceClass_AF3": 3,
		"RedServiceClass_AF4": 4,
		"RedServiceClass_EF":  5,
		"RedServiceClass_CS6": 6,
		"RedServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[83].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[83]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 10}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor_GREEN  Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor_YELLOW Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor_RED    Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor_name = map[int32]string{
		0: "RedColor_GREEN",
		1: "RedColor_YELLOW",
		2: "RedColor_RED",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor_value = map[string]int32{
		"RedColor_GREEN":  0,
		"RedColor_YELLOW": 1,
		"RedColor_RED":    2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[84].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[84]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 11}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_ColorAware Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware_ENABLE             Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ColorAware",
		1: "ColorAware_ENABLE",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware_value = map[string]int32{
		"INVALID_ENUM_VALUE_ColorAware": 0,
		"ColorAware_ENABLE":             1,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[85].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[85]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0, 12}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_INVALID_ENUM_VALUE_Type Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_BROADCAST          Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type = 2
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_MULTICAST          Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type = 3
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_UNKNOWX_UNICAST    Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type = 4
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_BUM                Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type = 7
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_BU                 Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type = 8
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_UNKNOWX_MULTICAST  Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type = 9
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		2: "Type_BROADCAST",
		3: "Type_MULTICAST",
		4: "Type_UNKNOWX_UNICAST",
		7: "Type_BUM",
		8: "Type_BU",
		9: "Type_UNKNOWX_MULTICAST",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_BROADCAST":          2,
		"Type_MULTICAST":          3,
		"Type_UNKNOWX_UNICAST":    4,
		"Type_BUM":                7,
		"Type_BU":                 8,
		"Type_UNKNOWX_MULTICAST":  9,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[86].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[86]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 5, 0, 0}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction_INBOUND  Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction_OUTBOUND Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction_ALL      Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[87].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[87]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 5, 0, 1}
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction int32

const (
	Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction_INBOUND  Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction = 0
	Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction_OUTBOUND Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction = 1
	Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction_ALL      Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction.
var (
	Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction) Enum() *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction {
	p := new(Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[88].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[88]
}

func (x Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 7, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass int32

const (
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_BE  Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 0
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_AF1 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 1
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_AF2 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 2
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_AF3 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 3
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_AF4 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 4
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_EF  Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 5
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_CS6 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 6
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_CS7 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass.
var (
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_name = map[int32]string{
		0: "FlowQueueServiceClass_BE",
		1: "FlowQueueServiceClass_AF1",
		2: "FlowQueueServiceClass_AF2",
		3: "FlowQueueServiceClass_AF3",
		4: "FlowQueueServiceClass_AF4",
		5: "FlowQueueServiceClass_EF",
		6: "FlowQueueServiceClass_CS6",
		7: "FlowQueueServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_value = map[string]int32{
		"FlowQueueServiceClass_BE":  0,
		"FlowQueueServiceClass_AF1": 1,
		"FlowQueueServiceClass_AF2": 2,
		"FlowQueueServiceClass_AF3": 3,
		"FlowQueueServiceClass_AF4": 4,
		"FlowQueueServiceClass_EF":  5,
		"FlowQueueServiceClass_CS6": 6,
		"FlowQueueServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass) Enum() *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass {
	p := new(Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[89].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[89]
}

func (x Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 2, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass int32

const (
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_BE  Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 0
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_AF1 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 1
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_AF2 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 2
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_AF3 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 3
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_AF4 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 4
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_EF  Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 5
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_CS6 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 6
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_CS7 Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass.
var (
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_name = map[int32]string{
		0: "PortQueueServiceClass_BE",
		1: "PortQueueServiceClass_AF1",
		2: "PortQueueServiceClass_AF2",
		3: "PortQueueServiceClass_AF3",
		4: "PortQueueServiceClass_AF4",
		5: "PortQueueServiceClass_EF",
		6: "PortQueueServiceClass_CS6",
		7: "PortQueueServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_value = map[string]int32{
		"PortQueueServiceClass_BE":  0,
		"PortQueueServiceClass_AF1": 1,
		"PortQueueServiceClass_AF2": 2,
		"PortQueueServiceClass_AF3": 3,
		"PortQueueServiceClass_AF4": 4,
		"PortQueueServiceClass_EF":  5,
		"PortQueueServiceClass_CS6": 6,
		"PortQueueServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass) Enum() *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass {
	p := new(Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[90].Descriptor()
}

func (Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[90]
}

func (x Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 2, 0, 0, 0, 1}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode_NORMAL   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode_PRIORITY Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode_name = map[int32]string{
		0: "Mode_NORMAL",
		1: "Mode_PRIORITY",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode_value = map[string]int32{
		"Mode_NORMAL":   0,
		"Mode_PRIORITY": 1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[91].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[91]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate_DISABLE Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate_ENABLE  Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate_name = map[int32]string{
		0: "ModeTemplate_DISABLE",
		1: "ModeTemplate_ENABLE",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate_value = map[string]int32{
		"ModeTemplate_DISABLE": 0,
		"ModeTemplate_ENABLE":  1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[92].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[92]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 1}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction_INBOUND  Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction_OUTBOUND Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[93].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[93]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority_PRIORITY0  Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority_PRIORITY1  Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority = 1
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority_PRIORITY2  Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority = 2
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority_NOPRIORITY Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority = 255
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority_name = map[int32]string{
		0:   "Priority_PRIORITY0",
		1:   "Priority_PRIORITY1",
		2:   "Priority_PRIORITY2",
		255: "Priority_NOPRIORITY",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority_value = map[string]int32{
		"Priority_PRIORITY0":  0,
		"Priority_PRIORITY1":  1,
		"Priority_PRIORITY2":  2,
		"Priority_NOPRIORITY": 255,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[94].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[94]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 1, 0, 0}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_INVALID_ENUM_VALUE_Direction Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction_OUTBOUND           Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[95].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[95]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 1, 0, 1}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_INVALID_ENUM_VALUE_Direction Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction_OUTBOUND           Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[96].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[96]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 2, 0, 0}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_INVALID_ENUM_VALUE_Direction Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction_OUTBOUND           Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[97].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[97]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 3, 0, 0}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction_INBOUND  Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction_OUTBOUND Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[98].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[98]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 4, 0, 0}
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_BE    Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 0
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_AF1   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 1
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_AF2   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 2
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_AF3   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 3
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_AF4   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 4
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_EF    Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 5
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_CS6   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 6
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_CS7   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 7
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_TOTAL Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
		8: "ServiceClass_TOTAL",
	}
	Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
	}
)

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[99].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[99]
}

func (x Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 4, 0, 1}
}

type Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction int32

const (
	Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction_INBOUND  Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction = 0
	Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction_OUTBOUND Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction.
var (
	Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction) Enum() *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction {
	p := new(Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[100].Descriptor()
}

func (Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[100]
}

func (x Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction.Descriptor instead.
func (Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 4, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_BE  Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 0
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_AF1 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 1
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_AF2 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 2
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_AF3 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 3
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_AF4 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 4
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_EF  Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 5
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_CS6 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 6
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_CS7 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass.
var (
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_name = map[int32]string{
		0: "FlowQueueServiceClass_BE",
		1: "FlowQueueServiceClass_AF1",
		2: "FlowQueueServiceClass_AF2",
		3: "FlowQueueServiceClass_AF3",
		4: "FlowQueueServiceClass_AF4",
		5: "FlowQueueServiceClass_EF",
		6: "FlowQueueServiceClass_CS6",
		7: "FlowQueueServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_value = map[string]int32{
		"FlowQueueServiceClass_BE":  0,
		"FlowQueueServiceClass_AF1": 1,
		"FlowQueueServiceClass_AF2": 2,
		"FlowQueueServiceClass_AF3": 3,
		"FlowQueueServiceClass_AF4": 4,
		"FlowQueueServiceClass_EF":  5,
		"FlowQueueServiceClass_CS6": 6,
		"FlowQueueServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass) Enum() *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[101].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[101]
}

func (x Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 5, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass int32

const (
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass_COS0 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass = 0
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass_COS1 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass = 1
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass_COS2 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass = 2
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass_COS3 Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass = 3
)

// Enum value maps for Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass.
var (
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass_name = map[int32]string{
		0: "FourQueueServiceClass_COS0",
		1: "FourQueueServiceClass_COS1",
		2: "FourQueueServiceClass_COS2",
		3: "FourQueueServiceClass_COS3",
	}
	Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass_value = map[string]int32{
		"FourQueueServiceClass_COS0": 0,
		"FourQueueServiceClass_COS1": 1,
		"FourQueueServiceClass_COS2": 2,
		"FourQueueServiceClass_COS3": 3,
	}
)

func (x Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass) Enum() *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass {
	p := new(Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[102].Descriptor()
}

func (Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[102]
}

func (x Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 5, 0, 0, 0, 1}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_BE  Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_AF1 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 1
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_AF2 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 2
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_AF3 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 3
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_AF4 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 4
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_EF  Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 5
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_CS6 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 6
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_CS7 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[103].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[103]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_BE  Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_AF1 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 1
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_AF2 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 2
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_AF3 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 3
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_AF4 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 4
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_EF  Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 5
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_CS6 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 6
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_CS7 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[104].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[104]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 1, 0, 0}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be_TRUE  Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be_FALSE Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be_name = map[int32]string{
		0: "Be_TRUE",
		8: "Be_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be_value = map[string]int32{
		"Be_TRUE":  0,
		"Be_FALSE": 8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[105].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[105]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 0}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1 int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af1 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1 = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1_TRUE               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1 = 1
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1_FALSE              Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af1",
		1: "Af1_TRUE",
		8: "Af1_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af1": 0,
		"Af1_TRUE":               1,
		"Af1_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1 {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[106].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[106]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 1}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2 int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af2 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2 = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2_TRUE               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2 = 2
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2_FALSE              Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af2",
		2: "Af2_TRUE",
		8: "Af2_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af2": 0,
		"Af2_TRUE":               2,
		"Af2_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2 {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[107].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[107]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 2}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3 int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af3 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3 = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3_TRUE               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3 = 3
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3_FALSE              Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af3",
		3: "Af3_TRUE",
		8: "Af3_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af3": 0,
		"Af3_TRUE":               3,
		"Af3_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3 {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[108].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[108]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 3}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4 int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af4 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4 = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4_TRUE               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4 = 4
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4_FALSE              Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Af4",
		4: "Af4_TRUE",
		8: "Af4_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4_value = map[string]int32{
		"INVALID_ENUM_VALUE_Af4": 0,
		"Af4_TRUE":               4,
		"Af4_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4 {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[109].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[109]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 4}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Ef Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef_TRUE               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef = 5
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef_FALSE              Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ef",
		5: "Ef_TRUE",
		8: "Ef_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ef": 0,
		"Ef_TRUE":               5,
		"Ef_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[110].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[110]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 5}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6 int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Cs6 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6 = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6_TRUE               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6 = 6
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6_FALSE              Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs6",
		6: "Cs6_TRUE",
		8: "Cs6_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs6": 0,
		"Cs6_TRUE":               6,
		"Cs6_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6 {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[111].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[111]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 6}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7 int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Cs7 Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7 = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7_TRUE               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7 = 7
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7_FALSE              Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7 = 8
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Cs7",
		7: "Cs7_TRUE",
		8: "Cs7_FALSE",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7_value = map[string]int32{
		"INVALID_ENUM_VALUE_Cs7": 0,
		"Cs7_TRUE":               7,
		"Cs7_FALSE":              8,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7 {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[112].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[112]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 7}
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode_PQ  Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode = 0
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode_WFQ Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode = 1
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode_LPQ Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode.
var (
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode_name = map[int32]string{
		0: "QueueScheduleMode_PQ",
		1: "QueueScheduleMode_WFQ",
		2: "QueueScheduleMode_LPQ",
	}
	Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode_value = map[string]int32{
		"QueueScheduleMode_PQ":  0,
		"QueueScheduleMode_WFQ": 1,
		"QueueScheduleMode_LPQ": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode) Enum() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[113].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[113]
}

func (x Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0, 8}
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe int32

const (
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe_NORMAL Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe = 0
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe_LARGE  Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe.
var (
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe_name = map[int32]string{
		0: "BufferModeGe_NORMAL",
		1: "BufferModeGe_LARGE",
	}
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe_value = map[string]int32{
		"BufferModeGe_NORMAL": 0,
		"BufferModeGe_LARGE":  1,
	}
)

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe) Enum() *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe {
	p := new(Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[114].Descriptor()
}

func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[114]
}

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe.Descriptor instead.
func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge int32

const (
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge_NORMAL Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge = 0
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge_LARGE  Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge.
var (
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge_name = map[int32]string{
		0: "BufferMode10Ge_NORMAL",
		1: "BufferMode10Ge_LARGE",
	}
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge_value = map[string]int32{
		"BufferMode10Ge_NORMAL": 0,
		"BufferMode10Ge_LARGE":  1,
	}
)

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge) Enum() *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge {
	p := new(Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[115].Descriptor()
}

func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[115]
}

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge.Descriptor instead.
func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0, 0, 0, 1}
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode int32

const (
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode_NORMAL Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode = 0
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode_LARGE  Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode.
var (
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode_name = map[int32]string{
		0: "BufferMode_NORMAL",
		1: "BufferMode_LARGE",
	}
	Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode_value = map[string]int32{
		"BufferMode_NORMAL": 0,
		"BufferMode_LARGE":  1,
	}
)

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode) Enum() *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode {
	p := new(Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[116].Descriptor()
}

func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[116]
}

func (x Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0, 1, 0, 0}
}

type Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_BE  Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 0
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_AF1 Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 1
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_AF2 Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 2
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_AF3 Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 3
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_AF4 Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 4
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_EF  Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 5
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_CS6 Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 6
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_CS7 Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[117].Descriptor()
}

func (Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[117]
}

func (x Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 9, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority int32

const (
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority_PQ  Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority = 0
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority_WFQ Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority = 1
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority_LPQ Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority.
var (
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority_name = map[int32]string{
		0: "Priority_PQ",
		1: "Priority_WFQ",
		2: "Priority_LPQ",
	}
	Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority_value = map[string]int32{
		"Priority_PQ":  0,
		"Priority_WFQ": 1,
		"Priority_LPQ": 2,
	}
)

func (x Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority) Enum() *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority {
	p := new(Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[118].Descriptor()
}

func (Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[118]
}

func (x Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority.Descriptor instead.
func (Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 9, 0, 0, 0, 1}
}

type Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass int32

const (
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_BE  Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 0
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_AF1 Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 1
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_AF2 Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 2
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_AF3 Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 3
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_AF4 Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 4
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_EF  Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 5
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_CS6 Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 6
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_CS7 Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass = 7
)

// Enum value maps for Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass.
var (
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass) Enum() *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass {
	p := new(Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[119].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[119]
}

func (x Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 11, 0, 0, 0, 0}
}

type Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color int32

const (
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color_GREEN  Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color = 0
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color_YELLOW Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color = 1
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color_RED    Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color = 2
)

// Enum value maps for Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color.
var (
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color) Enum() *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color {
	p := new(Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[120].Descriptor()
}

func (Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[120]
}

func (x Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color.Descriptor instead.
func (Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 11, 0, 0, 0, 1}
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode int32

const (
	Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode_X_4X_PRIORITY Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode = 0
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode.
var (
	Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode_name = map[int32]string{
		0: "Mode_X_4X_PRIORITY",
	}
	Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode_value = map[string]int32{
		"Mode_X_4X_PRIORITY": 0,
	}
)

func (x Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode) Enum() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode {
	p := new(Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[121].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[121]
}

func (x Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 0}
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode int32

const (
	Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode_PQ  Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode = 0
	Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode_WFQ Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode = 1
)

// Enum value maps for Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode.
var (
	Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode_name = map[int32]string{
		0: "ScheduleMode_PQ",
		1: "ScheduleMode_WFQ",
	}
	Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode_value = map[string]int32{
		"ScheduleMode_PQ":  0,
		"ScheduleMode_WFQ": 1,
	}
)

func (x Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode) Enum() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode {
	p := new(Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode)
	*p = x
	return p
}

func (x Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[122].Descriptor()
}

func (Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[122]
}

func (x Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode.Descriptor instead.
func (Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 2, 0, 0}
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type int32

const (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_X_8021P        Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type = 0
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_IPX_DSCP       Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type = 1
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_MPLSX_EXP      Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type = 2
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_USERX_PRIORITY Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type = 3
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_IPX_PRECEDENCE Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type = 11
)

// Enum value maps for Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type.
var (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_name = map[int32]string{
		0:  "Type_X_8021P",
		1:  "Type_IPX_DSCP",
		2:  "Type_MPLSX_EXP",
		3:  "Type_USERX_PRIORITY",
		11: "Type_IPX_PRECEDENCE",
	}
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_value = map[string]int32{
		"Type_X_8021P":        0,
		"Type_IPX_DSCP":       1,
		"Type_MPLSX_EXP":      2,
		"Type_USERX_PRIORITY": 3,
		"Type_IPX_PRECEDENCE": 11,
	}
)

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type) Enum() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type {
	p := new(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[123].Descriptor()
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[123]
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type.Descriptor instead.
func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0, 0}
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass int32

const (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_BE  Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 0
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_AF1 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 1
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_AF2 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 2
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_AF3 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 3
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_AF4 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 4
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_EF  Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 5
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_CS6 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 6
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_CS7 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass = 7
)

// Enum value maps for Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass.
var (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass) Enum() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass {
	p := new(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[124].Descriptor()
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[124]
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass.Descriptor instead.
func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0, 1}
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color int32

const (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color_GREEN  Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color = 0
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color_YELLOW Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color = 1
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color_RED    Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color = 2
)

// Enum value maps for Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color.
var (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color) Enum() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color {
	p := new(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[125].Descriptor()
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[125]
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color.Descriptor instead.
func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0, 2}
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type int32

const (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type_X_8021P        Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type = 0
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type_IPX_DSCP       Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type = 1
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type_MPLSX_EXP      Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type = 2
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type_IPX_PRECEDENCE Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type = 11
)

// Enum value maps for Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type.
var (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type_name = map[int32]string{
		0:  "Type_X_8021P",
		1:  "Type_IPX_DSCP",
		2:  "Type_MPLSX_EXP",
		11: "Type_IPX_PRECEDENCE",
	}
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type_value = map[string]int32{
		"Type_X_8021P":        0,
		"Type_IPX_DSCP":       1,
		"Type_MPLSX_EXP":      2,
		"Type_IPX_PRECEDENCE": 11,
	}
)

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type) Enum() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type {
	p := new(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[126].Descriptor()
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[126]
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type.Descriptor instead.
func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 1, 0, 0}
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass int32

const (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_BE  Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 0
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_AF1 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 1
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_AF2 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 2
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_AF3 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 3
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_AF4 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 4
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_EF  Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 5
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_CS6 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 6
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_CS7 Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass = 7
)

// Enum value maps for Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass.
var (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass) Enum() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass {
	p := new(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[127].Descriptor()
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[127]
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass.Descriptor instead.
func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 1, 0, 1}
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color int32

const (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color_GREEN  Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color = 0
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color_YELLOW Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color = 1
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color_RED    Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color = 2
)

// Enum value maps for Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color.
var (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color) Enum() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color {
	p := new(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[128].Descriptor()
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[128]
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color.Descriptor instead.
func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 1, 0, 2}
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction int32

const (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction_INX_OUTBOUND Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction = 0
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction_INBOUND      Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction = 1
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction_OUTBOUND     Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction = 2
)

// Enum value maps for Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction.
var (
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction_name = map[int32]string{
		0: "Direction_INX_OUTBOUND",
		1: "Direction_INBOUND",
		2: "Direction_OUTBOUND",
	}
	Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction_value = map[string]int32{
		"Direction_INX_OUTBOUND": 0,
		"Direction_INBOUND":      1,
		"Direction_OUTBOUND":     2,
	}
)

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction) Enum() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction {
	p := new(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[129].Descriptor()
}

func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[129]
}

func (x Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction.Descriptor instead.
func (Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 2, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator_OR  Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator_AND Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator_name = map[int32]string{
		0: "Operator_OR",
		1: "Operator_AND",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator_value = map[string]int32{
		"Operator_OR":  0,
		"Operator_AND": 1,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[130].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[130]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_INVALID_ENUM_VALUE_ProtocolFamily Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily_IPV4               Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily = 1
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily_IPV6               Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ProtocolFamily",
		1: "ProtocolFamily_IPV4",
		2: "ProtocolFamily_IPV6",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily_value = map[string]int32{
		"INVALID_ENUM_VALUE_ProtocolFamily": 0,
		"ProtocolFamily_IPV4":               1,
		"ProtocolFamily_IPV6":               2,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[131].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[131]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_X_8021P              Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_IPX_PRECEDENCE       Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type = 1
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_DSCP                 Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type = 2
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_MPLSX_EXP            Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type = 4
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_IPV6X_DSCP           Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type = 5
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_IPV6X_IPX_PRECEDENCE Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type = 6
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_name = map[int32]string{
		0: "Type_X_8021P",
		1: "Type_IPX_PRECEDENCE",
		2: "Type_DSCP",
		4: "Type_MPLSX_EXP",
		5: "Type_IPV6X_DSCP",
		6: "Type_IPV6X_IPX_PRECEDENCE",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_value = map[string]int32{
		"Type_X_8021P":              0,
		"Type_IPX_PRECEDENCE":       1,
		"Type_DSCP":                 2,
		"Type_MPLSX_EXP":            4,
		"Type_IPV6X_DSCP":           5,
		"Type_IPV6X_IPX_PRECEDENCE": 6,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[132].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[132]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 3, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_BE  Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_AF1 Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 1
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_AF2 Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 2
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_AF3 Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 3
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_AF4 Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 4
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_EF  Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 5
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_CS6 Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 6
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_CS7 Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass = 7
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[133].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[133]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 4, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType_SOURCE      Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType_DESTINATION Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType_name = map[int32]string{
		0: "AddressType_SOURCE",
		1: "AddressType_DESTINATION",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType_value = map[string]int32{
		"AddressType_SOURCE":      0,
		"AddressType_DESTINATION": 1,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[134].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[134]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 8, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType_SOURCE      Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType_DESTINATION Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType_name = map[int32]string{
		0: "MacType_SOURCE",
		1: "MacType_DESTINATION",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType_value = map[string]int32{
		"MacType_SOURCE":      0,
		"MacType_DESTINATION": 1,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[135].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[135]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 9, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type_SOURCE      Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type_DESTINATION Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type_name = map[int32]string{
		0: "Type_SOURCE",
		1: "Type_DESTINATION",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type_value = map[string]int32{
		"Type_SOURCE":      0,
		"Type_DESTINATION": 1,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[136].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[136]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 10, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_INVALID_ENUM_VALUE_Family Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family_IPV6               Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Family",
		2: "Family_IPV6",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family_value = map[string]int32{
		"INVALID_ENUM_VALUE_Family": 0,
		"Family_IPV6":               2,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[137].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[137]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 12, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_NOTX_CONFIG Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_ESTABLISHED Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 1
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_FIN         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 2
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_SYN         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 3
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_RST         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 4
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_PSH         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 5
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_ACK         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 6
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_URG         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 7
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_ECE         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 8
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_CWR         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 9
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_NS          Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType = 10
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_name = map[int32]string{
		0:  "BitMatchType_NOTX_CONFIG",
		1:  "BitMatchType_ESTABLISHED",
		2:  "BitMatchType_FIN",
		3:  "BitMatchType_SYN",
		4:  "BitMatchType_RST",
		5:  "BitMatchType_PSH",
		6:  "BitMatchType_ACK",
		7:  "BitMatchType_URG",
		8:  "BitMatchType_ECE",
		9:  "BitMatchType_CWR",
		10: "BitMatchType_NS",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_value = map[string]int32{
		"BitMatchType_NOTX_CONFIG": 0,
		"BitMatchType_ESTABLISHED": 1,
		"BitMatchType_FIN":         2,
		"BitMatchType_SYN":         3,
		"BitMatchType_RST":         4,
		"BitMatchType_PSH":         5,
		"BitMatchType_ACK":         6,
		"BitMatchType_URG":         7,
		"BitMatchType_ECE":         8,
		"BitMatchType_CWR":         9,
		"BitMatchType_NS":          10,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[138].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[138]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 13, 0, 0}
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType int32

const (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_NOTX_CONFIG Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 0
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_ESTABLISHED Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 1
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_FIN         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 2
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_SYN         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 3
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_RST         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 4
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_PSH         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 5
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_ACK         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 6
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_URG         Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType = 7
)

// Enum value maps for Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType.
var (
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_name = map[int32]string{
		0: "BitMatchType_NOTX_CONFIG",
		1: "BitMatchType_ESTABLISHED",
		2: "BitMatchType_FIN",
		3: "BitMatchType_SYN",
		4: "BitMatchType_RST",
		5: "BitMatchType_PSH",
		6: "BitMatchType_ACK",
		7: "BitMatchType_URG",
	}
	Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_value = map[string]int32{
		"BitMatchType_NOTX_CONFIG": 0,
		"BitMatchType_ESTABLISHED": 1,
		"BitMatchType_FIN":         2,
		"BitMatchType_SYN":         3,
		"BitMatchType_RST":         4,
		"BitMatchType_PSH":         5,
		"BitMatchType_ACK":         6,
		"BitMatchType_URG":         7,
	}
)

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType) Enum() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType {
	p := new(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[139].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[139]
}

func (x Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 14, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter_PERMIT Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter_DENY   Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter_name = map[int32]string{
		0: "Filter_PERMIT",
		1: "Filter_DENY",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter_value = map[string]int32{
		"Filter_PERMIT": 0,
		"Filter_DENY":   1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[140].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[140]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType_SERVICEX_CLASS              Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType_SERVICEX_CLASSX_MASTERX_BFD Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType_SERVICEX_CLASSX_SLAVEX_BFD  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType_name = map[int32]string{
		0: "ActionType_SERVICEX_CLASS",
		1: "ActionType_SERVICEX_CLASSX_MASTERX_BFD",
		2: "ActionType_SERVICEX_CLASSX_SLAVEX_BFD",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType_value = map[string]int32{
		"ActionType_SERVICEX_CLASS":              0,
		"ActionType_SERVICEX_CLASSX_MASTERX_BFD": 1,
		"ActionType_SERVICEX_CLASSX_SLAVEX_BFD":  2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[141].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[141]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 1, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_BE  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_AF1 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_AF2 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 2
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_AF3 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 3
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_AF4 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 4
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_EF  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 5
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_CS6 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 6
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_CS7 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass = 7
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[142].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[142]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 1, 0, 1}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color_GREEN  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color_YELLOW Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color_RED    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[143].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[143]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 1, 0, 2}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch_ENABLE  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch_DISABLE Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch_name = map[int32]string{
		0: "RemarkSwitch_ENABLE",
		1: "RemarkSwitch_DISABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch_value = map[string]int32{
		"RemarkSwitch_ENABLE":  0,
		"RemarkSwitch_DISABLE": 1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[144].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[144]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 1, 0, 3}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_INVALID_ENUM_VALUE_ActionType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_X_8021P            Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 12
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_IPV4X_DSCP         Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 13
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_IPV6X_DSCP         Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 14
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_IPX_PRECEDENCE     Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 15
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_MPLSX_EXP          Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 16
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_TOS                Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 19
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_IPX_DF             Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 21
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_TTL                Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 26
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_INNERX_8021P       Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 34
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_OUTERX_8021P       Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType = 35
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_ActionType",
		12: "ActionType_X_8021P",
		13: "ActionType_IPV4X_DSCP",
		14: "ActionType_IPV6X_DSCP",
		15: "ActionType_IPX_PRECEDENCE",
		16: "ActionType_MPLSX_EXP",
		19: "ActionType_TOS",
		21: "ActionType_IPX_DF",
		26: "ActionType_TTL",
		34: "ActionType_INNERX_8021P",
		35: "ActionType_OUTERX_8021P",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ActionType": 0,
		"ActionType_X_8021P":            12,
		"ActionType_IPV4X_DSCP":         13,
		"ActionType_IPV6X_DSCP":         14,
		"ActionType_IPX_PRECEDENCE":     15,
		"ActionType_MPLSX_EXP":          16,
		"ActionType_TOS":                19,
		"ActionType_IPX_DF":             21,
		"ActionType_TTL":                26,
		"ActionType_INNERX_8021P":       34,
		"ActionType_OUTERX_8021P":       35,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[145].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[145]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 2, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_INVALID_ENUM_VALUE_AfterTrust Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust_ENABLE             Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AfterTrust",
		1: "AfterTrust_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust_value = map[string]int32{
		"INVALID_ENUM_VALUE_AfterTrust": 0,
		"AfterTrust_ENABLE":             1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[146].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[146]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 2, 0, 1}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_INVALID_ENUM_VALUE_ActionType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType_FIRSTX_PACKET      Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType = 39
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_ActionType",
		39: "ActionType_FIRSTX_PACKET",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ActionType": 0,
		"ActionType_FIRSTX_PACKET":      39,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[147].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[147]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 3, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType_CAR Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType = 0
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType_name = map[int32]string{
		0: "ActionType_CAR",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType_value = map[string]int32{
		"ActionType_CAR": 0,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[148].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[148]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction_PASS    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction_DISCARD Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction_name = map[int32]string{
		0: "GreenAction_PASS",
		2: "GreenAction_DISCARD",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction_value = map[string]int32{
		"GreenAction_PASS":    0,
		"GreenAction_DISCARD": 2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[149].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[149]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4, 0, 1}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction_PASS    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction_DISCARD Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction_name = map[int32]string{
		0: "YellowAction_PASS",
		2: "YellowAction_DISCARD",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction_value = map[string]int32{
		"YellowAction_PASS":    0,
		"YellowAction_DISCARD": 2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[150].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[150]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4, 0, 2}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction_PASS    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction_DISCARD Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction_name = map[int32]string{
		0: "RedAction_PASS",
		2: "RedAction_DISCARD",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction_value = map[string]int32{
		"RedAction_PASS":    0,
		"RedAction_DISCARD": 2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[151].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[151]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4, 0, 3}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_INVALID_ENUM_VALUE_ColorAware Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware_ENABLE             Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ColorAware",
		1: "ColorAware_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware_value = map[string]int32{
		"INVALID_ENUM_VALUE_ColorAware": 0,
		"ColorAware_ENABLE":             1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[152].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[152]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4, 0, 4}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_INVALID_ENUM_VALUE_LimitType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType_PPS                Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_LimitType",
		1: "LimitType_PPS",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType_value = map[string]int32{
		"INVALID_ENUM_VALUE_LimitType": 0,
		"LimitType_PPS":                1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[153].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[153]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4, 0, 5}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_INVALID_ENUM_VALUE_IpType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType_SOURCEX_IP         Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType_DESTINATIONX_IP    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_IpType",
		1: "IpType_SOURCEX_IP",
		2: "IpType_DESTINATIONX_IP",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType_value = map[string]int32{
		"INVALID_ENUM_VALUE_IpType": 0,
		"IpType_SOURCEX_IP":         1,
		"IpType_DESTINATIONX_IP":    2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[154].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[154]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 5, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_INVALID_ENUM_VALUE_Priority Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority_INCREASEX_PRIORITY Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Priority",
		1: "Priority_INCREASEX_PRIORITY",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority_value = map[string]int32{
		"INVALID_ENUM_VALUE_Priority": 0,
		"Priority_INCREASEX_PRIORITY": 1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[155].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[155]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 6, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_INVALID_ENUM_VALUE_HierarchicalCar Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar_ENABLE             Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_HierarchicalCar",
		1: "HierarchicalCar_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar_value = map[string]int32{
		"INVALID_ENUM_VALUE_HierarchicalCar": 0,
		"HierarchicalCar_ENABLE":             1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[156].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[156]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 7, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_INVALID_ENUM_VALUE_Layer Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer_IPX_LAYER          Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Layer",
		1: "Layer_IPX_LAYER",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer_value = map[string]int32{
		"INVALID_ENUM_VALUE_Layer": 0,
		"Layer_IPX_LAYER":          1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[157].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[157]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 7, 0, 1}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_INVALID_ENUM_VALUE_SuppressType            Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType_UNKNOWNX_UNICASTX_SUPPRESSION Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType = 2
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType_MULTICASTX_SUPPRESSION        Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType = 3
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType_BROADCASTX_SUPPRESSION        Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType = 4
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SuppressType",
		2: "SuppressType_UNKNOWNX_UNICASTX_SUPPRESSION",
		3: "SuppressType_MULTICASTX_SUPPRESSION",
		4: "SuppressType_BROADCASTX_SUPPRESSION",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType_value = map[string]int32{
		"INVALID_ENUM_VALUE_SuppressType":            0,
		"SuppressType_UNKNOWNX_UNICASTX_SUPPRESSION": 2,
		"SuppressType_MULTICASTX_SUPPRESSION":        3,
		"SuppressType_BROADCASTX_SUPPRESSION":        4,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[158].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[158]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction_PASS    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction_DISCARD Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction_name = map[int32]string{
		0: "GreenAction_PASS",
		2: "GreenAction_DISCARD",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction_value = map[string]int32{
		"GreenAction_PASS":    0,
		"GreenAction_DISCARD": 2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[159].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[159]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0, 1}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_BE  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_AF1 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_AF2 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 2
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_AF3 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 3
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_AF4 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 4
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_EF  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 5
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_CS6 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 6
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_CS7 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass = 7
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_name = map[int32]string{
		0: "GreenServiceClass_BE",
		1: "GreenServiceClass_AF1",
		2: "GreenServiceClass_AF2",
		3: "GreenServiceClass_AF3",
		4: "GreenServiceClass_AF4",
		5: "GreenServiceClass_EF",
		6: "GreenServiceClass_CS6",
		7: "GreenServiceClass_CS7",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_value = map[string]int32{
		"GreenServiceClass_BE":  0,
		"GreenServiceClass_AF1": 1,
		"GreenServiceClass_AF2": 2,
		"GreenServiceClass_AF3": 3,
		"GreenServiceClass_AF4": 4,
		"GreenServiceClass_EF":  5,
		"GreenServiceClass_CS6": 6,
		"GreenServiceClass_CS7": 7,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[160].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[160]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0, 2}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor_GREEN  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor_YELLOW Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor_RED    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor_name = map[int32]string{
		0: "GreenColor_GREEN",
		1: "GreenColor_YELLOW",
		2: "GreenColor_RED",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor_value = map[string]int32{
		"GreenColor_GREEN":  0,
		"GreenColor_YELLOW": 1,
		"GreenColor_RED":    2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[161].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[161]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0, 3}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction_PASS    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction_DISCARD Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction_name = map[int32]string{
		0: "RedAction_PASS",
		2: "RedAction_DISCARD",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction_value = map[string]int32{
		"RedAction_PASS":    0,
		"RedAction_DISCARD": 2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[162].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[162]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0, 4}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_BE  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_AF1 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_AF2 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 2
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_AF3 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 3
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_AF4 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 4
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_EF  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 5
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_CS6 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 6
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_CS7 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass = 7
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_name = map[int32]string{
		0: "RedServiceClass_BE",
		1: "RedServiceClass_AF1",
		2: "RedServiceClass_AF2",
		3: "RedServiceClass_AF3",
		4: "RedServiceClass_AF4",
		5: "RedServiceClass_EF",
		6: "RedServiceClass_CS6",
		7: "RedServiceClass_CS7",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_value = map[string]int32{
		"RedServiceClass_BE":  0,
		"RedServiceClass_AF1": 1,
		"RedServiceClass_AF2": 2,
		"RedServiceClass_AF3": 3,
		"RedServiceClass_AF4": 4,
		"RedServiceClass_EF":  5,
		"RedServiceClass_CS6": 6,
		"RedServiceClass_CS7": 7,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[163].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[163]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0, 5}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor_GREEN  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor_YELLOW Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor_RED    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor_name = map[int32]string{
		0: "RedColor_GREEN",
		1: "RedColor_YELLOW",
		2: "RedColor_RED",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor_value = map[string]int32{
		"RedColor_GREEN":  0,
		"RedColor_YELLOW": 1,
		"RedColor_RED":    2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[164].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[164]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0, 6}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType_FLOW     Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType_PACKET   Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType_FLOWX_L2 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType = 2
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType_FLOWX_L3 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType = 3
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType_name = map[int32]string{
		0: "BalanceType_FLOW",
		1: "BalanceType_PACKET",
		2: "BalanceType_FLOWX_L2",
		3: "BalanceType_FLOWX_L3",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType_value = map[string]int32{
		"BalanceType_FLOW":     0,
		"BalanceType_PACKET":   1,
		"BalanceType_FLOWX_L2": 2,
		"BalanceType_FLOWX_L3": 3,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[165].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[165]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 9, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_INVALID_ENUM_VALUE_MatchTerm Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm_ENABLE             Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_MatchTerm",
		1: "MatchTerm_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm_value = map[string]int32{
		"INVALID_ENUM_VALUE_MatchTerm": 0,
		"MatchTerm_ENABLE":             1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[166].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[166]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 10, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType_IPV4 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType_IPV6 Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType_name = map[int32]string{
		0: "FlowType_IPV4",
		1: "FlowType_IPV6",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType_value = map[string]int32{
		"FlowType_IPV4": 0,
		"FlowType_IPV6": 1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[167].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[167]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 11, 0, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType_FIXX_PACKETS    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType_FIXX_TIME       Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType_RANDOMX_PACKETS Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType_name = map[int32]string{
		0: "SampleType_FIXX_PACKETS",
		1: "SampleType_FIXX_TIME",
		2: "SampleType_RANDOMX_PACKETS",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType_value = map[string]int32{
		"SampleType_FIXX_PACKETS":    0,
		"SampleType_FIXX_TIME":       1,
		"SampleType_RANDOMX_PACKETS": 2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[168].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[168]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 11, 0, 1}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType_STRICT Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType_LOOSE  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType_name = map[int32]string{
		0: "CheckType_STRICT",
		1: "CheckType_LOOSE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType_value = map[string]int32{
		"CheckType_STRICT": 0,
		"CheckType_LOOSE":  1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[169].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[169]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 12, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_INVALID_ENUM_VALUE_AllowDefault Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault_ENABLE             Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AllowDefault",
		1: "AllowDefault_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault_value = map[string]int32{
		"INVALID_ENUM_VALUE_AllowDefault": 0,
		"AllowDefault_ENABLE":             1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[170].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[170]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 12, 1}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault_DISABLE Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault = 0
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault_name = map[int32]string{
		0: "IgnoreDefault_DISABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault_value = map[string]int32{
		"IgnoreDefault_DISABLE": 0,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[171].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[171]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 12, 2}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_INVALID_ENUM_VALUE_DenyAction Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction_ENABLE             Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_DenyAction",
		1: "DenyAction_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction_value = map[string]int32{
		"INVALID_ENUM_VALUE_DenyAction": 0,
		"DenyAction_ENABLE":             1,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[172].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[172]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 13, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType int32

const (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_INVALID_ENUM_VALUE_StatisticsType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType = 0
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType_BPS                Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType = 1
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType_PPS                Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType.
var (
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_StatisticsType",
		1: "StatisticsType_BPS",
		2: "StatisticsType_PPS",
	}
	Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType_value = map[string]int32{
		"INVALID_ENUM_VALUE_StatisticsType": 0,
		"StatisticsType_BPS":                1,
		"StatisticsType_PPS":                2,
	}
)

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType) Enum() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType {
	p := new(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[173].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[173]
}

func (x Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 15, 0}
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode int32

const (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode_DISABLE Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode = 0
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode_ENABLE  Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode.
var (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode_name = map[int32]string{
		0: "ShareMode_DISABLE",
		1: "ShareMode_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode_value = map[string]int32{
		"ShareMode_DISABLE": 0,
		"ShareMode_ENABLE":  1,
	}
)

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode) Enum() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode {
	p := new(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[174].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[174]
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 0}
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag int32

const (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag_DISABLE Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag = 0
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag_ENABLE  Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag.
var (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag_name = map[int32]string{
		0: "StatFlag_DISABLE",
		1: "StatFlag_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag_value = map[string]int32{
		"StatFlag_DISABLE": 0,
		"StatFlag_ENABLE":  1,
	}
)

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag) Enum() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag {
	p := new(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[175].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[175]
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 1}
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude int32

const (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude_DISABLE Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude = 0
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude_ENABLE  Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude.
var (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude_name = map[int32]string{
		0: "LinkExclude_DISABLE",
		1: "LinkExclude_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude_value = map[string]int32{
		"LinkExclude_DISABLE": 0,
		"LinkExclude_ENABLE":  1,
	}
)

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude) Enum() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude {
	p := new(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[176].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[176]
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 2}
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction int32

const (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_INVALID_ENUM_VALUE_Direction Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction = 0
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction_SOURCE             Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction = 1
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction_DESTINATION        Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction.
var (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_SOURCE",
		2: "Direction_DESTINATION",
	}
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_SOURCE":             1,
		"Direction_DESTINATION":        2,
	}
)

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction) Enum() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction {
	p := new(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[177].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[177]
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 1, 0, 0}
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType int32

const (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_INVALID_ENUM_VALUE_GroupType Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType = 0
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType_SERVICEX_GROUP     Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType = 1
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType_USERX_GROUP        Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType = 2
)

// Enum value maps for Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType.
var (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GroupType",
		1: "GroupType_SERVICEX_GROUP",
		2: "GroupType_USERX_GROUP",
	}
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType_value = map[string]int32{
		"INVALID_ENUM_VALUE_GroupType": 0,
		"GroupType_SERVICEX_GROUP":     1,
		"GroupType_USERX_GROUP":        2,
	}
)

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType) Enum() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType {
	p := new(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[178].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[178]
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 1, 0, 1}
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable int32

const (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_INVALID_ENUM_VALUE_Enable Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable = 0
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable_ENABLE             Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable = 1
)

// Enum value maps for Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable.
var (
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Enable",
		1: "Enable_ENABLE",
	}
	Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable_value = map[string]int32{
		"INVALID_ENUM_VALUE_Enable": 0,
		"Enable_ENABLE":             1,
	}
)

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable) Enum() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable {
	p := new(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable)
	*p = x
	return p
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[179].Descriptor()
}

func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[179]
}

func (x Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable.Descriptor instead.
func (Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 2, 0}
}

type Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction int32

const (
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction_INBOUND  Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction = 0
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction_OUTBOUND Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction = 1
)

// Enum value maps for Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction.
var (
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction) Enum() *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction {
	p := new(Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction)
	*p = x
	return p
}

func (x Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[180].Descriptor()
}

func (Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[180]
}

func (x Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction.Descriptor instead.
func (Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0}
}

type Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType int32

const (
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType_UCL Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType = 0
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType_ACL Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType = 1
)

// Enum value maps for Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType.
var (
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType_name = map[int32]string{
		0: "UclType_UCL",
		1: "UclType_ACL",
	}
	Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType_value = map[string]int32{
		"UclType_UCL": 0,
		"UclType_ACL": 1,
	}
)

func (x Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType) Enum() *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType {
	p := new(Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[181].Descriptor()
}

func (Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[181]
}

func (x Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType.Descriptor instead.
func (Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0, 1}
}

type Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type int32

const (
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_PUSH          Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 0
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_PROTOCOLX_MCX_RESERVED   Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 2
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_PUSH        Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 3
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_L2X_INBOUND Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 4
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_RULEX_PACKET             Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 5
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_MPLSX_LAYERX_POP         Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 6
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_POP           Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type = 7
)

// Enum value maps for Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type.
var (
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_name = map[int32]string{
		0: "Type_IPX_LAYERX_PUSH",
		2: "Type_PROTOCOLX_MCX_RESERVED",
		3: "Type_MPLSX_LAYERX_PUSH",
		4: "Type_MPLSX_LAYERX_L2X_INBOUND",
		5: "Type_RULEX_PACKET",
		6: "Type_MPLSX_LAYERX_POP",
		7: "Type_IPX_LAYERX_POP",
	}
	Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_value = map[string]int32{
		"Type_IPX_LAYERX_PUSH":          0,
		"Type_PROTOCOLX_MCX_RESERVED":   2,
		"Type_MPLSX_LAYERX_PUSH":        3,
		"Type_MPLSX_LAYERX_L2X_INBOUND": 4,
		"Type_RULEX_PACKET":             5,
		"Type_MPLSX_LAYERX_POP":         6,
		"Type_IPX_LAYERX_POP":           7,
	}
)

func (x Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Enum() *Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type {
	p := new(Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type)
	*p = x
	return p
}

func (x Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[182].Descriptor()
}

func (Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[182]
}

func (x Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type.Descriptor instead.
func (Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 1, 0, 0}
}

type Qos_GlobalConfig_GlobalSetQueueStat_Interval int32

const (
	Qos_GlobalConfig_GlobalSetQueueStat_INVALID_ENUM_VALUE_Interval Qos_GlobalConfig_GlobalSetQueueStat_Interval = 0
	Qos_GlobalConfig_GlobalSetQueueStat_Interval_X_5S               Qos_GlobalConfig_GlobalSetQueueStat_Interval = 5
	Qos_GlobalConfig_GlobalSetQueueStat_Interval_X_30S              Qos_GlobalConfig_GlobalSetQueueStat_Interval = 30
	Qos_GlobalConfig_GlobalSetQueueStat_Interval_X_300S             Qos_GlobalConfig_GlobalSetQueueStat_Interval = 300
)

// Enum value maps for Qos_GlobalConfig_GlobalSetQueueStat_Interval.
var (
	Qos_GlobalConfig_GlobalSetQueueStat_Interval_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_Interval",
		5:   "Interval_X_5S",
		30:  "Interval_X_30S",
		300: "Interval_X_300S",
	}
	Qos_GlobalConfig_GlobalSetQueueStat_Interval_value = map[string]int32{
		"INVALID_ENUM_VALUE_Interval": 0,
		"Interval_X_5S":               5,
		"Interval_X_30S":              30,
		"Interval_X_300S":             300,
	}
)

func (x Qos_GlobalConfig_GlobalSetQueueStat_Interval) Enum() *Qos_GlobalConfig_GlobalSetQueueStat_Interval {
	p := new(Qos_GlobalConfig_GlobalSetQueueStat_Interval)
	*p = x
	return p
}

func (x Qos_GlobalConfig_GlobalSetQueueStat_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_GlobalSetQueueStat_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[183].Descriptor()
}

func (Qos_GlobalConfig_GlobalSetQueueStat_Interval) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[183]
}

func (x Qos_GlobalConfig_GlobalSetQueueStat_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalSetQueueStat_Interval.Descriptor instead.
func (Qos_GlobalConfig_GlobalSetQueueStat_Interval) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 3, 0}
}

type Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass int32

const (
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_BE  Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 0
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_AF1 Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 1
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_AF2 Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 2
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_AF3 Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 3
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_AF4 Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 4
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_EF  Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 5
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_CS6 Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 6
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_CS7 Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass = 7
)

// Enum value maps for Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass.
var (
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass) Enum() *Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass {
	p := new(Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[184].Descriptor()
}

func (Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[184]
}

func (x Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass.Descriptor instead.
func (Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 5, 0, 0}
}

type Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType int32

const (
	Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType_BOTHX_SPEED Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType = 0
	Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType_LOWX_SPEED  Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType = 1
	Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType_HIGHX_SPEED Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType = 2
)

// Enum value maps for Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType.
var (
	Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType_name = map[int32]string{
		0: "SpeedType_BOTHX_SPEED",
		1: "SpeedType_LOWX_SPEED",
		2: "SpeedType_HIGHX_SPEED",
	}
	Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType_value = map[string]int32{
		"SpeedType_BOTHX_SPEED": 0,
		"SpeedType_LOWX_SPEED":  1,
		"SpeedType_HIGHX_SPEED": 2,
	}
)

func (x Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType) Enum() *Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType {
	p := new(Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[185].Descriptor()
}

func (Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[185]
}

func (x Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType.Descriptor instead.
func (Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 5, 0, 1}
}

type Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType int32

const (
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_INVALID_ENUM_VALUE_EnableType Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType = 0
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType_FLOWX_QUEUE        Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType = 1
)

// Enum value maps for Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType.
var (
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_EnableType",
		1: "EnableType_FLOWX_QUEUE",
	}
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType_value = map[string]int32{
		"INVALID_ENUM_VALUE_EnableType": 0,
		"EnableType_FLOWX_QUEUE":        1,
	}
)

func (x Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType) Enum() *Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType {
	p := new(Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[186].Descriptor()
}

func (Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[186]
}

func (x Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType.Descriptor instead.
func (Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 6, 0, 0}
}

type Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue int32

const (
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_INVALID_ENUM_VALUE_EnableValue Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue = 0
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue_ENABLE             Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue = 1
)

// Enum value maps for Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue.
var (
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_EnableValue",
		1: "EnableValue_ENABLE",
	}
	Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue_value = map[string]int32{
		"INVALID_ENUM_VALUE_EnableValue": 0,
		"EnableValue_ENABLE":             1,
	}
)

func (x Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue) Enum() *Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue {
	p := new(Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue)
	*p = x
	return p
}

func (x Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[187].Descriptor()
}

func (Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[187]
}

func (x Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue.Descriptor instead.
func (Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 6, 0, 1}
}

type Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType int32

const (
	Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType_MODE2 Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType = 0
	Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType_MODE3 Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType = 1
)

// Enum value maps for Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType.
var (
	Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType_name = map[int32]string{
		0: "ModeType_MODE2",
		1: "ModeType_MODE3",
	}
	Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType_value = map[string]int32{
		"ModeType_MODE2": 0,
		"ModeType_MODE3": 1,
	}
)

func (x Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType) Enum() *Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType {
	p := new(Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[188].Descriptor()
}

func (Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[188]
}

func (x Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType.Descriptor instead.
func (Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 7, 0, 0}
}

type Qos_GlobalConfig_ConvergenceSchedule_Mode int32

const (
	Qos_GlobalConfig_ConvergenceSchedule_INVALID_ENUM_VALUE_Mode Qos_GlobalConfig_ConvergenceSchedule_Mode = 0
	Qos_GlobalConfig_ConvergenceSchedule_Mode_DISABLE            Qos_GlobalConfig_ConvergenceSchedule_Mode = 4
)

// Enum value maps for Qos_GlobalConfig_ConvergenceSchedule_Mode.
var (
	Qos_GlobalConfig_ConvergenceSchedule_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		4: "Mode_DISABLE",
	}
	Qos_GlobalConfig_ConvergenceSchedule_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_DISABLE":            4,
	}
)

func (x Qos_GlobalConfig_ConvergenceSchedule_Mode) Enum() *Qos_GlobalConfig_ConvergenceSchedule_Mode {
	p := new(Qos_GlobalConfig_ConvergenceSchedule_Mode)
	*p = x
	return p
}

func (x Qos_GlobalConfig_ConvergenceSchedule_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_ConvergenceSchedule_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[189].Descriptor()
}

func (Qos_GlobalConfig_ConvergenceSchedule_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[189]
}

func (x Qos_GlobalConfig_ConvergenceSchedule_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_ConvergenceSchedule_Mode.Descriptor instead.
func (Qos_GlobalConfig_ConvergenceSchedule_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 8, 0}
}

type Qos_GlobalConfig_PortConvergenceSchedule_Mode int32

const (
	Qos_GlobalConfig_PortConvergenceSchedule_INVALID_ENUM_VALUE_Mode Qos_GlobalConfig_PortConvergenceSchedule_Mode = 0
	Qos_GlobalConfig_PortConvergenceSchedule_Mode_ENABLE             Qos_GlobalConfig_PortConvergenceSchedule_Mode = 1
)

// Enum value maps for Qos_GlobalConfig_PortConvergenceSchedule_Mode.
var (
	Qos_GlobalConfig_PortConvergenceSchedule_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_ENABLE",
	}
	Qos_GlobalConfig_PortConvergenceSchedule_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_ENABLE":             1,
	}
)

func (x Qos_GlobalConfig_PortConvergenceSchedule_Mode) Enum() *Qos_GlobalConfig_PortConvergenceSchedule_Mode {
	p := new(Qos_GlobalConfig_PortConvergenceSchedule_Mode)
	*p = x
	return p
}

func (x Qos_GlobalConfig_PortConvergenceSchedule_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_PortConvergenceSchedule_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[190].Descriptor()
}

func (Qos_GlobalConfig_PortConvergenceSchedule_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[190]
}

func (x Qos_GlobalConfig_PortConvergenceSchedule_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_PortConvergenceSchedule_Mode.Descriptor instead.
func (Qos_GlobalConfig_PortConvergenceSchedule_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 9, 0}
}

type Qos_GlobalConfig_TrafficPolicyUntag_UntagType int32

const (
	Qos_GlobalConfig_TrafficPolicyUntag_UntagType_DISABLE Qos_GlobalConfig_TrafficPolicyUntag_UntagType = 0
)

// Enum value maps for Qos_GlobalConfig_TrafficPolicyUntag_UntagType.
var (
	Qos_GlobalConfig_TrafficPolicyUntag_UntagType_name = map[int32]string{
		0: "UntagType_DISABLE",
	}
	Qos_GlobalConfig_TrafficPolicyUntag_UntagType_value = map[string]int32{
		"UntagType_DISABLE": 0,
	}
)

func (x Qos_GlobalConfig_TrafficPolicyUntag_UntagType) Enum() *Qos_GlobalConfig_TrafficPolicyUntag_UntagType {
	p := new(Qos_GlobalConfig_TrafficPolicyUntag_UntagType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_TrafficPolicyUntag_UntagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_TrafficPolicyUntag_UntagType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[191].Descriptor()
}

func (Qos_GlobalConfig_TrafficPolicyUntag_UntagType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[191]
}

func (x Qos_GlobalConfig_TrafficPolicyUntag_UntagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_TrafficPolicyUntag_UntagType.Descriptor instead.
func (Qos_GlobalConfig_TrafficPolicyUntag_UntagType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 10, 0}
}

type Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass int32

const (
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_BE  Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 0
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_AF1 Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 1
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_AF2 Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 2
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_AF3 Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 3
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_AF4 Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 4
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_EF  Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 5
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_CS6 Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 6
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_CS7 Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass = 7
)

// Enum value maps for Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass.
var (
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass) Enum() *Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass {
	p := new(Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[192].Descriptor()
}

func (Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[192]
}

func (x Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass.Descriptor instead.
func (Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 11, 0, 0}
}

type Qos_GlobalConfig_HostPackets_HostPacket_Color int32

const (
	Qos_GlobalConfig_HostPackets_HostPacket_Color_GREEN  Qos_GlobalConfig_HostPackets_HostPacket_Color = 0
	Qos_GlobalConfig_HostPackets_HostPacket_Color_YELLOW Qos_GlobalConfig_HostPackets_HostPacket_Color = 1
	Qos_GlobalConfig_HostPackets_HostPacket_Color_RED    Qos_GlobalConfig_HostPackets_HostPacket_Color = 2
)

// Enum value maps for Qos_GlobalConfig_HostPackets_HostPacket_Color.
var (
	Qos_GlobalConfig_HostPackets_HostPacket_Color_name = map[int32]string{
		0: "Color_GREEN",
		1: "Color_YELLOW",
		2: "Color_RED",
	}
	Qos_GlobalConfig_HostPackets_HostPacket_Color_value = map[string]int32{
		"Color_GREEN":  0,
		"Color_YELLOW": 1,
		"Color_RED":    2,
	}
)

func (x Qos_GlobalConfig_HostPackets_HostPacket_Color) Enum() *Qos_GlobalConfig_HostPackets_HostPacket_Color {
	p := new(Qos_GlobalConfig_HostPackets_HostPacket_Color)
	*p = x
	return p
}

func (x Qos_GlobalConfig_HostPackets_HostPacket_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_HostPackets_HostPacket_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[193].Descriptor()
}

func (Qos_GlobalConfig_HostPackets_HostPacket_Color) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[193]
}

func (x Qos_GlobalConfig_HostPackets_HostPacket_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_HostPackets_HostPacket_Color.Descriptor instead.
func (Qos_GlobalConfig_HostPackets_HostPacket_Color) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 11, 0, 1}
}

type Qos_GlobalConfig_ExpPhbDisable_ForwardType int32

const (
	Qos_GlobalConfig_ExpPhbDisable_INVALID_ENUM_VALUE_ForwardType Qos_GlobalConfig_ExpPhbDisable_ForwardType = 0
	Qos_GlobalConfig_ExpPhbDisable_ForwardType_VLL                Qos_GlobalConfig_ExpPhbDisable_ForwardType = 1
)

// Enum value maps for Qos_GlobalConfig_ExpPhbDisable_ForwardType.
var (
	Qos_GlobalConfig_ExpPhbDisable_ForwardType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ForwardType",
		1: "ForwardType_VLL",
	}
	Qos_GlobalConfig_ExpPhbDisable_ForwardType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ForwardType": 0,
		"ForwardType_VLL":                1,
	}
)

func (x Qos_GlobalConfig_ExpPhbDisable_ForwardType) Enum() *Qos_GlobalConfig_ExpPhbDisable_ForwardType {
	p := new(Qos_GlobalConfig_ExpPhbDisable_ForwardType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_ExpPhbDisable_ForwardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_ExpPhbDisable_ForwardType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[194].Descriptor()
}

func (Qos_GlobalConfig_ExpPhbDisable_ForwardType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[194]
}

func (x Qos_GlobalConfig_ExpPhbDisable_ForwardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_ExpPhbDisable_ForwardType.Descriptor instead.
func (Qos_GlobalConfig_ExpPhbDisable_ForwardType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 12, 0}
}

type Qos_GlobalConfig_Packs_Pack_SwitchFlag int32

const (
	Qos_GlobalConfig_Packs_Pack_SwitchFlag_DISABLE Qos_GlobalConfig_Packs_Pack_SwitchFlag = 0
	Qos_GlobalConfig_Packs_Pack_SwitchFlag_ENABLE  Qos_GlobalConfig_Packs_Pack_SwitchFlag = 1
)

// Enum value maps for Qos_GlobalConfig_Packs_Pack_SwitchFlag.
var (
	Qos_GlobalConfig_Packs_Pack_SwitchFlag_name = map[int32]string{
		0: "SwitchFlag_DISABLE",
		1: "SwitchFlag_ENABLE",
	}
	Qos_GlobalConfig_Packs_Pack_SwitchFlag_value = map[string]int32{
		"SwitchFlag_DISABLE": 0,
		"SwitchFlag_ENABLE":  1,
	}
)

func (x Qos_GlobalConfig_Packs_Pack_SwitchFlag) Enum() *Qos_GlobalConfig_Packs_Pack_SwitchFlag {
	p := new(Qos_GlobalConfig_Packs_Pack_SwitchFlag)
	*p = x
	return p
}

func (x Qos_GlobalConfig_Packs_Pack_SwitchFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_Packs_Pack_SwitchFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[195].Descriptor()
}

func (Qos_GlobalConfig_Packs_Pack_SwitchFlag) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[195]
}

func (x Qos_GlobalConfig_Packs_Pack_SwitchFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_Packs_Pack_SwitchFlag.Descriptor instead.
func (Qos_GlobalConfig_Packs_Pack_SwitchFlag) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 13, 0, 0}
}

type Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass int32

const (
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_BE  Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 0
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_AF1 Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 1
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_AF2 Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 2
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_AF3 Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 3
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_AF4 Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 4
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_EF  Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 5
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_CS6 Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 6
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_CS7 Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass = 7
)

// Enum value maps for Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass.
var (
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass) Enum() *Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass {
	p := new(Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[196].Descriptor()
}

func (Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[196]
}

func (x Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass.Descriptor instead.
func (Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 15, 0, 0}
}

type Qos_GlobalConfig_RedbackPacketAdjustment_UserType int32

const (
	Qos_GlobalConfig_RedbackPacketAdjustment_INVALID_ENUM_VALUE_UserType Qos_GlobalConfig_RedbackPacketAdjustment_UserType = 0
	Qos_GlobalConfig_RedbackPacketAdjustment_UserType_LAC                Qos_GlobalConfig_RedbackPacketAdjustment_UserType = 1
	Qos_GlobalConfig_RedbackPacketAdjustment_UserType_LNS                Qos_GlobalConfig_RedbackPacketAdjustment_UserType = 2
	Qos_GlobalConfig_RedbackPacketAdjustment_UserType_LACX_ANDX_LNS      Qos_GlobalConfig_RedbackPacketAdjustment_UserType = 3
)

// Enum value maps for Qos_GlobalConfig_RedbackPacketAdjustment_UserType.
var (
	Qos_GlobalConfig_RedbackPacketAdjustment_UserType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_UserType",
		1: "UserType_LAC",
		2: "UserType_LNS",
		3: "UserType_LACX_ANDX_LNS",
	}
	Qos_GlobalConfig_RedbackPacketAdjustment_UserType_value = map[string]int32{
		"INVALID_ENUM_VALUE_UserType": 0,
		"UserType_LAC":                1,
		"UserType_LNS":                2,
		"UserType_LACX_ANDX_LNS":      3,
	}
)

func (x Qos_GlobalConfig_RedbackPacketAdjustment_UserType) Enum() *Qos_GlobalConfig_RedbackPacketAdjustment_UserType {
	p := new(Qos_GlobalConfig_RedbackPacketAdjustment_UserType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_RedbackPacketAdjustment_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_RedbackPacketAdjustment_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[197].Descriptor()
}

func (Qos_GlobalConfig_RedbackPacketAdjustment_UserType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[197]
}

func (x Qos_GlobalConfig_RedbackPacketAdjustment_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_RedbackPacketAdjustment_UserType.Descriptor instead.
func (Qos_GlobalConfig_RedbackPacketAdjustment_UserType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 17, 0}
}

type Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType int32

const (
	Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_INVALID_ENUM_VALUE_UserType Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType = 0
	Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType_LAC                Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType = 1
	Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType_LNS                Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType = 2
	Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType_LACX_ANDX_LNS      Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType = 3
)

// Enum value maps for Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType.
var (
	Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_UserType",
		1: "UserType_LAC",
		2: "UserType_LNS",
		3: "UserType_LACX_ANDX_LNS",
	}
	Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType_value = map[string]int32{
		"INVALID_ENUM_VALUE_UserType": 0,
		"UserType_LAC":                1,
		"UserType_LNS":                2,
		"UserType_LACX_ANDX_LNS":      3,
	}
)

func (x Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType) Enum() *Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType {
	p := new(Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[198].Descriptor()
}

func (Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[198]
}

func (x Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType.Descriptor instead.
func (Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 18, 0, 0}
}

type Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType int32

const (
	Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType_NONE                 Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType = 0
	Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType_LEASEDX_LINEX_ACCESS Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType = 1
)

// Enum value maps for Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType.
var (
	Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType_name = map[int32]string{
		0: "AccessType_NONE",
		1: "AccessType_LEASEDX_LINEX_ACCESS",
	}
	Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType_value = map[string]int32{
		"AccessType_NONE":                 0,
		"AccessType_LEASEDX_LINEX_ACCESS": 1,
	}
)

func (x Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType) Enum() *Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType {
	p := new(Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[199].Descriptor()
}

func (Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[199]
}

func (x Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType.Descriptor instead.
func (Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 19, 0, 0}
}

type Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType int32

const (
	Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType_NONE                 Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType = 0
	Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType_LEASEDX_LINEX_ACCESS Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType = 1
)

// Enum value maps for Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType.
var (
	Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType_name = map[int32]string{
		0: "AccessType_NONE",
		1: "AccessType_LEASEDX_LINEX_ACCESS",
	}
	Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType_value = map[string]int32{
		"AccessType_NONE":                 0,
		"AccessType_LEASEDX_LINEX_ACCESS": 1,
	}
)

func (x Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType) Enum() *Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType {
	p := new(Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType)
	*p = x
	return p
}

func (x Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[200].Descriptor()
}

func (Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[200]
}

func (x Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType.Descriptor instead.
func (Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 20, 0, 0}
}

type Qos_GlobalConfig_L2TpLayerExclude_L2TpUser int32

const (
	Qos_GlobalConfig_L2TpLayerExclude_INVALID_ENUM_VALUE_L2TpUser Qos_GlobalConfig_L2TpLayerExclude_L2TpUser = 0
	Qos_GlobalConfig_L2TpLayerExclude_L2TpUser_L2TPX_USER         Qos_GlobalConfig_L2TpLayerExclude_L2TpUser = 12
)

// Enum value maps for Qos_GlobalConfig_L2TpLayerExclude_L2TpUser.
var (
	Qos_GlobalConfig_L2TpLayerExclude_L2TpUser_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_L2TpUser",
		12: "L2TpUser_L2TPX_USER",
	}
	Qos_GlobalConfig_L2TpLayerExclude_L2TpUser_value = map[string]int32{
		"INVALID_ENUM_VALUE_L2TpUser": 0,
		"L2TpUser_L2TPX_USER":         12,
	}
)

func (x Qos_GlobalConfig_L2TpLayerExclude_L2TpUser) Enum() *Qos_GlobalConfig_L2TpLayerExclude_L2TpUser {
	p := new(Qos_GlobalConfig_L2TpLayerExclude_L2TpUser)
	*p = x
	return p
}

func (x Qos_GlobalConfig_L2TpLayerExclude_L2TpUser) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_L2TpLayerExclude_L2TpUser) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[201].Descriptor()
}

func (Qos_GlobalConfig_L2TpLayerExclude_L2TpUser) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[201]
}

func (x Qos_GlobalConfig_L2TpLayerExclude_L2TpUser) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_L2TpLayerExclude_L2TpUser.Descriptor instead.
func (Qos_GlobalConfig_L2TpLayerExclude_L2TpUser) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 21, 0}
}

type Qos_GlobalConfig_LocalIdEnable_Mode int32

const (
	Qos_GlobalConfig_LocalIdEnable_Mode_SOURCE      Qos_GlobalConfig_LocalIdEnable_Mode = 0
	Qos_GlobalConfig_LocalIdEnable_Mode_DESTINATION Qos_GlobalConfig_LocalIdEnable_Mode = 1
	Qos_GlobalConfig_LocalIdEnable_Mode_BOTH        Qos_GlobalConfig_LocalIdEnable_Mode = 2
)

// Enum value maps for Qos_GlobalConfig_LocalIdEnable_Mode.
var (
	Qos_GlobalConfig_LocalIdEnable_Mode_name = map[int32]string{
		0: "Mode_SOURCE",
		1: "Mode_DESTINATION",
		2: "Mode_BOTH",
	}
	Qos_GlobalConfig_LocalIdEnable_Mode_value = map[string]int32{
		"Mode_SOURCE":      0,
		"Mode_DESTINATION": 1,
		"Mode_BOTH":        2,
	}
)

func (x Qos_GlobalConfig_LocalIdEnable_Mode) Enum() *Qos_GlobalConfig_LocalIdEnable_Mode {
	p := new(Qos_GlobalConfig_LocalIdEnable_Mode)
	*p = x
	return p
}

func (x Qos_GlobalConfig_LocalIdEnable_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalConfig_LocalIdEnable_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[202].Descriptor()
}

func (Qos_GlobalConfig_LocalIdEnable_Mode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[202]
}

func (x Qos_GlobalConfig_LocalIdEnable_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalConfig_LocalIdEnable_Mode.Descriptor instead.
func (Qos_GlobalConfig_LocalIdEnable_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 25, 0}
}

type Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_BE  Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_AF1 Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_AF2 Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_AF3 Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_AF4 Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_EF  Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_CS6 Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_CS7 Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[203].Descriptor()
}

func (Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[203]
}

func (x Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

type Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_BE  Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_AF1 Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_AF2 Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_AF3 Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_AF4 Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_EF  Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_CS6 Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_CS7 Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[204].Descriptor()
}

func (Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[204]
}

func (x Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 1, 0, 0}
}

type Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_BE  Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_AF1 Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_AF2 Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_AF3 Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_AF4 Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_EF  Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_CS6 Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_CS7 Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[205].Descriptor()
}

func (Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[205]
}

func (x Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 2, 0, 0}
}

type Qos_GlobalQuery_UserInformations_UserInformation_Direction int32

const (
	Qos_GlobalQuery_UserInformations_UserInformation_Direction_INBOUND  Qos_GlobalQuery_UserInformations_UserInformation_Direction = 0
	Qos_GlobalQuery_UserInformations_UserInformation_Direction_OUTBOUND Qos_GlobalQuery_UserInformations_UserInformation_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_UserInformations_UserInformation_Direction.
var (
	Qos_GlobalQuery_UserInformations_UserInformation_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_UserInformations_UserInformation_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_UserInformations_UserInformation_Direction) Enum() *Qos_GlobalQuery_UserInformations_UserInformation_Direction {
	p := new(Qos_GlobalQuery_UserInformations_UserInformation_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserInformations_UserInformation_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[206].Descriptor()
}

func (Qos_GlobalQuery_UserInformations_UserInformation_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[206]
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_Direction.Descriptor instead.
func (Qos_GlobalQuery_UserInformations_UserInformation_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 0}
}

type Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_BE    Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_AF1   Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_AF2   Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_AF3   Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_AF4   Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_EF    Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_CS6   Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_CS7   Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 7
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_TOTAL Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 8
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_COS0  Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 9
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_COS1  Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 10
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_COS2  Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 11
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_COS3  Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass = 12
)

// Enum value maps for Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_name = map[int32]string{
		0:  "ServiceClass_BE",
		1:  "ServiceClass_AF1",
		2:  "ServiceClass_AF2",
		3:  "ServiceClass_AF3",
		4:  "ServiceClass_AF4",
		5:  "ServiceClass_EF",
		6:  "ServiceClass_CS6",
		7:  "ServiceClass_CS7",
		8:  "ServiceClass_TOTAL",
		9:  "ServiceClass_COS0",
		10: "ServiceClass_COS1",
		11: "ServiceClass_COS2",
		12: "ServiceClass_COS3",
	}
	Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
		"ServiceClass_COS0":  9,
		"ServiceClass_COS1":  10,
		"ServiceClass_COS2":  11,
		"ServiceClass_COS3":  12,
	}
)

func (x Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[207].Descriptor()
}

func (Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[207]
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 0, 0, 0}
}

type Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType int32

const (
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_NULL        Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType = 0
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_SQ          Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType = 1
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_CAR         Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType = 2
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_SQX_CAR     Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType = 3
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_L2X_CAR     Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType = 4
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_L2X_L3X_CAR Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType = 5
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_L3X_CAR     Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType = 6
)

// Enum value maps for Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType.
var (
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_name = map[int32]string{
		0: "ResourceType_NULL",
		1: "ResourceType_SQ",
		2: "ResourceType_CAR",
		3: "ResourceType_SQX_CAR",
		4: "ResourceType_L2X_CAR",
		5: "ResourceType_L2X_L3X_CAR",
		6: "ResourceType_L3X_CAR",
	}
	Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_value = map[string]int32{
		"ResourceType_NULL":        0,
		"ResourceType_SQ":          1,
		"ResourceType_CAR":         2,
		"ResourceType_SQX_CAR":     3,
		"ResourceType_L2X_CAR":     4,
		"ResourceType_L2X_L3X_CAR": 5,
		"ResourceType_L3X_CAR":     6,
	}
)

func (x Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType) Enum() *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType {
	p := new(Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[208].Descriptor()
}

func (Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[208]
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType.Descriptor instead.
func (Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 1, 0, 0}
}

type Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass int32

const (
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_BE    Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 0
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_AF1   Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 1
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_AF2   Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 2
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_AF3   Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 3
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_AF4   Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 4
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_EF    Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 5
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_CS6   Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 6
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_CS7   Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 7
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_TOTAL Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 8
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_COS0  Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 9
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_COS1  Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 10
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_COS2  Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 11
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_COS3  Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass = 12
)

// Enum value maps for Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass.
var (
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_name = map[int32]string{
		0:  "ServiceClass_BE",
		1:  "ServiceClass_AF1",
		2:  "ServiceClass_AF2",
		3:  "ServiceClass_AF3",
		4:  "ServiceClass_AF4",
		5:  "ServiceClass_EF",
		6:  "ServiceClass_CS6",
		7:  "ServiceClass_CS7",
		8:  "ServiceClass_TOTAL",
		9:  "ServiceClass_COS0",
		10: "ServiceClass_COS1",
		11: "ServiceClass_COS2",
		12: "ServiceClass_COS3",
	}
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
		"ServiceClass_COS0":  9,
		"ServiceClass_COS1":  10,
		"ServiceClass_COS2":  11,
		"ServiceClass_COS3":  12,
	}
)

func (x Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass) Enum() *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass {
	p := new(Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[209].Descriptor()
}

func (Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[209]
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 2, 0, 0}
}

type Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType int32

const (
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType_PQ  Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType = 0
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType_WFQ Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType = 1
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType_LPQ Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType = 2
)

// Enum value maps for Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType.
var (
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType_name = map[int32]string{
		0: "ScheduleType_PQ",
		1: "ScheduleType_WFQ",
		2: "ScheduleType_LPQ",
	}
	Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType_value = map[string]int32{
		"ScheduleType_PQ":  0,
		"ScheduleType_WFQ": 1,
		"ScheduleType_LPQ": 2,
	}
)

func (x Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType) Enum() *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType {
	p := new(Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[210].Descriptor()
}

func (Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[210]
}

func (x Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType.Descriptor instead.
func (Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 2, 0, 1}
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction int32

const (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction_INBOUND  Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction = 0
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction_OUTBOUND Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction.
var (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction) Enum() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction {
	p := new(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[211].Descriptor()
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[211]
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 0}
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus int32

const (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus_DISABLE Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus = 0
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus_ENABLE  Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus.
var (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus_name = map[int32]string{
		0: "SwitchStatus_DISABLE",
		1: "SwitchStatus_ENABLE",
	}
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus_value = map[string]int32{
		"SwitchStatus_DISABLE": 0,
		"SwitchStatus_ENABLE":  1,
	}
)

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus) Enum() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus {
	p := new(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[212].Descriptor()
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[212]
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus.Descriptor instead.
func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 1}
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType int32

const (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType_NORMAL      Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType = 0
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType_VBDX_IF     Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType = 1
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType_MULTIX_TYPE Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType = 2
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType_VLANX_IF    Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType = 3
)

// Enum value maps for Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType.
var (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType_name = map[int32]string{
		0: "ServiceType_NORMAL",
		1: "ServiceType_VBDX_IF",
		2: "ServiceType_MULTIX_TYPE",
		3: "ServiceType_VLANX_IF",
	}
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType_value = map[string]int32{
		"ServiceType_NORMAL":      0,
		"ServiceType_VBDX_IF":     1,
		"ServiceType_MULTIX_TYPE": 2,
		"ServiceType_VLANX_IF":    3,
	}
)

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType) Enum() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType {
	p := new(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[213].Descriptor()
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[213]
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType.Descriptor instead.
func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 0, 0, 0}
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily int32

const (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_INVALID_ENUM_VALUE_ProtocolFamily Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily = 0
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily_IPV4               Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily = 1
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily_IPV6               Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily = 2
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily_L2                 Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily = 3
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily_MPLS               Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily = 4
)

// Enum value maps for Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily.
var (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ProtocolFamily",
		1: "ProtocolFamily_IPV4",
		2: "ProtocolFamily_IPV6",
		3: "ProtocolFamily_L2",
		4: "ProtocolFamily_MPLS",
	}
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily_value = map[string]int32{
		"INVALID_ENUM_VALUE_ProtocolFamily": 0,
		"ProtocolFamily_IPV4":               1,
		"ProtocolFamily_IPV6":               2,
		"ProtocolFamily_L2":                 3,
		"ProtocolFamily_MPLS":               4,
	}
)

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily) Enum() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily {
	p := new(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[214].Descriptor()
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[214]
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily.Descriptor instead.
func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 0, 0, 1}
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType int32

const (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType_NORMAL      Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType = 0
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType_VBDX_IF     Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType = 1
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType_MULTIX_TYPE Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType = 2
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType_VLANX_IF    Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType = 3
)

// Enum value maps for Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType.
var (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType_name = map[int32]string{
		0: "ServiceType_NORMAL",
		1: "ServiceType_VBDX_IF",
		2: "ServiceType_MULTIX_TYPE",
		3: "ServiceType_VLANX_IF",
	}
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType_value = map[string]int32{
		"ServiceType_NORMAL":      0,
		"ServiceType_VBDX_IF":     1,
		"ServiceType_MULTIX_TYPE": 2,
		"ServiceType_VLANX_IF":    3,
	}
)

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType) Enum() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType {
	p := new(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[215].Descriptor()
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[215]
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType.Descriptor instead.
func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 1, 0, 0}
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode int32

const (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode_DISABLE Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode = 0
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode_ENABLE  Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode.
var (
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode_name = map[int32]string{
		0: "ShareMode_DISABLE",
		1: "ShareMode_ENABLE",
	}
	Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode_value = map[string]int32{
		"ShareMode_DISABLE": 0,
		"ShareMode_ENABLE":  1,
	}
)

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode) Enum() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode {
	p := new(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[216].Descriptor()
}

func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[216]
}

func (x Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode.Descriptor instead.
func (Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 1, 0, 1}
}

type Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction int32

const (
	Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction_INBOUND  Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction = 0
	Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction_OUTBOUND Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction = 1
	Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction_ALL      Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction = 2
)

// Enum value maps for Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction.
var (
	Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction) Enum() *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction {
	p := new(Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[217].Descriptor()
}

func (Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[217]
}

func (x Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction.Descriptor instead.
func (Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 6, 0, 0}
}

type Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction int32

const (
	Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction_INBOUND  Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction = 0
	Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction_OUTBOUND Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction.
var (
	Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction) Enum() *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction {
	p := new(Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[218].Descriptor()
}

func (Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[218]
}

func (x Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction.Descriptor instead.
func (Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 8, 0, 0}
}

type Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction int32

const (
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction_INBOUND  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction = 0
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction_OUTBOUND Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction.
var (
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction) Enum() *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction {
	p := new(Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[219].Descriptor()
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[219]
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 0, 0, 0}
}

type Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass int32

const (
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_BE    Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 0
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_AF1   Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 1
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_AF2   Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 2
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_AF3   Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 3
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_AF4   Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 4
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_EF    Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 5
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_CS6   Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 6
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_CS7   Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 7
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_TOTAL Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 8
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS0  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 9
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS1  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 10
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS2  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 11
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS3  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 12
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS4  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 13
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS5  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 14
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS6  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 15
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_COS7  Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass = 16
)

// Enum value maps for Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass.
var (
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_name = map[int32]string{
		0:  "ServiceClass_BE",
		1:  "ServiceClass_AF1",
		2:  "ServiceClass_AF2",
		3:  "ServiceClass_AF3",
		4:  "ServiceClass_AF4",
		5:  "ServiceClass_EF",
		6:  "ServiceClass_CS6",
		7:  "ServiceClass_CS7",
		8:  "ServiceClass_TOTAL",
		9:  "ServiceClass_COS0",
		10: "ServiceClass_COS1",
		11: "ServiceClass_COS2",
		12: "ServiceClass_COS3",
		13: "ServiceClass_COS4",
		14: "ServiceClass_COS5",
		15: "ServiceClass_COS6",
		16: "ServiceClass_COS7",
	}
	Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
		"ServiceClass_COS0":  9,
		"ServiceClass_COS1":  10,
		"ServiceClass_COS2":  11,
		"ServiceClass_COS3":  12,
		"ServiceClass_COS4":  13,
		"ServiceClass_COS5":  14,
		"ServiceClass_COS6":  15,
		"ServiceClass_COS7":  16,
	}
)

func (x Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass) Enum() *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass {
	p := new(Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[220].Descriptor()
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[220]
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 0, 0, 1}
}

type Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType int32

const (
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_INVALID_ENUM_VALUE_CarType Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 0
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_CAR                Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 1
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_BROADCAST          Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 2
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_MULTICAST          Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 3
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_UNKNOWX_UNICAST    Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 4
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_L2X_FORWARD        Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 5
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_L3X_FORWARD        Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 6
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_BUM                Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 7
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_BU                 Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 8
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_UNKNOWX_MULTICAST  Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType = 9
)

// Enum value maps for Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType.
var (
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_CarType",
		1: "CarType_CAR",
		2: "CarType_BROADCAST",
		3: "CarType_MULTICAST",
		4: "CarType_UNKNOWX_UNICAST",
		5: "CarType_L2X_FORWARD",
		6: "CarType_L3X_FORWARD",
		7: "CarType_BUM",
		8: "CarType_BU",
		9: "CarType_UNKNOWX_MULTICAST",
	}
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType_value = map[string]int32{
		"INVALID_ENUM_VALUE_CarType": 0,
		"CarType_CAR":                1,
		"CarType_BROADCAST":          2,
		"CarType_MULTICAST":          3,
		"CarType_UNKNOWX_UNICAST":    4,
		"CarType_L2X_FORWARD":        5,
		"CarType_L3X_FORWARD":        6,
		"CarType_BUM":                7,
		"CarType_BU":                 8,
		"CarType_UNKNOWX_MULTICAST":  9,
	}
)

func (x Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType) Enum() *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType {
	p := new(Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[221].Descriptor()
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[221]
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType.Descriptor instead.
func (Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 1, 0, 0}
}

type Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction int32

const (
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction_INBOUND  Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction = 0
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction_OUTBOUND Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction.
var (
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction) Enum() *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction {
	p := new(Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[222].Descriptor()
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[222]
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 1, 0, 1}
}

type Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction int32

const (
	Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction_INBOUND  Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction = 0
	Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction_OUTBOUND Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction.
var (
	Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction) Enum() *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction {
	p := new(Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[223].Descriptor()
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[223]
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 2, 0, 0}
}

type Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction int32

const (
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction_INBOUND  Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction = 0
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction_OUTBOUND Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction.
var (
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction) Enum() *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction {
	p := new(Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[224].Descriptor()
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[224]
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 3, 0, 0}
}

type Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum int32

const (
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P0    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 0
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P1    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 1
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P2    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 2
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P3    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 3
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P4    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 4
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P5    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 5
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P6    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 6
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P7    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 7
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_TOTAL Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum = 8
)

// Enum value maps for Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum.
var (
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_name = map[int32]string{
		0: "PriorityNum_P0",
		1: "PriorityNum_P1",
		2: "PriorityNum_P2",
		3: "PriorityNum_P3",
		4: "PriorityNum_P4",
		5: "PriorityNum_P5",
		6: "PriorityNum_P6",
		7: "PriorityNum_P7",
		8: "PriorityNum_TOTAL",
	}
	Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_value = map[string]int32{
		"PriorityNum_P0":    0,
		"PriorityNum_P1":    1,
		"PriorityNum_P2":    2,
		"PriorityNum_P3":    3,
		"PriorityNum_P4":    4,
		"PriorityNum_P5":    5,
		"PriorityNum_P6":    6,
		"PriorityNum_P7":    7,
		"PriorityNum_TOTAL": 8,
	}
)

func (x Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum) Enum() *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum {
	p := new(Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[225].Descriptor()
}

func (Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[225]
}

func (x Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum.Descriptor instead.
func (Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 3, 0, 1}
}

type Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction int32

const (
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction_INBOUND  Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction = 0
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction_OUTBOUND Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction.
var (
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction) Enum() *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction {
	p := new(Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[226].Descriptor()
}

func (Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[226]
}

func (x Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 10, 0, 0}
}

type Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_BE    Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 0
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_AF1   Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 1
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_AF2   Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 2
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_AF3   Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 3
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_AF4   Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 4
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_EF    Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 5
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_CS6   Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 6
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_CS7   Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 7
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_TOTAL Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass = 8
)

// Enum value maps for Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass.
var (
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
		8: "ServiceClass_TOTAL",
	}
	Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
	}
)

func (x Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass) Enum() *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[227].Descriptor()
}

func (Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[227]
}

func (x Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 10, 0, 1}
}

type Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction int32

const (
	Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction_INBOUND  Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction = 0
	Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction_OUTBOUND Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction = 1
	Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction_ALL      Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction = 2
)

// Enum value maps for Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction.
var (
	Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_ALL",
	}
	Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
		"Direction_ALL":      2,
	}
)

func (x Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction) Enum() *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction {
	p := new(Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[228].Descriptor()
}

func (Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[228]
}

func (x Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction.Descriptor instead.
func (Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 11, 0, 0}
}

type Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_BE  Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_AF1 Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_AF2 Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_AF3 Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_AF4 Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_EF  Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_CS6 Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_CS7 Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[229].Descriptor()
}

func (Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[229]
}

func (x Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 12, 0, 0}
}

type Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_BE  Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_AF1 Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_AF2 Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_AF3 Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_AF4 Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_EF  Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_CS6 Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_CS7 Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[230].Descriptor()
}

func (Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[230]
}

func (x Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 13, 0, 0}
}

type Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_BE  Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 0
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_AF1 Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 1
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_AF2 Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 2
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_AF3 Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 3
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_AF4 Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 4
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_EF  Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 5
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_CS6 Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 6
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_CS7 Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass.
var (
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass) Enum() *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[231].Descriptor()
}

func (Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[231]
}

func (x Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 14, 0, 0}
}

type Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_BE  Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 0
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_AF1 Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 1
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_AF2 Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 2
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_AF3 Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 3
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_AF4 Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 4
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_EF  Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 5
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_CS6 Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 6
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_CS7 Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass.
var (
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass) Enum() *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[232].Descriptor()
}

func (Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[232]
}

func (x Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 15, 0, 0}
}

type Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_BE    Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_AF1   Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_AF2   Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_AF3   Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_AF4   Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_EF    Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_CS6   Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_CS7   Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 7
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_TOTAL Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass = 8
)

// Enum value maps for Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
		8: "ServiceClass_TOTAL",
	}
	Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
	}
)

func (x Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[233].Descriptor()
}

func (Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[233]
}

func (x Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 16, 0, 0}
}

type Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability int32

const (
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_INVALID_ENUM_VALUE_Ability Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability = 0
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability_S                  Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability = 1
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability_N                  Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability = 2
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability_U                  Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability = 3
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability_M                  Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability = 4
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability_E                  Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability = 5
)

// Enum value maps for Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability.
var (
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ability",
		1: "Ability_S",
		2: "Ability_N",
		3: "Ability_U",
		4: "Ability_M",
		5: "Ability_E",
	}
	Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ability": 0,
		"Ability_S":                  1,
		"Ability_N":                  2,
		"Ability_U":                  3,
		"Ability_M":                  4,
		"Ability_E":                  5,
	}
)

func (x Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability) Enum() *Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability {
	p := new(Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability)
	*p = x
	return p
}

func (x Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[234].Descriptor()
}

func (Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[234]
}

func (x Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability.Descriptor instead.
func (Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 17, 0, 0}
}

type Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction int32

const (
	Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction_INBOUND Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction = 0
)

// Enum value maps for Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction.
var (
	Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
	}
	Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND": 0,
	}
)

func (x Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction) Enum() *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction {
	p := new(Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[235].Descriptor()
}

func (Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[235]
}

func (x Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 18, 0, 0}
}

type Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType int32

const (
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_INVALID_ENUM_VALUE_IpType Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType = 0
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType_SOURCE             Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType = 1
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType_DESTINATION        Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType = 2
)

// Enum value maps for Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType.
var (
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_IpType",
		1: "IpType_SOURCE",
		2: "IpType_DESTINATION",
	}
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType_value = map[string]int32{
		"INVALID_ENUM_VALUE_IpType": 0,
		"IpType_SOURCE":             1,
		"IpType_DESTINATION":        2,
	}
)

func (x Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType) Enum() *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType {
	p := new(Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[236].Descriptor()
}

func (Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[236]
}

func (x Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType.Descriptor instead.
func (Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 20, 0, 0}
}

type Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction int32

const (
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction_INBOUND  Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction = 0
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction_OUTBOUND Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction.
var (
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction) Enum() *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction {
	p := new(Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[237].Descriptor()
}

func (Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[237]
}

func (x Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 20, 0, 1}
}

type Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction int32

const (
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction_INBOUND  Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction = 0
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction_OUTBOUND Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction.
var (
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction) Enum() *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction {
	p := new(Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[238].Descriptor()
}

func (Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[238]
}

func (x Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 21, 0, 0}
}

type Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_BE    Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_AF1   Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_AF2   Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_AF3   Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_AF4   Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_EF    Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_CS6   Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_CS7   Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 7
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_TOTAL Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 8
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_COS0  Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 9
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_COS1  Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 10
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_COS2  Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 11
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_COS3  Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass = 12
)

// Enum value maps for Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_name = map[int32]string{
		0:  "ServiceClass_BE",
		1:  "ServiceClass_AF1",
		2:  "ServiceClass_AF2",
		3:  "ServiceClass_AF3",
		4:  "ServiceClass_AF4",
		5:  "ServiceClass_EF",
		6:  "ServiceClass_CS6",
		7:  "ServiceClass_CS7",
		8:  "ServiceClass_TOTAL",
		9:  "ServiceClass_COS0",
		10: "ServiceClass_COS1",
		11: "ServiceClass_COS2",
		12: "ServiceClass_COS3",
	}
	Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
		"ServiceClass_COS0":  9,
		"ServiceClass_COS1":  10,
		"ServiceClass_COS2":  11,
		"ServiceClass_COS3":  12,
	}
)

func (x Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[239].Descriptor()
}

func (Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[239]
}

func (x Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 21, 0, 1}
}

type Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction int32

const (
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction_INBOUND  Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction = 0
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction_OUTBOUND Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction.
var (
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction) Enum() *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction {
	p := new(Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[240].Descriptor()
}

func (Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[240]
}

func (x Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 22, 0, 0}
}

type Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass int32

const (
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_BE    Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 0
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_AF1   Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 1
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_AF2   Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 2
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_AF3   Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 3
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_AF4   Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 4
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_EF    Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 5
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_CS6   Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 6
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_CS7   Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 7
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_TOTAL Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass = 8
)

// Enum value maps for Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass.
var (
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
		8: "ServiceClass_TOTAL",
	}
	Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
	}
)

func (x Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass) Enum() *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass {
	p := new(Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[241].Descriptor()
}

func (Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[241]
}

func (x Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 22, 0, 1}
}

type Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass int32

const (
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_BE    Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 0
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_AF1   Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 1
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_AF2   Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 2
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_AF3   Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 3
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_AF4   Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 4
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_EF    Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 5
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_CS6   Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 6
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_CS7   Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 7
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_TOTAL Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass = 8
)

// Enum value maps for Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass.
var (
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
		8: "ServiceClass_TOTAL",
	}
	Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":    0,
		"ServiceClass_AF1":   1,
		"ServiceClass_AF2":   2,
		"ServiceClass_AF3":   3,
		"ServiceClass_AF4":   4,
		"ServiceClass_EF":    5,
		"ServiceClass_CS6":   6,
		"ServiceClass_CS7":   7,
		"ServiceClass_TOTAL": 8,
	}
)

func (x Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass) Enum() *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass {
	p := new(Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[242].Descriptor()
}

func (Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[242]
}

func (x Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 23, 0, 0}
}

type Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType int32

const (
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_INVALID_ENUM_VALUE_RuleType Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType = 0
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_ACLV4              Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType = 1
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_ACLV6              Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType = 2
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_L2ACL              Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType = 3
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_MPLS               Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType = 4
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_UCLV4              Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType = 5
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_UCLV6              Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType = 6
)

// Enum value maps for Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType.
var (
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_RuleType",
		1: "RuleType_ACLV4",
		2: "RuleType_ACLV6",
		3: "RuleType_L2ACL",
		4: "RuleType_MPLS",
		5: "RuleType_UCLV4",
		6: "RuleType_UCLV6",
	}
	Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType_value = map[string]int32{
		"INVALID_ENUM_VALUE_RuleType": 0,
		"RuleType_ACLV4":              1,
		"RuleType_ACLV6":              2,
		"RuleType_L2ACL":              3,
		"RuleType_MPLS":               4,
		"RuleType_UCLV4":              5,
		"RuleType_UCLV6":              6,
	}
)

func (x Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType) Enum() *Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType {
	p := new(Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[243].Descriptor()
}

func (Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[243]
}

func (x Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType.Descriptor instead.
func (Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 25, 0, 0}
}

type Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction int32

const (
	Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_INVALID_ENUM_VALUE_Direction Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction = 0
	Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction_OUTBOUND           Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction.
var (
	Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction) Enum() *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction {
	p := new(Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[244].Descriptor()
}

func (Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[244]
}

func (x Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction.Descriptor instead.
func (Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 26, 0, 0}
}

type Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction int32

const (
	Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction_INBOUND  Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction = 0
	Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction_OUTBOUND Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction.
var (
	Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction) Enum() *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction {
	p := new(Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[245].Descriptor()
}

func (Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[245]
}

func (x Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 27, 0, 0}
}

type Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction int32

const (
	Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction_INBOUND  Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction = 0
	Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction_OUTBOUND Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction.
var (
	Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction) Enum() *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction {
	p := new(Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[246].Descriptor()
}

func (Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[246]
}

func (x Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 28, 0, 0}
}

type Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction int32

const (
	Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction_INBOUND  Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction = 0
	Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction_OUTBOUND Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction.
var (
	Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction) Enum() *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction {
	p := new(Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[247].Descriptor()
}

func (Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[247]
}

func (x Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction.Descriptor instead.
func (Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 29, 0, 0}
}

type Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction int32

const (
	Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_INVALID_ENUM_VALUE_Direction Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction = 0
	Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction_OUTBOUND           Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction.
var (
	Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_OUTBOUND":           1,
	}
)

func (x Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction) Enum() *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction {
	p := new(Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[248].Descriptor()
}

func (Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[248]
}

func (x Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction.Descriptor instead.
func (Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 31, 0, 0}
}

type Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction int32

const (
	Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction_INBOUND  Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction = 0
	Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction_OUTBOUND Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction.
var (
	Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction) Enum() *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction {
	p := new(Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[249].Descriptor()
}

func (Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[249]
}

func (x Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction.Descriptor instead.
func (Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 32, 0, 0}
}

type Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction int32

const (
	Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction_INBOUND  Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction = 0
	Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction_OUTBOUND Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction.
var (
	Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction) Enum() *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction {
	p := new(Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[250].Descriptor()
}

func (Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[250]
}

func (x Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction.Descriptor instead.
func (Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 33, 0, 0}
}

type Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction int32

const (
	Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction_INBOUND  Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction = 0
	Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction_OUTBOUND Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction = 1
)

// Enum value maps for Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction.
var (
	Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction) Enum() *Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction {
	p := new(Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction)
	*p = x
	return p
}

func (x Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[251].Descriptor()
}

func (Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[251]
}

func (x Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction.Descriptor instead.
func (Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 34, 0, 0}
}

type Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType int32

const (
	Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType_BE           Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType = 0
	Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType_AF1X_AF2     Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType = 1
	Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType_AF3X_AF4     Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType = 2
	Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType_EFX_CS6X_CS7 Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType = 3
)

// Enum value maps for Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType.
var (
	Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType_name = map[int32]string{
		0: "CosValueType_BE",
		1: "CosValueType_AF1X_AF2",
		2: "CosValueType_AF3X_AF4",
		3: "CosValueType_EFX_CS6X_CS7",
	}
	Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType_value = map[string]int32{
		"CosValueType_BE":           0,
		"CosValueType_AF1X_AF2":     1,
		"CosValueType_AF3X_AF4":     2,
		"CosValueType_EFX_CS6X_CS7": 3,
	}
)

func (x Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType) Enum() *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType {
	p := new(Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[252].Descriptor()
}

func (Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[252]
}

func (x Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType.Descriptor instead.
func (Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 35, 0, 0}
}

type Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType int32

const (
	Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType_BE           Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType = 0
	Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType_AF1X_AF2     Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType = 1
	Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType_AF3X_AF4     Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType = 2
	Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType_EFX_CS6X_CS7 Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType = 3
)

// Enum value maps for Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType.
var (
	Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType_name = map[int32]string{
		0: "CosValueType_BE",
		1: "CosValueType_AF1X_AF2",
		2: "CosValueType_AF3X_AF4",
		3: "CosValueType_EFX_CS6X_CS7",
	}
	Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType_value = map[string]int32{
		"CosValueType_BE":           0,
		"CosValueType_AF1X_AF2":     1,
		"CosValueType_AF3X_AF4":     2,
		"CosValueType_EFX_CS6X_CS7": 3,
	}
)

func (x Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType) Enum() *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType {
	p := new(Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType)
	*p = x
	return p
}

func (x Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[253].Descriptor()
}

func (Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[253]
}

func (x Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType.Descriptor instead.
func (Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 36, 0, 0}
}

type Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass int32

const (
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_BE  Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 0
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_AF1 Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 1
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_AF2 Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 2
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_AF3 Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 3
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_AF4 Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 4
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_EF  Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 5
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_CS6 Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 6
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_CS7 Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass = 7
)

// Enum value maps for Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass.
var (
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_name = map[int32]string{
		0: "ServiceClass_BE",
		1: "ServiceClass_AF1",
		2: "ServiceClass_AF2",
		3: "ServiceClass_AF3",
		4: "ServiceClass_AF4",
		5: "ServiceClass_EF",
		6: "ServiceClass_CS6",
		7: "ServiceClass_CS7",
	}
	Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_value = map[string]int32{
		"ServiceClass_BE":  0,
		"ServiceClass_AF1": 1,
		"ServiceClass_AF2": 2,
		"ServiceClass_AF3": 3,
		"ServiceClass_AF4": 4,
		"ServiceClass_EF":  5,
		"ServiceClass_CS6": 6,
		"ServiceClass_CS7": 7,
	}
)

func (x Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass) Enum() *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass {
	p := new(Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass)
	*p = x
	return p
}

func (x Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[254].Descriptor()
}

func (Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[254]
}

func (x Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass.Descriptor instead.
func (Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 37, 0, 0}
}

type Qos_Qppb_QueryPolicys_QueryPolicy_Direction int32

const (
	Qos_Qppb_QueryPolicys_QueryPolicy_Direction_INBOUND  Qos_Qppb_QueryPolicys_QueryPolicy_Direction = 0
	Qos_Qppb_QueryPolicys_QueryPolicy_Direction_OUTBOUND Qos_Qppb_QueryPolicys_QueryPolicy_Direction = 1
)

// Enum value maps for Qos_Qppb_QueryPolicys_QueryPolicy_Direction.
var (
	Qos_Qppb_QueryPolicys_QueryPolicy_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Qos_Qppb_QueryPolicys_QueryPolicy_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Qos_Qppb_QueryPolicys_QueryPolicy_Direction) Enum() *Qos_Qppb_QueryPolicys_QueryPolicy_Direction {
	p := new(Qos_Qppb_QueryPolicys_QueryPolicy_Direction)
	*p = x
	return p
}

func (x Qos_Qppb_QueryPolicys_QueryPolicy_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Qppb_QueryPolicys_QueryPolicy_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[255].Descriptor()
}

func (Qos_Qppb_QueryPolicys_QueryPolicy_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[255]
}

func (x Qos_Qppb_QueryPolicys_QueryPolicy_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Qppb_QueryPolicys_QueryPolicy_Direction.Descriptor instead.
func (Qos_Qppb_QueryPolicys_QueryPolicy_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 1, 0, 0}
}

type Qos_Qppb_QueryPolicys_QueryPolicy_State int32

const (
	Qos_Qppb_QueryPolicys_QueryPolicy_State_ACTIVE    Qos_Qppb_QueryPolicys_QueryPolicy_State = 0
	Qos_Qppb_QueryPolicys_QueryPolicy_State_ACTIVEX_P Qos_Qppb_QueryPolicys_QueryPolicy_State = 1
	Qos_Qppb_QueryPolicys_QueryPolicy_State_INACTIVE  Qos_Qppb_QueryPolicys_QueryPolicy_State = 2
)

// Enum value maps for Qos_Qppb_QueryPolicys_QueryPolicy_State.
var (
	Qos_Qppb_QueryPolicys_QueryPolicy_State_name = map[int32]string{
		0: "State_ACTIVE",
		1: "State_ACTIVEX_P",
		2: "State_INACTIVE",
	}
	Qos_Qppb_QueryPolicys_QueryPolicy_State_value = map[string]int32{
		"State_ACTIVE":    0,
		"State_ACTIVEX_P": 1,
		"State_INACTIVE":  2,
	}
)

func (x Qos_Qppb_QueryPolicys_QueryPolicy_State) Enum() *Qos_Qppb_QueryPolicys_QueryPolicy_State {
	p := new(Qos_Qppb_QueryPolicys_QueryPolicy_State)
	*p = x
	return p
}

func (x Qos_Qppb_QueryPolicys_QueryPolicy_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Qppb_QueryPolicys_QueryPolicy_State) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[256].Descriptor()
}

func (Qos_Qppb_QueryPolicys_QueryPolicy_State) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[256]
}

func (x Qos_Qppb_QueryPolicys_QueryPolicy_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Qppb_QueryPolicys_QueryPolicy_State.Descriptor instead.
func (Qos_Qppb_QueryPolicys_QueryPolicy_State) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 1, 0, 1}
}

type Qos_Qppb_QueryStatistics_QueryStatistic_Direction int32

const (
	Qos_Qppb_QueryStatistics_QueryStatistic_INVALID_ENUM_VALUE_Direction Qos_Qppb_QueryStatistics_QueryStatistic_Direction = 0
	Qos_Qppb_QueryStatistics_QueryStatistic_Direction_INBOUND            Qos_Qppb_QueryStatistics_QueryStatistic_Direction = 2
	Qos_Qppb_QueryStatistics_QueryStatistic_Direction_OUTBOUND           Qos_Qppb_QueryStatistics_QueryStatistic_Direction = 3
)

// Enum value maps for Qos_Qppb_QueryStatistics_QueryStatistic_Direction.
var (
	Qos_Qppb_QueryStatistics_QueryStatistic_Direction_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Direction",
		2: "Direction_INBOUND",
		3: "Direction_OUTBOUND",
	}
	Qos_Qppb_QueryStatistics_QueryStatistic_Direction_value = map[string]int32{
		"INVALID_ENUM_VALUE_Direction": 0,
		"Direction_INBOUND":            2,
		"Direction_OUTBOUND":           3,
	}
)

func (x Qos_Qppb_QueryStatistics_QueryStatistic_Direction) Enum() *Qos_Qppb_QueryStatistics_QueryStatistic_Direction {
	p := new(Qos_Qppb_QueryStatistics_QueryStatistic_Direction)
	*p = x
	return p
}

func (x Qos_Qppb_QueryStatistics_QueryStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos_Qppb_QueryStatistics_QueryStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_qos_proto_enumTypes[257].Descriptor()
}

func (Qos_Qppb_QueryStatistics_QueryStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_qos_proto_enumTypes[257]
}

func (x Qos_Qppb_QueryStatistics_QueryStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos_Qppb_QueryStatistics_QueryStatistic_Direction.Descriptor instead.
func (Qos_Qppb_QueryStatistics_QueryStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 2, 0, 0}
}

type Qos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WredTemplate           *Qos_WredTemplate           `protobuf:"bytes,1,opt,name=wred_template,json=wred-template,proto3" json:"wred_template,omitempty"`
	QueueSchedulerTemplate *Qos_QueueSchedulerTemplate `protobuf:"bytes,2,opt,name=queue_scheduler_template,json=queue-scheduler-template,proto3" json:"queue_scheduler_template,omitempty"`
	ClassifierTemplate     *Qos_ClassifierTemplate     `protobuf:"bytes,3,opt,name=classifier_template,json=classifier-template,proto3" json:"classifier_template,omitempty"`
	GlobalConfig           *Qos_GlobalConfig           `protobuf:"bytes,4,opt,name=global_config,json=global-config,proto3" json:"global_config,omitempty"`
	GlobalQuery            *Qos_GlobalQuery            `protobuf:"bytes,5,opt,name=global_query,json=global-query,proto3" json:"global_query,omitempty"`
	Qppb                   *Qos_Qppb                   `protobuf:"bytes,6,opt,name=qppb,proto3" json:"qppb,omitempty"`
}

func (x *Qos) Reset() {
	*x = Qos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos) ProtoMessage() {}

func (x *Qos) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos.ProtoReflect.Descriptor instead.
func (*Qos) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0}
}

func (x *Qos) GetWredTemplate() *Qos_WredTemplate {
	if x != nil {
		return x.WredTemplate
	}
	return nil
}

func (x *Qos) GetQueueSchedulerTemplate() *Qos_QueueSchedulerTemplate {
	if x != nil {
		return x.QueueSchedulerTemplate
	}
	return nil
}

func (x *Qos) GetClassifierTemplate() *Qos_ClassifierTemplate {
	if x != nil {
		return x.ClassifierTemplate
	}
	return nil
}

func (x *Qos) GetGlobalConfig() *Qos_GlobalConfig {
	if x != nil {
		return x.GlobalConfig
	}
	return nil
}

func (x *Qos) GetGlobalQuery() *Qos_GlobalQuery {
	if x != nil {
		return x.GlobalQuery
	}
	return nil
}

func (x *Qos) GetQppb() *Qos_Qppb {
	if x != nil {
		return x.Qppb
	}
	return nil
}

type Qos_WredTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowWreds *Qos_WredTemplate_FlowWreds `protobuf:"bytes,1,opt,name=flow_wreds,json=flow-wreds,proto3" json:"flow_wreds,omitempty"`
	PortWreds *Qos_WredTemplate_PortWreds `protobuf:"bytes,2,opt,name=port_wreds,json=port-wreds,proto3" json:"port_wreds,omitempty"`
	Wreds     *Qos_WredTemplate_Wreds     `protobuf:"bytes,3,opt,name=wreds,proto3" json:"wreds,omitempty"`
}

func (x *Qos_WredTemplate) Reset() {
	*x = Qos_WredTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate) ProtoMessage() {}

func (x *Qos_WredTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Qos_WredTemplate) GetFlowWreds() *Qos_WredTemplate_FlowWreds {
	if x != nil {
		return x.FlowWreds
	}
	return nil
}

func (x *Qos_WredTemplate) GetPortWreds() *Qos_WredTemplate_PortWreds {
	if x != nil {
		return x.PortWreds
	}
	return nil
}

func (x *Qos_WredTemplate) GetWreds() *Qos_WredTemplate_Wreds {
	if x != nil {
		return x.Wreds
	}
	return nil
}

type Qos_QueueSchedulerTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueues         *Qos_QueueSchedulerTemplate_FlowQueues         `protobuf:"bytes,1,opt,name=flow_queues,json=flow-queues,proto3" json:"flow_queues,omitempty"`
	Profiles           *Qos_QueueSchedulerTemplate_Profiles           `protobuf:"bytes,2,opt,name=profiles,proto3" json:"profiles,omitempty"`
	FlowMappings       *Qos_QueueSchedulerTemplate_FlowMappings       `protobuf:"bytes,3,opt,name=flow_mappings,json=flow-mappings,proto3" json:"flow_mappings,omitempty"`
	UserGroupQueues    *Qos_QueueSchedulerTemplate_UserGroupQueues    `protobuf:"bytes,4,opt,name=user_group_queues,json=user-group-queues,proto3" json:"user_group_queues,omitempty"`
	ServiceTemplates   *Qos_QueueSchedulerTemplate_ServiceTemplates   `protobuf:"bytes,5,opt,name=service_templates,json=service-templates,proto3" json:"service_templates,omitempty"`
	Queue_4CosMappings *Qos_QueueSchedulerTemplate_Queue4CosMappings  `protobuf:"bytes,6,opt,name=queue_4cos_mappings,json=queue-4cos-mappings,proto3" json:"queue_4cos_mappings,omitempty"`
	PortQueueTemplates *Qos_QueueSchedulerTemplate_PortQueueTemplates `protobuf:"bytes,7,opt,name=port_queue_templates,json=port-queue-templates,proto3" json:"port_queue_templates,omitempty"`
	ChannelProfiles    *Qos_QueueSchedulerTemplate_ChannelProfiles    `protobuf:"bytes,8,opt,name=channel_profiles,json=channel-profiles,proto3" json:"channel_profiles,omitempty"`
	BufferPolicys      *Qos_QueueSchedulerTemplate_BufferPolicys      `protobuf:"bytes,9,opt,name=buffer_policys,json=buffer-policys,proto3" json:"buffer_policys,omitempty"`
	QosQueueTemplates  *Qos_QueueSchedulerTemplate_QosQueueTemplates  `protobuf:"bytes,10,opt,name=qos_queue_templates,json=qos-queue-templates,proto3" json:"qos_queue_templates,omitempty"`
	SubPortQueues      *Qos_QueueSchedulerTemplate_SubPortQueues      `protobuf:"bytes,11,opt,name=sub_port_queues,json=sub-port-queues,proto3" json:"sub_port_queues,omitempty"`
	PriorityTemplates  *Qos_QueueSchedulerTemplate_PriorityTemplates  `protobuf:"bytes,12,opt,name=priority_templates,json=priority-templates,proto3" json:"priority_templates,omitempty"`
	UserQueueTemplates *Qos_QueueSchedulerTemplate_UserQueueTemplates `protobuf:"bytes,13,opt,name=user_queue_templates,json=user-queue-templates,proto3" json:"user_queue_templates,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate) Reset() {
	*x = Qos_QueueSchedulerTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Qos_QueueSchedulerTemplate) GetFlowQueues() *Qos_QueueSchedulerTemplate_FlowQueues {
	if x != nil {
		return x.FlowQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetProfiles() *Qos_QueueSchedulerTemplate_Profiles {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetFlowMappings() *Qos_QueueSchedulerTemplate_FlowMappings {
	if x != nil {
		return x.FlowMappings
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetUserGroupQueues() *Qos_QueueSchedulerTemplate_UserGroupQueues {
	if x != nil {
		return x.UserGroupQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetServiceTemplates() *Qos_QueueSchedulerTemplate_ServiceTemplates {
	if x != nil {
		return x.ServiceTemplates
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetQueue_4CosMappings() *Qos_QueueSchedulerTemplate_Queue4CosMappings {
	if x != nil {
		return x.Queue_4CosMappings
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetPortQueueTemplates() *Qos_QueueSchedulerTemplate_PortQueueTemplates {
	if x != nil {
		return x.PortQueueTemplates
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetChannelProfiles() *Qos_QueueSchedulerTemplate_ChannelProfiles {
	if x != nil {
		return x.ChannelProfiles
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetBufferPolicys() *Qos_QueueSchedulerTemplate_BufferPolicys {
	if x != nil {
		return x.BufferPolicys
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetQosQueueTemplates() *Qos_QueueSchedulerTemplate_QosQueueTemplates {
	if x != nil {
		return x.QosQueueTemplates
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetSubPortQueues() *Qos_QueueSchedulerTemplate_SubPortQueues {
	if x != nil {
		return x.SubPortQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetPriorityTemplates() *Qos_QueueSchedulerTemplate_PriorityTemplates {
	if x != nil {
		return x.PriorityTemplates
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate) GetUserQueueTemplates() *Qos_QueueSchedulerTemplate_UserQueueTemplates {
	if x != nil {
		return x.UserQueueTemplates
	}
	return nil
}

type Qos_ClassifierTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffservDomains    *Qos_ClassifierTemplate_DiffservDomains    `protobuf:"bytes,1,opt,name=diffserv_domains,json=diffserv-domains,proto3" json:"diffserv_domains,omitempty"`
	TrafficClassifiers *Qos_ClassifierTemplate_TrafficClassifiers `protobuf:"bytes,2,opt,name=traffic_classifiers,json=traffic-classifiers,proto3" json:"traffic_classifiers,omitempty"`
	TrafficBehaviors   *Qos_ClassifierTemplate_TrafficBehaviors   `protobuf:"bytes,3,opt,name=traffic_behaviors,json=traffic-behaviors,proto3" json:"traffic_behaviors,omitempty"`
	TrafficPolicys     *Qos_ClassifierTemplate_TrafficPolicys     `protobuf:"bytes,4,opt,name=traffic_policys,json=traffic-policys,proto3" json:"traffic_policys,omitempty"`
}

func (x *Qos_ClassifierTemplate) Reset() {
	*x = Qos_ClassifierTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate) ProtoMessage() {}

func (x *Qos_ClassifierTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Qos_ClassifierTemplate) GetDiffservDomains() *Qos_ClassifierTemplate_DiffservDomains {
	if x != nil {
		return x.DiffservDomains
	}
	return nil
}

func (x *Qos_ClassifierTemplate) GetTrafficClassifiers() *Qos_ClassifierTemplate_TrafficClassifiers {
	if x != nil {
		return x.TrafficClassifiers
	}
	return nil
}

func (x *Qos_ClassifierTemplate) GetTrafficBehaviors() *Qos_ClassifierTemplate_TrafficBehaviors {
	if x != nil {
		return x.TrafficBehaviors
	}
	return nil
}

func (x *Qos_ClassifierTemplate) GetTrafficPolicys() *Qos_ClassifierTemplate_TrafficPolicys {
	if x != nil {
		return x.TrafficPolicys
	}
	return nil
}

type Qos_GlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalPolicys                      *Qos_GlobalConfig_GlobalPolicys                      `protobuf:"bytes,1,opt,name=global_policys,json=global-policys,proto3" json:"global_policys,omitempty"`
	TrafficPolicyMatchs                *Qos_GlobalConfig_TrafficPolicyMatchs                `protobuf:"bytes,2,opt,name=traffic_policy_matchs,json=traffic-policy-matchs,proto3" json:"traffic_policy_matchs,omitempty"`
	AclLog                             *Qos_GlobalConfig_AclLog                             `protobuf:"bytes,3,opt,name=acl_log,json=acl-log,proto3" json:"acl_log,omitempty"`
	GlobalSetQueueStat                 *Qos_GlobalConfig_GlobalSetQueueStat                 `protobuf:"bytes,4,opt,name=global_set_queue_stat,json=global-set-queue-stat,proto3" json:"global_set_queue_stat,omitempty"`
	BufferPolicyApplys                 *Qos_GlobalConfig_BufferPolicyApplys                 `protobuf:"bytes,5,opt,name=buffer_policy_applys,json=buffer-policy-applys,proto3" json:"buffer_policy_applys,omitempty"`
	QueueWreds                         *Qos_GlobalConfig_QueueWreds                         `protobuf:"bytes,6,opt,name=queue_wreds,json=queue-wreds,proto3" json:"queue_wreds,omitempty"`
	LowLatencyEnables                  *Qos_GlobalConfig_LowLatencyEnables                  `protobuf:"bytes,7,opt,name=low_latency_enables,json=low-latency-enables,proto3" json:"low_latency_enables,omitempty"`
	SchedulingModes                    *Qos_GlobalConfig_SchedulingModes                    `protobuf:"bytes,8,opt,name=scheduling_modes,json=scheduling-modes,proto3" json:"scheduling_modes,omitempty"`
	ConvergenceSchedule                *Qos_GlobalConfig_ConvergenceSchedule                `protobuf:"bytes,9,opt,name=convergence_schedule,json=convergence-schedule,proto3" json:"convergence_schedule,omitempty"`
	PortConvergenceSchedule            *Qos_GlobalConfig_PortConvergenceSchedule            `protobuf:"bytes,10,opt,name=port_convergence_schedule,json=port-convergence-schedule,proto3" json:"port_convergence_schedule,omitempty"`
	TrafficPolicyUntag                 *Qos_GlobalConfig_TrafficPolicyUntag                 `protobuf:"bytes,11,opt,name=traffic_policy_untag,json=traffic-policy-untag,proto3" json:"traffic_policy_untag,omitempty"`
	HostPackets                        *Qos_GlobalConfig_HostPackets                        `protobuf:"bytes,12,opt,name=host_packets,json=host-packets,proto3" json:"host_packets,omitempty"`
	ExpPhbDisable                      *Qos_GlobalConfig_ExpPhbDisable                      `protobuf:"bytes,13,opt,name=exp_phb_disable,json=exp-phb-disable,proto3" json:"exp_phb_disable,omitempty"`
	Packs                              *Qos_GlobalConfig_Packs                              `protobuf:"bytes,14,opt,name=packs,proto3" json:"packs,omitempty"`
	PacketBlockThresholdAll            *Qos_GlobalConfig_PacketBlockThresholdAll            `protobuf:"bytes,15,opt,name=packet_block_threshold_all,json=packet-block-threshold-all,proto3" json:"packet_block_threshold_all,omitempty"`
	BurstSizes                         *Qos_GlobalConfig_BurstSizes                         `protobuf:"bytes,16,opt,name=burst_sizes,json=burst-sizes,proto3" json:"burst_sizes,omitempty"`
	TmScheduleTrafficStatisticsEnables *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables `protobuf:"bytes,17,opt,name=tm_schedule_traffic_statistics_enables,json=tm-schedule-traffic-statistics-enables,proto3" json:"tm_schedule_traffic_statistics_enables,omitempty"`
	RedbackPacketAdjustment            *Qos_GlobalConfig_RedbackPacketAdjustment            `protobuf:"bytes,18,opt,name=redback_packet_adjustment,json=redback-packet-adjustment,proto3" json:"redback_packet_adjustment,omitempty"`
	RedbackPacketAdjustmentSlots       *Qos_GlobalConfig_RedbackPacketAdjustmentSlots       `protobuf:"bytes,19,opt,name=redback_packet_adjustment_slots,json=redback-packet-adjustment-slots,proto3" json:"redback_packet_adjustment_slots,omitempty"`
	LinkLayerExcludes                  *Qos_GlobalConfig_LinkLayerExcludes                  `protobuf:"bytes,20,opt,name=link_layer_excludes,json=link-layer-excludes,proto3" json:"link_layer_excludes,omitempty"`
	LinkLayerExcludeSlots              *Qos_GlobalConfig_LinkLayerExcludeSlots              `protobuf:"bytes,21,opt,name=link_layer_exclude_slots,json=link-layer-exclude-slots,proto3" json:"link_layer_exclude_slots,omitempty"`
	L2TpLayerExclude                   *Qos_GlobalConfig_L2TpLayerExclude                   `protobuf:"bytes,22,opt,name=l2tp_layer_exclude,json=l2tp-layer-exclude,proto3" json:"l2tp_layer_exclude,omitempty"`
	L2TpLayerExcludeSlots              *Qos_GlobalConfig_L2TpLayerExcludeSlots              `protobuf:"bytes,23,opt,name=l2tp_layer_exclude_slots,json=l2tp-layer-exclude-slots,proto3" json:"l2tp_layer_exclude_slots,omitempty"`
	Mirror                             *Qos_GlobalConfig_Mirror                             `protobuf:"bytes,24,opt,name=mirror,proto3" json:"mirror,omitempty"`
	Pbr                                *Qos_GlobalConfig_Pbr                                `protobuf:"bytes,25,opt,name=pbr,proto3" json:"pbr,omitempty"`
	LocalIdEnable                      *Qos_GlobalConfig_LocalIdEnable                      `protobuf:"bytes,26,opt,name=local_id_enable,json=local-id-enable,proto3" json:"local_id_enable,omitempty"`
}

func (x *Qos_GlobalConfig) Reset() {
	*x = Qos_GlobalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig) ProtoMessage() {}

func (x *Qos_GlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Qos_GlobalConfig) GetGlobalPolicys() *Qos_GlobalConfig_GlobalPolicys {
	if x != nil {
		return x.GlobalPolicys
	}
	return nil
}

func (x *Qos_GlobalConfig) GetTrafficPolicyMatchs() *Qos_GlobalConfig_TrafficPolicyMatchs {
	if x != nil {
		return x.TrafficPolicyMatchs
	}
	return nil
}

func (x *Qos_GlobalConfig) GetAclLog() *Qos_GlobalConfig_AclLog {
	if x != nil {
		return x.AclLog
	}
	return nil
}

func (x *Qos_GlobalConfig) GetGlobalSetQueueStat() *Qos_GlobalConfig_GlobalSetQueueStat {
	if x != nil {
		return x.GlobalSetQueueStat
	}
	return nil
}

func (x *Qos_GlobalConfig) GetBufferPolicyApplys() *Qos_GlobalConfig_BufferPolicyApplys {
	if x != nil {
		return x.BufferPolicyApplys
	}
	return nil
}

func (x *Qos_GlobalConfig) GetQueueWreds() *Qos_GlobalConfig_QueueWreds {
	if x != nil {
		return x.QueueWreds
	}
	return nil
}

func (x *Qos_GlobalConfig) GetLowLatencyEnables() *Qos_GlobalConfig_LowLatencyEnables {
	if x != nil {
		return x.LowLatencyEnables
	}
	return nil
}

func (x *Qos_GlobalConfig) GetSchedulingModes() *Qos_GlobalConfig_SchedulingModes {
	if x != nil {
		return x.SchedulingModes
	}
	return nil
}

func (x *Qos_GlobalConfig) GetConvergenceSchedule() *Qos_GlobalConfig_ConvergenceSchedule {
	if x != nil {
		return x.ConvergenceSchedule
	}
	return nil
}

func (x *Qos_GlobalConfig) GetPortConvergenceSchedule() *Qos_GlobalConfig_PortConvergenceSchedule {
	if x != nil {
		return x.PortConvergenceSchedule
	}
	return nil
}

func (x *Qos_GlobalConfig) GetTrafficPolicyUntag() *Qos_GlobalConfig_TrafficPolicyUntag {
	if x != nil {
		return x.TrafficPolicyUntag
	}
	return nil
}

func (x *Qos_GlobalConfig) GetHostPackets() *Qos_GlobalConfig_HostPackets {
	if x != nil {
		return x.HostPackets
	}
	return nil
}

func (x *Qos_GlobalConfig) GetExpPhbDisable() *Qos_GlobalConfig_ExpPhbDisable {
	if x != nil {
		return x.ExpPhbDisable
	}
	return nil
}

func (x *Qos_GlobalConfig) GetPacks() *Qos_GlobalConfig_Packs {
	if x != nil {
		return x.Packs
	}
	return nil
}

func (x *Qos_GlobalConfig) GetPacketBlockThresholdAll() *Qos_GlobalConfig_PacketBlockThresholdAll {
	if x != nil {
		return x.PacketBlockThresholdAll
	}
	return nil
}

func (x *Qos_GlobalConfig) GetBurstSizes() *Qos_GlobalConfig_BurstSizes {
	if x != nil {
		return x.BurstSizes
	}
	return nil
}

func (x *Qos_GlobalConfig) GetTmScheduleTrafficStatisticsEnables() *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables {
	if x != nil {
		return x.TmScheduleTrafficStatisticsEnables
	}
	return nil
}

func (x *Qos_GlobalConfig) GetRedbackPacketAdjustment() *Qos_GlobalConfig_RedbackPacketAdjustment {
	if x != nil {
		return x.RedbackPacketAdjustment
	}
	return nil
}

func (x *Qos_GlobalConfig) GetRedbackPacketAdjustmentSlots() *Qos_GlobalConfig_RedbackPacketAdjustmentSlots {
	if x != nil {
		return x.RedbackPacketAdjustmentSlots
	}
	return nil
}

func (x *Qos_GlobalConfig) GetLinkLayerExcludes() *Qos_GlobalConfig_LinkLayerExcludes {
	if x != nil {
		return x.LinkLayerExcludes
	}
	return nil
}

func (x *Qos_GlobalConfig) GetLinkLayerExcludeSlots() *Qos_GlobalConfig_LinkLayerExcludeSlots {
	if x != nil {
		return x.LinkLayerExcludeSlots
	}
	return nil
}

func (x *Qos_GlobalConfig) GetL2TpLayerExclude() *Qos_GlobalConfig_L2TpLayerExclude {
	if x != nil {
		return x.L2TpLayerExclude
	}
	return nil
}

func (x *Qos_GlobalConfig) GetL2TpLayerExcludeSlots() *Qos_GlobalConfig_L2TpLayerExcludeSlots {
	if x != nil {
		return x.L2TpLayerExcludeSlots
	}
	return nil
}

func (x *Qos_GlobalConfig) GetMirror() *Qos_GlobalConfig_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *Qos_GlobalConfig) GetPbr() *Qos_GlobalConfig_Pbr {
	if x != nil {
		return x.Pbr
	}
	return nil
}

func (x *Qos_GlobalConfig) GetLocalIdEnable() *Qos_GlobalConfig_LocalIdEnable {
	if x != nil {
		return x.LocalIdEnable
	}
	return nil
}

type Qos_GlobalQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultQueueStatisticss             *Qos_GlobalQuery_DefaultQueueStatisticss             `protobuf:"bytes,1,opt,name=default_queue_statisticss,json=default-queue-statisticss,proto3" json:"default_queue_statisticss,omitempty"`
	AllQueueStatisticss                 *Qos_GlobalQuery_AllQueueStatisticss                 `protobuf:"bytes,2,opt,name=all_queue_statisticss,json=all-queue-statisticss,proto3" json:"all_queue_statisticss,omitempty"`
	ChannelQueueStatisticss             *Qos_GlobalQuery_ChannelQueueStatisticss             `protobuf:"bytes,3,opt,name=channel_queue_statisticss,json=channel-queue-statisticss,proto3" json:"channel_queue_statisticss,omitempty"`
	UserInformations                    *Qos_GlobalQuery_UserInformations                    `protobuf:"bytes,4,opt,name=user_informations,json=user-informations,proto3" json:"user_informations,omitempty"`
	InterfaceTrafficPolicyStatisticss   *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss   `protobuf:"bytes,5,opt,name=interface_traffic_policy_statisticss,json=interface-traffic-policy-statisticss,proto3" json:"interface_traffic_policy_statisticss,omitempty"`
	CarResources                        *Qos_GlobalQuery_CarResources                        `protobuf:"bytes,6,opt,name=car_resources,json=car-resources,proto3" json:"car_resources,omitempty"`
	TrafficBufferUses                   *Qos_GlobalQuery_TrafficBufferUses                   `protobuf:"bytes,7,opt,name=traffic_buffer_uses,json=traffic-buffer-uses,proto3" json:"traffic_buffer_uses,omitempty"`
	TrafficPolicyApplicationResources   *Qos_GlobalQuery_TrafficPolicyApplicationResources   `protobuf:"bytes,8,opt,name=traffic_policy_application_resources,json=traffic-policy-application-resources,proto3" json:"traffic_policy_application_resources,omitempty"`
	UserGroupQueueResources             *Qos_GlobalQuery_UserGroupQueueResources             `protobuf:"bytes,9,opt,name=user_group_queue_resources,json=user-group-queue-resources,proto3" json:"user_group_queue_resources,omitempty"`
	InterfaceProfileStatistics          *Qos_GlobalQuery_InterfaceProfileStatistics          `protobuf:"bytes,10,opt,name=interface_profile_statistics,json=interface-profile-statistics,proto3" json:"interface_profile_statistics,omitempty"`
	MplsTeStatisticss                   *Qos_GlobalQuery_MplsTeStatisticss                   `protobuf:"bytes,11,opt,name=mpls_te_statisticss,json=mpls-te-statisticss,proto3" json:"mpls_te_statisticss,omitempty"`
	TrafficBufferUsages                 *Qos_GlobalQuery_TrafficBufferUsages                 `protobuf:"bytes,12,opt,name=traffic_buffer_usages,json=traffic-buffer-usages,proto3" json:"traffic_buffer_usages,omitempty"`
	QueueStatisticss                    *Qos_GlobalQuery_QueueStatisticss                    `protobuf:"bytes,13,opt,name=queue_statisticss,json=queue-statisticss,proto3" json:"queue_statisticss,omitempty"`
	PortQueueStatisticss                *Qos_GlobalQuery_PortQueueStatisticss                `protobuf:"bytes,14,opt,name=port_queue_statisticss,json=port-queue-statisticss,proto3" json:"port_queue_statisticss,omitempty"`
	PortQueueDefaultStatisticss         *Qos_GlobalQuery_PortQueueDefaultStatisticss         `protobuf:"bytes,15,opt,name=port_queue_default_statisticss,json=port-queue-default-statisticss,proto3" json:"port_queue_default_statisticss,omitempty"`
	PortQueueOnboardStatisticss         *Qos_GlobalQuery_PortQueueOnboardStatisticss         `protobuf:"bytes,16,opt,name=port_queue_onboard_statisticss,json=port-queue-onboard-statisticss,proto3" json:"port_queue_onboard_statisticss,omitempty"`
	DefaultFlowQueueStatisticss         *Qos_GlobalQuery_DefaultFlowQueueStatisticss         `protobuf:"bytes,17,opt,name=default_flow_queue_statisticss,json=default-flow-queue-statisticss,proto3" json:"default_flow_queue_statisticss,omitempty"`
	HardPipeAbilitys                    *Qos_GlobalQuery_HardPipeAbilitys                    `protobuf:"bytes,18,opt,name=hard_pipe_abilitys,json=hard-pipe-abilitys,proto3" json:"hard_pipe_abilitys,omitempty"`
	L2VpnHardPipeStatisticss            *Qos_GlobalQuery_L2VpnHardPipeStatisticss            `protobuf:"bytes,19,opt,name=l2vpn_hard_pipe_statisticss,json=l2vpn-hard-pipe-statisticss,proto3" json:"l2vpn_hard_pipe_statisticss,omitempty"`
	TrafficPolicyTemplateApplication    *Qos_GlobalQuery_TrafficPolicyTemplateApplication    `protobuf:"bytes,20,opt,name=traffic_policy_template_application,json=traffic-policy-template-application,proto3" json:"traffic_policy_template_application,omitempty"`
	FlowCarStatisticss                  *Qos_GlobalQuery_FlowCarStatisticss                  `protobuf:"bytes,21,opt,name=flow_car_statisticss,json=flow-car-statisticss,proto3" json:"flow_car_statisticss,omitempty"`
	InterfaceActionUserQueueStatisticss *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss `protobuf:"bytes,22,opt,name=interface_action_user_queue_statisticss,json=interface-action-user-queue-statisticss,proto3" json:"interface_action_user_queue_statisticss,omitempty"`
	InterfaceUserGroupQueueStatistics   *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics   `protobuf:"bytes,23,opt,name=interface_user_group_queue_statistics,json=interface-user-group-queue-statistics,proto3" json:"interface_user_group_queue_statistics,omitempty"`
	InterfaceSubPortQueueStatistics     *Qos_GlobalQuery_InterfaceSubPortQueueStatistics     `protobuf:"bytes,24,opt,name=interface_sub_port_queue_statistics,json=interface-sub-port-queue-statistics,proto3" json:"interface_sub_port_queue_statistics,omitempty"`
	InterfaceHardPipeStatisticss        *Qos_GlobalQuery_InterfaceHardPipeStatisticss        `protobuf:"bytes,25,opt,name=interface_hard_pipe_statisticss,json=interface-hard-pipe-statisticss,proto3" json:"interface_hard_pipe_statisticss,omitempty"`
	QosResourceRules                    *Qos_GlobalQuery_QosResourceRules                    `protobuf:"bytes,26,opt,name=qos_resource_rules,json=qos-resource-rules,proto3" json:"qos_resource_rules,omitempty"`
	SubPortQueueResources               *Qos_GlobalQuery_SubPortQueueResources               `protobuf:"bytes,27,opt,name=sub_port_queue_resources,json=sub-port-queue-resources,proto3" json:"sub_port_queue_resources,omitempty"`
	InterfaceCarStatisticss             *Qos_GlobalQuery_InterfaceCarStatisticss             `protobuf:"bytes,28,opt,name=interface_car_statisticss,json=interface-car-statisticss,proto3" json:"interface_car_statisticss,omitempty"`
	InterfaceCarL2PortStatisticss       *Qos_GlobalQuery_InterfaceCarL2PortStatisticss       `protobuf:"bytes,29,opt,name=interface_car_l2_port_statisticss,json=interface-car-l2-port-statisticss,proto3" json:"interface_car_l2_port_statisticss,omitempty"`
	InterfaceCar_8021PDscpStatisticss   *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss    `protobuf:"bytes,30,opt,name=interface_car_8021p_dscp_statisticss,json=interface-car-8021p-dscp-statisticss,proto3" json:"interface_car_8021p_dscp_statisticss,omitempty"`
	InterfaceExtendStatisticss          *Qos_GlobalQuery_InterfaceExtendStatisticss          `protobuf:"bytes,31,opt,name=interface_extend_statisticss,json=interface-extend-statisticss,proto3" json:"interface_extend_statisticss,omitempty"`
	SubPortQueueAbnormalAllocations     *Qos_GlobalQuery_SubPortQueueAbnormalAllocations     `protobuf:"bytes,32,opt,name=sub_port_queue_abnormal_allocations,json=sub-port-queue-abnormal-allocations,proto3" json:"sub_port_queue_abnormal_allocations,omitempty"`
	UserGroupQueueAbnormalAllocations   *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations   `protobuf:"bytes,33,opt,name=user_group_queue_abnormal_allocations,json=user-group-queue-abnormal-allocations,proto3" json:"user_group_queue_abnormal_allocations,omitempty"`
	UserQueueAbnormalAllocations        *Qos_GlobalQuery_UserQueueAbnormalAllocations        `protobuf:"bytes,34,opt,name=user_queue_abnormal_allocations,json=user-queue-abnormal-allocations,proto3" json:"user_queue_abnormal_allocations,omitempty"`
	UserQueueResources                  *Qos_GlobalQuery_UserQueueResources                  `protobuf:"bytes,35,opt,name=user_queue_resources,json=user-queue-resources,proto3" json:"user_queue_resources,omitempty"`
	FabricQueueUnicastStatisticss       *Qos_GlobalQuery_FabricQueueUnicastStatisticss       `protobuf:"bytes,36,opt,name=fabric_queue_unicast_statisticss,json=fabric-queue-unicast-statisticss,proto3" json:"fabric_queue_unicast_statisticss,omitempty"`
	FabricQueueMulticastStatisticss     *Qos_GlobalQuery_FabricQueueMulticastStatisticss     `protobuf:"bytes,37,opt,name=fabric_queue_multicast_statisticss,json=fabric-queue-multicast-statisticss,proto3" json:"fabric_queue_multicast_statisticss,omitempty"`
	SlotPortQueueStatisticss            *Qos_GlobalQuery_SlotPortQueueStatisticss            `protobuf:"bytes,38,opt,name=slot_port_queue_statisticss,json=slot-port-queue-statisticss,proto3" json:"slot_port_queue_statisticss,omitempty"`
	SlotChannelProfileStatisticss       *Qos_GlobalQuery_SlotChannelProfileStatisticss       `protobuf:"bytes,39,opt,name=slot_channel_profile_statisticss,json=slot-channel-profile-statisticss,proto3" json:"slot_channel_profile_statisticss,omitempty"`
}

func (x *Qos_GlobalQuery) Reset() {
	*x = Qos_GlobalQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery) ProtoMessage() {}

func (x *Qos_GlobalQuery) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Qos_GlobalQuery) GetDefaultQueueStatisticss() *Qos_GlobalQuery_DefaultQueueStatisticss {
	if x != nil {
		return x.DefaultQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetAllQueueStatisticss() *Qos_GlobalQuery_AllQueueStatisticss {
	if x != nil {
		return x.AllQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetChannelQueueStatisticss() *Qos_GlobalQuery_ChannelQueueStatisticss {
	if x != nil {
		return x.ChannelQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetUserInformations() *Qos_GlobalQuery_UserInformations {
	if x != nil {
		return x.UserInformations
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceTrafficPolicyStatisticss() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss {
	if x != nil {
		return x.InterfaceTrafficPolicyStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetCarResources() *Qos_GlobalQuery_CarResources {
	if x != nil {
		return x.CarResources
	}
	return nil
}

func (x *Qos_GlobalQuery) GetTrafficBufferUses() *Qos_GlobalQuery_TrafficBufferUses {
	if x != nil {
		return x.TrafficBufferUses
	}
	return nil
}

func (x *Qos_GlobalQuery) GetTrafficPolicyApplicationResources() *Qos_GlobalQuery_TrafficPolicyApplicationResources {
	if x != nil {
		return x.TrafficPolicyApplicationResources
	}
	return nil
}

func (x *Qos_GlobalQuery) GetUserGroupQueueResources() *Qos_GlobalQuery_UserGroupQueueResources {
	if x != nil {
		return x.UserGroupQueueResources
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceProfileStatistics() *Qos_GlobalQuery_InterfaceProfileStatistics {
	if x != nil {
		return x.InterfaceProfileStatistics
	}
	return nil
}

func (x *Qos_GlobalQuery) GetMplsTeStatisticss() *Qos_GlobalQuery_MplsTeStatisticss {
	if x != nil {
		return x.MplsTeStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetTrafficBufferUsages() *Qos_GlobalQuery_TrafficBufferUsages {
	if x != nil {
		return x.TrafficBufferUsages
	}
	return nil
}

func (x *Qos_GlobalQuery) GetQueueStatisticss() *Qos_GlobalQuery_QueueStatisticss {
	if x != nil {
		return x.QueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetPortQueueStatisticss() *Qos_GlobalQuery_PortQueueStatisticss {
	if x != nil {
		return x.PortQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetPortQueueDefaultStatisticss() *Qos_GlobalQuery_PortQueueDefaultStatisticss {
	if x != nil {
		return x.PortQueueDefaultStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetPortQueueOnboardStatisticss() *Qos_GlobalQuery_PortQueueOnboardStatisticss {
	if x != nil {
		return x.PortQueueOnboardStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetDefaultFlowQueueStatisticss() *Qos_GlobalQuery_DefaultFlowQueueStatisticss {
	if x != nil {
		return x.DefaultFlowQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetHardPipeAbilitys() *Qos_GlobalQuery_HardPipeAbilitys {
	if x != nil {
		return x.HardPipeAbilitys
	}
	return nil
}

func (x *Qos_GlobalQuery) GetL2VpnHardPipeStatisticss() *Qos_GlobalQuery_L2VpnHardPipeStatisticss {
	if x != nil {
		return x.L2VpnHardPipeStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetTrafficPolicyTemplateApplication() *Qos_GlobalQuery_TrafficPolicyTemplateApplication {
	if x != nil {
		return x.TrafficPolicyTemplateApplication
	}
	return nil
}

func (x *Qos_GlobalQuery) GetFlowCarStatisticss() *Qos_GlobalQuery_FlowCarStatisticss {
	if x != nil {
		return x.FlowCarStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceActionUserQueueStatisticss() *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss {
	if x != nil {
		return x.InterfaceActionUserQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceUserGroupQueueStatistics() *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics {
	if x != nil {
		return x.InterfaceUserGroupQueueStatistics
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceSubPortQueueStatistics() *Qos_GlobalQuery_InterfaceSubPortQueueStatistics {
	if x != nil {
		return x.InterfaceSubPortQueueStatistics
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceHardPipeStatisticss() *Qos_GlobalQuery_InterfaceHardPipeStatisticss {
	if x != nil {
		return x.InterfaceHardPipeStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetQosResourceRules() *Qos_GlobalQuery_QosResourceRules {
	if x != nil {
		return x.QosResourceRules
	}
	return nil
}

func (x *Qos_GlobalQuery) GetSubPortQueueResources() *Qos_GlobalQuery_SubPortQueueResources {
	if x != nil {
		return x.SubPortQueueResources
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceCarStatisticss() *Qos_GlobalQuery_InterfaceCarStatisticss {
	if x != nil {
		return x.InterfaceCarStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceCarL2PortStatisticss() *Qos_GlobalQuery_InterfaceCarL2PortStatisticss {
	if x != nil {
		return x.InterfaceCarL2PortStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceCar_8021PDscpStatisticss() *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss {
	if x != nil {
		return x.InterfaceCar_8021PDscpStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetInterfaceExtendStatisticss() *Qos_GlobalQuery_InterfaceExtendStatisticss {
	if x != nil {
		return x.InterfaceExtendStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetSubPortQueueAbnormalAllocations() *Qos_GlobalQuery_SubPortQueueAbnormalAllocations {
	if x != nil {
		return x.SubPortQueueAbnormalAllocations
	}
	return nil
}

func (x *Qos_GlobalQuery) GetUserGroupQueueAbnormalAllocations() *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations {
	if x != nil {
		return x.UserGroupQueueAbnormalAllocations
	}
	return nil
}

func (x *Qos_GlobalQuery) GetUserQueueAbnormalAllocations() *Qos_GlobalQuery_UserQueueAbnormalAllocations {
	if x != nil {
		return x.UserQueueAbnormalAllocations
	}
	return nil
}

func (x *Qos_GlobalQuery) GetUserQueueResources() *Qos_GlobalQuery_UserQueueResources {
	if x != nil {
		return x.UserQueueResources
	}
	return nil
}

func (x *Qos_GlobalQuery) GetFabricQueueUnicastStatisticss() *Qos_GlobalQuery_FabricQueueUnicastStatisticss {
	if x != nil {
		return x.FabricQueueUnicastStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetFabricQueueMulticastStatisticss() *Qos_GlobalQuery_FabricQueueMulticastStatisticss {
	if x != nil {
		return x.FabricQueueMulticastStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetSlotPortQueueStatisticss() *Qos_GlobalQuery_SlotPortQueueStatisticss {
	if x != nil {
		return x.SlotPortQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery) GetSlotChannelProfileStatisticss() *Qos_GlobalQuery_SlotChannelProfileStatisticss {
	if x != nil {
		return x.SlotChannelProfileStatisticss
	}
	return nil
}

type Qos_Qppb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPolicys    *Qos_Qppb_LocalPolicys    `protobuf:"bytes,1,opt,name=local_policys,json=local-policys,proto3" json:"local_policys,omitempty"`
	QueryPolicys    *Qos_Qppb_QueryPolicys    `protobuf:"bytes,2,opt,name=query_policys,json=query-policys,proto3" json:"query_policys,omitempty"`
	QueryStatistics *Qos_Qppb_QueryStatistics `protobuf:"bytes,3,opt,name=query_statistics,json=query-statistics,proto3" json:"query_statistics,omitempty"`
}

func (x *Qos_Qppb) Reset() {
	*x = Qos_Qppb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb) ProtoMessage() {}

func (x *Qos_Qppb) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb.ProtoReflect.Descriptor instead.
func (*Qos_Qppb) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Qos_Qppb) GetLocalPolicys() *Qos_Qppb_LocalPolicys {
	if x != nil {
		return x.LocalPolicys
	}
	return nil
}

func (x *Qos_Qppb) GetQueryPolicys() *Qos_Qppb_QueryPolicys {
	if x != nil {
		return x.QueryPolicys
	}
	return nil
}

func (x *Qos_Qppb) GetQueryStatistics() *Qos_Qppb_QueryStatistics {
	if x != nil {
		return x.QueryStatistics
	}
	return nil
}

type Qos_WredTemplate_FlowWreds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowWred []*Qos_WredTemplate_FlowWreds_FlowWred `protobuf:"bytes,1,rep,name=flow_wred,json=flow-wred,proto3" json:"flow_wred,omitempty"`
}

func (x *Qos_WredTemplate_FlowWreds) Reset() {
	*x = Qos_WredTemplate_FlowWreds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_FlowWreds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_FlowWreds) ProtoMessage() {}

func (x *Qos_WredTemplate_FlowWreds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_FlowWreds.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_FlowWreds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Qos_WredTemplate_FlowWreds) GetFlowWred() []*Qos_WredTemplate_FlowWreds_FlowWred {
	if x != nil {
		return x.FlowWred
	}
	return nil
}

type Qos_WredTemplate_PortWreds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortWred []*Qos_WredTemplate_PortWreds_PortWred `protobuf:"bytes,1,rep,name=port_wred,json=port-wred,proto3" json:"port_wred,omitempty"`
}

func (x *Qos_WredTemplate_PortWreds) Reset() {
	*x = Qos_WredTemplate_PortWreds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_PortWreds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_PortWreds) ProtoMessage() {}

func (x *Qos_WredTemplate_PortWreds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_PortWreds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Qos_WredTemplate_PortWreds) GetPortWred() []*Qos_WredTemplate_PortWreds_PortWred {
	if x != nil {
		return x.PortWred
	}
	return nil
}

type Qos_WredTemplate_Wreds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wred []*Qos_WredTemplate_Wreds_Wred `protobuf:"bytes,1,rep,name=wred,proto3" json:"wred,omitempty"`
}

func (x *Qos_WredTemplate_Wreds) Reset() {
	*x = Qos_WredTemplate_Wreds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_Wreds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_Wreds) ProtoMessage() {}

func (x *Qos_WredTemplate_Wreds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_Wreds.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_Wreds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Qos_WredTemplate_Wreds) GetWred() []*Qos_WredTemplate_Wreds_Wred {
	if x != nil {
		return x.Wred
	}
	return nil
}

type Qos_WredTemplate_FlowWreds_FlowWred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QueueDepth uint32                                          `protobuf:"varint,2,opt,name=queue_depth,json=queue-depth,proto3" json:"queue_depth,omitempty"`
	WredColors *Qos_WredTemplate_FlowWreds_FlowWred_WredColors `protobuf:"bytes,3,opt,name=wred_colors,json=wred-colors,proto3" json:"wred_colors,omitempty"`
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred) Reset() {
	*x = Qos_WredTemplate_FlowWreds_FlowWred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_FlowWreds_FlowWred) ProtoMessage() {}

func (x *Qos_WredTemplate_FlowWreds_FlowWred) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_FlowWreds_FlowWred.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_FlowWreds_FlowWred) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred) GetQueueDepth() uint32 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred) GetWredColors() *Qos_WredTemplate_FlowWreds_FlowWred_WredColors {
	if x != nil {
		return x.WredColors
	}
	return nil
}

type Qos_WredTemplate_FlowWreds_FlowWred_WredColors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WredColor []*Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor `protobuf:"bytes,1,rep,name=wred_color,json=wred-color,proto3" json:"wred_color,omitempty"`
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors) Reset() {
	*x = Qos_WredTemplate_FlowWreds_FlowWred_WredColors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_FlowWreds_FlowWred_WredColors) ProtoMessage() {}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_FlowWreds_FlowWred_WredColors.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_FlowWreds_FlowWred_WredColors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors) GetWredColor() []*Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor {
	if x != nil {
		return x.WredColor
	}
	return nil
}

type Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color               Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color `protobuf:"varint,1,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color" json:"color,omitempty"`
	LowLimitPercentage  uint32                                                         `protobuf:"varint,2,opt,name=low_limit_percentage,json=low-limit-percentage,proto3" json:"low_limit_percentage,omitempty"`
	HighLimitPercentage uint32                                                         `protobuf:"varint,3,opt,name=high_limit_percentage,json=high-limit-percentage,proto3" json:"high_limit_percentage,omitempty"`
	DiscardPercentage   uint32                                                         `protobuf:"varint,4,opt,name=discard_percentage,json=discard-percentage,proto3" json:"discard_percentage,omitempty"`
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) Reset() {
	*x = Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) ProtoMessage() {}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) GetColor() Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color {
	if x != nil {
		return x.Color
	}
	return Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color_GREEN
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) GetLowLimitPercentage() uint32 {
	if x != nil {
		return x.LowLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) GetHighLimitPercentage() uint32 {
	if x != nil {
		return x.HighLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor) GetDiscardPercentage() uint32 {
	if x != nil {
		return x.DiscardPercentage
	}
	return 0
}

type Qos_WredTemplate_PortWreds_PortWred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QueueDepth      uint32                                               `protobuf:"varint,2,opt,name=queue_depth,json=queue-depth,proto3" json:"queue_depth,omitempty"`
	WredColors      *Qos_WredTemplate_PortWreds_PortWred_WredColors      `protobuf:"bytes,3,opt,name=wred_colors,json=wred-colors,proto3" json:"wred_colors,omitempty"`
	WredColorStates *Qos_WredTemplate_PortWreds_PortWred_WredColorStates `protobuf:"bytes,4,opt,name=wred_color_states,json=wred-color-states,proto3" json:"wred_color_states,omitempty"`
}

func (x *Qos_WredTemplate_PortWreds_PortWred) Reset() {
	*x = Qos_WredTemplate_PortWreds_PortWred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_PortWreds_PortWred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_PortWreds_PortWred) ProtoMessage() {}

func (x *Qos_WredTemplate_PortWreds_PortWred) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds_PortWred.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_PortWreds_PortWred) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Qos_WredTemplate_PortWreds_PortWred) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_WredTemplate_PortWreds_PortWred) GetQueueDepth() uint32 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

func (x *Qos_WredTemplate_PortWreds_PortWred) GetWredColors() *Qos_WredTemplate_PortWreds_PortWred_WredColors {
	if x != nil {
		return x.WredColors
	}
	return nil
}

func (x *Qos_WredTemplate_PortWreds_PortWred) GetWredColorStates() *Qos_WredTemplate_PortWreds_PortWred_WredColorStates {
	if x != nil {
		return x.WredColorStates
	}
	return nil
}

type Qos_WredTemplate_PortWreds_PortWred_WredColors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WredColor []*Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor `protobuf:"bytes,1,rep,name=wred_color,json=wred-color,proto3" json:"wred_color,omitempty"`
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors) Reset() {
	*x = Qos_WredTemplate_PortWreds_PortWred_WredColors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_PortWreds_PortWred_WredColors) ProtoMessage() {}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds_PortWred_WredColors.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_PortWreds_PortWred_WredColors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors) GetWredColor() []*Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor {
	if x != nil {
		return x.WredColor
	}
	return nil
}

type Qos_WredTemplate_PortWreds_PortWred_WredColorStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WredColorState []*Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState `protobuf:"bytes,1,rep,name=wred_color_state,json=wred-color-state,proto3" json:"wred_color_state,omitempty"`
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates) Reset() {
	*x = Qos_WredTemplate_PortWreds_PortWred_WredColorStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_PortWreds_PortWred_WredColorStates) ProtoMessage() {}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds_PortWred_WredColorStates.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_PortWreds_PortWred_WredColorStates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates) GetWredColorState() []*Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState {
	if x != nil {
		return x.WredColorState
	}
	return nil
}

type Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color               Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color `protobuf:"varint,1,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color" json:"color,omitempty"`
	LowLimitPercentage  uint32                                                         `protobuf:"varint,2,opt,name=low_limit_percentage,json=low-limit-percentage,proto3" json:"low_limit_percentage,omitempty"`
	HighLimitPercentage uint32                                                         `protobuf:"varint,3,opt,name=high_limit_percentage,json=high-limit-percentage,proto3" json:"high_limit_percentage,omitempty"`
	DiscardPercentage   uint32                                                         `protobuf:"varint,4,opt,name=discard_percentage,json=discard-percentage,proto3" json:"discard_percentage,omitempty"`
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) Reset() {
	*x = Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) ProtoMessage() {}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0, 0}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) GetColor() Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color {
	if x != nil {
		return x.Color
	}
	return Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color_GREEN
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) GetLowLimitPercentage() uint32 {
	if x != nil {
		return x.LowLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) GetHighLimitPercentage() uint32 {
	if x != nil {
		return x.HighLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor) GetDiscardPercentage() uint32 {
	if x != nil {
		return x.DiscardPercentage
	}
	return 0
}

type Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color               Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color `protobuf:"varint,1,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color" json:"color,omitempty"`
	LowLimitPercentage  uint32                                                                   `protobuf:"varint,2,opt,name=low_limit_percentage,json=low-limit-percentage,proto3" json:"low_limit_percentage,omitempty"`
	HighLimitPercentage uint32                                                                   `protobuf:"varint,3,opt,name=high_limit_percentage,json=high-limit-percentage,proto3" json:"high_limit_percentage,omitempty"`
	DiscardPercentage   uint32                                                                   `protobuf:"varint,4,opt,name=discard_percentage,json=discard-percentage,proto3" json:"discard_percentage,omitempty"`
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) Reset() {
	*x = Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) ProtoMessage() {}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 1, 0, 1, 0}
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) GetColor() Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color {
	if x != nil {
		return x.Color
	}
	return Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color_GREEN
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) GetLowLimitPercentage() uint32 {
	if x != nil {
		return x.LowLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) GetHighLimitPercentage() uint32 {
	if x != nil {
		return x.HighLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState) GetDiscardPercentage() uint32 {
	if x != nil {
		return x.DiscardPercentage
	}
	return 0
}

type Qos_WredTemplate_Wreds_Wred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BufferSizePercentage uint32                              `protobuf:"varint,2,opt,name=buffer_size_percentage,json=buffer-size-percentage,proto3" json:"buffer_size_percentage,omitempty"`
	Colors               *Qos_WredTemplate_Wreds_Wred_Colors `protobuf:"bytes,3,opt,name=colors,proto3" json:"colors,omitempty"`
}

func (x *Qos_WredTemplate_Wreds_Wred) Reset() {
	*x = Qos_WredTemplate_Wreds_Wred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_Wreds_Wred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_Wreds_Wred) ProtoMessage() {}

func (x *Qos_WredTemplate_Wreds_Wred) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_Wreds_Wred.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_Wreds_Wred) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Qos_WredTemplate_Wreds_Wred) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_WredTemplate_Wreds_Wred) GetBufferSizePercentage() uint32 {
	if x != nil {
		return x.BufferSizePercentage
	}
	return 0
}

func (x *Qos_WredTemplate_Wreds_Wred) GetColors() *Qos_WredTemplate_Wreds_Wred_Colors {
	if x != nil {
		return x.Colors
	}
	return nil
}

type Qos_WredTemplate_Wreds_Wred_Colors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color []*Qos_WredTemplate_Wreds_Wred_Colors_Color `protobuf:"bytes,1,rep,name=color,proto3" json:"color,omitempty"`
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors) Reset() {
	*x = Qos_WredTemplate_Wreds_Wred_Colors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_Wreds_Wred_Colors) ProtoMessage() {}

func (x *Qos_WredTemplate_Wreds_Wred_Colors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_Wreds_Wred_Colors.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_Wreds_Wred_Colors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0}
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors) GetColor() []*Qos_WredTemplate_Wreds_Wred_Colors_Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type Qos_WredTemplate_Wreds_Wred_Colors_Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowLimitPercentage  uint32 `protobuf:"varint,2,opt,name=low_limit_percentage,json=low-limit-percentage,proto3" json:"low_limit_percentage,omitempty"`
	HighLimitPercentage uint32 `protobuf:"varint,3,opt,name=high_limit_percentage,json=high-limit-percentage,proto3" json:"high_limit_percentage,omitempty"`
	DiscardPercentage   uint32 `protobuf:"varint,4,opt,name=discard_percentage,json=discard-percentage,proto3" json:"discard_percentage,omitempty"`
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors_Color) Reset() {
	*x = Qos_WredTemplate_Wreds_Wred_Colors_Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors_Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_WredTemplate_Wreds_Wred_Colors_Color) ProtoMessage() {}

func (x *Qos_WredTemplate_Wreds_Wred_Colors_Color) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_WredTemplate_Wreds_Wred_Colors_Color.ProtoReflect.Descriptor instead.
func (*Qos_WredTemplate_Wreds_Wred_Colors_Color) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 0, 2, 0, 0, 0}
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors_Color) GetLowLimitPercentage() uint32 {
	if x != nil {
		return x.LowLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors_Color) GetHighLimitPercentage() uint32 {
	if x != nil {
		return x.HighLimitPercentage
	}
	return 0
}

func (x *Qos_WredTemplate_Wreds_Wred_Colors_Color) GetDiscardPercentage() uint32 {
	if x != nil {
		return x.DiscardPercentage
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueue []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue `protobuf:"bytes,1,rep,name=flow_queue,json=flow-queue,proto3" json:"flow_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues) GetFlowQueue() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue {
	if x != nil {
		return x.FlowQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile []*Qos_QueueSchedulerTemplate_Profiles_Profile `protobuf:"bytes,1,rep,name=profile,proto3" json:"profile,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Qos_QueueSchedulerTemplate_Profiles) GetProfile() []*Qos_QueueSchedulerTemplate_Profiles_Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowMappings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowMapping []*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping `protobuf:"bytes,1,rep,name=flow_mapping,json=flow-mapping,proto3" json:"flow_mapping,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowMappings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowMappings) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowMappings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowMappings.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowMappings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings) GetFlowMapping() []*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping {
	if x != nil {
		return x.FlowMapping
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserGroupQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroupQueue []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue `protobuf:"bytes,1,rep,name=user_group_queue,json=user-group-queue,proto3" json:"user_group_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues) GetUserGroupQueue() []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue {
	if x != nil {
		return x.UserGroupQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_ServiceTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTemplate []*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate `protobuf:"bytes,1,rep,name=service_template,json=service-template,proto3" json:"service_template,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates) Reset() {
	*x = Qos_QueueSchedulerTemplate_ServiceTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ServiceTemplates) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ServiceTemplates.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ServiceTemplates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates) GetServiceTemplate() []*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate {
	if x != nil {
		return x.ServiceTemplate
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Queue4CosMappings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue_4CosMapping []*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping `protobuf:"bytes,1,rep,name=queue_4cos_mapping,json=queue-4cos-mapping,proto3" json:"queue_4cos_mapping,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings) Reset() {
	*x = Qos_QueueSchedulerTemplate_Queue4CosMappings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Queue4CosMappings) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Queue4CosMappings.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Queue4CosMappings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings) GetQueue_4CosMapping() []*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping {
	if x != nil {
		return x.Queue_4CosMapping
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueTemplate []*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate `protobuf:"bytes,1,rep,name=port_queue_template,json=port-queue-template,proto3" json:"port_queue_template,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates) GetPortQueueTemplate() []*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate {
	if x != nil {
		return x.PortQueueTemplate
	}
	return nil
}

type Qos_QueueSchedulerTemplate_ChannelProfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelProfile []*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile `protobuf:"bytes,1,rep,name=channel_profile,json=channel-profile,proto3" json:"channel_profile,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles) Reset() {
	*x = Qos_QueueSchedulerTemplate_ChannelProfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ChannelProfiles) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ChannelProfiles.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ChannelProfiles) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 7}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles) GetChannelProfile() []*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile {
	if x != nil {
		return x.ChannelProfile
	}
	return nil
}

type Qos_QueueSchedulerTemplate_BufferPolicys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferPolicy []*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy `protobuf:"bytes,1,rep,name=buffer_policy,json=buffer-policy,proto3" json:"buffer_policy,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys) Reset() {
	*x = Qos_QueueSchedulerTemplate_BufferPolicys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_BufferPolicys) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_BufferPolicys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys) GetBufferPolicy() []*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy {
	if x != nil {
		return x.BufferPolicy
	}
	return nil
}

type Qos_QueueSchedulerTemplate_QosQueueTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosQueueTemplate []*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate `protobuf:"bytes,1,rep,name=qos_queue_template,json=qos-queue-template,proto3" json:"qos_queue_template,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates) Reset() {
	*x = Qos_QueueSchedulerTemplate_QosQueueTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_QosQueueTemplates) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_QosQueueTemplates.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_QosQueueTemplates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 9}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates) GetQosQueueTemplate() []*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate {
	if x != nil {
		return x.QosQueueTemplate
	}
	return nil
}

type Qos_QueueSchedulerTemplate_SubPortQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubPortQueue []*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue `protobuf:"bytes,1,rep,name=sub_port_queue,json=sub-port-queue,proto3" json:"sub_port_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_SubPortQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_SubPortQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_SubPortQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_SubPortQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 10}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues) GetSubPortQueue() []*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue {
	if x != nil {
		return x.SubPortQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PriorityTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityTemplate []*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate `protobuf:"bytes,1,rep,name=priority_template,json=priority-template,proto3" json:"priority_template,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates) Reset() {
	*x = Qos_QueueSchedulerTemplate_PriorityTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PriorityTemplates) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PriorityTemplates.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PriorityTemplates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 11}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates) GetPriorityTemplate() []*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate {
	if x != nil {
		return x.PriorityTemplate
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueTemplate []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate `protobuf:"bytes,1,rep,name=user_queue_template,json=user-queue-template,proto3" json:"user_queue_template,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates) GetUserQueueTemplate() []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate {
	if x != nil {
		return x.UserQueueTemplate
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string                                                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mode                      Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode                       `protobuf:"varint,2,opt,name=mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode" json:"mode,omitempty"`
	Queues                    *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues                    `protobuf:"bytes,3,opt,name=queues,proto3" json:"queues,omitempty"`
	NormalModeQueues          *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues          `protobuf:"bytes,4,opt,name=normal_mode_queues,json=normal-mode-queues,proto3" json:"normal_mode_queues,omitempty"`
	ShareShapings             *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings             `protobuf:"bytes,5,opt,name=share_shapings,json=share-shapings,proto3" json:"share_shapings,omitempty"`
	ShareShapingIds           *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds           `protobuf:"bytes,6,opt,name=share_shaping_ids,json=share-shaping-ids,proto3" json:"share_shaping_ids,omitempty"`
	ShareShapeRandomDiscards  *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards  `protobuf:"bytes,7,opt,name=share_shape_random_discards,json=share-shape-random-discards,proto3" json:"share_shape_random_discards,omitempty"`
	NormalModeRandomDiscards  *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards  `protobuf:"bytes,8,opt,name=normal_mode_random_discards,json=normal-mode-random-discards,proto3" json:"normal_mode_random_discards,omitempty"`
	FourCosModeQueues         *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues         `protobuf:"bytes,9,opt,name=four_cos_mode_queues,json=four-cos-mode-queues,proto3" json:"four_cos_mode_queues,omitempty"`
	PriorityModeQueues        *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues        `protobuf:"bytes,10,opt,name=priority_mode_queues,json=priority-mode-queues,proto3" json:"priority_mode_queues,omitempty"`
	PriorityModeSchedules     *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules     `protobuf:"bytes,11,opt,name=priority_mode_schedules,json=priority-mode-schedules,proto3" json:"priority_mode_schedules,omitempty"`
	PriorityModeShareShapings *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings `protobuf:"bytes,12,opt,name=priority_mode_share_shapings,json=priority-mode-share-shapings,proto3" json:"priority_mode_share_shapings,omitempty"`
	EightCosModeQueues        *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues        `protobuf:"bytes,13,opt,name=eight_cos_mode_queues,json=eight-cos-mode-queues,proto3" json:"eight_cos_mode_queues,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode {
	if x != nil {
		return x.Mode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode_NORMAL
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetQueues() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetNormalModeQueues() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues {
	if x != nil {
		return x.NormalModeQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetShareShapings() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings {
	if x != nil {
		return x.ShareShapings
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetShareShapingIds() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds {
	if x != nil {
		return x.ShareShapingIds
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetShareShapeRandomDiscards() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards {
	if x != nil {
		return x.ShareShapeRandomDiscards
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetNormalModeRandomDiscards() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards {
	if x != nil {
		return x.NormalModeRandomDiscards
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetFourCosModeQueues() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues {
	if x != nil {
		return x.FourCosModeQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetPriorityModeQueues() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues {
	if x != nil {
		return x.PriorityModeQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetPriorityModeSchedules() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules {
	if x != nil {
		return x.PriorityModeSchedules
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetPriorityModeShareShapings() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings {
	if x != nil {
		return x.PriorityModeShareShapings
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue) GetEightCosModeQueues() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues {
	if x != nil {
		return x.EightCosModeQueues
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue `protobuf:"bytes,1,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues) GetQueue() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalModeQueue []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue `protobuf:"bytes,1,rep,name=normal_mode_queue,json=normal-mode-queue,proto3" json:"normal_mode_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues) GetNormalModeQueue() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue {
	if x != nil {
		return x.NormalModeQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareShaping *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping `protobuf:"bytes,1,opt,name=share_shaping,json=share-shaping,proto3" json:"share_shaping,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings) GetShareShaping() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping {
	if x != nil {
		return x.ShareShaping
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareShapingId []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId `protobuf:"bytes,1,rep,name=share_shaping_id,json=share-shaping-id,proto3" json:"share_shaping_id,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds) GetShareShapingId() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId {
	if x != nil {
		return x.ShareShapingId
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareShapeRandomDiscard *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard `protobuf:"bytes,1,opt,name=share_shape_random_discard,json=share-shape-random-discard,proto3" json:"share_shape_random_discard,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards) GetShareShapeRandomDiscard() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard {
	if x != nil {
		return x.ShareShapeRandomDiscard
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalModeRandomDiscard []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard `protobuf:"bytes,1,rep,name=normal_mode_random_discard,json=normal-mode-random-discard,proto3" json:"normal_mode_random_discard,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 5}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards) GetNormalModeRandomDiscard() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard {
	if x != nil {
		return x.NormalModeRandomDiscard
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FourCosModeQueue []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue `protobuf:"bytes,1,rep,name=four_cos_mode_queue,json=four-cos-mode-queue,proto3" json:"four_cos_mode_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 6}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues) GetFourCosModeQueue() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue {
	if x != nil {
		return x.FourCosModeQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityModeQueue []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue `protobuf:"bytes,1,rep,name=priority_mode_queue,json=priority-mode-queue,proto3" json:"priority_mode_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 7}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues) GetPriorityModeQueue() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue {
	if x != nil {
		return x.PriorityModeQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityModeSchedule []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule `protobuf:"bytes,1,rep,name=priority_mode_schedule,json=priority-mode-schedule,proto3" json:"priority_mode_schedule,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 8}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules) GetPriorityModeSchedule() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule {
	if x != nil {
		return x.PriorityModeSchedule
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityModeShareShaping []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping `protobuf:"bytes,1,rep,name=priority_mode_share_shaping,json=priority-mode-share-shaping,proto3" json:"priority_mode_share_shaping,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings) GetPriorityModeShareShaping() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping {
	if x != nil {
		return x.PriorityModeShareShaping
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EightCosModeQueue []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue `protobuf:"bytes,1,rep,name=eight_cos_mode_queue,json=eight-cos-mode-queue,proto3" json:"eight_cos_mode_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 10}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues) GetEightCosModeQueue() []*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue {
	if x != nil {
		return x.EightCosModeQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass" json:"service_class,omitempty"`
	FlowWredName string                                                                    `protobuf:"bytes,2,opt,name=flow_wred_name,json=flow-wred-name,proto3" json:"flow_wred_name,omitempty"`
	ConfigType   *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType  `protobuf:"bytes,3,opt,name=config_type,json=config-type,proto3" json:"config_type,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) GetServiceClass() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) GetFlowWredName() string {
	if x != nil {
		return x.FlowWredName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue) GetConfigType() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingMode *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode `protobuf:"bytes,1,opt,name=shaping_mode,json=shaping-mode,proto3" json:"shaping_mode,omitempty"`
	CirMode     *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode     `protobuf:"bytes,2,opt,name=cir_mode,json=cir-mode,proto3" json:"cir_mode,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType) GetShapingMode() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode {
	if x != nil {
		return x.ShapingMode
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType) GetCirMode() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode {
	if x != nil {
		return x.CirMode
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleMode      Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode       `protobuf:"varint,1,opt,name=schedule_mode,json=schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode" json:"schedule_mode,omitempty"`
	Weight            uint32                                                                                                 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Pbs               uint32                                                                                                 `protobuf:"varint,3,opt,name=pbs,proto3" json:"pbs,omitempty"`
	LowLatency        Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency         `protobuf:"varint,4,opt,name=low_latency,json=low-latency,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency" json:"low_latency,omitempty"`
	LowJitter         Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter          `protobuf:"varint,5,opt,name=low_jitter,json=low-jitter,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter" json:"low_jitter,omitempty"`
	ShapingParameters *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters `protobuf:"bytes,6,opt,name=shaping_parameters,json=shaping-parameters,proto3" json:"shaping_parameters,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) GetScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode {
	if x != nil {
		return x.ScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) GetLowLatency() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency {
	if x != nil {
		return x.LowLatency
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_INVALID_ENUM_VALUE_LowLatency
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) GetLowJitter() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter {
	if x != nil {
		return x.LowJitter
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_INVALID_ENUM_VALUE_LowJitter
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode) GetShapingParameters() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters {
	if x != nil {
		return x.ShapingParameters
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirScheduleMode Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode `protobuf:"varint,1,opt,name=cir_schedule_mode,json=cir-schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode" json:"cir_schedule_mode,omitempty"`
	PirScheduleMode Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode `protobuf:"varint,2,opt,name=pir_schedule_mode,json=pir-schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode" json:"pir_schedule_mode,omitempty"`
	PirWeight       uint32                                                                                          `protobuf:"varint,3,opt,name=pir_weight,json=pir-weight,proto3" json:"pir_weight,omitempty"`
	Cbs             uint32                                                                                          `protobuf:"varint,4,opt,name=cbs,proto3" json:"cbs,omitempty"`
	PirPbs          uint32                                                                                          `protobuf:"varint,5,opt,name=pir_pbs,json=pir-pbs,proto3" json:"pir_pbs,omitempty"`
	CirParameters   *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters  `protobuf:"bytes,6,opt,name=cir_parameters,json=cir-parameters,proto3" json:"cir_parameters,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) GetCirScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode {
	if x != nil {
		return x.CirScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) GetPirScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode {
	if x != nil {
		return x.PirScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) GetPirWeight() uint32 {
	if x != nil {
		return x.PirWeight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) GetPirPbs() uint32 {
	if x != nil {
		return x.PirPbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode) GetCirParameters() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters {
	if x != nil {
		return x.CirParameters
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shaping        *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping        `protobuf:"bytes,1,opt,name=shaping,proto3" json:"shaping,omitempty"`
	ShapingPercent *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent `protobuf:"bytes,2,opt,name=shaping_percent,json=shaping-percent,proto3" json:"shaping_percent,omitempty"`
	Car            *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car            `protobuf:"bytes,3,opt,name=car,proto3" json:"car,omitempty"`
	CarPercent     *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent     `protobuf:"bytes,4,opt,name=car_percent,json=car-percent,proto3" json:"car_percent,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) GetShaping() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping {
	if x != nil {
		return x.Shaping
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) GetShapingPercent() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent {
	if x != nil {
		return x.ShapingPercent
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) GetCar() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car {
	if x != nil {
		return x.Car
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters) GetCarPercent() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent {
	if x != nil {
		return x.CarPercent
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingPercentage uint32 `protobuf:"varint,1,opt,name=shaping_percentage,json=shaping-percentage,proto3" json:"shaping_percentage,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent) GetShapingPercentage() uint32 {
	if x != nil {
		return x.ShapingPercentage
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarValue uint32 `protobuf:"varint,1,opt,name=car_value,json=car-value,proto3" json:"car_value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 0, 2}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car) GetCarValue() uint32 {
	if x != nil {
		return x.CarValue
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarPercentage uint32 `protobuf:"varint,1,opt,name=car_percentage,json=car-percentage,proto3" json:"car_percentage,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 0, 0, 3}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent) GetCarPercentage() uint32 {
	if x != nil {
		return x.CarPercentage
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir        *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir        `protobuf:"bytes,1,opt,name=cir,proto3" json:"cir,omitempty"`
	CirPercent *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent `protobuf:"bytes,2,opt,name=cir_percent,json=cir-percent,proto3" json:"cir_percent,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters) GetCir() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir {
	if x != nil {
		return x.Cir
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters) GetCirPercent() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent {
	if x != nil {
		return x.CirPercent
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirValue uint32 `protobuf:"varint,1,opt,name=cir_value,json=cir-value,proto3" json:"cir_value,omitempty"`
	PirValue uint32 `protobuf:"varint,2,opt,name=pir_value,json=pir-value,proto3" json:"pir_value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir) GetCirValue() uint32 {
	if x != nil {
		return x.CirValue
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir) GetPirValue() uint32 {
	if x != nil {
		return x.PirValue
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirPercentage uint32 `protobuf:"varint,1,opt,name=cir_percentage,json=cir-percentage,proto3" json:"cir_percentage,omitempty"`
	PirPercentage uint32 `protobuf:"varint,2,opt,name=pir_percentage,json=pir-percentage,proto3" json:"pir_percentage,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0, 0, 0, 1, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent) GetCirPercentage() uint32 {
	if x != nil {
		return x.CirPercentage
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent) GetPirPercentage() uint32 {
	if x != nil {
		return x.PirPercentage
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass" json:"service_class,omitempty"`
	FlowWredName string                                                                                        `protobuf:"bytes,2,opt,name=flow_wred_name,json=flow-wred-name,proto3" json:"flow_wred_name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue) GetServiceClass() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue) GetFlowWredName() string {
	if x != nil {
		return x.FlowWredName
	}
	return ""
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be                Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be                `protobuf:"varint,1,opt,name=be,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be" json:"be,omitempty"`
	Af1               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1               `protobuf:"varint,2,opt,name=af1,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1" json:"af1,omitempty"`
	Af2               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2               `protobuf:"varint,3,opt,name=af2,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2" json:"af2,omitempty"`
	Af3               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3               `protobuf:"varint,4,opt,name=af3,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3" json:"af3,omitempty"`
	Af4               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4               `protobuf:"varint,5,opt,name=af4,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4" json:"af4,omitempty"`
	Ef                Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef                `protobuf:"varint,6,opt,name=ef,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef" json:"ef,omitempty"`
	Cs6               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6               `protobuf:"varint,7,opt,name=cs6,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6" json:"cs6,omitempty"`
	Cs7               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7               `protobuf:"varint,8,opt,name=cs7,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7" json:"cs7,omitempty"`
	QueueScheduleMode Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode `protobuf:"varint,9,opt,name=queue_schedule_mode,json=queue-schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode" json:"queue_schedule_mode,omitempty"`
	Weight            uint32                                                                                       `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	ShareShapingPir   uint32                                                                                       `protobuf:"varint,11,opt,name=share_shaping_pir,json=share-shaping-pir,proto3" json:"share_shaping_pir,omitempty"`
	Pbs               uint32                                                                                       `protobuf:"varint,12,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetBe() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be {
	if x != nil {
		return x.Be
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be_TRUE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetAf1() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1 {
	if x != nil {
		return x.Af1
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af1
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetAf2() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2 {
	if x != nil {
		return x.Af2
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af2
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetAf3() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3 {
	if x != nil {
		return x.Af3
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af3
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetAf4() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4 {
	if x != nil {
		return x.Af4
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Af4
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetEf() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef {
	if x != nil {
		return x.Ef
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Ef
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetCs6() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6 {
	if x != nil {
		return x.Cs6
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Cs6
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetCs7() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7 {
	if x != nil {
		return x.Cs7
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_INVALID_ENUM_VALUE_Cs7
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetQueueScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode {
	if x != nil {
		return x.QueueScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetShareShapingPir() uint32 {
	if x != nil {
		return x.ShareShapingPir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapId            Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId            `protobuf:"varint,1,opt,name=shap_id,json=shap-id,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId" json:"shap_id,omitempty"`
	Be                Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be                `protobuf:"varint,2,opt,name=be,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be" json:"be,omitempty"`
	Af1               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1               `protobuf:"varint,3,opt,name=af1,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1" json:"af1,omitempty"`
	Af2               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2               `protobuf:"varint,4,opt,name=af2,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2" json:"af2,omitempty"`
	Af3               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3               `protobuf:"varint,5,opt,name=af3,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3" json:"af3,omitempty"`
	Af4               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4               `protobuf:"varint,6,opt,name=af4,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4" json:"af4,omitempty"`
	Ef                Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef                `protobuf:"varint,7,opt,name=ef,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef" json:"ef,omitempty"`
	Cs6               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6               `protobuf:"varint,8,opt,name=cs6,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6" json:"cs6,omitempty"`
	Cs7               Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7               `protobuf:"varint,9,opt,name=cs7,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7" json:"cs7,omitempty"`
	QueueScheduleMode Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode `protobuf:"varint,10,opt,name=queue_schedule_mode,json=queue-schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode" json:"queue_schedule_mode,omitempty"`
	Weight            uint32                                                                                           `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	ShareShapingPir   uint32                                                                                           `protobuf:"varint,12,opt,name=share_shaping_pir,json=share-shaping-pir,proto3" json:"share_shaping_pir,omitempty"`
	Pbs               uint32                                                                                           `protobuf:"varint,13,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetShapId() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId {
	if x != nil {
		return x.ShapId
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_ShapId
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetBe() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be {
	if x != nil {
		return x.Be
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be_TRUE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetAf1() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1 {
	if x != nil {
		return x.Af1
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af1
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetAf2() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2 {
	if x != nil {
		return x.Af2
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af2
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetAf3() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3 {
	if x != nil {
		return x.Af3
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af3
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetAf4() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4 {
	if x != nil {
		return x.Af4
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Af4
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetEf() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef {
	if x != nil {
		return x.Ef
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Ef
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetCs6() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6 {
	if x != nil {
		return x.Cs6
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Cs6
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetCs7() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7 {
	if x != nil {
		return x.Cs7
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_INVALID_ENUM_VALUE_Cs7
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetQueueScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode {
	if x != nil {
		return x.QueueScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetShareShapingPir() uint32 {
	if x != nil {
		return x.ShareShapingPir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be            Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be  `protobuf:"varint,1,opt,name=be,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be" json:"be,omitempty"`
	Af1           Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1 `protobuf:"varint,2,opt,name=af1,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1" json:"af1,omitempty"`
	Af2           Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2 `protobuf:"varint,3,opt,name=af2,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2" json:"af2,omitempty"`
	Af3           Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3 `protobuf:"varint,4,opt,name=af3,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3" json:"af3,omitempty"`
	Af4           Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4 `protobuf:"varint,5,opt,name=af4,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4" json:"af4,omitempty"`
	Ef            Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef  `protobuf:"varint,6,opt,name=ef,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef" json:"ef,omitempty"`
	Cs6           Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6 `protobuf:"varint,7,opt,name=cs6,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6" json:"cs6,omitempty"`
	Cs7           Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7 `protobuf:"varint,8,opt,name=cs7,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7" json:"cs7,omitempty"`
	RandomDiscard string                                                                                               `protobuf:"bytes,9,opt,name=random_discard,json=random-discard,proto3" json:"random_discard,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetBe() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be {
	if x != nil {
		return x.Be
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be_TRUE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetAf1() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1 {
	if x != nil {
		return x.Af1
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af1
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetAf2() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2 {
	if x != nil {
		return x.Af2
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af2
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetAf3() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3 {
	if x != nil {
		return x.Af3
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af3
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetAf4() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4 {
	if x != nil {
		return x.Af4
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Af4
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetEf() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef {
	if x != nil {
		return x.Ef
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Ef
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetCs6() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6 {
	if x != nil {
		return x.Cs6
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Cs6
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetCs7() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7 {
	if x != nil {
		return x.Cs7
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_INVALID_ENUM_VALUE_Cs7
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard) GetRandomDiscard() string {
	if x != nil {
		return x.RandomDiscard
	}
	return ""
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass  Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass" json:"service_class,omitempty"`
	RandomDiscard string                                                                                                        `protobuf:"bytes,2,opt,name=random_discard,json=random-discard,proto3" json:"random_discard,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 5, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard) GetServiceClass() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard) GetRandomDiscard() string {
	if x != nil {
		return x.RandomDiscard
	}
	return ""
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosValue          Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue     `protobuf:"varint,1,opt,name=cos_value,json=cos-value,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue" json:"cos_value,omitempty"`
	ScheduleMode      Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode `protobuf:"varint,2,opt,name=schedule_mode,json=schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode" json:"schedule_mode,omitempty"`
	Weight            uint32                                                                                          `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Shaping           uint32                                                                                          `protobuf:"varint,4,opt,name=shaping,proto3" json:"shaping,omitempty"`
	ShapingPercentage uint32                                                                                          `protobuf:"varint,5,opt,name=shaping_percentage,json=shaping-percentage,proto3" json:"shaping_percentage,omitempty"`
	Pbs               uint32                                                                                          `protobuf:"varint,6,opt,name=pbs,proto3" json:"pbs,omitempty"`
	FlowWredName      string                                                                                          `protobuf:"bytes,7,opt,name=flow_wred_name,json=flow-wred-name,proto3" json:"flow_wred_name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 6, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) GetCosValue() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue {
	if x != nil {
		return x.CosValue
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue_COS0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) GetScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode {
	if x != nil {
		return x.ScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) GetShaping() uint32 {
	if x != nil {
		return x.Shaping
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) GetShapingPercentage() uint32 {
	if x != nil {
		return x.ShapingPercentage
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue) GetFlowWredName() string {
	if x != nil {
		return x.FlowWredName
	}
	return ""
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass      Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass" json:"service_class,omitempty"`
	Priority          uint32                                                                                            `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight            uint32                                                                                            `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Shaping           uint32                                                                                            `protobuf:"varint,4,opt,name=shaping,proto3" json:"shaping,omitempty"`
	ShapingPercentage uint32                                                                                            `protobuf:"varint,5,opt,name=shaping_percentage,json=shaping-percentage,proto3" json:"shaping_percentage,omitempty"`
	Pbs               uint32                                                                                            `protobuf:"varint,6,opt,name=pbs,proto3" json:"pbs,omitempty"`
	FlowWredName      string                                                                                            `protobuf:"bytes,7,opt,name=flow_wred_name,json=flow-wred-name,proto3" json:"flow_wred_name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 7, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) GetServiceClass() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) GetShaping() uint32 {
	if x != nil {
		return x.Shaping
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) GetShapingPercentage() uint32 {
	if x != nil {
		return x.ShapingPercentage
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue) GetFlowWredName() string {
	if x != nil {
		return x.FlowWredName
	}
	return ""
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority     uint32                                                                                                  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	ScheduleMode Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode `protobuf:"varint,2,opt,name=schedule_mode,json=schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode" json:"schedule_mode,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 8, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule) GetScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode {
	if x != nil {
		return x.ScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode_PQ
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapId          Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId       `protobuf:"varint,1,opt,name=shap_id,json=shap-id,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId" json:"shap_id,omitempty"`
	Be              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be           `protobuf:"varint,2,opt,name=be,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be" json:"be,omitempty"`
	Af1             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1          `protobuf:"varint,3,opt,name=af1,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1" json:"af1,omitempty"`
	Af2             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2          `protobuf:"varint,4,opt,name=af2,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2" json:"af2,omitempty"`
	Af3             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3          `protobuf:"varint,5,opt,name=af3,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3" json:"af3,omitempty"`
	Af4             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4          `protobuf:"varint,6,opt,name=af4,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4" json:"af4,omitempty"`
	Ef              Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef           `protobuf:"varint,7,opt,name=ef,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef" json:"ef,omitempty"`
	Cs6             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6          `protobuf:"varint,8,opt,name=cs6,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6" json:"cs6,omitempty"`
	Cs7             Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7          `protobuf:"varint,9,opt,name=cs7,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7" json:"cs7,omitempty"`
	ScheduleMode    Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode `protobuf:"varint,10,opt,name=schedule_mode,json=schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode" json:"schedule_mode,omitempty"`
	Weight          uint32                                                                                                          `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	ShareShapingPir uint32                                                                                                          `protobuf:"varint,12,opt,name=share_shaping_pir,json=share-shaping-pir,proto3" json:"share_shaping_pir,omitempty"`
	Pbs             uint32                                                                                                          `protobuf:"varint,13,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 9, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetShapId() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId {
	if x != nil {
		return x.ShapId
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_ShapId
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetBe() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be {
	if x != nil {
		return x.Be
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be_TRUE
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetAf1() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1 {
	if x != nil {
		return x.Af1
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af1
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetAf2() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2 {
	if x != nil {
		return x.Af2
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af2
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetAf3() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3 {
	if x != nil {
		return x.Af3
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af3
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetAf4() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4 {
	if x != nil {
		return x.Af4
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Af4
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetEf() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef {
	if x != nil {
		return x.Ef
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Ef
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetCs6() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6 {
	if x != nil {
		return x.Cs6
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Cs6
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetCs7() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7 {
	if x != nil {
		return x.Cs7
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_INVALID_ENUM_VALUE_Cs7
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetScheduleMode() Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode {
	if x != nil {
		return x.ScheduleMode
	}
	return Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetShareShapingPir() uint32 {
	if x != nil {
		return x.ShareShapingPir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cos            uint32                                                                                               `protobuf:"varint,1,opt,name=cos,proto3" json:"cos,omitempty"`
	FlowWred       *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred       `protobuf:"bytes,2,opt,name=flow_wred,json=flow-wred,proto3" json:"flow_wred,omitempty"`
	CarMode        *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode        `protobuf:"bytes,3,opt,name=car_mode,json=car-mode,proto3" json:"car_mode,omitempty"`
	RemarkColor    *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor    `protobuf:"bytes,4,opt,name=remark_color,json=remark-color,proto3" json:"remark_color,omitempty"`
	ParentPriority *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority `protobuf:"bytes,5,opt,name=parent_priority,json=parent-priority,proto3" json:"parent_priority,omitempty"`
	Pir            *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir            `protobuf:"bytes,6,opt,name=pir,proto3" json:"pir,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 10, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) GetCos() uint32 {
	if x != nil {
		return x.Cos
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) GetFlowWred() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred {
	if x != nil {
		return x.FlowWred
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) GetCarMode() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode {
	if x != nil {
		return x.CarMode
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) GetRemarkColor() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor {
	if x != nil {
		return x.RemarkColor
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) GetParentPriority() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority {
	if x != nil {
		return x.ParentPriority
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue) GetPir() *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir {
	if x != nil {
		return x.Pir
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 10, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 10, 0, 1}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 10, 0, 2}
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirParentPriority uint32 `protobuf:"varint,1,opt,name=cir_parent_priority,json=cir-parent-priority,proto3" json:"cir_parent_priority,omitempty"`
	CirWeight         uint32 `protobuf:"varint,2,opt,name=cir_weight,json=cir-weight,proto3" json:"cir_weight,omitempty"`
	PirParentPriority uint32 `protobuf:"varint,3,opt,name=pir_parent_priority,json=pir-parent-priority,proto3" json:"pir_parent_priority,omitempty"`
	PirWeight         uint32 `protobuf:"varint,4,opt,name=pir_weight,json=pir-weight,proto3" json:"pir_weight,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 10, 0, 3}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) GetCirParentPriority() uint32 {
	if x != nil {
		return x.CirParentPriority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) GetCirWeight() uint32 {
	if x != nil {
		return x.CirWeight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) GetPirParentPriority() uint32 {
	if x != nil {
		return x.PirParentPriority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority) GetPirWeight() uint32 {
	if x != nil {
		return x.PirWeight
	}
	return 0
}

type Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pbs uint32 `protobuf:"varint,1,opt,name=pbs,proto3" json:"pbs,omitempty"`
	Cbs uint32 `protobuf:"varint,2,opt,name=cbs,proto3" json:"cbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 0, 0, 10, 0, 4}
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_Profiles_Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mode                 Qos_QueueSchedulerTemplate_Profiles_Profile_Mode                  `protobuf:"varint,2,opt,name=mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Mode" json:"mode,omitempty"`
	Description          string                                                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UserQueues           *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues           `protobuf:"bytes,4,opt,name=user_queues,json=user-queues,proto3" json:"user_queues,omitempty"`
	UserQueueWeights     *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights     `protobuf:"bytes,5,opt,name=user_queue_weights,json=user-queue-weights,proto3" json:"user_queue_weights,omitempty"`
	UserQueueTimeRanges  *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges  `protobuf:"bytes,6,opt,name=user_queue_time_ranges,json=user-queue-time-ranges,proto3" json:"user_queue_time_ranges,omitempty"`
	Cars                 *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars                 `protobuf:"bytes,7,opt,name=cars,proto3" json:"cars,omitempty"`
	ProfileCars          *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars          `protobuf:"bytes,8,opt,name=profile_cars,json=profile-cars,proto3" json:"profile_cars,omitempty"`
	Suppressions         *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions         `protobuf:"bytes,9,opt,name=suppressions,proto3" json:"suppressions,omitempty"`
	MplsTunnelFlowQueues *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues `protobuf:"bytes,10,opt,name=mpls_tunnel_flow_queues,json=mpls-tunnel-flow-queues,proto3" json:"mpls_tunnel_flow_queues,omitempty"`
	EightCosModeQueues   *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues   `protobuf:"bytes,11,opt,name=eight_cos_mode_queues,json=eight-cos-mode-queues,proto3" json:"eight_cos_mode_queues,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetMode() Qos_QueueSchedulerTemplate_Profiles_Profile_Mode {
	if x != nil {
		return x.Mode
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Mode_NORMAL
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetUserQueues() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues {
	if x != nil {
		return x.UserQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetUserQueueWeights() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights {
	if x != nil {
		return x.UserQueueWeights
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetUserQueueTimeRanges() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges {
	if x != nil {
		return x.UserQueueTimeRanges
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetCars() *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars {
	if x != nil {
		return x.Cars
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetProfileCars() *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars {
	if x != nil {
		return x.ProfileCars
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetSuppressions() *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions {
	if x != nil {
		return x.Suppressions
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetMplsTunnelFlowQueues() *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues {
	if x != nil {
		return x.MplsTunnelFlowQueues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile) GetEightCosModeQueues() *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues {
	if x != nil {
		return x.EightCosModeQueues
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueue []*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue `protobuf:"bytes,1,rep,name=user_queue,json=user-queue,proto3" json:"user_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues) GetUserQueue() []*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue {
	if x != nil {
		return x.UserQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueWeight []*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight `protobuf:"bytes,1,rep,name=user_queue_weight,json=user-queue-weight,proto3" json:"user_queue_weight,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights) GetUserQueueWeight() []*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight {
	if x != nil {
		return x.UserQueueWeight
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueTimeRange []*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange `protobuf:"bytes,1,rep,name=user_queue_time_range,json=user-queue-time-range,proto3" json:"user_queue_time_range,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges) GetUserQueueTimeRange() []*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange {
	if x != nil {
		return x.UserQueueTimeRange
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Car []*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car `protobuf:"bytes,1,rep,name=car,proto3" json:"car,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_Cars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars) GetCar() []*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car {
	if x != nil {
		return x.Car
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileCar []*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar `protobuf:"bytes,1,rep,name=profile_car,json=profile-car,proto3" json:"profile_car,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars) GetProfileCar() []*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar {
	if x != nil {
		return x.ProfileCar
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suppression []*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression `protobuf:"bytes,1,rep,name=suppression,proto3" json:"suppression,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 5}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions) GetSuppression() []*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression {
	if x != nil {
		return x.Suppression
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsTunnelFlowQueue *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue `protobuf:"bytes,1,opt,name=mpls_tunnel_flow_queue,json=mpls-tunnel-flow-queue,proto3" json:"mpls_tunnel_flow_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 6}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues) GetMplsTunnelFlowQueue() *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue {
	if x != nil {
		return x.MplsTunnelFlowQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EightCosModeQueue []*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue `protobuf:"bytes,1,rep,name=eight_cos_mode_queue,json=eight-cos-mode-queue,proto3" json:"eight_cos_mode_queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 7}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues) GetEightCosModeQueue() []*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue {
	if x != nil {
		return x.EightCosModeQueue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction           Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction       `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction" json:"direction,omitempty"`
	ConfigType          *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType     `protobuf:"bytes,2,opt,name=config_type,json=config-type,proto3" json:"config_type,omitempty"`
	Cbs                 uint32                                                                           `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs                 uint32                                                                           `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
	PriorityLevelId     Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId `protobuf:"varint,5,opt,name=priority_level_id,json=priority-level-id,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId" json:"priority_level_id,omitempty"`
	FlowQueueName       string                                                                           `protobuf:"bytes,6,opt,name=flow_queue_name,json=flow-queue-name,proto3" json:"flow_queue_name,omitempty"`
	FlowMappingName     string                                                                           `protobuf:"bytes,7,opt,name=flow_mapping_name,json=flow-mapping-name,proto3" json:"flow_mapping_name,omitempty"`
	UserGroupQueueName  string                                                                           `protobuf:"bytes,8,opt,name=user_group_queue_name,json=user-group-queue-name,proto3" json:"user_group_queue_name,omitempty"`
	ServiceTemplateName string                                                                           `protobuf:"bytes,9,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
	AdjustOnCard        Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard    `protobuf:"varint,10,opt,name=adjust_on_card,json=adjust-on-card,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard" json:"adjust_on_card,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetDirection() Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetConfigType() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetPriorityLevelId() Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId {
	if x != nil {
		return x.PriorityLevelId
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_INVALID_ENUM_VALUE_PriorityLevelId
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetFlowQueueName() string {
	if x != nil {
		return x.FlowQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetFlowMappingName() string {
	if x != nil {
		return x.FlowMappingName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetUserGroupQueueName() string {
	if x != nil {
		return x.UserGroupQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue) GetAdjustOnCard() Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard {
	if x != nil {
		return x.AdjustOnCard
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard_DISABLE
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirMode        *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode        `protobuf:"bytes,1,opt,name=cir_mode,json=cir-mode,proto3" json:"cir_mode,omitempty"`
	CirPercentMode *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode `protobuf:"bytes,2,opt,name=cir_percent_mode,json=cir-percent-mode,proto3" json:"cir_percent_mode,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType) GetCirMode() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode {
	if x != nil {
		return x.CirMode
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType) GetCirPercentMode() *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode {
	if x != nil {
		return x.CirPercentMode
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir uint32 `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirPercent uint32 `protobuf:"varint,1,opt,name=cir_percent,json=cir-percent,proto3" json:"cir_percent,omitempty"`
	PirPercent uint32 `protobuf:"varint,2,opt,name=pir_percent,json=pir-percent,proto3" json:"pir_percent,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0, 0, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode) GetCirPercent() uint32 {
	if x != nil {
		return x.CirPercent
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode) GetPirPercent() uint32 {
	if x != nil {
		return x.PirPercent
	}
	return 0
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction" json:"direction,omitempty"`
	Weight    uint32                                                                                 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight) GetDirection() Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction           Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction       `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction" json:"direction,omitempty"`
	TimeRangeName       string                                                                                             `protobuf:"bytes,2,opt,name=time_range_name,json=time-range-name,proto3" json:"time_range_name,omitempty"`
	Cir                 uint32                                                                                             `protobuf:"varint,3,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir                 uint32                                                                                             `protobuf:"varint,4,opt,name=pir,proto3" json:"pir,omitempty"`
	Cbs                 uint32                                                                                             `protobuf:"varint,5,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs                 uint32                                                                                             `protobuf:"varint,6,opt,name=pbs,proto3" json:"pbs,omitempty"`
	PriorityLevelId     Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId `protobuf:"varint,7,opt,name=priority_level_id,json=priority-level-id,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId" json:"priority_level_id,omitempty"`
	FlowQueueName       string                                                                                             `protobuf:"bytes,8,opt,name=flow_queue_name,json=flow-queue-name,proto3" json:"flow_queue_name,omitempty"`
	FlowMappingName     string                                                                                             `protobuf:"bytes,9,opt,name=flow_mapping_name,json=flow-mapping-name,proto3" json:"flow_mapping_name,omitempty"`
	UserGroupQueueName  string                                                                                             `protobuf:"bytes,10,opt,name=user_group_queue_name,json=user-group-queue-name,proto3" json:"user_group_queue_name,omitempty"`
	ServiceTemplateName string                                                                                             `protobuf:"bytes,11,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
	AdjustOnCard        Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard    `protobuf:"varint,12,opt,name=adjust_on_card,json=adjust-on-card,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard" json:"adjust_on_card,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetDirection() Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetTimeRangeName() string {
	if x != nil {
		return x.TimeRangeName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetPriorityLevelId() Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId {
	if x != nil {
		return x.PriorityLevelId
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_INVALID_ENUM_VALUE_PriorityLevelId
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetFlowQueueName() string {
	if x != nil {
		return x.FlowQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetFlowMappingName() string {
	if x != nil {
		return x.FlowMappingName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetUserGroupQueueName() string {
	if x != nil {
		return x.UserGroupQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange) GetAdjustOnCard() Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard {
	if x != nil {
		return x.AdjustOnCard
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard_DISABLE
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type               `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type" json:"type,omitempty"`
	Direction          Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction          `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction" json:"direction,omitempty"`
	Cbs                uint32                                                                  `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs                uint32                                                                  `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
	GreenAction        Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction        `protobuf:"varint,5,opt,name=green_action,json=green-action,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction" json:"green_action,omitempty"`
	GreenServiceClass  Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass  `protobuf:"varint,6,opt,name=green_service_class,json=green-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass" json:"green_service_class,omitempty"`
	GreenColor         Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor         `protobuf:"varint,7,opt,name=green_color,json=green-color,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor" json:"green_color,omitempty"`
	YellowAction       Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction       `protobuf:"varint,8,opt,name=yellow_action,json=yellow-action,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction" json:"yellow_action,omitempty"`
	YellowServiceClass Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass `protobuf:"varint,9,opt,name=yellow_service_class,json=yellow-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass" json:"yellow_service_class,omitempty"`
	YellowColor        Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor        `protobuf:"varint,10,opt,name=yellow_color,json=yellow-color,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor" json:"yellow_color,omitempty"`
	RedAction          Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction          `protobuf:"varint,11,opt,name=red_action,json=red-action,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction" json:"red_action,omitempty"`
	RedServiceClass    Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass    `protobuf:"varint,12,opt,name=red_service_class,json=red-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass" json:"red_service_class,omitempty"`
	RedColor           Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor           `protobuf:"varint,13,opt,name=red_color,json=red-color,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor" json:"red_color,omitempty"`
	ColorAware         Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware         `protobuf:"varint,14,opt,name=color_aware,json=color-aware,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware" json:"color_aware,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetType() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type {
	if x != nil {
		return x.Type
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_INVALID_ENUM_VALUE_Type
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetDirection() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetGreenAction() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction {
	if x != nil {
		return x.GreenAction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction_PASS
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetGreenServiceClass() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass {
	if x != nil {
		return x.GreenServiceClass
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetGreenColor() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor {
	if x != nil {
		return x.GreenColor
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor_GREEN
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetYellowAction() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction {
	if x != nil {
		return x.YellowAction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction_PASS
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetYellowServiceClass() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass {
	if x != nil {
		return x.YellowServiceClass
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetYellowColor() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor {
	if x != nil {
		return x.YellowColor
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor_GREEN
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetRedAction() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction {
	if x != nil {
		return x.RedAction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction_PASS
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetRedServiceClass() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass {
	if x != nil {
		return x.RedServiceClass
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetRedColor() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor {
	if x != nil {
		return x.RedColor
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor_GREEN
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car) GetColorAware() Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware {
	if x != nil {
		return x.ColorAware
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_INVALID_ENUM_VALUE_ColorAware
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type               `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type" json:"type,omitempty"`
	Direction            Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction          `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction" json:"direction,omitempty"`
	CirValue             uint32                                                                                `protobuf:"varint,3,opt,name=cir_value,json=cir-value,proto3" json:"cir_value,omitempty"`
	PirValue             uint32                                                                                `protobuf:"varint,4,opt,name=pir_value,json=pir-value,proto3" json:"pir_value,omitempty"`
	Cbs                  uint32                                                                                `protobuf:"varint,5,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs                  uint32                                                                                `protobuf:"varint,6,opt,name=pbs,proto3" json:"pbs,omitempty"`
	PriorityAware        Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware      `protobuf:"varint,7,opt,name=priority_aware,json=priority-aware,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware" json:"priority_aware,omitempty"`
	PriorityTemplateName string                                                                                `protobuf:"bytes,8,opt,name=priority_template_name,json=priority-template-name,proto3" json:"priority_template_name,omitempty"`
	AdjustValue          int32                                                                                 `protobuf:"varint,9,opt,name=adjust_value,json=adjust-value,proto3" json:"adjust_value,omitempty"`
	GreenAction          Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction        `protobuf:"varint,10,opt,name=green_action,json=green-action,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction" json:"green_action,omitempty"`
	GreenServiceClass    Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass  `protobuf:"varint,11,opt,name=green_service_class,json=green-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass" json:"green_service_class,omitempty"`
	GreenColor           Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor         `protobuf:"varint,12,opt,name=green_color,json=green-color,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor" json:"green_color,omitempty"`
	YellowAction         Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction       `protobuf:"varint,13,opt,name=yellow_action,json=yellow-action,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction" json:"yellow_action,omitempty"`
	YellowServiceClass   Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass `protobuf:"varint,14,opt,name=yellow_service_class,json=yellow-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass" json:"yellow_service_class,omitempty"`
	YellowColor          Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor        `protobuf:"varint,15,opt,name=yellow_color,json=yellow-color,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor" json:"yellow_color,omitempty"`
	RedAction            Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction          `protobuf:"varint,16,opt,name=red_action,json=red-action,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction" json:"red_action,omitempty"`
	RedServiceClass      Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass    `protobuf:"varint,17,opt,name=red_service_class,json=red-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass" json:"red_service_class,omitempty"`
	RedColor             Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor           `protobuf:"varint,18,opt,name=red_color,json=red-color,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor" json:"red_color,omitempty"`
	ColorAware           Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware         `protobuf:"varint,19,opt,name=color_aware,json=color-aware,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware" json:"color_aware,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 4, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetType() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type {
	if x != nil {
		return x.Type
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_Type
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetDirection() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetCirValue() uint32 {
	if x != nil {
		return x.CirValue
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetPirValue() uint32 {
	if x != nil {
		return x.PirValue
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetPriorityAware() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware {
	if x != nil {
		return x.PriorityAware
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_PriorityAware
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetPriorityTemplateName() string {
	if x != nil {
		return x.PriorityTemplateName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetAdjustValue() int32 {
	if x != nil {
		return x.AdjustValue
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetGreenAction() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction {
	if x != nil {
		return x.GreenAction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction_PASS
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetGreenServiceClass() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass {
	if x != nil {
		return x.GreenServiceClass
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetGreenColor() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor {
	if x != nil {
		return x.GreenColor
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor_GREEN
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetYellowAction() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction {
	if x != nil {
		return x.YellowAction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction_PASS
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetYellowServiceClass() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass {
	if x != nil {
		return x.YellowServiceClass
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetYellowColor() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor {
	if x != nil {
		return x.YellowColor
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor_GREEN
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetRedAction() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction {
	if x != nil {
		return x.RedAction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction_PASS
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetRedServiceClass() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass {
	if x != nil {
		return x.RedServiceClass
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetRedColor() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor {
	if x != nil {
		return x.RedColor
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor_GREEN
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar) GetColorAware() Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware {
	if x != nil {
		return x.ColorAware
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_INVALID_ENUM_VALUE_ColorAware
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type" json:"type,omitempty"`
	Direction   Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction" json:"direction,omitempty"`
	Cir         uint32                                                                         `protobuf:"varint,3,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs         uint32                                                                         `protobuf:"varint,4,opt,name=cbs,proto3" json:"cbs,omitempty"`
	AdjustValue int32                                                                          `protobuf:"varint,5,opt,name=adjust_value,json=adjust-value,proto3" json:"adjust_value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 5, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) GetType() Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type {
	if x != nil {
		return x.Type
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_INVALID_ENUM_VALUE_Type
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) GetDirection() Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression) GetAdjustValue() int32 {
	if x != nil {
		return x.AdjustValue
	}
	return 0
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueueName       string `protobuf:"bytes,1,opt,name=flow_queue_name,json=flow-queue-name,proto3" json:"flow_queue_name,omitempty"`
	FlowMappingName     string `protobuf:"bytes,2,opt,name=flow_mapping_name,json=flow-mapping-name,proto3" json:"flow_mapping_name,omitempty"`
	UserGroupQueueName  string `protobuf:"bytes,3,opt,name=user_group_queue_name,json=user-group-queue-name,proto3" json:"user_group_queue_name,omitempty"`
	ServiceTemplateName string `protobuf:"bytes,4,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 6, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) GetFlowQueueName() string {
	if x != nil {
		return x.FlowQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) GetFlowMappingName() string {
	if x != nil {
		return x.FlowMappingName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) GetUserGroupQueueName() string {
	if x != nil {
		return x.UserGroupQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

type Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction          Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction" json:"direction,omitempty"`
	UserQueueName      string                                                                                     `protobuf:"bytes,2,opt,name=user_queue_name,json=user-queue-name,proto3" json:"user_queue_name,omitempty"`
	FlowQueueName      string                                                                                     `protobuf:"bytes,3,opt,name=flow_queue_name,json=flow-queue-name,proto3" json:"flow_queue_name,omitempty"`
	UserGroupQueueName string                                                                                     `protobuf:"bytes,4,opt,name=user_group_queue_name,json=user-group-queue-name,proto3" json:"user_group_queue_name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 1, 0, 7, 0}
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) GetDirection() Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) GetUserQueueName() string {
	if x != nil {
		return x.UserQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) GetFlowQueueName() string {
	if x != nil {
		return x.FlowQueueName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue) GetUserGroupQueueName() string {
	if x != nil {
		return x.UserGroupQueueName
	}
	return ""
}

type Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping) GetParameters() *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter []*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter `protobuf:"bytes,1,rep,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 2, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters) GetParameter() []*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueueServiceClass Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass `protobuf:"varint,1,opt,name=flow_queue_service_class,json=flow-queue-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass" json:"flow_queue_service_class,omitempty"`
	PortQueueServiceClass Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass `protobuf:"varint,2,opt,name=port_queue_service_class,json=port-queue-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass" json:"port_queue_service_class,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter) Reset() {
	*x = Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 2, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter) GetFlowQueueServiceClass() Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass {
	if x != nil {
		return x.FlowQueueServiceClass
	}
	return Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter) GetPortQueueServiceClass() Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass {
	if x != nil {
		return x.PortQueueServiceClass
	}
	return Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass_BE
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string                                                                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mode                      Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode                       `protobuf:"varint,2,opt,name=mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode" json:"mode,omitempty"`
	ModeTemplate              Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate               `protobuf:"varint,3,opt,name=mode_template,json=mode-template,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate" json:"mode_template,omitempty"`
	Shapings                  *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings                  `protobuf:"bytes,4,opt,name=shapings,proto3" json:"shapings,omitempty"`
	ShapingPriortys           *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys           `protobuf:"bytes,5,opt,name=shaping_priortys,json=shaping-priortys,proto3" json:"shaping_priortys,omitempty"`
	CirPirs                   *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs                   `protobuf:"bytes,6,opt,name=cir_pirs,json=cir-pirs,proto3" json:"cir_pirs,omitempty"`
	Weights                   *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights                   `protobuf:"bytes,7,opt,name=weights,proto3" json:"weights,omitempty"`
	UserGroupQueueStatisticss *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss `protobuf:"bytes,8,opt,name=user_group_queue_statisticss,json=user-group-queue-statisticss,proto3" json:"user_group_queue_statisticss,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetMode() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode {
	if x != nil {
		return x.Mode
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode_NORMAL
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetModeTemplate() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate {
	if x != nil {
		return x.ModeTemplate
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate_DISABLE
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetShapings() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings {
	if x != nil {
		return x.Shapings
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetShapingPriortys() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys {
	if x != nil {
		return x.ShapingPriortys
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetCirPirs() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs {
	if x != nil {
		return x.CirPirs
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetWeights() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue) GetUserGroupQueueStatisticss() *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss {
	if x != nil {
		return x.UserGroupQueueStatisticss
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shaping []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping `protobuf:"bytes,1,rep,name=shaping,proto3" json:"shaping,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings) GetShaping() []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping {
	if x != nil {
		return x.Shaping
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingPriorty []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty `protobuf:"bytes,1,rep,name=shaping_priorty,json=shaping-priorty,proto3" json:"shaping_priorty,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys) GetShapingPriorty() []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty {
	if x != nil {
		return x.ShapingPriorty
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirPir []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir `protobuf:"bytes,1,rep,name=cir_pir,json=cir-pir,proto3" json:"cir_pir,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 2}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs) GetCirPir() []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir {
	if x != nil {
		return x.CirPir
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight `protobuf:"bytes,1,rep,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 3}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights) GetWeight() []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight {
	if x != nil {
		return x.Weight
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroupQueueStatistics []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics `protobuf:"bytes,1,rep,name=user_group_queue_statistics,json=user-group-queue-statistics,proto3" json:"user_group_queue_statistics,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 4}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss) GetUserGroupQueueStatistics() []*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics {
	if x != nil {
		return x.UserGroupQueueStatistics
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction" json:"direction,omitempty"`
	Pir       uint32                                                                               `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
	Pbs       uint32                                                                               `protobuf:"varint,3,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) GetDirection() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority     Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority  `protobuf:"varint,1,opt,name=priority,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority" json:"priority,omitempty"`
	Direction    Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction" json:"direction,omitempty"`
	ShapingValue uint32                                                                                             `protobuf:"varint,3,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
	Pbs          uint32                                                                                             `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) GetPriority() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority {
	if x != nil {
		return x.Priority
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority_PRIORITY0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) GetDirection() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction" json:"direction,omitempty"`
	Cir       uint32                                                                             `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs       uint32                                                                             `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pir       uint32                                                                             `protobuf:"varint,4,opt,name=pir,proto3" json:"pir,omitempty"`
	Pbs       uint32                                                                             `protobuf:"varint,5,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 2, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) GetDirection() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction" json:"direction,omitempty"`
	WeightValue uint32                                                                             `protobuf:"varint,2,opt,name=weight_value,json=weight-value,proto3" json:"weight_value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 3, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight) GetDirection() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight) GetWeightValue() uint32 {
	if x != nil {
		return x.WeightValue
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId         string                                                                                                                    `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction      Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction    `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction" json:"direction,omitempty"`
	ServiceClass   Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass `protobuf:"varint,3,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	GroupName      string                                                                                                                    `protobuf:"bytes,4,opt,name=group_name,json=group-name,proto3" json:"group_name,omitempty"`
	PassPackets    uint64                                                                                                                    `protobuf:"varint,5,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                                                                    `protobuf:"varint,6,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                                                                    `protobuf:"varint,7,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                                                                    `protobuf:"varint,8,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                                                                    `protobuf:"varint,9,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                                                                    `protobuf:"varint,10,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                                                                    `protobuf:"varint,11,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                                                                    `protobuf:"varint,12,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 3, 0, 4, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetDirection() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetServiceClass() Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                                                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SlotId             string                                                                          `protobuf:"bytes,2,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ServiceLengths     *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths     `protobuf:"bytes,3,opt,name=service_lengths,json=service-lengths,proto3" json:"service_lengths,omitempty"`
	ServiceLengthOnEtm *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm `protobuf:"bytes,4,opt,name=service_length_on_etm,json=service-length-on-etm,proto3" json:"service_length_on_etm,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) Reset() {
	*x = Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 4, 0}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) GetServiceLengths() *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths {
	if x != nil {
		return x.ServiceLengths
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate) GetServiceLengthOnEtm() *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm {
	if x != nil {
		return x.ServiceLengthOnEtm
	}
	return nil
}

type Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceLength []*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength `protobuf:"bytes,1,rep,name=service_length,json=service-length,proto3" json:"service_length,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths) Reset() {
	*x = Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 4, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths) GetServiceLength() []*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength {
	if x != nil {
		return x.ServiceLength
	}
	return nil
}

type Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm) Reset() {
	*x = Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 4, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction" json:"direction,omitempty"`
	Value     int32                                                                                              `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength) Reset() {
	*x = Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 4, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength) GetDirection() Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction_INBOUND
}

func (x *Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                                                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping) Reset() {
	*x = Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 5, 0}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping) GetParameters() *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter []*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter `protobuf:"bytes,1,rep,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters) Reset() {
	*x = Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 5, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters) GetParameter() []*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueueServiceClass Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass `protobuf:"varint,1,opt,name=flow_queue_service_class,json=flow-queue-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass" json:"flow_queue_service_class,omitempty"`
	FourQueueServiceClass Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass `protobuf:"varint,2,opt,name=four_queue_service_class,json=four-queue-service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass" json:"four_queue_service_class,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter) Reset() {
	*x = Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 5, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter) GetFlowQueueServiceClass() Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass {
	if x != nil {
		return x.FlowQueueServiceClass
	}
	return Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter) GetFourQueueServiceClass() Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass {
	if x != nil {
		return x.FourQueueServiceClass
	}
	return Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass_COS0
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                                                                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queues      *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues      `protobuf:"bytes,2,opt,name=queues,proto3" json:"queues,omitempty"`
	QueueStates *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates `protobuf:"bytes,3,opt,name=queue_states,json=queue-states,proto3" json:"queue_states,omitempty"`
	ShareShapes *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes `protobuf:"bytes,4,opt,name=share_shapes,json=share-shapes,proto3" json:"share_shapes,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) GetQueues() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) GetQueueStates() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates {
	if x != nil {
		return x.QueueStates
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate) GetShareShapes() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes {
	if x != nil {
		return x.ShareShapes
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue `protobuf:"bytes,1,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues) GetQueue() []*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueState []*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState `protobuf:"bytes,1,rep,name=queue_state,json=queue-state,proto3" json:"queue_state,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates) GetQueueState() []*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState {
	if x != nil {
		return x.QueueState
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareShape *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape `protobuf:"bytes,1,opt,name=share_shape,json=share-shape,proto3" json:"share_shape,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes) GetShareShape() *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape {
	if x != nil {
		return x.ShareShape
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass" json:"service_class,omitempty"`
	PortWredName string                                                                                    `protobuf:"bytes,2,opt,name=port_wred_name,json=port-wred-name,proto3" json:"port_wred_name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue) GetServiceClass() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue) GetPortWredName() string {
	if x != nil {
		return x.PortWredName
	}
	return ""
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass" json:"service_class,omitempty"`
	PortWredName string                                                                                              `protobuf:"bytes,2,opt,name=port_wred_name,json=port-wred-name,proto3" json:"port_wred_name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState) GetServiceClass() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState) GetPortWredName() string {
	if x != nil {
		return x.PortWredName
	}
	return ""
}

type Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Be                Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be                `protobuf:"varint,1,opt,name=be,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be" json:"be,omitempty"`
	Af1               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1               `protobuf:"varint,2,opt,name=af1,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1" json:"af1,omitempty"`
	Af2               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2               `protobuf:"varint,3,opt,name=af2,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2" json:"af2,omitempty"`
	Af3               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3               `protobuf:"varint,4,opt,name=af3,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3" json:"af3,omitempty"`
	Af4               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4               `protobuf:"varint,5,opt,name=af4,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4" json:"af4,omitempty"`
	Ef                Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef                `protobuf:"varint,6,opt,name=ef,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef" json:"ef,omitempty"`
	Cs6               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6               `protobuf:"varint,7,opt,name=cs6,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6" json:"cs6,omitempty"`
	Cs7               Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7               `protobuf:"varint,8,opt,name=cs7,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7" json:"cs7,omitempty"`
	QueueScheduleMode Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode `protobuf:"varint,9,opt,name=queue_schedule_mode,json=queue-schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode" json:"queue_schedule_mode,omitempty"`
	Weight            uint32                                                                                                   `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Pbs               uint32                                                                                                   `protobuf:"varint,11,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) Reset() {
	*x = Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 6, 0, 2, 0}
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetBe() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be {
	if x != nil {
		return x.Be
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be_TRUE
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetAf1() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1 {
	if x != nil {
		return x.Af1
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af1
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetAf2() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2 {
	if x != nil {
		return x.Af2
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af2
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetAf3() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3 {
	if x != nil {
		return x.Af3
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af3
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetAf4() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4 {
	if x != nil {
		return x.Af4
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Af4
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetEf() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef {
	if x != nil {
		return x.Ef
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Ef
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetCs6() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6 {
	if x != nil {
		return x.Cs6
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Cs6
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetCs7() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7 {
	if x != nil {
		return x.Cs7
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_INVALID_ENUM_VALUE_Cs7
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetQueueScheduleMode() Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode {
	if x != nil {
		return x.QueueScheduleMode
	}
	return Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode_PQ
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChannelParas *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas `protobuf:"bytes,2,opt,name=channel_paras,json=channel-paras,proto3" json:"channel_paras,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile) Reset() {
	*x = Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 7, 0}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile) GetChannelParas() *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas {
	if x != nil {
		return x.ChannelParas
	}
	return nil
}

type Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPara []*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara `protobuf:"bytes,1,rep,name=channel_para,json=channel-para,proto3" json:"channel_para,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas) Reset() {
	*x = Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 7, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas) GetChannelPara() []*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara {
	if x != nil {
		return x.ChannelPara
	}
	return nil
}

type Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint32 `protobuf:"varint,1,opt,name=channel_id,json=channel-id,proto3" json:"channel_id,omitempty"`
	Bandwidth uint32 `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Quantity  uint32 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) Reset() {
	*x = Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 7, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                                                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BufferModeSlots      *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots      `protobuf:"bytes,2,opt,name=buffer_mode_slots,json=buffer-mode-slots,proto3" json:"buffer_mode_slots,omitempty"`
	BufferModeInterfaces *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces `protobuf:"bytes,3,opt,name=buffer_mode_interfaces,json=buffer-mode-interfaces,proto3" json:"buffer_mode_interfaces,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) Reset() {
	*x = Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) GetBufferModeSlots() *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots {
	if x != nil {
		return x.BufferModeSlots
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy) GetBufferModeInterfaces() *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces {
	if x != nil {
		return x.BufferModeInterfaces
	}
	return nil
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferModeSlot []*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot `protobuf:"bytes,1,rep,name=buffer_mode_slot,json=buffer-mode-slot,proto3" json:"buffer_mode_slot,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots) Reset() {
	*x = Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots) GetBufferModeSlot() []*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot {
	if x != nil {
		return x.BufferModeSlot
	}
	return nil
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferModeInterface []*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface `protobuf:"bytes,1,rep,name=buffer_mode_interface,json=buffer-mode-interface,proto3" json:"buffer_mode_interface,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces) Reset() {
	*x = Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces) GetBufferModeInterface() []*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface {
	if x != nil {
		return x.BufferModeInterface
	}
	return nil
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          string                                                                                              `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	BufferModeGe    Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe   `protobuf:"varint,2,opt,name=buffer_mode_ge,json=buffer-mode-ge,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe" json:"buffer_mode_ge,omitempty"`
	BufferMode_10Ge Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge `protobuf:"varint,3,opt,name=buffer_mode_10ge,json=buffer-mode-10ge,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge" json:"buffer_mode_10ge,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) Reset() {
	*x = Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) GetBufferModeGe() Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe {
	if x != nil {
		return x.BufferModeGe
	}
	return Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe_NORMAL
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot) GetBufferMode_10Ge() Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge {
	if x != nil {
		return x.BufferMode_10Ge
	}
	return Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge_NORMAL
}

type Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ifname     string                                                                                                    `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	BufferMode Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode `protobuf:"varint,2,opt,name=buffer_mode,json=buffer-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode" json:"buffer_mode,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface) Reset() {
	*x = Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 8, 0, 1, 0}
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface) GetBufferMode() Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode {
	if x != nil {
		return x.BufferMode
	}
	return Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode_NORMAL
}

type Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QueueParameterss *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss `protobuf:"bytes,2,opt,name=queue_parameterss,json=queue-parameterss,proto3" json:"queue_parameterss,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate) Reset() {
	*x = Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 9, 0}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate) GetQueueParameterss() *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss {
	if x != nil {
		return x.QueueParameterss
	}
	return nil
}

type Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueParameters []*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters `protobuf:"bytes,1,rep,name=queue_parameters,json=queue-parameters,proto3" json:"queue_parameters,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss) Reset() {
	*x = Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 9, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss) GetQueueParameters() []*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters {
	if x != nil {
		return x.QueueParameters
	}
	return nil
}

type Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass" json:"service_class,omitempty"`
	CirPercent   uint32                                                                                                      `protobuf:"varint,2,opt,name=cir_percent,json=cir-percent,proto3" json:"cir_percent,omitempty"`
	PirPercent   uint32                                                                                                      `protobuf:"varint,3,opt,name=pir_percent,json=pir-percent,proto3" json:"pir_percent,omitempty"`
	Priority     Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority     `protobuf:"varint,4,opt,name=priority,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority" json:"priority,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) Reset() {
	*x = Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 9, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) GetServiceClass() Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) GetCirPercent() uint32 {
	if x != nil {
		return x.CirPercent
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) GetPirPercent() uint32 {
	if x != nil {
		return x.PirPercent
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters) GetPriority() Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority {
	if x != nil {
		return x.Priority
	}
	return Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority_PQ
}

type Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Shaping *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping `protobuf:"bytes,2,opt,name=shaping,proto3" json:"shaping,omitempty"`
	Weight  *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight  `protobuf:"bytes,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) Reset() {
	*x = Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 10, 0}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) GetShaping() *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping {
	if x != nil {
		return x.Shaping
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue) GetWeight() *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight {
	if x != nil {
		return x.Weight
	}
	return nil
}

type Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapingValue uint32 `protobuf:"varint,1,opt,name=shaping_value,json=shaping-value,proto3" json:"shaping_value,omitempty"`
	Pbs          uint32 `protobuf:"varint,2,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping) Reset() {
	*x = Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 10, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping) GetShapingValue() uint32 {
	if x != nil {
		return x.ShapingValue
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightValue uint32 `protobuf:"varint,1,opt,name=weight_value,json=weight-value,proto3" json:"weight_value,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight) Reset() {
	*x = Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 10, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight) GetWeightValue() uint32 {
	if x != nil {
		return x.WeightValue
	}
	return 0
}

type Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                                                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Queues *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues `protobuf:"bytes,2,opt,name=queues,proto3" json:"queues,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate) Reset() {
	*x = Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 11, 0}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate) GetQueues() *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues {
	if x != nil {
		return x.Queues
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue `protobuf:"bytes,1,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues) Reset() {
	*x = Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 11, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues) GetQueue() []*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass" json:"service_class,omitempty"`
	Color        Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color        `protobuf:"varint,2,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color" json:"color,omitempty"`
	Priority     uint32                                                                                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) Reset() {
	*x = Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 11, 0, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) GetServiceClass() Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass_BE
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) GetColor() Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color {
	if x != nil {
		return x.Color
	}
	return Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color_GREEN
}

func (x *Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                                                                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mode                  Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode                   `protobuf:"varint,2,opt,name=mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode" json:"mode,omitempty"`
	Shaping               *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping               `protobuf:"bytes,3,opt,name=shaping,proto3" json:"shaping,omitempty"`
	ServiceTemplate       *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate       `protobuf:"bytes,4,opt,name=service_template,json=service-template,proto3" json:"service_template,omitempty"`
	PriorityShedulerModes *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes `protobuf:"bytes,5,opt,name=priority_sheduler_modes,json=priority-sheduler-modes,proto3" json:"priority_sheduler_modes,omitempty"`
	ParentPriorityWeights *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights `protobuf:"bytes,6,opt,name=parent_priority_weights,json=parent-priority-weights,proto3" json:"parent_priority_weights,omitempty"`
	ParentPrioritys       *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys       `protobuf:"bytes,7,opt,name=parent_prioritys,json=parent-prioritys,proto3" json:"parent_prioritys,omitempty"`
	PriorityShapings      *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings      `protobuf:"bytes,8,opt,name=priority_shapings,json=priority-shapings,proto3" json:"priority_shapings,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetMode() Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode {
	if x != nil {
		return x.Mode
	}
	return Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode_X_4X_PRIORITY
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetShaping() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping {
	if x != nil {
		return x.Shaping
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetServiceTemplate() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate {
	if x != nil {
		return x.ServiceTemplate
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetPriorityShedulerModes() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes {
	if x != nil {
		return x.PriorityShedulerModes
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetParentPriorityWeights() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights {
	if x != nil {
		return x.ParentPriorityWeights
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetParentPrioritys() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys {
	if x != nil {
		return x.ParentPrioritys
	}
	return nil
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate) GetPriorityShapings() *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings {
	if x != nil {
		return x.PriorityShapings
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pbs uint32 `protobuf:"varint,1,opt,name=pbs,proto3" json:"pbs,omitempty"`
	Cbs uint32 `protobuf:"varint,2,opt,name=cbs,proto3" json:"cbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping) ProtoMessage() {}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 1}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityShedulerMode []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode `protobuf:"bytes,1,rep,name=priority_sheduler_mode,json=priority-sheduler-mode,proto3" json:"priority_sheduler_mode,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 2}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes) GetPriorityShedulerMode() []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode {
	if x != nil {
		return x.PriorityShedulerMode
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentPriorityWeight []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight `protobuf:"bytes,1,rep,name=parent_priority_weight,json=parent-priority-weight,proto3" json:"parent_priority_weight,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 3}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights) GetParentPriorityWeight() []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight {
	if x != nil {
		return x.ParentPriorityWeight
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentPriority []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority `protobuf:"bytes,1,rep,name=parent_priority,json=parent-priority,proto3" json:"parent_priority,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 4}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys) GetParentPriority() []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority {
	if x != nil {
		return x.ParentPriority
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityShaping []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping `protobuf:"bytes,1,rep,name=priority_shaping,json=priority-shaping,proto3" json:"priority_shaping,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 5}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings) GetPriorityShaping() []*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping {
	if x != nil {
		return x.PriorityShaping
	}
	return nil
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority     uint32                                                                                                                  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	ScheduleMode Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode `protobuf:"varint,2,opt,name=schedule_mode,json=schedule-mode,proto3,enum=huaweiV8R12_qos.Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode" json:"schedule_mode,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 2, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode) GetScheduleMode() Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode {
	if x != nil {
		return x.ScheduleMode
	}
	return Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode_PQ
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight   uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 3, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority          uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	CirParentPriority uint32 `protobuf:"varint,2,opt,name=cir_parent_priority,json=cir-parent-priority,proto3" json:"cir_parent_priority,omitempty"`
	PirParentPriority uint32 `protobuf:"varint,3,opt,name=pir_parent_priority,json=pir-parent-priority,proto3" json:"pir_parent_priority,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 4, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) GetCirParentPriority() uint32 {
	if x != nil {
		return x.CirParentPriority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority) GetPirParentPriority() uint32 {
	if x != nil {
		return x.PirParentPriority
	}
	return 0
}

type Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Pir      uint32 `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
	Pbs      uint32 `protobuf:"varint,3,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) Reset() {
	*x = Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) ProtoMessage() {
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping.ProtoReflect.Descriptor instead.
func (*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 1, 12, 0, 5, 0}
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_ClassifierTemplate_DiffservDomains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffservDomain []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain `protobuf:"bytes,1,rep,name=diffserv_domain,json=diffserv-domain,proto3" json:"diffserv_domain,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_DiffservDomains) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Qos_ClassifierTemplate_DiffservDomains) GetDiffservDomain() []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain {
	if x != nil {
		return x.DiffservDomain
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficClassifier []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier `protobuf:"bytes,1,rep,name=traffic_classifier,json=traffic-classifier,proto3" json:"traffic_classifier,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers) GetTrafficClassifier() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier {
	if x != nil {
		return x.TrafficClassifier
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficBehavior []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior `protobuf:"bytes,1,rep,name=traffic_behavior,json=traffic-behavior,proto3" json:"traffic_behavior,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors) GetTrafficBehavior() []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior {
	if x != nil {
		return x.TrafficBehavior
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficPolicys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicy []*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy `protobuf:"bytes,1,rep,name=traffic_policy,json=traffic-policy,proto3" json:"traffic_policy,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficPolicys) Reset() {
	*x = Qos_ClassifierTemplate_TrafficPolicys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficPolicys) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficPolicys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficPolicys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys) GetTrafficPolicy() []*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy {
	if x != nil {
		return x.TrafficPolicy
	}
	return nil
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string                                                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                         uint32                                                                            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	BehaviorAggregations       *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations       `protobuf:"bytes,3,opt,name=behavior_aggregations,json=behavior-aggregations,proto3" json:"behavior_aggregations,omitempty"`
	PerHopBehaviors            *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors            `protobuf:"bytes,4,opt,name=per_hop_behaviors,json=per-hop-behaviors,proto3" json:"per_hop_behaviors,omitempty"`
	DiffservDomainApplications *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications `protobuf:"bytes,5,opt,name=diffserv_domain_applications,json=diffserv-domain-applications,proto3" json:"diffserv_domain_applications,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains_DiffservDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) GetBehaviorAggregations() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations {
	if x != nil {
		return x.BehaviorAggregations
	}
	return nil
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) GetPerHopBehaviors() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors {
	if x != nil {
		return x.PerHopBehaviors
	}
	return nil
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain) GetDiffservDomainApplications() *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications {
	if x != nil {
		return x.DiffservDomainApplications
	}
	return nil
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BehaviorAggregation []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation `protobuf:"bytes,1,rep,name=behavior_aggregation,json=behavior-aggregation,proto3" json:"behavior_aggregation,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations) GetBehaviorAggregation() []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation {
	if x != nil {
		return x.BehaviorAggregation
	}
	return nil
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerHopBehavior []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior `protobuf:"bytes,1,rep,name=per_hop_behavior,json=per-hop-behavior,proto3" json:"per_hop_behavior,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 1}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors) GetPerHopBehavior() []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior {
	if x != nil {
		return x.PerHopBehavior
	}
	return nil
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiffservDomainApplication []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication `protobuf:"bytes,1,rep,name=diffserv_domain_application,json=diffserv-domain-application,proto3" json:"diffserv_domain_application,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 2}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications) GetDiffservDomainApplication() []*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication {
	if x != nil {
		return x.DiffservDomainApplication
	}
	return nil
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type         `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type" json:"type,omitempty"`
	Value        uint32                                                                                                      `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	ServiceClass Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass `protobuf:"varint,3,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass" json:"service_class,omitempty"`
	Color        Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color        `protobuf:"varint,4,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color" json:"color,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0, 0}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) GetType() Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type {
	if x != nil {
		return x.Type
	}
	return Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type_X_8021P
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) GetServiceClass() Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass_BE
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation) GetColor() Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color {
	if x != nil {
		return x.Color
	}
	return Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color_GREEN
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type         `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type" json:"type,omitempty"`
	ServiceClass Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass" json:"service_class,omitempty"`
	Color        Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color        `protobuf:"varint,3,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color" json:"color,omitempty"`
	Value        uint32                                                                                            `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 1, 0}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) GetType() Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type {
	if x != nil {
		return x.Type
	}
	return Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type_X_8021P
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) GetServiceClass() Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass_BE
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) GetColor() Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color {
	if x != nil {
		return x.Color
	}
	return Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color_GREEN
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string                                                                                                               `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Direction     Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction" json:"direction,omitempty"`
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication) Reset() {
	*x = Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 0, 0, 2, 0}
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication) GetDirection() Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction_INX_OUTBOUND
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                                                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Operator          Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator           `protobuf:"varint,2,opt,name=operator,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator" json:"operator,omitempty"`
	Description       string                                                                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	RuleAcls          *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls          `protobuf:"bytes,4,opt,name=rule_acls,json=rule-acls,proto3" json:"rule_acls,omitempty"`
	RuleAclIpv6S      *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S      `protobuf:"bytes,5,opt,name=rule_acl_ipv6s,json=rule-acl-ipv6s,proto3" json:"rule_acl_ipv6s,omitempty"`
	RuleAnys          *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys          `protobuf:"bytes,6,opt,name=rule_anys,json=rule-anys,proto3" json:"rule_anys,omitempty"`
	RulePrioritys     *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys     `protobuf:"bytes,7,opt,name=rule_prioritys,json=rule-prioritys,proto3" json:"rule_prioritys,omitempty"`
	RuleServiceClasss *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss `protobuf:"bytes,8,opt,name=rule_service_classs,json=rule-service-classs,proto3" json:"rule_service_classs,omitempty"`
	LocalIds          *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds          `protobuf:"bytes,9,opt,name=local_ids,json=local-ids,proto3" json:"local_ids,omitempty"`
	LocalIdIpv6S      *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S      `protobuf:"bytes,10,opt,name=local_id_ipv6s,json=local-id-ipv6s,proto3" json:"local_id_ipv6s,omitempty"`
	RuleEthTypes      *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes      `protobuf:"bytes,11,opt,name=rule_eth_types,json=rule-eth-types,proto3" json:"rule_eth_types,omitempty"`
	RuleAddressIpv6S  *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S  `protobuf:"bytes,12,opt,name=rule_address_ipv6s,json=rule-address-ipv6s,proto3" json:"rule_address_ipv6s,omitempty"`
	RuleMacAndMasks   *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks   `protobuf:"bytes,13,opt,name=rule_mac_and_masks,json=rule-mac-and-masks,proto3" json:"rule_mac_and_masks,omitempty"`
	RuleMacAddresss   *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss   `protobuf:"bytes,14,opt,name=rule_mac_addresss,json=rule-mac-addresss,proto3" json:"rule_mac_addresss,omitempty"`
	RuleOffsets       *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets       `protobuf:"bytes,15,opt,name=rule_offsets,json=rule-offsets,proto3" json:"rule_offsets,omitempty"`
	RuleProtocolIpv6S *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S `protobuf:"bytes,16,opt,name=rule_protocol_ipv6s,json=rule-protocol-ipv6s,proto3" json:"rule_protocol_ipv6s,omitempty"`
	RuleTcpFlags      *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags      `protobuf:"bytes,17,opt,name=rule_tcp_flags,json=rule-tcp-flags,proto3" json:"rule_tcp_flags,omitempty"`
	RuleTcpFlagIpv6S  *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S  `protobuf:"bytes,18,opt,name=rule_tcp_flag_ipv6s,json=rule-tcp-flag-ipv6s,proto3" json:"rule_tcp_flag_ipv6s,omitempty"`
	RuleVlans         *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans         `protobuf:"bytes,19,opt,name=rule_vlans,json=rule-vlans,proto3" json:"rule_vlans,omitempty"`
	SrcDestLocalIds   *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds   `protobuf:"bytes,20,opt,name=src_dest_local_ids,json=src-dest-local-ids,proto3" json:"src_dest_local_ids,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetOperator() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator {
	if x != nil {
		return x.Operator
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator_OR
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleAcls() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls {
	if x != nil {
		return x.RuleAcls
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleAclIpv6S() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S {
	if x != nil {
		return x.RuleAclIpv6S
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleAnys() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys {
	if x != nil {
		return x.RuleAnys
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRulePrioritys() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys {
	if x != nil {
		return x.RulePrioritys
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleServiceClasss() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss {
	if x != nil {
		return x.RuleServiceClasss
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetLocalIds() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds {
	if x != nil {
		return x.LocalIds
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetLocalIdIpv6S() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S {
	if x != nil {
		return x.LocalIdIpv6S
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleEthTypes() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes {
	if x != nil {
		return x.RuleEthTypes
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleAddressIpv6S() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S {
	if x != nil {
		return x.RuleAddressIpv6S
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleMacAndMasks() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks {
	if x != nil {
		return x.RuleMacAndMasks
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleMacAddresss() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss {
	if x != nil {
		return x.RuleMacAddresss
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleOffsets() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets {
	if x != nil {
		return x.RuleOffsets
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleProtocolIpv6S() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S {
	if x != nil {
		return x.RuleProtocolIpv6S
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleTcpFlags() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags {
	if x != nil {
		return x.RuleTcpFlags
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleTcpFlagIpv6S() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S {
	if x != nil {
		return x.RuleTcpFlagIpv6S
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetRuleVlans() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans {
	if x != nil {
		return x.RuleVlans
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier) GetSrcDestLocalIds() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds {
	if x != nil {
		return x.SrcDestLocalIds
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleAcl []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl `protobuf:"bytes,1,rep,name=rule_acl,json=rule-acl,proto3" json:"rule_acl,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls) GetRuleAcl() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl {
	if x != nil {
		return x.RuleAcl
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleAclIpv6 []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6 `protobuf:"bytes,1,rep,name=rule_acl_ipv6,json=rule-acl-ipv6,proto3" json:"rule_acl_ipv6,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S) GetRuleAclIpv6() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6 {
	if x != nil {
		return x.RuleAclIpv6
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleAny []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny `protobuf:"bytes,1,rep,name=rule_any,json=rule-any,proto3" json:"rule_any,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys) GetRuleAny() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny {
	if x != nil {
		return x.RuleAny
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RulePriority []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority `protobuf:"bytes,1,rep,name=rule_priority,json=rule-priority,proto3" json:"rule_priority,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 3}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys) GetRulePriority() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority {
	if x != nil {
		return x.RulePriority
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleServiceClass []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass `protobuf:"bytes,1,rep,name=rule_service_class,json=rule-service-class,proto3" json:"rule_service_class,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 4}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss) GetRuleServiceClass() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass {
	if x != nil {
		return x.RuleServiceClass
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalId []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId `protobuf:"bytes,1,rep,name=local_id,json=local-id,proto3" json:"local_id,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 5}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds) GetLocalId() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId {
	if x != nil {
		return x.LocalId
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalIdIpv6 []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6 `protobuf:"bytes,1,rep,name=local_id_ipv6,json=local-id-ipv6,proto3" json:"local_id_ipv6,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 6}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S) GetLocalIdIpv6() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6 {
	if x != nil {
		return x.LocalIdIpv6
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleEthType []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType `protobuf:"bytes,1,rep,name=rule_eth_type,json=rule-eth-type,proto3" json:"rule_eth_type,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 7}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes) GetRuleEthType() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType {
	if x != nil {
		return x.RuleEthType
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleAddressIpv6 []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6 `protobuf:"bytes,1,rep,name=rule_address_ipv6,json=rule-address-ipv6,proto3" json:"rule_address_ipv6,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 8}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S) GetRuleAddressIpv6() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6 {
	if x != nil {
		return x.RuleAddressIpv6
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleMacAndMask []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask `protobuf:"bytes,1,rep,name=rule_mac_and_mask,json=rule-mac-and-mask,proto3" json:"rule_mac_and_mask,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 9}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks) GetRuleMacAndMask() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask {
	if x != nil {
		return x.RuleMacAndMask
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleMacAddress []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress `protobuf:"bytes,1,rep,name=rule_mac_address,json=rule-mac-address,proto3" json:"rule_mac_address,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 10}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss) GetRuleMacAddress() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress {
	if x != nil {
		return x.RuleMacAddress
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleOffset *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset `protobuf:"bytes,1,opt,name=rule_offset,json=rule-offset,proto3" json:"rule_offset,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 11}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets) GetRuleOffset() *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset {
	if x != nil {
		return x.RuleOffset
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleProtocolIpv6 []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6 `protobuf:"bytes,1,rep,name=rule_protocol_ipv6,json=rule-protocol-ipv6,proto3" json:"rule_protocol_ipv6,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 12}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S) GetRuleProtocolIpv6() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6 {
	if x != nil {
		return x.RuleProtocolIpv6
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleTcpFlag []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag `protobuf:"bytes,1,rep,name=rule_tcp_flag,json=rule-tcp-flag,proto3" json:"rule_tcp_flag,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 13}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags) GetRuleTcpFlag() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag {
	if x != nil {
		return x.RuleTcpFlag
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleTcpFlagIpv6 []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6 `protobuf:"bytes,1,rep,name=rule_tcp_flag_ipv6,json=rule-tcp-flag-ipv6,proto3" json:"rule_tcp_flag_ipv6,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 14}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S) GetRuleTcpFlagIpv6() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6 {
	if x != nil {
		return x.RuleTcpFlagIpv6
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleVlan []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan `protobuf:"bytes,1,rep,name=rule_vlan,json=rule-vlan,proto3" json:"rule_vlan,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 15}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans) GetRuleVlan() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan {
	if x != nil {
		return x.RuleVlan
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcDestLocalId []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId `protobuf:"bytes,1,rep,name=src_dest_local_id,json=src-dest-local-id,proto3" json:"src_dest_local_id,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 16}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds) GetSrcDestLocalId() []*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId {
	if x != nil {
		return x.SrcDestLocalId
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclName string `protobuf:"bytes,1,opt,name=acl_name,json=acl-name,proto3" json:"acl_name,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 0, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl) GetAclName() string {
	if x != nil {
		return x.AclName
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclName string `protobuf:"bytes,1,opt,name=acl_name,json=acl-name,proto3" json:"acl_name,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 1, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6) GetAclName() string {
	if x != nil {
		return x.AclName
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolFamily Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily `protobuf:"varint,1,opt,name=protocol_family,json=protocol-family,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily" json:"protocol_family,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 2, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny) GetProtocolFamily() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily {
	if x != nil {
		return x.ProtocolFamily
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_INVALID_ENUM_VALUE_ProtocolFamily
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type" json:"type,omitempty"`
	Value uint32                                                                                      `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 3, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority) GetType() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type {
	if x != nil {
		return x.Type
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type_X_8021P
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass" json:"service_class,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 4, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass) GetServiceClass() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass_BE
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 5, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 6, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 7, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType  Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType `protobuf:"varint,1,opt,name=address_type,json=address-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType" json:"address_type,omitempty"`
	AddressValue string                                                                                                   `protobuf:"bytes,2,opt,name=address_value,json=address-value,proto3" json:"address_value,omitempty"`
	PrefixLength uint32                                                                                                   `protobuf:"varint,3,opt,name=prefix_length,json=prefix-length,proto3" json:"prefix_length,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 8, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) GetAddressType() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType {
	if x != nil {
		return x.AddressType
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType_SOURCE
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) GetAddressValue() string {
	if x != nil {
		return x.AddressValue
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacType        Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType `protobuf:"varint,1,opt,name=mac_type,json=mac-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType" json:"mac_type,omitempty"`
	MacAddress     string                                                                                             `protobuf:"bytes,2,opt,name=mac_address,json=mac-address,proto3" json:"mac_address,omitempty"`
	MacAddressMask string                                                                                             `protobuf:"bytes,3,opt,name=mac_address_mask,json=mac-address-mask,proto3" json:"mac_address_mask,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 9, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) GetMacType() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType {
	if x != nil {
		return x.MacType
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType_SOURCE
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask) GetMacAddressMask() string {
	if x != nil {
		return x.MacAddressMask
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type" json:"type,omitempty"`
	Address string                                                                                          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 10, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress) GetType() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type {
	if x != nil {
		return x.Type
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type_SOURCE
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetValue1 uint32 `protobuf:"varint,1,opt,name=offset_value1,json=offset-value1,proto3" json:"offset_value1,omitempty"`
	MatchValue1  string `protobuf:"bytes,2,opt,name=match_value1,json=match-value1,proto3" json:"match_value1,omitempty"`
	MatchMask1   string `protobuf:"bytes,3,opt,name=match_mask1,json=match-mask1,proto3" json:"match_mask1,omitempty"`
	OffsetValue2 uint32 `protobuf:"varint,4,opt,name=offset_value2,json=offset-value2,proto3" json:"offset_value2,omitempty"`
	MatchValue2  string `protobuf:"bytes,5,opt,name=match_value2,json=match-value2,proto3" json:"match_value2,omitempty"`
	MatchMask2   string `protobuf:"bytes,6,opt,name=match_mask2,json=match-mask2,proto3" json:"match_mask2,omitempty"`
	OffsetValue3 uint32 `protobuf:"varint,7,opt,name=offset_value3,json=offset-value3,proto3" json:"offset_value3,omitempty"`
	MatchValue3  string `protobuf:"bytes,8,opt,name=match_value3,json=match-value3,proto3" json:"match_value3,omitempty"`
	MatchMask3   string `protobuf:"bytes,9,opt,name=match_mask3,json=match-mask3,proto3" json:"match_mask3,omitempty"`
	OffsetValue4 uint32 `protobuf:"varint,10,opt,name=offset_value4,json=offset-value4,proto3" json:"offset_value4,omitempty"`
	MatchValue4  string `protobuf:"bytes,11,opt,name=match_value4,json=match-value4,proto3" json:"match_value4,omitempty"`
	MatchMask4   string `protobuf:"bytes,12,opt,name=match_mask4,json=match-mask4,proto3" json:"match_mask4,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 11, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetOffsetValue1() uint32 {
	if x != nil {
		return x.OffsetValue1
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchValue1() string {
	if x != nil {
		return x.MatchValue1
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchMask1() string {
	if x != nil {
		return x.MatchMask1
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetOffsetValue2() uint32 {
	if x != nil {
		return x.OffsetValue2
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchValue2() string {
	if x != nil {
		return x.MatchValue2
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchMask2() string {
	if x != nil {
		return x.MatchMask2
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetOffsetValue3() uint32 {
	if x != nil {
		return x.OffsetValue3
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchValue3() string {
	if x != nil {
		return x.MatchValue3
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchMask3() string {
	if x != nil {
		return x.MatchMask3
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetOffsetValue4() uint32 {
	if x != nil {
		return x.OffsetValue4
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchValue4() string {
	if x != nil {
		return x.MatchValue4
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset) GetMatchMask4() string {
	if x != nil {
		return x.MatchMask4
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family `protobuf:"varint,1,opt,name=family,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family" json:"family,omitempty"`
	Number uint32                                                                                                `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 12, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6) GetFamily() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family {
	if x != nil {
		return x.Family
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_INVALID_ENUM_VALUE_Family
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitMatchType Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType `protobuf:"varint,1,opt,name=bit_match_type,json=bit-match-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType" json:"bit_match_type,omitempty"`
	TcpFlag      uint32                                                                                            `protobuf:"varint,2,opt,name=tcp_flag,json=tcp-flag,proto3" json:"tcp_flag,omitempty"`
	TcpFlagMask  uint32                                                                                            `protobuf:"varint,3,opt,name=tcp_flag_mask,json=tcp-flag-mask,proto3" json:"tcp_flag_mask,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 13, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) GetBitMatchType() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType {
	if x != nil {
		return x.BitMatchType
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType_NOTX_CONFIG
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) GetTcpFlag() uint32 {
	if x != nil {
		return x.TcpFlag
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag) GetTcpFlagMask() uint32 {
	if x != nil {
		return x.TcpFlagMask
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitMatchType Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType `protobuf:"varint,1,opt,name=bit_match_type,json=bit-match-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType" json:"bit_match_type,omitempty"`
	TcpFlag      uint32                                                                                                    `protobuf:"varint,2,opt,name=tcp_flag,json=tcp-flag,proto3" json:"tcp_flag,omitempty"`
	TcpFlagMask  uint32                                                                                                    `protobuf:"varint,3,opt,name=tcp_flag_mask,json=tcp-flag-mask,proto3" json:"tcp_flag_mask,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 14, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) GetBitMatchType() Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType {
	if x != nil {
		return x.BitMatchType
	}
	return Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType_NOTX_CONFIG
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) GetTcpFlag() uint32 {
	if x != nil {
		return x.TcpFlag
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6) GetTcpFlagMask() uint32 {
	if x != nil {
		return x.TcpFlagMask
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId   uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	CeVlanId uint32 `protobuf:"varint,2,opt,name=ce_vlan_id,json=ce-vlan-id,proto3" json:"ce_vlan_id,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 15, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan) GetCeVlanId() uint32 {
	if x != nil {
		return x.CeVlanId
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      uint32 `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination uint32 `protobuf:"varint,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId) Reset() {
	*x = Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 1, 0, 16, 0}
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId) GetSource() uint32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId) GetDestination() uint32 {
	if x != nil {
		return x.Destination
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                             string                                                                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description                      string                                                                                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FilterAction                     *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction                     `protobuf:"bytes,3,opt,name=filter_action,json=filter-action,proto3" json:"filter_action,omitempty"`
	ServiceClassActions              *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions              `protobuf:"bytes,4,opt,name=service_class_actions,json=service-class-actions,proto3" json:"service_class_actions,omitempty"`
	RemarkActions                    *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions                    `protobuf:"bytes,5,opt,name=remark_actions,json=remark-actions,proto3" json:"remark_actions,omitempty"`
	AclLogAction                     *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction                     `protobuf:"bytes,6,opt,name=acl_log_action,json=acl-log-action,proto3" json:"acl_log_action,omitempty"`
	CarActions                       *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions                       `protobuf:"bytes,7,opt,name=car_actions,json=car-actions,proto3" json:"car_actions,omitempty"`
	FlowCarActions                   *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions                   `protobuf:"bytes,8,opt,name=flow_car_actions,json=flow-car-actions,proto3" json:"flow_car_actions,omitempty"`
	IncreasePriorityAction           *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction           `protobuf:"bytes,9,opt,name=increase_priority_action,json=increase-priority-action,proto3" json:"increase_priority_action,omitempty"`
	PolicyActions                    *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions                    `protobuf:"bytes,10,opt,name=policy_actions,json=policy-actions,proto3" json:"policy_actions,omitempty"`
	SuppressionActions               *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions               `protobuf:"bytes,11,opt,name=suppression_actions,json=suppression-actions,proto3" json:"suppression_actions,omitempty"`
	LoadAction                       *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction                       `protobuf:"bytes,12,opt,name=load_action,json=load-action,proto3" json:"load_action,omitempty"`
	MatchTermAction                  *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction                  `protobuf:"bytes,13,opt,name=match_term_action,json=match-term-action,proto3" json:"match_term_action,omitempty"`
	NetstreamSamplerActions          *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions          `protobuf:"bytes,14,opt,name=netstream_sampler_actions,json=netstream-sampler-actions,proto3" json:"netstream_sampler_actions,omitempty"`
	UrpfAction                       *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction                       `protobuf:"bytes,15,opt,name=urpf_action,json=urpf-action,proto3" json:"urpf_action,omitempty"`
	ExceptDenyAction                 *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction                 `protobuf:"bytes,16,opt,name=except_deny_action,json=except-deny-action,proto3" json:"except_deny_action,omitempty"`
	UserQueueAction                  *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction                  `protobuf:"bytes,17,opt,name=user_queue_action,json=user-queue-action,proto3" json:"user_queue_action,omitempty"`
	SystemLogAction                  *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction                  `protobuf:"bytes,18,opt,name=system_log_action,json=system-log-action,proto3" json:"system_log_action,omitempty"`
	Mirror                           *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror                           `protobuf:"bytes,19,opt,name=mirror,proto3" json:"mirror,omitempty"`
	BehaviorBindMulticastNatInstance *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance `protobuf:"bytes,20,opt,name=behavior_bind_multicast_nat_instance,json=behavior-bind-multicast-nat-instance,proto3" json:"behavior_bind_multicast_nat_instance,omitempty"`
	Pbr                              *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr                              `protobuf:"bytes,21,opt,name=pbr,proto3" json:"pbr,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetFilterAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction {
	if x != nil {
		return x.FilterAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetServiceClassActions() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions {
	if x != nil {
		return x.ServiceClassActions
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetRemarkActions() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions {
	if x != nil {
		return x.RemarkActions
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetAclLogAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction {
	if x != nil {
		return x.AclLogAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetCarActions() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions {
	if x != nil {
		return x.CarActions
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetFlowCarActions() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions {
	if x != nil {
		return x.FlowCarActions
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetIncreasePriorityAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction {
	if x != nil {
		return x.IncreasePriorityAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetPolicyActions() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions {
	if x != nil {
		return x.PolicyActions
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetSuppressionActions() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions {
	if x != nil {
		return x.SuppressionActions
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetLoadAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction {
	if x != nil {
		return x.LoadAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetMatchTermAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction {
	if x != nil {
		return x.MatchTermAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetNetstreamSamplerActions() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions {
	if x != nil {
		return x.NetstreamSamplerActions
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetUrpfAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction {
	if x != nil {
		return x.UrpfAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetExceptDenyAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction {
	if x != nil {
		return x.ExceptDenyAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetUserQueueAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction {
	if x != nil {
		return x.UserQueueAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetSystemLogAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction {
	if x != nil {
		return x.SystemLogAction
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetMirror() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetBehaviorBindMulticastNatInstance() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance {
	if x != nil {
		return x.BehaviorBindMulticastNatInstance
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior) GetPbr() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr {
	if x != nil {
		return x.Pbr
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter `protobuf:"varint,1,opt,name=filter,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter" json:"filter,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction) GetFilter() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter {
	if x != nil {
		return x.Filter
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter_PERMIT
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClassAction []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction `protobuf:"bytes,1,rep,name=service_class_action,json=service-class-action,proto3" json:"service_class_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 1}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions) GetServiceClassAction() []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction {
	if x != nil {
		return x.ServiceClassAction
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemarkAction []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction `protobuf:"bytes,1,rep,name=remark_action,json=remark-action,proto3" json:"remark_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 2}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions) GetRemarkAction() []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction {
	if x != nil {
		return x.RemarkAction
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType `protobuf:"varint,1,opt,name=action_type,json=action-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType" json:"action_type,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 3}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction) GetActionType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_INVALID_ENUM_VALUE_ActionType
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarAction []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction `protobuf:"bytes,1,rep,name=car_action,json=car-action,proto3" json:"car_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions) GetCarAction() []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction {
	if x != nil {
		return x.CarAction
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowCarAction *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction `protobuf:"bytes,1,opt,name=flow_car_action,json=flow-car-action,proto3" json:"flow_car_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 5}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions) GetFlowCarAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction {
	if x != nil {
		return x.FlowCarAction
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority `protobuf:"varint,1,opt,name=priority,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority" json:"priority,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 6}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction) GetPriority() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority {
	if x != nil {
		return x.Priority
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_INVALID_ENUM_VALUE_Priority
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyAction *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction `protobuf:"bytes,1,opt,name=policy_action,json=policy-action,proto3" json:"policy_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 7}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions) GetPolicyAction() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction {
	if x != nil {
		return x.PolicyAction
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuppressionAction []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction `protobuf:"bytes,1,rep,name=suppression_action,json=suppression-action,proto3" json:"suppression_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions) GetSuppressionAction() []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction {
	if x != nil {
		return x.SuppressionAction
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType `protobuf:"varint,1,opt,name=balance_type,json=balance-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType" json:"balance_type,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 9}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction) GetBalanceType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType {
	if x != nil {
		return x.BalanceType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType_FLOW
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchTerm Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm `protobuf:"varint,1,opt,name=match_term,json=match-term,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm" json:"match_term,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 10}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction) GetMatchTerm() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm {
	if x != nil {
		return x.MatchTerm
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_INVALID_ENUM_VALUE_MatchTerm
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetstreamSamplerAction []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction `protobuf:"bytes,1,rep,name=netstream_sampler_action,json=netstream-sampler-action,proto3" json:"netstream_sampler_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 11}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions) GetNetstreamSamplerAction() []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction {
	if x != nil {
		return x.NetstreamSamplerAction
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckType     Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType     `protobuf:"varint,1,opt,name=check_type,json=check-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType" json:"check_type,omitempty"`
	AllowDefault  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault  `protobuf:"varint,2,opt,name=allow_default,json=allow-default,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault" json:"allow_default,omitempty"`
	IgnoreDefault Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault `protobuf:"varint,3,opt,name=ignore_default,json=ignore-default,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault" json:"ignore_default,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 12}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) GetCheckType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType {
	if x != nil {
		return x.CheckType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType_STRICT
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) GetAllowDefault() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault {
	if x != nil {
		return x.AllowDefault
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_INVALID_ENUM_VALUE_AllowDefault
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction) GetIgnoreDefault() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault {
	if x != nil {
		return x.IgnoreDefault
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault_DISABLE
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DenyAction Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction `protobuf:"varint,1,opt,name=deny_action,json=deny-action,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction" json:"deny_action,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 13}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction) GetDenyAction() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction {
	if x != nil {
		return x.DenyAction
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_INVALID_ENUM_VALUE_DenyAction
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir                 uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir                 uint32 `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
	FlowQueueName       string `protobuf:"bytes,3,opt,name=flow_queue_name,json=flow-queue-name,proto3" json:"flow_queue_name,omitempty"`
	FlowMappingName     string `protobuf:"bytes,4,opt,name=flow_mapping_name,json=flow-mapping-name,proto3" json:"flow_mapping_name,omitempty"`
	UserGroupQueueName  string `protobuf:"bytes,5,opt,name=user_group_queue_name,json=user-group-queue-name,proto3" json:"user_group_queue_name,omitempty"`
	ServiceTemplateName string `protobuf:"bytes,6,opt,name=service_template_name,json=service-template-name,proto3" json:"service_template_name,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 14}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) GetFlowQueueName() string {
	if x != nil {
		return x.FlowQueueName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) GetFlowMappingName() string {
	if x != nil {
		return x.FlowMappingName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) GetUserGroupQueueName() string {
	if x != nil {
		return x.UserGroupQueueName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction) GetServiceTemplateName() string {
	if x != nil {
		return x.ServiceTemplateName
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold      uint32                                                                                 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	StatisticsType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType `protobuf:"varint,2,opt,name=statistics_type,json=statistics-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType" json:"statistics_type,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 15}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction) GetStatisticsType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType {
	if x != nil {
		return x.StatisticsType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_INVALID_ENUM_VALUE_StatisticsType
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MirrorEnable *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable `protobuf:"bytes,1,opt,name=mirror_enable,json=mirror-enable,proto3" json:"mirror_enable,omitempty"`
	MirrorSlice  *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice  `protobuf:"bytes,2,opt,name=mirror_slice,json=mirror-slice,proto3" json:"mirror_slice,omitempty"`
	MirrorCar    *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar    `protobuf:"bytes,3,opt,name=mirror_car,json=mirror-car,proto3" json:"mirror_car,omitempty"`
	MirrorTo     *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo     `protobuf:"bytes,4,opt,name=mirror_to,json=mirror-to,proto3" json:"mirror_to,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 16}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) GetMirrorEnable() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable {
	if x != nil {
		return x.MirrorEnable
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) GetMirrorSlice() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice {
	if x != nil {
		return x.MirrorSlice
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) GetMirrorCar() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar {
	if x != nil {
		return x.MirrorCar
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror) GetMirrorTo() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo {
	if x != nil {
		return x.MirrorTo
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BehaviorBindMulticastNat []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat `protobuf:"bytes,1,rep,name=behavior_bind_multicast_nat,json=behavior-bind-multicast-nat,proto3" json:"behavior_bind_multicast_nat,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 17}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance) GetBehaviorBindMulticastNat() []*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat {
	if x != nil {
		return x.BehaviorBindMulticastNat
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectVpnGroup *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup `protobuf:"bytes,1,opt,name=redirect_vpn_group,json=redirect-vpn-group,proto3" json:"redirect_vpn_group,omitempty"`
	RedirectLsp      *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp      `protobuf:"bytes,2,opt,name=redirect_lsp,json=redirect-lsp,proto3" json:"redirect_lsp,omitempty"`
	PbrIpv4          *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4          `protobuf:"bytes,3,opt,name=pbr_ipv4,json=pbr-ipv4,proto3" json:"pbr_ipv4,omitempty"`
	PbrIpv6          *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6          `protobuf:"bytes,4,opt,name=pbr_ipv6,json=pbr-ipv6,proto3" json:"pbr_ipv6,omitempty"`
	PbrL2Vpn         *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn         `protobuf:"bytes,5,opt,name=pbr_l2vpn,json=pbr-l2vpn,proto3" json:"pbr_l2vpn,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 18}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) GetRedirectVpnGroup() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup {
	if x != nil {
		return x.RedirectVpnGroup
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) GetRedirectLsp() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp {
	if x != nil {
		return x.RedirectLsp
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) GetPbrIpv4() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4 {
	if x != nil {
		return x.PbrIpv4
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) GetPbrIpv6() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6 {
	if x != nil {
		return x.PbrIpv6
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr) GetPbrL2Vpn() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn {
	if x != nil {
		return x.PbrL2Vpn
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType     Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType   `protobuf:"varint,1,opt,name=action_type,json=action-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType" json:"action_type,omitempty"`
	ServiceClass   Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass" json:"service_class,omitempty"`
	Color          Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color        `protobuf:"varint,3,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color" json:"color,omitempty"`
	RemarkSwitch   Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch `protobuf:"varint,4,opt,name=remark_switch,json=remark-switch,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch" json:"remark_switch,omitempty"`
	BfdSessionName string                                                                                                      `protobuf:"bytes,5,opt,name=bfd_session_name,json=bfd-session-name,proto3" json:"bfd_session_name,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 1, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) GetActionType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType_SERVICEX_CLASS
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) GetServiceClass() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass_BE
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) GetColor() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color {
	if x != nil {
		return x.Color
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color_GREEN
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) GetRemarkSwitch() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch {
	if x != nil {
		return x.RemarkSwitch
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch_ENABLE
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction) GetBfdSessionName() string {
	if x != nil {
		return x.BfdSessionName
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType `protobuf:"varint,1,opt,name=action_type,json=action-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType" json:"action_type,omitempty"`
	RemarkValue uint32                                                                                        `protobuf:"varint,2,opt,name=remark_value,json=remark-value,proto3" json:"remark_value,omitempty"`
	AfterTrust  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust `protobuf:"varint,3,opt,name=after_trust,json=after-trust,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust" json:"after_trust,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 2, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) GetActionType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_INVALID_ENUM_VALUE_ActionType
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) GetRemarkValue() uint32 {
	if x != nil {
		return x.RemarkValue
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction) GetAfterTrust() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust {
	if x != nil {
		return x.AfterTrust
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_INVALID_ENUM_VALUE_AfterTrust
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType   Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType   `protobuf:"varint,1,opt,name=action_type,json=action-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType" json:"action_type,omitempty"`
	Cir          uint32                                                                                    `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir          uint32                                                                                    `protobuf:"varint,3,opt,name=pir,proto3" json:"pir,omitempty"`
	Cbs          uint32                                                                                    `protobuf:"varint,4,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs          uint32                                                                                    `protobuf:"varint,5,opt,name=pbs,proto3" json:"pbs,omitempty"`
	Adjust       int32                                                                                     `protobuf:"varint,6,opt,name=adjust,proto3" json:"adjust,omitempty"`
	GreenAction  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction  `protobuf:"varint,7,opt,name=green_action,json=green-action,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction" json:"green_action,omitempty"`
	YellowAction Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction `protobuf:"varint,8,opt,name=yellow_action,json=yellow-action,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction" json:"yellow_action,omitempty"`
	RedAction    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction    `protobuf:"varint,9,opt,name=red_action,json=red-action,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction" json:"red_action,omitempty"`
	ColorAware   Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware   `protobuf:"varint,10,opt,name=color_aware,json=color-aware,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware" json:"color_aware,omitempty"`
	LimitType    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType    `protobuf:"varint,11,opt,name=limit_type,json=limit-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType" json:"limit_type,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 4, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetActionType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType_CAR
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetAdjust() int32 {
	if x != nil {
		return x.Adjust
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetGreenAction() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction {
	if x != nil {
		return x.GreenAction
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction_PASS
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetYellowAction() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction {
	if x != nil {
		return x.YellowAction
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction_PASS
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetRedAction() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction {
	if x != nil {
		return x.RedAction
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction_PASS
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetColorAware() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware {
	if x != nil {
		return x.ColorAware
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_INVALID_ENUM_VALUE_ColorAware
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction) GetLimitType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType {
	if x != nil {
		return x.LimitType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_INVALID_ENUM_VALUE_LimitType
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir    uint32                                                                                      `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir    uint32                                                                                      `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
	Cbs    uint32                                                                                      `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs    uint32                                                                                      `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
	IpType Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType `protobuf:"varint,5,opt,name=ip_type,json=ip-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType" json:"ip_type,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 5, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction) GetIpType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType {
	if x != nil {
		return x.IpType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_INVALID_ENUM_VALUE_IpType
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName      string                                                                                             `protobuf:"bytes,1,opt,name=policy_name,json=policy-name,proto3" json:"policy_name,omitempty"`
	HierarchicalCar Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar `protobuf:"varint,2,opt,name=hierarchical_car,json=hierarchical-car,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar" json:"hierarchical_car,omitempty"`
	Layer           Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer           `protobuf:"varint,3,opt,name=layer,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer" json:"layer,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 7, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) GetHierarchicalCar() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar {
	if x != nil {
		return x.HierarchicalCar
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_INVALID_ENUM_VALUE_HierarchicalCar
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction) GetLayer() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer {
	if x != nil {
		return x.Layer
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_INVALID_ENUM_VALUE_Layer
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuppressType      Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType      `protobuf:"varint,1,opt,name=suppress_type,json=suppress-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType" json:"suppress_type,omitempty"`
	Cir               uint32                                                                                                         `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"`
	Cbs               uint32                                                                                                         `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	GreenAction       Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction       `protobuf:"varint,4,opt,name=green_action,json=green-action,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction" json:"green_action,omitempty"`
	GreenServiceClass Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass `protobuf:"varint,5,opt,name=green_service_class,json=green-service-class,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass" json:"green_service_class,omitempty"`
	GreenColor        Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor        `protobuf:"varint,6,opt,name=green_color,json=green-color,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor" json:"green_color,omitempty"`
	RedAction         Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction         `protobuf:"varint,7,opt,name=red_action,json=red-action,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction" json:"red_action,omitempty"`
	RedServiceClass   Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass   `protobuf:"varint,8,opt,name=red_service_class,json=red-service-class,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass" json:"red_service_class,omitempty"`
	RedColor          Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor          `protobuf:"varint,9,opt,name=red_color,json=red-color,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor" json:"red_color,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 8, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetSuppressType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType {
	if x != nil {
		return x.SuppressType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_INVALID_ENUM_VALUE_SuppressType
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetGreenAction() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction {
	if x != nil {
		return x.GreenAction
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction_PASS
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetGreenServiceClass() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass {
	if x != nil {
		return x.GreenServiceClass
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass_BE
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetGreenColor() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor {
	if x != nil {
		return x.GreenColor
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor_GREEN
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetRedAction() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction {
	if x != nil {
		return x.RedAction
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction_PASS
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetRedServiceClass() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass {
	if x != nil {
		return x.RedServiceClass
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass_BE
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction) GetRedColor() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor {
	if x != nil {
		return x.RedColor
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor_GREEN
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType    Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType   `protobuf:"varint,1,opt,name=flow_type,json=flow-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType" json:"flow_type,omitempty"`
	SampleType  Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType `protobuf:"varint,2,opt,name=sample_type,json=sample-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType" json:"sample_type,omitempty"`
	SampleValue uint32                                                                                                            `protobuf:"varint,3,opt,name=sample_value,json=sample-value,proto3" json:"sample_value,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 11, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) GetFlowType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType {
	if x != nil {
		return x.FlowType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType_IPV4
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) GetSampleType() Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType {
	if x != nil {
		return x.SampleType
	}
	return Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType_FIXX_PACKETS
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction) GetSampleValue() uint32 {
	if x != nil {
		return x.SampleValue
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 16, 0}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceSize uint32 `protobuf:"varint,1,opt,name=slice_size,json=slice-size,proto3" json:"slice_size,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 16, 1}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice) GetSliceSize() uint32 {
	if x != nil {
		return x.SliceSize
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir uint32 `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
	Cbs uint32 `protobuf:"varint,3,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Pbs uint32 `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 16, 2}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) GetCbs() uint32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar) GetPbs() uint32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObserveIndex string `protobuf:"bytes,1,opt,name=observe_index,json=observe-index,proto3" json:"observe_index,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 16, 3}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo) GetObserveIndex() string {
	if x != nil {
		return x.ObserveIndex
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId   uint32 `protobuf:"varint,1,opt,name=instance_id,json=instance-id,proto3" json:"instance_id,omitempty"`
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instance-name,proto3" json:"instance_name,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 17, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat) GetInstanceId() uint32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpnGroupName string `protobuf:"bytes,1,opt,name=vpn_group_name,json=vpn-group-name,proto3" json:"vpn_group_name,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 18, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup) GetVpnGroupName() string {
	if x != nil {
		return x.VpnGroupName
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAddress string `protobuf:"bytes,1,opt,name=target_address,json=target-address,proto3" json:"target_address,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 18, 1}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp) GetTargetAddress() string {
	if x != nil {
		return x.TargetAddress
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 18, 2}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 18, 3}
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectVsi *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi `protobuf:"bytes,1,opt,name=redirect_vsi,json=redirect-vsi,proto3" json:"redirect_vsi,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 18, 4}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn) GetRedirectVsi() *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi {
	if x != nil {
		return x.RedirectVsi
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VsiName string `protobuf:"bytes,1,opt,name=vsi_name,json=vsi-name,proto3" json:"vsi_name,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi) Reset() {
	*x = Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 2, 0, 18, 4, 0}
}

func (x *Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi) GetVsiName() string {
	if x != nil {
		return x.VsiName
	}
	return ""
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                                                                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Step                 uint32                                                                    `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	ShareMode            Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode             `protobuf:"varint,4,opt,name=share_mode,json=share-mode,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode" json:"share_mode,omitempty"`
	StatFlag             Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag              `protobuf:"varint,5,opt,name=stat_flag,json=stat-flag,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag" json:"stat_flag,omitempty"`
	LinkExclude          Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude           `protobuf:"varint,6,opt,name=link_exclude,json=link-exclude,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude" json:"link_exclude,omitempty"`
	PolicyNodes          *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes          `protobuf:"bytes,7,opt,name=policy_nodes,json=policy-nodes,proto3" json:"policy_nodes,omitempty"`
	GroupModePolicyNodes *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes `protobuf:"bytes,8,opt,name=group_mode_policy_nodes,json=group-mode-policy-nodes,proto3" json:"group_mode_policy_nodes,omitempty"`
	Ipv6LocalIdSwitch    *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch    `protobuf:"bytes,9,opt,name=ipv6_local_id_switch,json=ipv6-local-id-switch,proto3" json:"ipv6_local_id_switch,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) Reset() {
	*x = Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetShareMode() Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode {
	if x != nil {
		return x.ShareMode
	}
	return Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode_DISABLE
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetStatFlag() Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag {
	if x != nil {
		return x.StatFlag
	}
	return Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag_DISABLE
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetLinkExclude() Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude {
	if x != nil {
		return x.LinkExclude
	}
	return Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude_DISABLE
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetPolicyNodes() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes {
	if x != nil {
		return x.PolicyNodes
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetGroupModePolicyNodes() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes {
	if x != nil {
		return x.GroupModePolicyNodes
	}
	return nil
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy) GetIpv6LocalIdSwitch() *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch {
	if x != nil {
		return x.Ipv6LocalIdSwitch
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyNode []*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode `protobuf:"bytes,1,rep,name=policy_node,json=policy-node,proto3" json:"policy_node,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes) Reset() {
	*x = Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 0}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes) GetPolicyNode() []*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode {
	if x != nil {
		return x.PolicyNode
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupModePolicyNode []*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode `protobuf:"bytes,1,rep,name=group_mode_policy_node,json=group-mode-policy-node,proto3" json:"group_mode_policy_node,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes) Reset() {
	*x = Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 1}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes) GetGroupModePolicyNode() []*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode {
	if x != nil {
		return x.GroupModePolicyNode
	}
	return nil
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable `protobuf:"varint,1,opt,name=enable,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable" json:"enable,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch) Reset() {
	*x = Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 2}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch) GetEnable() Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable {
	if x != nil {
		return x.Enable
	}
	return Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_INVALID_ENUM_VALUE_Enable
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierName string `protobuf:"bytes,1,opt,name=classifier_name,json=classifier-name,proto3" json:"classifier_name,omitempty"`
	BehaviorName   string `protobuf:"bytes,2,opt,name=behavior_name,json=behavior-name,proto3" json:"behavior_name,omitempty"`
	Priority       uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) Reset() {
	*x = Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) ProtoMessage() {}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 0, 0}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) GetBehaviorName() string {
	if x != nil {
		return x.BehaviorName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierName string                                                                                                 `protobuf:"bytes,1,opt,name=classifier_name,json=classifier-name,proto3" json:"classifier_name,omitempty"`
	Direction      Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction" json:"direction,omitempty"`
	GroupType      Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType `protobuf:"varint,3,opt,name=group_type,json=group-type,proto3,enum=huaweiV8R12_qos.Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType" json:"group_type,omitempty"`
	GroupName      string                                                                                                 `protobuf:"bytes,4,opt,name=group_name,json=group-name,proto3" json:"group_name,omitempty"`
	BehaviorName   string                                                                                                 `protobuf:"bytes,5,opt,name=behavior_name,json=behavior-name,proto3" json:"behavior_name,omitempty"`
	Priority       uint32                                                                                                 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) Reset() {
	*x = Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) ProtoMessage() {
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode.ProtoReflect.Descriptor instead.
func (*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 2, 3, 0, 1, 0}
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) GetDirection() Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) GetGroupType() Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType {
	if x != nil {
		return x.GroupType
	}
	return Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_INVALID_ENUM_VALUE_GroupType
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) GetBehaviorName() string {
	if x != nil {
		return x.BehaviorName
	}
	return ""
}

func (x *Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Qos_GlobalConfig_GlobalPolicys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalPolicy []*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy `protobuf:"bytes,1,rep,name=global_policy,json=global-policy,proto3" json:"global_policy,omitempty"`
}

func (x *Qos_GlobalConfig_GlobalPolicys) Reset() {
	*x = Qos_GlobalConfig_GlobalPolicys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_GlobalPolicys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_GlobalPolicys) ProtoMessage() {}

func (x *Qos_GlobalConfig_GlobalPolicys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_GlobalPolicys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Qos_GlobalConfig_GlobalPolicys) GetGlobalPolicy() []*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy {
	if x != nil {
		return x.GlobalPolicy
	}
	return nil
}

type Qos_GlobalConfig_TrafficPolicyMatchs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicyMatch []*Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch `protobuf:"bytes,1,rep,name=traffic_policy_match,json=traffic-policy-match,proto3" json:"traffic_policy_match,omitempty"`
}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs) Reset() {
	*x = Qos_GlobalConfig_TrafficPolicyMatchs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_TrafficPolicyMatchs) ProtoMessage() {}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_TrafficPolicyMatchs.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_TrafficPolicyMatchs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs) GetTrafficPolicyMatch() []*Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch {
	if x != nil {
		return x.TrafficPolicyMatch
	}
	return nil
}

type Qos_GlobalConfig_AclLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryNum   uint32 `protobuf:"varint,1,opt,name=entry_num,json=entry-num,proto3" json:"entry_num,omitempty"`
	AggingTime uint32 `protobuf:"varint,2,opt,name=agging_time,json=agging-time,proto3" json:"agging_time,omitempty"`
}

func (x *Qos_GlobalConfig_AclLog) Reset() {
	*x = Qos_GlobalConfig_AclLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_AclLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_AclLog) ProtoMessage() {}

func (x *Qos_GlobalConfig_AclLog) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_AclLog.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_AclLog) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *Qos_GlobalConfig_AclLog) GetEntryNum() uint32 {
	if x != nil {
		return x.EntryNum
	}
	return 0
}

func (x *Qos_GlobalConfig_AclLog) GetAggingTime() uint32 {
	if x != nil {
		return x.AggingTime
	}
	return 0
}

type Qos_GlobalConfig_GlobalSetQueueStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval Qos_GlobalConfig_GlobalSetQueueStat_Interval `protobuf:"varint,1,opt,name=interval,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_GlobalSetQueueStat_Interval" json:"interval,omitempty"`
}

func (x *Qos_GlobalConfig_GlobalSetQueueStat) Reset() {
	*x = Qos_GlobalConfig_GlobalSetQueueStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_GlobalSetQueueStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_GlobalSetQueueStat) ProtoMessage() {}

func (x *Qos_GlobalConfig_GlobalSetQueueStat) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalSetQueueStat.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_GlobalSetQueueStat) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *Qos_GlobalConfig_GlobalSetQueueStat) GetInterval() Qos_GlobalConfig_GlobalSetQueueStat_Interval {
	if x != nil {
		return x.Interval
	}
	return Qos_GlobalConfig_GlobalSetQueueStat_INVALID_ENUM_VALUE_Interval
}

type Qos_GlobalConfig_BufferPolicyApplys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferPolicyApply []*Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply `protobuf:"bytes,1,rep,name=buffer_policy_apply,json=buffer-policy-apply,proto3" json:"buffer_policy_apply,omitempty"`
}

func (x *Qos_GlobalConfig_BufferPolicyApplys) Reset() {
	*x = Qos_GlobalConfig_BufferPolicyApplys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_BufferPolicyApplys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_BufferPolicyApplys) ProtoMessage() {}

func (x *Qos_GlobalConfig_BufferPolicyApplys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_BufferPolicyApplys.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_BufferPolicyApplys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *Qos_GlobalConfig_BufferPolicyApplys) GetBufferPolicyApply() []*Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply {
	if x != nil {
		return x.BufferPolicyApply
	}
	return nil
}

type Qos_GlobalConfig_QueueWreds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueWred []*Qos_GlobalConfig_QueueWreds_QueueWred `protobuf:"bytes,1,rep,name=queue_wred,json=queue-wred,proto3" json:"queue_wred,omitempty"`
}

func (x *Qos_GlobalConfig_QueueWreds) Reset() {
	*x = Qos_GlobalConfig_QueueWreds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_QueueWreds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_QueueWreds) ProtoMessage() {}

func (x *Qos_GlobalConfig_QueueWreds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_QueueWreds.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_QueueWreds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *Qos_GlobalConfig_QueueWreds) GetQueueWred() []*Qos_GlobalConfig_QueueWreds_QueueWred {
	if x != nil {
		return x.QueueWred
	}
	return nil
}

type Qos_GlobalConfig_LowLatencyEnables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowLatencyEnable []*Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable `protobuf:"bytes,1,rep,name=low_latency_enable,json=low-latency-enable,proto3" json:"low_latency_enable,omitempty"`
}

func (x *Qos_GlobalConfig_LowLatencyEnables) Reset() {
	*x = Qos_GlobalConfig_LowLatencyEnables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_LowLatencyEnables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_LowLatencyEnables) ProtoMessage() {}

func (x *Qos_GlobalConfig_LowLatencyEnables) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_LowLatencyEnables.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_LowLatencyEnables) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 6}
}

func (x *Qos_GlobalConfig_LowLatencyEnables) GetLowLatencyEnable() []*Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable {
	if x != nil {
		return x.LowLatencyEnable
	}
	return nil
}

type Qos_GlobalConfig_SchedulingModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingMode []*Qos_GlobalConfig_SchedulingModes_SchedulingMode `protobuf:"bytes,1,rep,name=scheduling_mode,json=scheduling-mode,proto3" json:"scheduling_mode,omitempty"`
}

func (x *Qos_GlobalConfig_SchedulingModes) Reset() {
	*x = Qos_GlobalConfig_SchedulingModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_SchedulingModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_SchedulingModes) ProtoMessage() {}

func (x *Qos_GlobalConfig_SchedulingModes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_SchedulingModes.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_SchedulingModes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 7}
}

func (x *Qos_GlobalConfig_SchedulingModes) GetSchedulingMode() []*Qos_GlobalConfig_SchedulingModes_SchedulingMode {
	if x != nil {
		return x.SchedulingMode
	}
	return nil
}

type Qos_GlobalConfig_ConvergenceSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Qos_GlobalConfig_ConvergenceSchedule_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_ConvergenceSchedule_Mode" json:"mode,omitempty"`
}

func (x *Qos_GlobalConfig_ConvergenceSchedule) Reset() {
	*x = Qos_GlobalConfig_ConvergenceSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_ConvergenceSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_ConvergenceSchedule) ProtoMessage() {}

func (x *Qos_GlobalConfig_ConvergenceSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_ConvergenceSchedule.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_ConvergenceSchedule) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 8}
}

func (x *Qos_GlobalConfig_ConvergenceSchedule) GetMode() Qos_GlobalConfig_ConvergenceSchedule_Mode {
	if x != nil {
		return x.Mode
	}
	return Qos_GlobalConfig_ConvergenceSchedule_INVALID_ENUM_VALUE_Mode
}

type Qos_GlobalConfig_PortConvergenceSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Qos_GlobalConfig_PortConvergenceSchedule_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_PortConvergenceSchedule_Mode" json:"mode,omitempty"`
}

func (x *Qos_GlobalConfig_PortConvergenceSchedule) Reset() {
	*x = Qos_GlobalConfig_PortConvergenceSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_PortConvergenceSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_PortConvergenceSchedule) ProtoMessage() {}

func (x *Qos_GlobalConfig_PortConvergenceSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_PortConvergenceSchedule.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_PortConvergenceSchedule) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 9}
}

func (x *Qos_GlobalConfig_PortConvergenceSchedule) GetMode() Qos_GlobalConfig_PortConvergenceSchedule_Mode {
	if x != nil {
		return x.Mode
	}
	return Qos_GlobalConfig_PortConvergenceSchedule_INVALID_ENUM_VALUE_Mode
}

type Qos_GlobalConfig_TrafficPolicyUntag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UntagType Qos_GlobalConfig_TrafficPolicyUntag_UntagType `protobuf:"varint,1,opt,name=untag_type,json=untag-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_TrafficPolicyUntag_UntagType" json:"untag_type,omitempty"`
}

func (x *Qos_GlobalConfig_TrafficPolicyUntag) Reset() {
	*x = Qos_GlobalConfig_TrafficPolicyUntag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_TrafficPolicyUntag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_TrafficPolicyUntag) ProtoMessage() {}

func (x *Qos_GlobalConfig_TrafficPolicyUntag) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_TrafficPolicyUntag.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_TrafficPolicyUntag) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 10}
}

func (x *Qos_GlobalConfig_TrafficPolicyUntag) GetUntagType() Qos_GlobalConfig_TrafficPolicyUntag_UntagType {
	if x != nil {
		return x.UntagType
	}
	return Qos_GlobalConfig_TrafficPolicyUntag_UntagType_DISABLE
}

type Qos_GlobalConfig_HostPackets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPacket []*Qos_GlobalConfig_HostPackets_HostPacket `protobuf:"bytes,1,rep,name=host_packet,json=host-packet,proto3" json:"host_packet,omitempty"`
}

func (x *Qos_GlobalConfig_HostPackets) Reset() {
	*x = Qos_GlobalConfig_HostPackets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_HostPackets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_HostPackets) ProtoMessage() {}

func (x *Qos_GlobalConfig_HostPackets) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_HostPackets.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_HostPackets) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 11}
}

func (x *Qos_GlobalConfig_HostPackets) GetHostPacket() []*Qos_GlobalConfig_HostPackets_HostPacket {
	if x != nil {
		return x.HostPacket
	}
	return nil
}

type Qos_GlobalConfig_ExpPhbDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardType Qos_GlobalConfig_ExpPhbDisable_ForwardType `protobuf:"varint,1,opt,name=forward_type,json=forward-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_ExpPhbDisable_ForwardType" json:"forward_type,omitempty"`
}

func (x *Qos_GlobalConfig_ExpPhbDisable) Reset() {
	*x = Qos_GlobalConfig_ExpPhbDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_ExpPhbDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_ExpPhbDisable) ProtoMessage() {}

func (x *Qos_GlobalConfig_ExpPhbDisable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_ExpPhbDisable.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_ExpPhbDisable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 12}
}

func (x *Qos_GlobalConfig_ExpPhbDisable) GetForwardType() Qos_GlobalConfig_ExpPhbDisable_ForwardType {
	if x != nil {
		return x.ForwardType
	}
	return Qos_GlobalConfig_ExpPhbDisable_INVALID_ENUM_VALUE_ForwardType
}

type Qos_GlobalConfig_Packs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pack []*Qos_GlobalConfig_Packs_Pack `protobuf:"bytes,1,rep,name=pack,proto3" json:"pack,omitempty"`
}

func (x *Qos_GlobalConfig_Packs) Reset() {
	*x = Qos_GlobalConfig_Packs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_Packs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_Packs) ProtoMessage() {}

func (x *Qos_GlobalConfig_Packs) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_Packs.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_Packs) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 13}
}

func (x *Qos_GlobalConfig_Packs) GetPack() []*Qos_GlobalConfig_Packs_Pack {
	if x != nil {
		return x.Pack
	}
	return nil
}

type Qos_GlobalConfig_PacketBlockThresholdAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Qos_GlobalConfig_PacketBlockThresholdAll) Reset() {
	*x = Qos_GlobalConfig_PacketBlockThresholdAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_PacketBlockThresholdAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_PacketBlockThresholdAll) ProtoMessage() {}

func (x *Qos_GlobalConfig_PacketBlockThresholdAll) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_PacketBlockThresholdAll.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_PacketBlockThresholdAll) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 14}
}

func (x *Qos_GlobalConfig_PacketBlockThresholdAll) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Qos_GlobalConfig_BurstSizes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BurstSize []*Qos_GlobalConfig_BurstSizes_BurstSize `protobuf:"bytes,1,rep,name=burst_size,json=burst-size,proto3" json:"burst_size,omitempty"`
}

func (x *Qos_GlobalConfig_BurstSizes) Reset() {
	*x = Qos_GlobalConfig_BurstSizes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_BurstSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_BurstSizes) ProtoMessage() {}

func (x *Qos_GlobalConfig_BurstSizes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_BurstSizes.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_BurstSizes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 15}
}

func (x *Qos_GlobalConfig_BurstSizes) GetBurstSize() []*Qos_GlobalConfig_BurstSizes_BurstSize {
	if x != nil {
		return x.BurstSize
	}
	return nil
}

type Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TmScheduleTrafficStatisticsEnable []*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable `protobuf:"bytes,1,rep,name=tm_schedule_traffic_statistics_enable,json=tm-schedule-traffic-statistics-enable,proto3" json:"tm_schedule_traffic_statistics_enable,omitempty"`
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables) Reset() {
	*x = Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables) ProtoMessage() {}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 16}
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables) GetTmScheduleTrafficStatisticsEnable() []*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable {
	if x != nil {
		return x.TmScheduleTrafficStatisticsEnable
	}
	return nil
}

type Qos_GlobalConfig_RedbackPacketAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType Qos_GlobalConfig_RedbackPacketAdjustment_UserType `protobuf:"varint,1,opt,name=user_type,json=user-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_RedbackPacketAdjustment_UserType" json:"user_type,omitempty"`
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustment) Reset() {
	*x = Qos_GlobalConfig_RedbackPacketAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_RedbackPacketAdjustment) ProtoMessage() {}

func (x *Qos_GlobalConfig_RedbackPacketAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_RedbackPacketAdjustment.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_RedbackPacketAdjustment) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 17}
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustment) GetUserType() Qos_GlobalConfig_RedbackPacketAdjustment_UserType {
	if x != nil {
		return x.UserType
	}
	return Qos_GlobalConfig_RedbackPacketAdjustment_INVALID_ENUM_VALUE_UserType
}

type Qos_GlobalConfig_RedbackPacketAdjustmentSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedbackPacketAdjustmentSlot []*Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot `protobuf:"bytes,1,rep,name=redback_packet_adjustment_slot,json=redback-packet-adjustment-slot,proto3" json:"redback_packet_adjustment_slot,omitempty"`
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots) Reset() {
	*x = Qos_GlobalConfig_RedbackPacketAdjustmentSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_RedbackPacketAdjustmentSlots) ProtoMessage() {}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_RedbackPacketAdjustmentSlots.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_RedbackPacketAdjustmentSlots) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 18}
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots) GetRedbackPacketAdjustmentSlot() []*Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot {
	if x != nil {
		return x.RedbackPacketAdjustmentSlot
	}
	return nil
}

type Qos_GlobalConfig_LinkLayerExcludes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkLayerExclude []*Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude `protobuf:"bytes,1,rep,name=link_layer_exclude,json=link-layer-exclude,proto3" json:"link_layer_exclude,omitempty"`
}

func (x *Qos_GlobalConfig_LinkLayerExcludes) Reset() {
	*x = Qos_GlobalConfig_LinkLayerExcludes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_LinkLayerExcludes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_LinkLayerExcludes) ProtoMessage() {}

func (x *Qos_GlobalConfig_LinkLayerExcludes) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_LinkLayerExcludes.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_LinkLayerExcludes) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 19}
}

func (x *Qos_GlobalConfig_LinkLayerExcludes) GetLinkLayerExclude() []*Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude {
	if x != nil {
		return x.LinkLayerExclude
	}
	return nil
}

type Qos_GlobalConfig_LinkLayerExcludeSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkLayerExcludeSlot []*Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot `protobuf:"bytes,1,rep,name=link_layer_exclude_slot,json=link-layer-exclude-slot,proto3" json:"link_layer_exclude_slot,omitempty"`
}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots) Reset() {
	*x = Qos_GlobalConfig_LinkLayerExcludeSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_LinkLayerExcludeSlots) ProtoMessage() {}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_LinkLayerExcludeSlots.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_LinkLayerExcludeSlots) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 20}
}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots) GetLinkLayerExcludeSlot() []*Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot {
	if x != nil {
		return x.LinkLayerExcludeSlot
	}
	return nil
}

type Qos_GlobalConfig_L2TpLayerExclude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2TpUser Qos_GlobalConfig_L2TpLayerExclude_L2TpUser `protobuf:"varint,1,opt,name=l2tp_user,json=l2tp-user,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_L2TpLayerExclude_L2TpUser" json:"l2tp_user,omitempty"`
}

func (x *Qos_GlobalConfig_L2TpLayerExclude) Reset() {
	*x = Qos_GlobalConfig_L2TpLayerExclude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_L2TpLayerExclude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_L2TpLayerExclude) ProtoMessage() {}

func (x *Qos_GlobalConfig_L2TpLayerExclude) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_L2TpLayerExclude.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_L2TpLayerExclude) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 21}
}

func (x *Qos_GlobalConfig_L2TpLayerExclude) GetL2TpUser() Qos_GlobalConfig_L2TpLayerExclude_L2TpUser {
	if x != nil {
		return x.L2TpUser
	}
	return Qos_GlobalConfig_L2TpLayerExclude_INVALID_ENUM_VALUE_L2TpUser
}

type Qos_GlobalConfig_L2TpLayerExcludeSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2TpLayerExcludeSlot []*Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot `protobuf:"bytes,1,rep,name=l2tp_layer_exclude_slot,json=l2tp-layer-exclude-slot,proto3" json:"l2tp_layer_exclude_slot,omitempty"`
}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots) Reset() {
	*x = Qos_GlobalConfig_L2TpLayerExcludeSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_L2TpLayerExcludeSlots) ProtoMessage() {}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_L2TpLayerExcludeSlots.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_L2TpLayerExcludeSlots) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 22}
}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots) GetL2TpLayerExcludeSlot() []*Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot {
	if x != nil {
		return x.L2TpLayerExcludeSlot
	}
	return nil
}

type Qos_GlobalConfig_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToObserve *Qos_GlobalConfig_Mirror_ToObserve `protobuf:"bytes,1,opt,name=to_observe,json=to-observe,proto3" json:"to_observe,omitempty"`
}

func (x *Qos_GlobalConfig_Mirror) Reset() {
	*x = Qos_GlobalConfig_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_Mirror) ProtoMessage() {}

func (x *Qos_GlobalConfig_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_Mirror.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_Mirror) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 23}
}

func (x *Qos_GlobalConfig_Mirror) GetToObserve() *Qos_GlobalConfig_Mirror_ToObserve {
	if x != nil {
		return x.ToObserve
	}
	return nil
}

type Qos_GlobalConfig_Pbr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalVpnGroups *Qos_GlobalConfig_Pbr_GlobalVpnGroups `protobuf:"bytes,1,opt,name=global_vpn_groups,json=global-vpn-groups,proto3" json:"global_vpn_groups,omitempty"`
}

func (x *Qos_GlobalConfig_Pbr) Reset() {
	*x = Qos_GlobalConfig_Pbr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_Pbr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_Pbr) ProtoMessage() {}

func (x *Qos_GlobalConfig_Pbr) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_Pbr.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_Pbr) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 24}
}

func (x *Qos_GlobalConfig_Pbr) GetGlobalVpnGroups() *Qos_GlobalConfig_Pbr_GlobalVpnGroups {
	if x != nil {
		return x.GlobalVpnGroups
	}
	return nil
}

type Qos_GlobalConfig_LocalIdEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Qos_GlobalConfig_LocalIdEnable_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_LocalIdEnable_Mode" json:"mode,omitempty"`
}

func (x *Qos_GlobalConfig_LocalIdEnable) Reset() {
	*x = Qos_GlobalConfig_LocalIdEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_LocalIdEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_LocalIdEnable) ProtoMessage() {}

func (x *Qos_GlobalConfig_LocalIdEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_LocalIdEnable.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_LocalIdEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 25}
}

func (x *Qos_GlobalConfig_LocalIdEnable) GetMode() Qos_GlobalConfig_LocalIdEnable_Mode {
	if x != nil {
		return x.Mode
	}
	return Qos_GlobalConfig_LocalIdEnable_Mode_SOURCE
}

type Qos_GlobalConfig_GlobalPolicys_GlobalPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction               Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction                `protobuf:"varint,1,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction" json:"direction,omitempty"`
	PolicyName              string                                                               `protobuf:"bytes,2,opt,name=policy_name,json=policy-name,proto3" json:"policy_name,omitempty"`
	UpId                    uint32                                                               `protobuf:"varint,3,opt,name=up_id,json=up-id,proto3" json:"up_id,omitempty"`
	UclType                 Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType                  `protobuf:"varint,4,opt,name=ucl_type,json=ucl-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType" json:"ucl_type,omitempty"`
	GlobalPolicyStatisticss *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss `protobuf:"bytes,5,opt,name=global_policy_statisticss,json=global-policy-statisticss,proto3" json:"global_policy_statisticss,omitempty"`
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) Reset() {
	*x = Qos_GlobalConfig_GlobalPolicys_GlobalPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) ProtoMessage() {}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys_GlobalPolicy.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) GetDirection() Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction_INBOUND
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) GetUpId() uint32 {
	if x != nil {
		return x.UpId
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) GetUclType() Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType {
	if x != nil {
		return x.UclType
	}
	return Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType_UCL
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy) GetGlobalPolicyStatisticss() *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss {
	if x != nil {
		return x.GlobalPolicyStatisticss
	}
	return nil
}

type Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalPolicyStatistics []*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics `protobuf:"bytes,1,rep,name=global_policy_statistics,json=global-policy-statistics,proto3" json:"global_policy_statistics,omitempty"`
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss) Reset() {
	*x = Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss) ProtoMessage() {}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss) GetGlobalPolicyStatistics() []*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics {
	if x != nil {
		return x.GlobalPolicyStatistics
	}
	return nil
}

type Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                string                                                                                                            `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ApplyTime             string                                                                                                            `protobuf:"bytes,2,opt,name=apply_time,json=apply-time,proto3" json:"apply_time,omitempty"`
	EnableTime            string                                                                                                            `protobuf:"bytes,3,opt,name=enable_time,json=enable-time,proto3" json:"enable_time,omitempty"`
	ClearTime             string                                                                                                            `protobuf:"bytes,4,opt,name=clear_time,json=clear-time,proto3" json:"clear_time,omitempty"`
	ClearFlag             bool                                                                                                              `protobuf:"varint,5,opt,name=clear_flag,json=clear-flag,proto3" json:"clear_flag,omitempty"`
	MatchPackets          uint64                                                                                                            `protobuf:"varint,6,opt,name=match_packets,json=match-packets,proto3" json:"match_packets,omitempty"`
	MatchBytes            uint64                                                                                                            `protobuf:"varint,7,opt,name=match_bytes,json=match-bytes,proto3" json:"match_bytes,omitempty"`
	MatchPacketRate       uint64                                                                                                            `protobuf:"varint,8,opt,name=match_packet_rate,json=match-packet-rate,proto3" json:"match_packet_rate,omitempty"`
	MatchByteRate         uint64                                                                                                            `protobuf:"varint,9,opt,name=match_byte_rate,json=match-byte-rate,proto3" json:"match_byte_rate,omitempty"`
	MissPackets           uint64                                                                                                            `protobuf:"varint,10,opt,name=miss_packets,json=miss-packets,proto3" json:"miss_packets,omitempty"`
	MissBytes             uint64                                                                                                            `protobuf:"varint,11,opt,name=miss_bytes,json=miss-bytes,proto3" json:"miss_bytes,omitempty"`
	MatchPassPackets      uint64                                                                                                            `protobuf:"varint,12,opt,name=match_pass_packets,json=match-pass-packets,proto3" json:"match_pass_packets,omitempty"`
	MatchPassBytes        uint64                                                                                                            `protobuf:"varint,13,opt,name=match_pass_bytes,json=match-pass-bytes,proto3" json:"match_pass_bytes,omitempty"`
	MatchDropPackets      uint64                                                                                                            `protobuf:"varint,14,opt,name=match_drop_packets,json=match-drop-packets,proto3" json:"match_drop_packets,omitempty"`
	MatchDropBytes        uint64                                                                                                            `protobuf:"varint,15,opt,name=match_drop_bytes,json=match-drop-bytes,proto3" json:"match_drop_bytes,omitempty"`
	MissPacketRate        uint64                                                                                                            `protobuf:"varint,16,opt,name=miss_packet_rate,json=miss-packet-rate,proto3" json:"miss_packet_rate,omitempty"`
	MissByteRate          uint64                                                                                                            `protobuf:"varint,17,opt,name=miss_byte_rate,json=miss-byte-rate,proto3" json:"miss_byte_rate,omitempty"`
	MatchPassPacketRate   uint64                                                                                                            `protobuf:"varint,18,opt,name=match_pass_packet_rate,json=match-pass-packet-rate,proto3" json:"match_pass_packet_rate,omitempty"`
	MatchPassByteRate     uint64                                                                                                            `protobuf:"varint,19,opt,name=match_pass_byte_rate,json=match-pass-byte-rate,proto3" json:"match_pass_byte_rate,omitempty"`
	MatchDropPacketRate   uint64                                                                                                            `protobuf:"varint,20,opt,name=match_drop_packet_rate,json=match-drop-packet-rate,proto3" json:"match_drop_packet_rate,omitempty"`
	MatchDropByteRate     uint64                                                                                                            `protobuf:"varint,21,opt,name=match_drop_byte_rate,json=match-drop-byte-rate,proto3" json:"match_drop_byte_rate,omitempty"`
	UrpfPackets           uint64                                                                                                            `protobuf:"varint,22,opt,name=urpf_packets,json=urpf-packets,proto3" json:"urpf_packets,omitempty"`
	UrpfBytes             uint64                                                                                                            `protobuf:"varint,23,opt,name=urpf_bytes,json=urpf-bytes,proto3" json:"urpf_bytes,omitempty"`
	UrpfPacketRate        uint64                                                                                                            `protobuf:"varint,24,opt,name=urpf_packet_rate,json=urpf-packet-rate,proto3" json:"urpf_packet_rate,omitempty"`
	UrpfByteRate          uint64                                                                                                            `protobuf:"varint,25,opt,name=urpf_byte_rate,json=urpf-byte-rate,proto3" json:"urpf_byte_rate,omitempty"`
	CarPackets            uint64                                                                                                            `protobuf:"varint,26,opt,name=car_packets,json=car-packets,proto3" json:"car_packets,omitempty"`
	CarBytes              uint64                                                                                                            `protobuf:"varint,27,opt,name=car_bytes,json=car-bytes,proto3" json:"car_bytes,omitempty"`
	CarPacketRate         uint64                                                                                                            `protobuf:"varint,28,opt,name=car_packet_rate,json=car-packet-rate,proto3" json:"car_packet_rate,omitempty"`
	CarByteRate           uint64                                                                                                            `protobuf:"varint,29,opt,name=car_byte_rate,json=car-byte-rate,proto3" json:"car_byte_rate,omitempty"`
	FilterPackets         uint64                                                                                                            `protobuf:"varint,30,opt,name=filter_packets,json=filter-packets,proto3" json:"filter_packets,omitempty"`
	FilterBytes           uint64                                                                                                            `protobuf:"varint,31,opt,name=filter_bytes,json=filter-bytes,proto3" json:"filter_bytes,omitempty"`
	FilterPacketRate      uint64                                                                                                            `protobuf:"varint,32,opt,name=filter_packet_rate,json=filter-packet-rate,proto3" json:"filter_packet_rate,omitempty"`
	FilterByteRate        uint64                                                                                                            `protobuf:"varint,33,opt,name=filter_byte_rate,json=filter-byte-rate,proto3" json:"filter_byte_rate,omitempty"`
	ClassifierStatisticss *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss `protobuf:"bytes,34,opt,name=classifier_statisticss,json=classifier-statisticss,proto3" json:"classifier_statisticss,omitempty"`
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) Reset() {
	*x = Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) ProtoMessage() {
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetApplyTime() string {
	if x != nil {
		return x.ApplyTime
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetEnableTime() string {
	if x != nil {
		return x.EnableTime
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetClearTime() string {
	if x != nil {
		return x.ClearTime
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetClearFlag() bool {
	if x != nil {
		return x.ClearFlag
	}
	return false
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchPackets() uint64 {
	if x != nil {
		return x.MatchPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchBytes() uint64 {
	if x != nil {
		return x.MatchBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchPacketRate() uint64 {
	if x != nil {
		return x.MatchPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchByteRate() uint64 {
	if x != nil {
		return x.MatchByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMissPackets() uint64 {
	if x != nil {
		return x.MissPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMissBytes() uint64 {
	if x != nil {
		return x.MissBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchPassPackets() uint64 {
	if x != nil {
		return x.MatchPassPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchPassBytes() uint64 {
	if x != nil {
		return x.MatchPassBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchDropPackets() uint64 {
	if x != nil {
		return x.MatchDropPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchDropBytes() uint64 {
	if x != nil {
		return x.MatchDropBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMissPacketRate() uint64 {
	if x != nil {
		return x.MissPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMissByteRate() uint64 {
	if x != nil {
		return x.MissByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchPassPacketRate() uint64 {
	if x != nil {
		return x.MatchPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchPassByteRate() uint64 {
	if x != nil {
		return x.MatchPassByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchDropPacketRate() uint64 {
	if x != nil {
		return x.MatchDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetMatchDropByteRate() uint64 {
	if x != nil {
		return x.MatchDropByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetUrpfPackets() uint64 {
	if x != nil {
		return x.UrpfPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetUrpfBytes() uint64 {
	if x != nil {
		return x.UrpfBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetUrpfPacketRate() uint64 {
	if x != nil {
		return x.UrpfPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetUrpfByteRate() uint64 {
	if x != nil {
		return x.UrpfByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetCarPackets() uint64 {
	if x != nil {
		return x.CarPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetCarBytes() uint64 {
	if x != nil {
		return x.CarBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetCarPacketRate() uint64 {
	if x != nil {
		return x.CarPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetCarByteRate() uint64 {
	if x != nil {
		return x.CarByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetFilterPackets() uint64 {
	if x != nil {
		return x.FilterPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetFilterBytes() uint64 {
	if x != nil {
		return x.FilterBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetFilterPacketRate() uint64 {
	if x != nil {
		return x.FilterPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetFilterByteRate() uint64 {
	if x != nil {
		return x.FilterByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics) GetClassifierStatisticss() *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss {
	if x != nil {
		return x.ClassifierStatisticss
	}
	return nil
}

type Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierStatistics []*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics `protobuf:"bytes,1,rep,name=classifier_statistics,json=classifier-statistics,proto3" json:"classifier_statistics,omitempty"`
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss) Reset() {
	*x = Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss) ProtoMessage() {
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss) GetClassifierStatistics() []*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics {
	if x != nil {
		return x.ClassifierStatistics
	}
	return nil
}

type Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierName      string `protobuf:"bytes,1,opt,name=classifier_name,json=classifier-name,proto3" json:"classifier_name,omitempty"`
	StreamDirection     string `protobuf:"bytes,2,opt,name=stream_direction,json=stream-direction,proto3" json:"stream_direction,omitempty"`
	GroupType           string `protobuf:"bytes,3,opt,name=group_type,json=group-type,proto3" json:"group_type,omitempty"`
	GroupName           string `protobuf:"bytes,4,opt,name=group_name,json=group-name,proto3" json:"group_name,omitempty"`
	MatchPackets        uint64 `protobuf:"varint,5,opt,name=match_packets,json=match-packets,proto3" json:"match_packets,omitempty"`
	MatchBytes          uint64 `protobuf:"varint,6,opt,name=match_bytes,json=match-bytes,proto3" json:"match_bytes,omitempty"`
	MatchPacketRate     uint64 `protobuf:"varint,7,opt,name=match_packet_rate,json=match-packet-rate,proto3" json:"match_packet_rate,omitempty"`
	MatchByteRate       uint64 `protobuf:"varint,8,opt,name=match_byte_rate,json=match-byte-rate,proto3" json:"match_byte_rate,omitempty"`
	MatchPassPackets    uint64 `protobuf:"varint,9,opt,name=match_pass_packets,json=match-pass-packets,proto3" json:"match_pass_packets,omitempty"`
	MatchPassBytes      uint64 `protobuf:"varint,10,opt,name=match_pass_bytes,json=match-pass-bytes,proto3" json:"match_pass_bytes,omitempty"`
	MatchDropPackets    uint64 `protobuf:"varint,11,opt,name=match_drop_packets,json=match-drop-packets,proto3" json:"match_drop_packets,omitempty"`
	MatchDropBytes      uint64 `protobuf:"varint,12,opt,name=match_drop_bytes,json=match-drop-bytes,proto3" json:"match_drop_bytes,omitempty"`
	MatchPassPacketRate uint64 `protobuf:"varint,13,opt,name=match_pass_packet_rate,json=match-pass-packet-rate,proto3" json:"match_pass_packet_rate,omitempty"`
	MatchPassByteRate   uint64 `protobuf:"varint,14,opt,name=match_pass_byte_rate,json=match-pass-byte-rate,proto3" json:"match_pass_byte_rate,omitempty"`
	MatchDropPacketRate uint64 `protobuf:"varint,15,opt,name=match_drop_packet_rate,json=match-drop-packet-rate,proto3" json:"match_drop_packet_rate,omitempty"`
	MatchDropByteRate   uint64 `protobuf:"varint,16,opt,name=match_drop_byte_rate,json=match-drop-byte-rate,proto3" json:"match_drop_byte_rate,omitempty"`
	FilterPackets       uint64 `protobuf:"varint,17,opt,name=filter_packets,json=filter-packets,proto3" json:"filter_packets,omitempty"`
	FilterBytes         uint64 `protobuf:"varint,18,opt,name=filter_bytes,json=filter-bytes,proto3" json:"filter_bytes,omitempty"`
	FilterPaketRate     uint64 `protobuf:"varint,19,opt,name=filter_paket_rate,json=filter-paket-rate,proto3" json:"filter_paket_rate,omitempty"`
	FilterByteRate      uint64 `protobuf:"varint,20,opt,name=filter_byte_rate,json=filter-byte-rate,proto3" json:"filter_byte_rate,omitempty"`
	UrpfDropPackets     uint64 `protobuf:"varint,21,opt,name=urpf_drop_packets,json=urpf-drop-packets,proto3" json:"urpf_drop_packets,omitempty"`
	UrpfDropBytes       uint64 `protobuf:"varint,22,opt,name=urpf_drop_bytes,json=urpf-drop-bytes,proto3" json:"urpf_drop_bytes,omitempty"`
	UrpfDropPacketRate  uint64 `protobuf:"varint,23,opt,name=urpf_drop_packet_rate,json=urpf-drop-packet-rate,proto3" json:"urpf_drop_packet_rate,omitempty"`
	UrpfDropByteRate    uint64 `protobuf:"varint,24,opt,name=urpf_drop_byte_rate,json=urpf-drop-byte-rate,proto3" json:"urpf_drop_byte_rate,omitempty"`
	CarPackets          uint64 `protobuf:"varint,25,opt,name=car_packets,json=car-packets,proto3" json:"car_packets,omitempty"`
	CarBytes            uint64 `protobuf:"varint,26,opt,name=car_bytes,json=car-bytes,proto3" json:"car_bytes,omitempty"`
	CarPacketRate       uint64 `protobuf:"varint,27,opt,name=car_packet_rate,json=car-packet-rate,proto3" json:"car_packet_rate,omitempty"`
	CarByteRate         uint64 `protobuf:"varint,28,opt,name=car_byte_rate,json=car-byte-rate,proto3" json:"car_byte_rate,omitempty"`
	CarPassPackets      uint64 `protobuf:"varint,29,opt,name=car_pass_packets,json=car-pass-packets,proto3" json:"car_pass_packets,omitempty"`
	CarPassBytes        uint64 `protobuf:"varint,30,opt,name=car_pass_bytes,json=car-pass-bytes,proto3" json:"car_pass_bytes,omitempty"`
	CarDropPackets      uint64 `protobuf:"varint,31,opt,name=car_drop_packets,json=car-drop-packets,proto3" json:"car_drop_packets,omitempty"`
	CarDropBytes        uint64 `protobuf:"varint,32,opt,name=car_drop_bytes,json=car-drop-bytes,proto3" json:"car_drop_bytes,omitempty"`
	CarPassPacketRate   uint64 `protobuf:"varint,33,opt,name=car_pass_packet_rate,json=car-pass-packet-rate,proto3" json:"car_pass_packet_rate,omitempty"`
	CarPassByteRate     uint64 `protobuf:"varint,34,opt,name=car_pass_byte_rate,json=car-pass-byte-rate,proto3" json:"car_pass_byte_rate,omitempty"`
	CarDropPacketRate   uint64 `protobuf:"varint,35,opt,name=car_drop_packet_rate,json=car-drop-packet-rate,proto3" json:"car_drop_packet_rate,omitempty"`
	CarDropByteRate     uint64 `protobuf:"varint,36,opt,name=car_drop_byte_rate,json=car-drop-byte-rate,proto3" json:"car_drop_byte_rate,omitempty"`
	CarGreenPackets     uint64 `protobuf:"varint,37,opt,name=car_green_packets,json=car-green-packets,proto3" json:"car_green_packets,omitempty"`
	CarGreenBytes       uint64 `protobuf:"varint,38,opt,name=car_green_bytes,json=car-green-bytes,proto3" json:"car_green_bytes,omitempty"`
	CarYellowPackets    uint64 `protobuf:"varint,39,opt,name=car_yellow_packets,json=car-yellow-packets,proto3" json:"car_yellow_packets,omitempty"`
	CarYellowBytes      uint64 `protobuf:"varint,40,opt,name=car_yellow_bytes,json=car-yellow-bytes,proto3" json:"car_yellow_bytes,omitempty"`
	CarRedPackets       uint64 `protobuf:"varint,41,opt,name=car_red_packets,json=car-red-packets,proto3" json:"car_red_packets,omitempty"`
	CarRedBytes         uint64 `protobuf:"varint,42,opt,name=car_red_bytes,json=car-red-bytes,proto3" json:"car_red_bytes,omitempty"`
	CarGreenPacketRate  uint64 `protobuf:"varint,43,opt,name=car_green_packet_rate,json=car-green-packet-rate,proto3" json:"car_green_packet_rate,omitempty"`
	CarGreenByteRate    uint64 `protobuf:"varint,44,opt,name=car_green_byte_rate,json=car-green-byte-rate,proto3" json:"car_green_byte_rate,omitempty"`
	CarYellowPacketRate uint64 `protobuf:"varint,45,opt,name=car_yellow_packet_rate,json=car-yellow-packet-rate,proto3" json:"car_yellow_packet_rate,omitempty"`
	CarYellowByteRate   uint64 `protobuf:"varint,46,opt,name=car_yellow_byte_rate,json=car-yellow-byte-rate,proto3" json:"car_yellow_byte_rate,omitempty"`
	CarRedPacketRate    uint64 `protobuf:"varint,47,opt,name=car_red_packet_rate,json=car-red-packet-rate,proto3" json:"car_red_packet_rate,omitempty"`
	CarRedByteRate      uint64 `protobuf:"varint,48,opt,name=car_red_byte_rate,json=car-red-byte-rate,proto3" json:"car_red_byte_rate,omitempty"`
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) Reset() {
	*x = Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) ProtoMessage() {
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0, 0, 0, 0}
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetStreamDirection() string {
	if x != nil {
		return x.StreamDirection
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPackets() uint64 {
	if x != nil {
		return x.MatchPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchBytes() uint64 {
	if x != nil {
		return x.MatchBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPacketRate() uint64 {
	if x != nil {
		return x.MatchPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchByteRate() uint64 {
	if x != nil {
		return x.MatchByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassPackets() uint64 {
	if x != nil {
		return x.MatchPassPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassBytes() uint64 {
	if x != nil {
		return x.MatchPassBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropPackets() uint64 {
	if x != nil {
		return x.MatchDropPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropBytes() uint64 {
	if x != nil {
		return x.MatchDropBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassPacketRate() uint64 {
	if x != nil {
		return x.MatchPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassByteRate() uint64 {
	if x != nil {
		return x.MatchPassByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropPacketRate() uint64 {
	if x != nil {
		return x.MatchDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropByteRate() uint64 {
	if x != nil {
		return x.MatchDropByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterPackets() uint64 {
	if x != nil {
		return x.FilterPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterBytes() uint64 {
	if x != nil {
		return x.FilterBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterPaketRate() uint64 {
	if x != nil {
		return x.FilterPaketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterByteRate() uint64 {
	if x != nil {
		return x.FilterByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropPackets() uint64 {
	if x != nil {
		return x.UrpfDropPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropBytes() uint64 {
	if x != nil {
		return x.UrpfDropBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropPacketRate() uint64 {
	if x != nil {
		return x.UrpfDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropByteRate() uint64 {
	if x != nil {
		return x.UrpfDropByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPackets() uint64 {
	if x != nil {
		return x.CarPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarBytes() uint64 {
	if x != nil {
		return x.CarBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPacketRate() uint64 {
	if x != nil {
		return x.CarPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarByteRate() uint64 {
	if x != nil {
		return x.CarByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassPackets() uint64 {
	if x != nil {
		return x.CarPassPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassBytes() uint64 {
	if x != nil {
		return x.CarPassBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropPackets() uint64 {
	if x != nil {
		return x.CarDropPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropBytes() uint64 {
	if x != nil {
		return x.CarDropBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassPacketRate() uint64 {
	if x != nil {
		return x.CarPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassByteRate() uint64 {
	if x != nil {
		return x.CarPassByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropPacketRate() uint64 {
	if x != nil {
		return x.CarDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropByteRate() uint64 {
	if x != nil {
		return x.CarDropByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenPackets() uint64 {
	if x != nil {
		return x.CarGreenPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenBytes() uint64 {
	if x != nil {
		return x.CarGreenBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowPackets() uint64 {
	if x != nil {
		return x.CarYellowPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowBytes() uint64 {
	if x != nil {
		return x.CarYellowBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedPackets() uint64 {
	if x != nil {
		return x.CarRedPackets
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedBytes() uint64 {
	if x != nil {
		return x.CarRedBytes
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenPacketRate() uint64 {
	if x != nil {
		return x.CarGreenPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenByteRate() uint64 {
	if x != nil {
		return x.CarGreenByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowPacketRate() uint64 {
	if x != nil {
		return x.CarYellowPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowByteRate() uint64 {
	if x != nil {
		return x.CarYellowByteRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedPacketRate() uint64 {
	if x != nil {
		return x.CarRedPacketRate
	}
	return 0
}

func (x *Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedByteRate() uint64 {
	if x != nil {
		return x.CarRedByteRate
	}
	return 0
}

type Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type" json:"type,omitempty"`
}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch) Reset() {
	*x = Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch) ProtoMessage() {}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

func (x *Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch) GetType() Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type {
	if x != nil {
		return x.Type
	}
	return Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type_IPX_LAYERX_PUSH
}

type Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply) Reset() {
	*x = Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply) ProtoMessage() {}

func (x *Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 4, 0}
}

func (x *Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Qos_GlobalConfig_QueueWreds_QueueWred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass" json:"service_class,omitempty"`
	SpeedType    Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType    `protobuf:"varint,2,opt,name=speed_type,json=speed-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType" json:"speed_type,omitempty"`
	WredName     string                                             `protobuf:"bytes,3,opt,name=wred_name,json=wred-name,proto3" json:"wred_name,omitempty"`
}

func (x *Qos_GlobalConfig_QueueWreds_QueueWred) Reset() {
	*x = Qos_GlobalConfig_QueueWreds_QueueWred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_QueueWreds_QueueWred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_QueueWreds_QueueWred) ProtoMessage() {}

func (x *Qos_GlobalConfig_QueueWreds_QueueWred) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_QueueWreds_QueueWred.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_QueueWreds_QueueWred) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 5, 0}
}

func (x *Qos_GlobalConfig_QueueWreds_QueueWred) GetServiceClass() Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass_BE
}

func (x *Qos_GlobalConfig_QueueWreds_QueueWred) GetSpeedType() Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType {
	if x != nil {
		return x.SpeedType
	}
	return Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType_BOTHX_SPEED
}

func (x *Qos_GlobalConfig_QueueWreds_QueueWred) GetWredName() string {
	if x != nil {
		return x.WredName
	}
	return ""
}

type Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableType  Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType  `protobuf:"varint,1,opt,name=enable_type,json=enable-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType" json:"enable_type,omitempty"`
	EnableValue Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue `protobuf:"varint,2,opt,name=enable_value,json=enable-value,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue" json:"enable_value,omitempty"`
}

func (x *Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable) Reset() {
	*x = Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable) ProtoMessage() {}

func (x *Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 6, 0}
}

func (x *Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable) GetEnableType() Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType {
	if x != nil {
		return x.EnableType
	}
	return Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_INVALID_ENUM_VALUE_EnableType
}

func (x *Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable) GetEnableValue() Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue {
	if x != nil {
		return x.EnableValue
	}
	return Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_INVALID_ENUM_VALUE_EnableValue
}

type Qos_GlobalConfig_SchedulingModes_SchedulingMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId   string                                                   `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ModeType Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType `protobuf:"varint,2,opt,name=mode_type,json=mode-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType" json:"mode_type,omitempty"`
}

func (x *Qos_GlobalConfig_SchedulingModes_SchedulingMode) Reset() {
	*x = Qos_GlobalConfig_SchedulingModes_SchedulingMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_SchedulingModes_SchedulingMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_SchedulingModes_SchedulingMode) ProtoMessage() {}

func (x *Qos_GlobalConfig_SchedulingModes_SchedulingMode) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_SchedulingModes_SchedulingMode.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_SchedulingModes_SchedulingMode) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 7, 0}
}

func (x *Qos_GlobalConfig_SchedulingModes_SchedulingMode) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalConfig_SchedulingModes_SchedulingMode) GetModeType() Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType {
	if x != nil {
		return x.ModeType
	}
	return Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType_MODE2
}

type Qos_GlobalConfig_HostPackets_HostPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dscp         uint32                                               `protobuf:"varint,1,opt,name=dscp,proto3" json:"dscp,omitempty"`
	ServiceClass Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass" json:"service_class,omitempty"`
	Color        Qos_GlobalConfig_HostPackets_HostPacket_Color        `protobuf:"varint,3,opt,name=color,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_HostPackets_HostPacket_Color" json:"color,omitempty"`
}

func (x *Qos_GlobalConfig_HostPackets_HostPacket) Reset() {
	*x = Qos_GlobalConfig_HostPackets_HostPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_HostPackets_HostPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_HostPackets_HostPacket) ProtoMessage() {}

func (x *Qos_GlobalConfig_HostPackets_HostPacket) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_HostPackets_HostPacket.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_HostPackets_HostPacket) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 11, 0}
}

func (x *Qos_GlobalConfig_HostPackets_HostPacket) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *Qos_GlobalConfig_HostPackets_HostPacket) GetServiceClass() Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass_BE
}

func (x *Qos_GlobalConfig_HostPackets_HostPacket) GetColor() Qos_GlobalConfig_HostPackets_HostPacket_Color {
	if x != nil {
		return x.Color
	}
	return Qos_GlobalConfig_HostPackets_HostPacket_Color_GREEN
}

type Qos_GlobalConfig_Packs_Pack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId     string                                 `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	SwitchFlag Qos_GlobalConfig_Packs_Pack_SwitchFlag `protobuf:"varint,2,opt,name=switch_flag,json=switch-flag,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_Packs_Pack_SwitchFlag" json:"switch_flag,omitempty"`
}

func (x *Qos_GlobalConfig_Packs_Pack) Reset() {
	*x = Qos_GlobalConfig_Packs_Pack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_Packs_Pack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_Packs_Pack) ProtoMessage() {}

func (x *Qos_GlobalConfig_Packs_Pack) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_Packs_Pack.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_Packs_Pack) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 13, 0}
}

func (x *Qos_GlobalConfig_Packs_Pack) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalConfig_Packs_Pack) GetSwitchFlag() Qos_GlobalConfig_Packs_Pack_SwitchFlag {
	if x != nil {
		return x.SwitchFlag
	}
	return Qos_GlobalConfig_Packs_Pack_SwitchFlag_DISABLE
}

type Qos_GlobalConfig_BurstSizes_BurstSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass" json:"service_class,omitempty"`
	Value        uint32                                             `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qos_GlobalConfig_BurstSizes_BurstSize) Reset() {
	*x = Qos_GlobalConfig_BurstSizes_BurstSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_BurstSizes_BurstSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_BurstSizes_BurstSize) ProtoMessage() {}

func (x *Qos_GlobalConfig_BurstSizes_BurstSize) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_BurstSizes_BurstSize.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_BurstSizes_BurstSize) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 15, 0}
}

func (x *Qos_GlobalConfig_BurstSizes_BurstSize) GetServiceClass() Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass_BE
}

func (x *Qos_GlobalConfig_BurstSizes_BurstSize) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	CardId string `protobuf:"bytes,2,opt,name=card_id,json=card-id,proto3" json:"card_id,omitempty"`
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable) Reset() {
	*x = Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable) ProtoMessage() {
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 16, 0}
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

type Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId   string                                                                             `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	UserType Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType `protobuf:"varint,2,opt,name=user_type,json=user-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType" json:"user_type,omitempty"`
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot) Reset() {
	*x = Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot) ProtoMessage() {}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 18, 0}
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot) GetUserType() Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType {
	if x != nil {
		return x.UserType
	}
	return Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_INVALID_ENUM_VALUE_UserType
}

type Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessType Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType `protobuf:"varint,1,opt,name=access_type,json=access-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType" json:"access_type,omitempty"`
}

func (x *Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude) Reset() {
	*x = Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude) ProtoMessage() {}

func (x *Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 19, 0}
}

func (x *Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude) GetAccessType() Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType {
	if x != nil {
		return x.AccessType
	}
	return Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType_NONE
}

type Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId     string                                                                 `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	AccessType Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType `protobuf:"varint,2,opt,name=access_type,json=access-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType" json:"access_type,omitempty"`
}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot) Reset() {
	*x = Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot) ProtoMessage() {}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 20, 0}
}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot) GetAccessType() Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType {
	if x != nil {
		return x.AccessType
	}
	return Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType_NONE
}

type Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot) Reset() {
	*x = Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot) ProtoMessage() {}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 22, 0}
}

func (x *Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

type Qos_GlobalConfig_Mirror_ToObserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Qos_GlobalConfig_Mirror_ToObserve) Reset() {
	*x = Qos_GlobalConfig_Mirror_ToObserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_Mirror_ToObserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_Mirror_ToObserve) ProtoMessage() {}

func (x *Qos_GlobalConfig_Mirror_ToObserve) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_Mirror_ToObserve.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_Mirror_ToObserve) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 23, 0}
}

func (x *Qos_GlobalConfig_Mirror_ToObserve) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Qos_GlobalConfig_Pbr_GlobalVpnGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalVpnGroup []*Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup `protobuf:"bytes,1,rep,name=global_vpn_group,json=global-vpn-group,proto3" json:"global_vpn_group,omitempty"`
}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups) Reset() {
	*x = Qos_GlobalConfig_Pbr_GlobalVpnGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_Pbr_GlobalVpnGroups) ProtoMessage() {}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_Pbr_GlobalVpnGroups.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_Pbr_GlobalVpnGroups) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 24, 0}
}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups) GetGlobalVpnGroup() []*Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup {
	if x != nil {
		return x.GlobalVpnGroup
	}
	return nil
}

type Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpnGroupName string   `protobuf:"bytes,1,opt,name=vpn_group_name,json=vpn-group-name,proto3" json:"vpn_group_name,omitempty"`
	VrfName      []string `protobuf:"bytes,2,rep,name=vrf_name,json=vrf-name,proto3" json:"vrf_name,omitempty"`
}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup) Reset() {
	*x = Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup) ProtoMessage() {}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup.ProtoReflect.Descriptor instead.
func (*Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 3, 24, 0, 0}
}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup) GetVpnGroupName() string {
	if x != nil {
		return x.VpnGroupName
	}
	return ""
}

func (x *Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup) GetVrfName() []string {
	if x != nil {
		return x.VrfName
	}
	return nil
}

type Qos_GlobalQuery_DefaultQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultQueueStatistics []*Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics `protobuf:"bytes,1,rep,name=default_queue_statistics,json=default-queue-statistics,proto3" json:"default_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_DefaultQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_DefaultQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_DefaultQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_DefaultQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss) GetDefaultQueueStatistics() []*Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics {
	if x != nil {
		return x.DefaultQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_AllQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllQueueStatistics []*Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics `protobuf:"bytes,1,rep,name=all_queue_statistics,json=all-queue-statistics,proto3" json:"all_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_AllQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_AllQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_AllQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_AllQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_AllQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_AllQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_AllQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *Qos_GlobalQuery_AllQueueStatisticss) GetAllQueueStatistics() []*Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics {
	if x != nil {
		return x.AllQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_ChannelQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelQueueStatistics []*Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics `protobuf:"bytes,1,rep,name=channel_queue_statistics,json=channel-queue-statistics,proto3" json:"channel_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_ChannelQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_ChannelQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_ChannelQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_ChannelQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss) GetChannelQueueStatistics() []*Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics {
	if x != nil {
		return x.ChannelQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_UserInformations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInformation []*Qos_GlobalQuery_UserInformations_UserInformation `protobuf:"bytes,1,rep,name=user_information,json=user-information,proto3" json:"user_information,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations) Reset() {
	*x = Qos_GlobalQuery_UserInformations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserInformations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3}
}

func (x *Qos_GlobalQuery_UserInformations) GetUserInformation() []*Qos_GlobalQuery_UserInformations_UserInformation {
	if x != nil {
		return x.UserInformation
	}
	return nil
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceTrafficPolicyStatistics []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics `protobuf:"bytes,1,rep,name=interface_traffic_policy_statistics,json=interface-traffic-policy-statistics,proto3" json:"interface_traffic_policy_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss) GetInterfaceTrafficPolicyStatistics() []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics {
	if x != nil {
		return x.InterfaceTrafficPolicyStatistics
	}
	return nil
}

type Qos_GlobalQuery_CarResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarResource []*Qos_GlobalQuery_CarResources_CarResource `protobuf:"bytes,1,rep,name=car_resource,json=car-resource,proto3" json:"car_resource,omitempty"`
}

func (x *Qos_GlobalQuery_CarResources) Reset() {
	*x = Qos_GlobalQuery_CarResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_CarResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_CarResources) ProtoMessage() {}

func (x *Qos_GlobalQuery_CarResources) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_CarResources.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_CarResources) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 5}
}

func (x *Qos_GlobalQuery_CarResources) GetCarResource() []*Qos_GlobalQuery_CarResources_CarResource {
	if x != nil {
		return x.CarResource
	}
	return nil
}

type Qos_GlobalQuery_TrafficBufferUses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficBufferUse []*Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse `protobuf:"bytes,1,rep,name=traffic_buffer_use,json=traffic-buffer-use,proto3" json:"traffic_buffer_use,omitempty"`
}

func (x *Qos_GlobalQuery_TrafficBufferUses) Reset() {
	*x = Qos_GlobalQuery_TrafficBufferUses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_TrafficBufferUses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_TrafficBufferUses) ProtoMessage() {}

func (x *Qos_GlobalQuery_TrafficBufferUses) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficBufferUses.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_TrafficBufferUses) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 6}
}

func (x *Qos_GlobalQuery_TrafficBufferUses) GetTrafficBufferUse() []*Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse {
	if x != nil {
		return x.TrafficBufferUse
	}
	return nil
}

type Qos_GlobalQuery_TrafficPolicyApplicationResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPolicyApplicationResource []*Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource `protobuf:"bytes,1,rep,name=traffic_policy_application_resource,json=traffic-policy-application-resource,proto3" json:"traffic_policy_application_resource,omitempty"`
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources) Reset() {
	*x = Qos_GlobalQuery_TrafficPolicyApplicationResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_TrafficPolicyApplicationResources) ProtoMessage() {}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficPolicyApplicationResources.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_TrafficPolicyApplicationResources) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 7}
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources) GetTrafficPolicyApplicationResource() []*Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource {
	if x != nil {
		return x.TrafficPolicyApplicationResource
	}
	return nil
}

type Qos_GlobalQuery_UserGroupQueueResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroupQueueResource []*Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource `protobuf:"bytes,1,rep,name=user_group_queue_resource,json=user-group-queue-resource,proto3" json:"user_group_queue_resource,omitempty"`
}

func (x *Qos_GlobalQuery_UserGroupQueueResources) Reset() {
	*x = Qos_GlobalQuery_UserGroupQueueResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserGroupQueueResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserGroupQueueResources) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserGroupQueueResources) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueResources.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserGroupQueueResources) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 8}
}

func (x *Qos_GlobalQuery_UserGroupQueueResources) GetUserGroupQueueResource() []*Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource {
	if x != nil {
		return x.UserGroupQueueResource
	}
	return nil
}

type Qos_GlobalQuery_InterfaceProfileStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueues    *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues    `protobuf:"bytes,1,opt,name=user_queues,json=user-queues,proto3" json:"user_queues,omitempty"`
	Cars          *Qos_GlobalQuery_InterfaceProfileStatistics_Cars          `protobuf:"bytes,2,opt,name=cars,proto3" json:"cars,omitempty"`
	ShareShapings *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings `protobuf:"bytes,3,opt,name=share_shapings,json=share-shapings,proto3" json:"share_shapings,omitempty"`
	PriorityCars  *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars  `protobuf:"bytes,4,opt,name=priority_cars,json=priority-cars,proto3" json:"priority_cars,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics) GetUserQueues() *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues {
	if x != nil {
		return x.UserQueues
	}
	return nil
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics) GetCars() *Qos_GlobalQuery_InterfaceProfileStatistics_Cars {
	if x != nil {
		return x.Cars
	}
	return nil
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics) GetShareShapings() *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings {
	if x != nil {
		return x.ShareShapings
	}
	return nil
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics) GetPriorityCars() *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars {
	if x != nil {
		return x.PriorityCars
	}
	return nil
}

type Qos_GlobalQuery_MplsTeStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsTeStatistics []*Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics `protobuf:"bytes,1,rep,name=mpls_te_statistics,json=mpls-te-statistics,proto3" json:"mpls_te_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_MplsTeStatisticss) Reset() {
	*x = Qos_GlobalQuery_MplsTeStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_MplsTeStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_MplsTeStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_MplsTeStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_MplsTeStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_MplsTeStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 10}
}

func (x *Qos_GlobalQuery_MplsTeStatisticss) GetMplsTeStatistics() []*Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics {
	if x != nil {
		return x.MplsTeStatistics
	}
	return nil
}

type Qos_GlobalQuery_TrafficBufferUsages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficBufferUsage []*Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage `protobuf:"bytes,1,rep,name=traffic_buffer_usage,json=traffic-buffer-usage,proto3" json:"traffic_buffer_usage,omitempty"`
}

func (x *Qos_GlobalQuery_TrafficBufferUsages) Reset() {
	*x = Qos_GlobalQuery_TrafficBufferUsages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_TrafficBufferUsages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_TrafficBufferUsages) ProtoMessage() {}

func (x *Qos_GlobalQuery_TrafficBufferUsages) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficBufferUsages.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_TrafficBufferUsages) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 11}
}

func (x *Qos_GlobalQuery_TrafficBufferUsages) GetTrafficBufferUsage() []*Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage {
	if x != nil {
		return x.TrafficBufferUsage
	}
	return nil
}

type Qos_GlobalQuery_QueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueStatistics []*Qos_GlobalQuery_QueueStatisticss_QueueStatistics `protobuf:"bytes,1,rep,name=queue_statistics,json=queue-statistics,proto3" json:"queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_QueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_QueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_QueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_QueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_QueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_QueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_QueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 12}
}

func (x *Qos_GlobalQuery_QueueStatisticss) GetQueueStatistics() []*Qos_GlobalQuery_QueueStatisticss_QueueStatistics {
	if x != nil {
		return x.QueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_PortQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueStatistics []*Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics `protobuf:"bytes,1,rep,name=port_queue_statistics,json=port-queue-statistics,proto3" json:"port_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_PortQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_PortQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_PortQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_PortQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_PortQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_PortQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 13}
}

func (x *Qos_GlobalQuery_PortQueueStatisticss) GetPortQueueStatistics() []*Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics {
	if x != nil {
		return x.PortQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_PortQueueDefaultStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueDefaultStatistics []*Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics `protobuf:"bytes,1,rep,name=port_queue_default_statistics,json=port-queue-default-statistics,proto3" json:"port_queue_default_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss) Reset() {
	*x = Qos_GlobalQuery_PortQueueDefaultStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_PortQueueDefaultStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueDefaultStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_PortQueueDefaultStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 14}
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss) GetPortQueueDefaultStatistics() []*Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics {
	if x != nil {
		return x.PortQueueDefaultStatistics
	}
	return nil
}

type Qos_GlobalQuery_PortQueueOnboardStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortQueueOnboardStatistics []*Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics `protobuf:"bytes,1,rep,name=port_queue_onboard_statistics,json=port-queue-onboard-statistics,proto3" json:"port_queue_onboard_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss) Reset() {
	*x = Qos_GlobalQuery_PortQueueOnboardStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_PortQueueOnboardStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueOnboardStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_PortQueueOnboardStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 15}
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss) GetPortQueueOnboardStatistics() []*Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics {
	if x != nil {
		return x.PortQueueOnboardStatistics
	}
	return nil
}

type Qos_GlobalQuery_DefaultFlowQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultFlowQueueStatistics []*Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics `protobuf:"bytes,1,rep,name=default_flow_queue_statistics,json=default-flow-queue-statistics,proto3" json:"default_flow_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_DefaultFlowQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_DefaultFlowQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_DefaultFlowQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_DefaultFlowQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 16}
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss) GetDefaultFlowQueueStatistics() []*Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics {
	if x != nil {
		return x.DefaultFlowQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_HardPipeAbilitys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardPipeAbility []*Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility `protobuf:"bytes,1,rep,name=hard_pipe_ability,json=hard-pipe-ability,proto3" json:"hard_pipe_ability,omitempty"`
}

func (x *Qos_GlobalQuery_HardPipeAbilitys) Reset() {
	*x = Qos_GlobalQuery_HardPipeAbilitys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_HardPipeAbilitys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_HardPipeAbilitys) ProtoMessage() {}

func (x *Qos_GlobalQuery_HardPipeAbilitys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_HardPipeAbilitys.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_HardPipeAbilitys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 17}
}

func (x *Qos_GlobalQuery_HardPipeAbilitys) GetHardPipeAbility() []*Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility {
	if x != nil {
		return x.HardPipeAbility
	}
	return nil
}

type Qos_GlobalQuery_L2VpnHardPipeStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VpnHardPipeStatistics []*Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics `protobuf:"bytes,1,rep,name=l2vpn_hard_pipe_statistics,json=l2vpn-hard-pipe-statistics,proto3" json:"l2vpn_hard_pipe_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss) Reset() {
	*x = Qos_GlobalQuery_L2VpnHardPipeStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_L2VpnHardPipeStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_L2VpnHardPipeStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_L2VpnHardPipeStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 18}
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss) GetL2VpnHardPipeStatistics() []*Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics {
	if x != nil {
		return x.L2VpnHardPipeStatistics
	}
	return nil
}

type Qos_GlobalQuery_TrafficPolicyTemplateApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalClassifier   uint32 `protobuf:"varint,1,opt,name=total_classifier,json=total-classifier,proto3" json:"total_classifier,omitempty"`
	CreatedClassifier uint32 `protobuf:"varint,2,opt,name=created_classifier,json=created-classifier,proto3" json:"created_classifier,omitempty"`
	FreeClassifier    uint32 `protobuf:"varint,3,opt,name=free_classifier,json=free-classifier,proto3" json:"free_classifier,omitempty"`
	TotalBehavior     uint32 `protobuf:"varint,4,opt,name=total_behavior,json=total-behavior,proto3" json:"total_behavior,omitempty"`
	CreatedBehavior   uint32 `protobuf:"varint,5,opt,name=created_behavior,json=created-behavior,proto3" json:"created_behavior,omitempty"`
	FreeBehavior      uint32 `protobuf:"varint,6,opt,name=free_behavior,json=free-behavior,proto3" json:"free_behavior,omitempty"`
	TotalPolicy       uint32 `protobuf:"varint,7,opt,name=total_policy,json=total-policy,proto3" json:"total_policy,omitempty"`
	CreatedPolicy     uint32 `protobuf:"varint,8,opt,name=created_policy,json=created-policy,proto3" json:"created_policy,omitempty"`
	FreePolicy        uint32 `protobuf:"varint,9,opt,name=free_policy,json=free-policy,proto3" json:"free_policy,omitempty"`
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) Reset() {
	*x = Qos_GlobalQuery_TrafficPolicyTemplateApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_TrafficPolicyTemplateApplication) ProtoMessage() {}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficPolicyTemplateApplication.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_TrafficPolicyTemplateApplication) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 19}
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetTotalClassifier() uint32 {
	if x != nil {
		return x.TotalClassifier
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetCreatedClassifier() uint32 {
	if x != nil {
		return x.CreatedClassifier
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetFreeClassifier() uint32 {
	if x != nil {
		return x.FreeClassifier
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetTotalBehavior() uint32 {
	if x != nil {
		return x.TotalBehavior
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetCreatedBehavior() uint32 {
	if x != nil {
		return x.CreatedBehavior
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetFreeBehavior() uint32 {
	if x != nil {
		return x.FreeBehavior
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetTotalPolicy() uint32 {
	if x != nil {
		return x.TotalPolicy
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetCreatedPolicy() uint32 {
	if x != nil {
		return x.CreatedPolicy
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyTemplateApplication) GetFreePolicy() uint32 {
	if x != nil {
		return x.FreePolicy
	}
	return 0
}

type Qos_GlobalQuery_FlowCarStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowCarStatistics []*Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics `protobuf:"bytes,1,rep,name=flow_car_statistics,json=flow-car-statistics,proto3" json:"flow_car_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_FlowCarStatisticss) Reset() {
	*x = Qos_GlobalQuery_FlowCarStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_FlowCarStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_FlowCarStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_FlowCarStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_FlowCarStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_FlowCarStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 20}
}

func (x *Qos_GlobalQuery_FlowCarStatisticss) GetFlowCarStatistics() []*Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics {
	if x != nil {
		return x.FlowCarStatistics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceActionUserQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceActionUserQueueStatistics []*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics `protobuf:"bytes,1,rep,name=interface_action_user_queue_statistics,json=interface-action-user-queue-statistics,proto3" json:"interface_action_user_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceActionUserQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceActionUserQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 21}
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss) GetInterfaceActionUserQueueStatistics() []*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics {
	if x != nil {
		return x.InterfaceActionUserQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceUserGroupQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceUserGroupQueueStatistic []*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic `protobuf:"bytes,1,rep,name=interface_user_group_queue_statistic,json=interface-user-group-queue-statistic,proto3" json:"interface_user_group_queue_statistic,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceUserGroupQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceUserGroupQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 22}
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics) GetInterfaceUserGroupQueueStatistic() []*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic {
	if x != nil {
		return x.InterfaceUserGroupQueueStatistic
	}
	return nil
}

type Qos_GlobalQuery_InterfaceSubPortQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceSubPortQueueStatistic []*Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic `protobuf:"bytes,1,rep,name=interface_sub_port_queue_statistic,json=interface-sub-port-queue-statistic,proto3" json:"interface_sub_port_queue_statistic,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceSubPortQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceSubPortQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceSubPortQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceSubPortQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 23}
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics) GetInterfaceSubPortQueueStatistic() []*Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic {
	if x != nil {
		return x.InterfaceSubPortQueueStatistic
	}
	return nil
}

type Qos_GlobalQuery_InterfaceHardPipeStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceHardPipeStatistics []*Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics `protobuf:"bytes,1,rep,name=interface_hard_pipe_statistics,json=interface-hard-pipe-statistics,proto3" json:"interface_hard_pipe_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceHardPipeStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceHardPipeStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceHardPipeStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceHardPipeStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 24}
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss) GetInterfaceHardPipeStatistics() []*Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics {
	if x != nil {
		return x.InterfaceHardPipeStatistics
	}
	return nil
}

type Qos_GlobalQuery_QosResourceRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosResourceRule []*Qos_GlobalQuery_QosResourceRules_QosResourceRule `protobuf:"bytes,1,rep,name=qos_resource_rule,json=qos-resource-rule,proto3" json:"qos_resource_rule,omitempty"`
}

func (x *Qos_GlobalQuery_QosResourceRules) Reset() {
	*x = Qos_GlobalQuery_QosResourceRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_QosResourceRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_QosResourceRules) ProtoMessage() {}

func (x *Qos_GlobalQuery_QosResourceRules) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_QosResourceRules.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_QosResourceRules) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 25}
}

func (x *Qos_GlobalQuery_QosResourceRules) GetQosResourceRule() []*Qos_GlobalQuery_QosResourceRules_QosResourceRule {
	if x != nil {
		return x.QosResourceRule
	}
	return nil
}

type Qos_GlobalQuery_SubPortQueueResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubPortQueueResource []*Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource `protobuf:"bytes,1,rep,name=sub_port_queue_resource,json=sub-port-queue-resource,proto3" json:"sub_port_queue_resource,omitempty"`
}

func (x *Qos_GlobalQuery_SubPortQueueResources) Reset() {
	*x = Qos_GlobalQuery_SubPortQueueResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SubPortQueueResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SubPortQueueResources) ProtoMessage() {}

func (x *Qos_GlobalQuery_SubPortQueueResources) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueResources.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SubPortQueueResources) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 26}
}

func (x *Qos_GlobalQuery_SubPortQueueResources) GetSubPortQueueResource() []*Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource {
	if x != nil {
		return x.SubPortQueueResource
	}
	return nil
}

type Qos_GlobalQuery_InterfaceCarStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceCarStatistics []*Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics `protobuf:"bytes,1,rep,name=interface_car_statistics,json=interface-car-statistics,proto3" json:"interface_car_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceCarStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceCarStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCarStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceCarStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 27}
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss) GetInterfaceCarStatistics() []*Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics {
	if x != nil {
		return x.InterfaceCarStatistics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceCarL2PortStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceCarL2PortStatistics []*Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics `protobuf:"bytes,1,rep,name=interface_car_l2_port_statistics,json=interface-car-l2-port-statistics,proto3" json:"interface_car_l2_port_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceCarL2PortStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceCarL2PortStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCarL2PortStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceCarL2PortStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 28}
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss) GetInterfaceCarL2PortStatistics() []*Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics {
	if x != nil {
		return x.InterfaceCarL2PortStatistics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceCar_8021PDscpStatistics []*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics `protobuf:"bytes,1,rep,name=interface_car_8021p_dscp_statistics,json=interface-car-8021p-dscp-statistics,proto3" json:"interface_car_8021p_dscp_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 29}
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss) GetInterfaceCar_8021PDscpStatistics() []*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics {
	if x != nil {
		return x.InterfaceCar_8021PDscpStatistics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceExtendStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceExtendStatistics []*Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics `protobuf:"bytes,1,rep,name=interface_extend_statistics,json=interface-extend-statistics,proto3" json:"interface_extend_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceExtendStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceExtendStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceExtendStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceExtendStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 30}
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss) GetInterfaceExtendStatistics() []*Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics {
	if x != nil {
		return x.InterfaceExtendStatistics
	}
	return nil
}

type Qos_GlobalQuery_SubPortQueueAbnormalAllocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubPortQueueAbnormalAllocation []*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation `protobuf:"bytes,1,rep,name=sub_port_queue_abnormal_allocation,json=sub-port-queue-abnormal-allocation,proto3" json:"sub_port_queue_abnormal_allocation,omitempty"`
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations) Reset() {
	*x = Qos_GlobalQuery_SubPortQueueAbnormalAllocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations) ProtoMessage() {}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueAbnormalAllocations.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 31}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations) GetSubPortQueueAbnormalAllocation() []*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation {
	if x != nil {
		return x.SubPortQueueAbnormalAllocation
	}
	return nil
}

type Qos_GlobalQuery_UserGroupQueueAbnormalAllocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroupQueueAbnormalAllocation []*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation `protobuf:"bytes,1,rep,name=user_group_queue_abnormal_allocation,json=user-group-queue-abnormal-allocation,proto3" json:"user_group_queue_abnormal_allocation,omitempty"`
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations) Reset() {
	*x = Qos_GlobalQuery_UserGroupQueueAbnormalAllocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueAbnormalAllocations.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 32}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations) GetUserGroupQueueAbnormalAllocation() []*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation {
	if x != nil {
		return x.UserGroupQueueAbnormalAllocation
	}
	return nil
}

type Qos_GlobalQuery_UserQueueAbnormalAllocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueAbnormalAllocation []*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation `protobuf:"bytes,1,rep,name=user_queue_abnormal_allocation,json=user-queue-abnormal-allocation,proto3" json:"user_queue_abnormal_allocation,omitempty"`
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations) Reset() {
	*x = Qos_GlobalQuery_UserQueueAbnormalAllocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserQueueAbnormalAllocations) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueAbnormalAllocations.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserQueueAbnormalAllocations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 33}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations) GetUserQueueAbnormalAllocation() []*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation {
	if x != nil {
		return x.UserQueueAbnormalAllocation
	}
	return nil
}

type Qos_GlobalQuery_UserQueueResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueResource []*Qos_GlobalQuery_UserQueueResources_UserQueueResource `protobuf:"bytes,1,rep,name=user_queue_resource,json=user-queue-resource,proto3" json:"user_queue_resource,omitempty"`
}

func (x *Qos_GlobalQuery_UserQueueResources) Reset() {
	*x = Qos_GlobalQuery_UserQueueResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserQueueResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserQueueResources) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserQueueResources) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueResources.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserQueueResources) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 34}
}

func (x *Qos_GlobalQuery_UserQueueResources) GetUserQueueResource() []*Qos_GlobalQuery_UserQueueResources_UserQueueResource {
	if x != nil {
		return x.UserQueueResource
	}
	return nil
}

type Qos_GlobalQuery_FabricQueueUnicastStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FabricQueueUnicastStatistics []*Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics `protobuf:"bytes,1,rep,name=fabric_queue_unicast_statistics,json=fabric-queue-unicast-statistics,proto3" json:"fabric_queue_unicast_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss) Reset() {
	*x = Qos_GlobalQuery_FabricQueueUnicastStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_FabricQueueUnicastStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_FabricQueueUnicastStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_FabricQueueUnicastStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 35}
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss) GetFabricQueueUnicastStatistics() []*Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics {
	if x != nil {
		return x.FabricQueueUnicastStatistics
	}
	return nil
}

type Qos_GlobalQuery_FabricQueueMulticastStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FabricQueueMulticastStatistics []*Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics `protobuf:"bytes,1,rep,name=fabric_queue_multicast_statistics,json=fabric-queue-multicast-statistics,proto3" json:"fabric_queue_multicast_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss) Reset() {
	*x = Qos_GlobalQuery_FabricQueueMulticastStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_FabricQueueMulticastStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_FabricQueueMulticastStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_FabricQueueMulticastStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 36}
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss) GetFabricQueueMulticastStatistics() []*Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics {
	if x != nil {
		return x.FabricQueueMulticastStatistics
	}
	return nil
}

type Qos_GlobalQuery_SlotPortQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotPortQueueStatistics []*Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics `protobuf:"bytes,1,rep,name=slot_port_queue_statistics,json=slot-port-queue-statistics,proto3" json:"slot_port_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_SlotPortQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SlotPortQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SlotPortQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SlotPortQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 37}
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss) GetSlotPortQueueStatistics() []*Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics {
	if x != nil {
		return x.SlotPortQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_SlotChannelProfileStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotChannelProfileStatistics []*Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics `protobuf:"bytes,1,rep,name=slot_channel_profile_statistics,json=slot-channel-profile-statistics,proto3" json:"slot_channel_profile_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss) Reset() {
	*x = Qos_GlobalQuery_SlotChannelProfileStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SlotChannelProfileStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SlotChannelProfileStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SlotChannelProfileStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 38}
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss) GetSlotChannelProfileStatistics() []*Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics {
	if x != nil {
		return x.SlotChannelProfileStatistics
	}
	return nil
}

type Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName    string                                                                      `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass     Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	DroppedPackets   uint64                                                                      `protobuf:"varint,3,opt,name=dropped_packets,json=dropped-packets,proto3" json:"dropped_packets,omitempty"`
	DroppedBytes     uint64                                                                      `protobuf:"varint,4,opt,name=dropped_bytes,json=dropped-bytes,proto3" json:"dropped_bytes,omitempty"`
	PassedPps        uint64                                                                      `protobuf:"varint,5,opt,name=passed_pps,json=passed-pps,proto3" json:"passed_pps,omitempty"`
	PassedBps        uint64                                                                      `protobuf:"varint,6,opt,name=passed_bps,json=passed-bps,proto3" json:"passed_bps,omitempty"`
	TotalPackets     uint64                                                                      `protobuf:"varint,7,opt,name=total_packets,json=total-packets,proto3" json:"total_packets,omitempty"`
	TotalBytes       uint64                                                                      `protobuf:"varint,8,opt,name=total_bytes,json=total-bytes,proto3" json:"total_bytes,omitempty"`
	TotalBuffer      uint32                                                                      `protobuf:"varint,9,opt,name=total_buffer,json=total-buffer,proto3" json:"total_buffer,omitempty"`
	CurrentBuffer    uint32                                                                      `protobuf:"varint,10,opt,name=current_buffer,json=current-buffer,proto3" json:"current_buffer,omitempty"`
	BufferPercent    uint32                                                                      `protobuf:"varint,11,opt,name=buffer_percent,json=buffer-percent,proto3" json:"buffer_percent,omitempty"`
	MaxBufferPercent uint32                                                                      `protobuf:"varint,12,opt,name=max_buffer_percent,json=max-buffer-percent,proto3" json:"max_buffer_percent,omitempty"`
	BufferTime       uint64                                                                      `protobuf:"varint,13,opt,name=buffer_time,json=buffer-time,proto3" json:"buffer_time,omitempty"`
	CleanTime        uint64                                                                      `protobuf:"varint,14,opt,name=clean_time,json=clean-time,proto3" json:"clean_time,omitempty"`
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetServiceClass() Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetDroppedPackets() uint64 {
	if x != nil {
		return x.DroppedPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetDroppedBytes() uint64 {
	if x != nil {
		return x.DroppedBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetPassedPps() uint64 {
	if x != nil {
		return x.PassedPps
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetPassedBps() uint64 {
	if x != nil {
		return x.PassedBps
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetTotalPackets() uint64 {
	if x != nil {
		return x.TotalPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetTotalBuffer() uint32 {
	if x != nil {
		return x.TotalBuffer
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetCurrentBuffer() uint32 {
	if x != nil {
		return x.CurrentBuffer
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetBufferPercent() uint32 {
	if x != nil {
		return x.BufferPercent
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetMaxBufferPercent() uint32 {
	if x != nil {
		return x.MaxBufferPercent
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetBufferTime() uint64 {
	if x != nil {
		return x.BufferTime
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics) GetCleanTime() uint64 {
	if x != nil {
		return x.CleanTime
	}
	return 0
}

type Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                              `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass   Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	DroppedPackets uint64                                                              `protobuf:"varint,3,opt,name=dropped_packets,json=dropped-packets,proto3" json:"dropped_packets,omitempty"`
	DroppedBytes   uint64                                                              `protobuf:"varint,4,opt,name=dropped_bytes,json=dropped-bytes,proto3" json:"dropped_bytes,omitempty"`
	PassedPps      uint64                                                              `protobuf:"varint,5,opt,name=passed_pps,json=passed-pps,proto3" json:"passed_pps,omitempty"`
	PassedBps      uint64                                                              `protobuf:"varint,6,opt,name=passed_bps,json=passed-bps,proto3" json:"passed_bps,omitempty"`
	TotalPackets   uint64                                                              `protobuf:"varint,7,opt,name=total_packets,json=total-packets,proto3" json:"total_packets,omitempty"`
	TotalBytes     uint64                                                              `protobuf:"varint,8,opt,name=total_bytes,json=total-bytes,proto3" json:"total_bytes,omitempty"`
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 1, 0}
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetServiceClass() Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetDroppedPackets() uint64 {
	if x != nil {
		return x.DroppedPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetDroppedBytes() uint64 {
	if x != nil {
		return x.DroppedBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetPassedPps() uint64 {
	if x != nil {
		return x.PassedPps
	}
	return 0
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetPassedBps() uint64 {
	if x != nil {
		return x.PassedBps
	}
	return 0
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetTotalPackets() uint64 {
	if x != nil {
		return x.TotalPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

type Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName    string                                                                      `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass     Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	DroppedPackets   uint64                                                                      `protobuf:"varint,3,opt,name=dropped_packets,json=dropped-packets,proto3" json:"dropped_packets,omitempty"`
	DroppedBytes     uint64                                                                      `protobuf:"varint,4,opt,name=dropped_bytes,json=dropped-bytes,proto3" json:"dropped_bytes,omitempty"`
	PassedPps        uint64                                                                      `protobuf:"varint,5,opt,name=passed_pps,json=passed-pps,proto3" json:"passed_pps,omitempty"`
	PassedBps        uint64                                                                      `protobuf:"varint,6,opt,name=passed_bps,json=passed-bps,proto3" json:"passed_bps,omitempty"`
	TotalPackets     uint64                                                                      `protobuf:"varint,7,opt,name=total_packets,json=total-packets,proto3" json:"total_packets,omitempty"`
	TotalBytes       uint64                                                                      `protobuf:"varint,8,opt,name=total_bytes,json=total-bytes,proto3" json:"total_bytes,omitempty"`
	TotalBuffer      uint32                                                                      `protobuf:"varint,9,opt,name=total_buffer,json=total-buffer,proto3" json:"total_buffer,omitempty"`
	CurrentBuffer    uint32                                                                      `protobuf:"varint,10,opt,name=current_buffer,json=current-buffer,proto3" json:"current_buffer,omitempty"`
	BufferPercent    uint32                                                                      `protobuf:"varint,11,opt,name=buffer_percent,json=buffer-percent,proto3" json:"buffer_percent,omitempty"`
	MaxBufferPercent uint32                                                                      `protobuf:"varint,12,opt,name=max_buffer_percent,json=max-buffer-percent,proto3" json:"max_buffer_percent,omitempty"`
	BufferTime       uint64                                                                      `protobuf:"varint,13,opt,name=buffer_time,json=buffer-time,proto3" json:"buffer_time,omitempty"`
	CleanTime        uint64                                                                      `protobuf:"varint,14,opt,name=clean_time,json=clean-time,proto3" json:"clean_time,omitempty"`
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 2, 0}
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetServiceClass() Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetDroppedPackets() uint64 {
	if x != nil {
		return x.DroppedPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetDroppedBytes() uint64 {
	if x != nil {
		return x.DroppedBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetPassedPps() uint64 {
	if x != nil {
		return x.PassedPps
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetPassedBps() uint64 {
	if x != nil {
		return x.PassedBps
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetTotalPackets() uint64 {
	if x != nil {
		return x.TotalPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetTotalBuffer() uint32 {
	if x != nil {
		return x.TotalBuffer
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetCurrentBuffer() uint32 {
	if x != nil {
		return x.CurrentBuffer
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetBufferPercent() uint32 {
	if x != nil {
		return x.BufferPercent
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetMaxBufferPercent() uint32 {
	if x != nil {
		return x.MaxBufferPercent
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetBufferTime() uint64 {
	if x != nil {
		return x.BufferTime
	}
	return 0
}

func (x *Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics) GetCleanTime() uint64 {
	if x != nil {
		return x.CleanTime
	}
	return 0
}

type Qos_GlobalQuery_UserInformations_UserInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32                                                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Direction            Qos_GlobalQuery_UserInformations_UserInformation_Direction             `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserInformations_UserInformation_Direction" json:"direction,omitempty"`
	UserQueueStatisticss *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss `protobuf:"bytes,3,opt,name=user_queue_statisticss,json=user-queue-statisticss,proto3" json:"user_queue_statisticss,omitempty"`
	CarStatisticss       *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss       `protobuf:"bytes,4,opt,name=car_statisticss,json=car-statisticss,proto3" json:"car_statisticss,omitempty"`
	FlowQueueInfos       *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos       `protobuf:"bytes,5,opt,name=flow_queue_infos,json=flow-queue-infos,proto3" json:"flow_queue_infos,omitempty"`
	CirInfo              *Qos_GlobalQuery_UserInformations_UserInformation_CirInfo              `protobuf:"bytes,6,opt,name=cir_info,json=cir-info,proto3" json:"cir_info,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) GetDirection() Qos_GlobalQuery_UserInformations_UserInformation_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_UserInformations_UserInformation_Direction_INBOUND
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) GetUserQueueStatisticss() *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss {
	if x != nil {
		return x.UserQueueStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) GetCarStatisticss() *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss {
	if x != nil {
		return x.CarStatisticss
	}
	return nil
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) GetFlowQueueInfos() *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos {
	if x != nil {
		return x.FlowQueueInfos
	}
	return nil
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation) GetCirInfo() *Qos_GlobalQuery_UserInformations_UserInformation_CirInfo {
	if x != nil {
		return x.CirInfo
	}
	return nil
}

type Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueueStatistics []*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics `protobuf:"bytes,1,rep,name=user_queue_statistics,json=user-queue-statistics,proto3" json:"user_queue_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 0}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss) GetUserQueueStatistics() []*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics {
	if x != nil {
		return x.UserQueueStatistics
	}
	return nil
}

type Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarStatistics []*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics `protobuf:"bytes,1,rep,name=car_statistics,json=car-statistics,proto3" json:"car_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 1}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss) GetCarStatistics() []*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics {
	if x != nil {
		return x.CarStatistics
	}
	return nil
}

type Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowQueueInfo []*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo `protobuf:"bytes,1,rep,name=flow_queue_info,json=flow-queue-info,proto3" json:"flow_queue_info,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 2}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos) GetFlowQueueInfo() []*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo {
	if x != nil {
		return x.FlowQueueInfo
	}
	return nil
}

type Qos_GlobalQuery_UserInformations_UserInformation_CirInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cir uint32 `protobuf:"varint,1,opt,name=cir,proto3" json:"cir,omitempty"`
	Pir uint32 `protobuf:"varint,2,opt,name=pir,proto3" json:"pir,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CirInfo) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation_CirInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CirInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation_CirInfo) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CirInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_CirInfo.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation_CirInfo) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 3}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CirInfo) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CirInfo) GetPir() uint32 {
	if x != nil {
		return x.Pir
	}
	return 0
}

type Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass       Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPacketRate     uint64                                                                                                 `protobuf:"varint,2,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate       uint64                                                                                                 `protobuf:"varint,3,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	PassPackets        uint64                                                                                                 `protobuf:"varint,4,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes          uint64                                                                                                 `protobuf:"varint,5,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DiscardPacketRate  uint64                                                                                                 `protobuf:"varint,6,opt,name=discard_packet_rate,json=discard-packet-rate,proto3" json:"discard_packet_rate,omitempty"`
	DiscardByteRate    uint64                                                                                                 `protobuf:"varint,7,opt,name=discard_byte_rate,json=discard-byte-rate,proto3" json:"discard_byte_rate,omitempty"`
	DiscardPackets     uint64                                                                                                 `protobuf:"varint,8,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	DiscardBytes       uint64                                                                                                 `protobuf:"varint,9,opt,name=discard_bytes,json=discard-bytes,proto3" json:"discard_bytes,omitempty"`
	PassPeakPacketTime string                                                                                                 `protobuf:"bytes,10,opt,name=pass_peak_packet_time,json=pass-peak-packet-time,proto3" json:"pass_peak_packet_time,omitempty"`
	PassPeakPacketRate uint64                                                                                                 `protobuf:"varint,11,opt,name=pass_peak_packet_rate,json=pass-peak-packet-rate,proto3" json:"pass_peak_packet_rate,omitempty"`
	PassPeakByteTime   string                                                                                                 `protobuf:"bytes,12,opt,name=pass_peak_byte_time,json=pass-peak-byte-time,proto3" json:"pass_peak_byte_time,omitempty"`
	PassPeakByteRate   uint64                                                                                                 `protobuf:"varint,13,opt,name=pass_peak_byte_rate,json=pass-peak-byte-rate,proto3" json:"pass_peak_byte_rate,omitempty"`
	DropPeakPacketTime string                                                                                                 `protobuf:"bytes,14,opt,name=drop_peak_packet_time,json=drop-peak-packet-time,proto3" json:"drop_peak_packet_time,omitempty"`
	DropPeakPacketRate uint64                                                                                                 `protobuf:"varint,15,opt,name=drop_peak_packet_rate,json=drop-peak-packet-rate,proto3" json:"drop_peak_packet_rate,omitempty"`
	DropPeakByteTime   string                                                                                                 `protobuf:"bytes,16,opt,name=drop_peak_byte_time,json=drop-peak-byte-time,proto3" json:"drop_peak_byte_time,omitempty"`
	DropPeakByteRate   uint64                                                                                                 `protobuf:"varint,17,opt,name=drop_peak_byte_rate,json=drop-peak-byte-rate,proto3" json:"drop_peak_byte_rate,omitempty"`
	TailPeakPacketTime string                                                                                                 `protobuf:"bytes,18,opt,name=tail_peak_packet_time,json=tail-peak-packet-time,proto3" json:"tail_peak_packet_time,omitempty"`
	TailPeakPacketRate uint64                                                                                                 `protobuf:"varint,19,opt,name=tail_peak_packet_rate,json=tail-peak-packet-rate,proto3" json:"tail_peak_packet_rate,omitempty"`
	TailPeakByteTime   string                                                                                                 `protobuf:"bytes,20,opt,name=tail_peak_byte_time,json=tail-peak-byte-time,proto3" json:"tail_peak_byte_time,omitempty"`
	TailPeakByteRate   uint64                                                                                                 `protobuf:"varint,21,opt,name=tail_peak_byte_rate,json=tail-peak-byte-rate,proto3" json:"tail_peak_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 0, 0}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetServiceClass() Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDiscardPacketRate() uint64 {
	if x != nil {
		return x.DiscardPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDiscardByteRate() uint64 {
	if x != nil {
		return x.DiscardByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDiscardPackets() uint64 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDiscardBytes() uint64 {
	if x != nil {
		return x.DiscardBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassPeakPacketTime() string {
	if x != nil {
		return x.PassPeakPacketTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassPeakPacketRate() uint64 {
	if x != nil {
		return x.PassPeakPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassPeakByteTime() string {
	if x != nil {
		return x.PassPeakByteTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetPassPeakByteRate() uint64 {
	if x != nil {
		return x.PassPeakByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDropPeakPacketTime() string {
	if x != nil {
		return x.DropPeakPacketTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDropPeakPacketRate() uint64 {
	if x != nil {
		return x.DropPeakPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDropPeakByteTime() string {
	if x != nil {
		return x.DropPeakByteTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetDropPeakByteRate() uint64 {
	if x != nil {
		return x.DropPeakByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetTailPeakPacketTime() string {
	if x != nil {
		return x.TailPeakPacketTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetTailPeakPacketRate() uint64 {
	if x != nil {
		return x.TailPeakPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetTailPeakByteTime() string {
	if x != nil {
		return x.TailPeakByteTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics) GetTailPeakByteRate() uint64 {
	if x != nil {
		return x.TailPeakByteRate
	}
	return 0
}

type Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType         Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType `protobuf:"varint,1,opt,name=resource_type,json=resource-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType" json:"resource_type,omitempty"`
	PassPacketRate       uint64                                                                                     `protobuf:"varint,2,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate         uint64                                                                                     `protobuf:"varint,3,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	PassPackets          uint64                                                                                     `protobuf:"varint,4,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes            uint64                                                                                     `protobuf:"varint,5,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DiscardPacketRate    uint64                                                                                     `protobuf:"varint,6,opt,name=discard_packet_rate,json=discard-packet-rate,proto3" json:"discard_packet_rate,omitempty"`
	DiscardByteRate      uint64                                                                                     `protobuf:"varint,7,opt,name=discard_byte_rate,json=discard-byte-rate,proto3" json:"discard_byte_rate,omitempty"`
	DiscardPackets       uint64                                                                                     `protobuf:"varint,8,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	DiscardBytes         uint64                                                                                     `protobuf:"varint,9,opt,name=discard_bytes,json=discard-bytes,proto3" json:"discard_bytes,omitempty"`
	PassPeakPacketTime   string                                                                                     `protobuf:"bytes,10,opt,name=pass_peak_packet_time,json=pass-peak-packet-time,proto3" json:"pass_peak_packet_time,omitempty"`
	PassPeakPacketRate   uint64                                                                                     `protobuf:"varint,11,opt,name=pass_peak_packet_rate,json=pass-peak-packet-rate,proto3" json:"pass_peak_packet_rate,omitempty"`
	PassPeakByteTime     string                                                                                     `protobuf:"bytes,12,opt,name=pass_peak_byte_time,json=pass-peak-byte-time,proto3" json:"pass_peak_byte_time,omitempty"`
	PassPeakByteRate     uint64                                                                                     `protobuf:"varint,13,opt,name=pass_peak_byte_rate,json=pass-peak-byte-rate,proto3" json:"pass_peak_byte_rate,omitempty"`
	DropPeakPacketTime   string                                                                                     `protobuf:"bytes,14,opt,name=drop_peak_packet_time,json=drop-peak-packet-time,proto3" json:"drop_peak_packet_time,omitempty"`
	DropPeakPacketRate   uint64                                                                                     `protobuf:"varint,15,opt,name=drop_peak_packet_rate,json=drop-peak-packet-rate,proto3" json:"drop_peak_packet_rate,omitempty"`
	DropPeakByteTime     string                                                                                     `protobuf:"bytes,16,opt,name=drop_peak_byte_time,json=drop-peak-byte-time,proto3" json:"drop_peak_byte_time,omitempty"`
	DropPeakByteRate     uint64                                                                                     `protobuf:"varint,17,opt,name=drop_peak_byte_rate,json=drop-peak-byte-rate,proto3" json:"drop_peak_byte_rate,omitempty"`
	V6PassPeakPacketTime string                                                                                     `protobuf:"bytes,18,opt,name=v6_pass_peak_packet_time,json=v6-pass-peak-packet-time,proto3" json:"v6_pass_peak_packet_time,omitempty"`
	V6PassPeakPacketRate uint64                                                                                     `protobuf:"varint,19,opt,name=v6_pass_peak_packet_rate,json=v6-pass-peak-packet-rate,proto3" json:"v6_pass_peak_packet_rate,omitempty"`
	V6PassPeakByteTime   string                                                                                     `protobuf:"bytes,20,opt,name=v6_pass_peak_byte_time,json=v6-pass-peak-byte-time,proto3" json:"v6_pass_peak_byte_time,omitempty"`
	V6PassPeakByteRate   uint64                                                                                     `protobuf:"varint,21,opt,name=v6_pass_peak_byte_rate,json=v6-pass-peak-byte-rate,proto3" json:"v6_pass_peak_byte_rate,omitempty"`
	V6TailPeakPacketTime string                                                                                     `protobuf:"bytes,22,opt,name=v6_tail_peak_packet_time,json=v6-tail-peak-packet-time,proto3" json:"v6_tail_peak_packet_time,omitempty"`
	V6TailPeakPacketRate uint64                                                                                     `protobuf:"varint,23,opt,name=v6_tail_peak_packet_rate,json=v6-tail-peak-packet-rate,proto3" json:"v6_tail_peak_packet_rate,omitempty"`
	V6TailPeakByteTime   string                                                                                     `protobuf:"bytes,24,opt,name=v6_tail_peak_byte_time,json=v6-tail-peak-byte-time,proto3" json:"v6_tail_peak_byte_time,omitempty"`
	V6TailPeakByteRate   uint64                                                                                     `protobuf:"varint,25,opt,name=v6_tail_peak_byte_rate,json=v6-tail-peak-byte-rate,proto3" json:"v6_tail_peak_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 1, 0}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetResourceType() Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType_NULL
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDiscardPacketRate() uint64 {
	if x != nil {
		return x.DiscardPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDiscardByteRate() uint64 {
	if x != nil {
		return x.DiscardByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDiscardPackets() uint64 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDiscardBytes() uint64 {
	if x != nil {
		return x.DiscardBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassPeakPacketTime() string {
	if x != nil {
		return x.PassPeakPacketTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassPeakPacketRate() uint64 {
	if x != nil {
		return x.PassPeakPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassPeakByteTime() string {
	if x != nil {
		return x.PassPeakByteTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetPassPeakByteRate() uint64 {
	if x != nil {
		return x.PassPeakByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDropPeakPacketTime() string {
	if x != nil {
		return x.DropPeakPacketTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDropPeakPacketRate() uint64 {
	if x != nil {
		return x.DropPeakPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDropPeakByteTime() string {
	if x != nil {
		return x.DropPeakByteTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetDropPeakByteRate() uint64 {
	if x != nil {
		return x.DropPeakByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6PassPeakPacketTime() string {
	if x != nil {
		return x.V6PassPeakPacketTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6PassPeakPacketRate() uint64 {
	if x != nil {
		return x.V6PassPeakPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6PassPeakByteTime() string {
	if x != nil {
		return x.V6PassPeakByteTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6PassPeakByteRate() uint64 {
	if x != nil {
		return x.V6PassPeakByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6TailPeakPacketTime() string {
	if x != nil {
		return x.V6TailPeakPacketTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6TailPeakPacketRate() uint64 {
	if x != nil {
		return x.V6TailPeakPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6TailPeakByteTime() string {
	if x != nil {
		return x.V6TailPeakByteTime
	}
	return ""
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics) GetV6TailPeakByteRate() uint64 {
	if x != nil {
		return x.V6TailPeakByteRate
	}
	return 0
}

type Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceClass Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass `protobuf:"varint,1,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass" json:"service_class,omitempty"`
	ScheduleType Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType `protobuf:"varint,2,opt,name=schedule_type,json=schedule-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType" json:"schedule_type,omitempty"`
	Weight       uint32                                                                                     `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Shaping      uint32                                                                                     `protobuf:"varint,4,opt,name=shaping,proto3" json:"shaping,omitempty"`
	Priority     uint32                                                                                     `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) Reset() {
	*x = Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 3, 0, 2, 0}
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) GetServiceClass() Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass_BE
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) GetScheduleType() Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType {
	if x != nil {
		return x.ScheduleType
	}
	return Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType_PQ
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) GetShaping() uint32 {
	if x != nil {
		return x.Shaping
	}
	return 0
}

func (x *Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName           string                                                                                                      `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PeVlanId                uint32                                                                                                      `protobuf:"varint,2,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId                  uint32                                                                                                      `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Direction               Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction                `protobuf:"varint,4,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction" json:"direction,omitempty"`
	SlotId                  string                                                                                                      `protobuf:"bytes,5,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	TrafficPolicyName       string                                                                                                      `protobuf:"bytes,6,opt,name=traffic_policy_name,json=traffic-policy-name,proto3" json:"traffic_policy_name,omitempty"`
	ApplyTime               string                                                                                                      `protobuf:"bytes,7,opt,name=apply_time,json=apply-time,proto3" json:"apply_time,omitempty"`
	SwitchStatus            Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus             `protobuf:"varint,8,opt,name=switch_status,json=switch-status,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus" json:"switch_status,omitempty"`
	SwitchTime              string                                                                                                      `protobuf:"bytes,9,opt,name=switch_time,json=switch-time,proto3" json:"switch_time,omitempty"`
	ClearTime               string                                                                                                      `protobuf:"bytes,10,opt,name=clear_time,json=clear-time,proto3" json:"clear_time,omitempty"`
	ClearFlag               bool                                                                                                        `protobuf:"varint,11,opt,name=clear_flag,json=clear-flag,proto3" json:"clear_flag,omitempty"`
	MatchPackets            uint64                                                                                                      `protobuf:"varint,12,opt,name=match_packets,json=match-packets,proto3" json:"match_packets,omitempty"`
	MatchBytes              uint64                                                                                                      `protobuf:"varint,13,opt,name=match_bytes,json=match-bytes,proto3" json:"match_bytes,omitempty"`
	MatchPacketRate         uint64                                                                                                      `protobuf:"varint,14,opt,name=match_packet_rate,json=match-packet-rate,proto3" json:"match_packet_rate,omitempty"`
	MatchByteRate           uint64                                                                                                      `protobuf:"varint,15,opt,name=match_byte_rate,json=match-byte-rate,proto3" json:"match_byte_rate,omitempty"`
	MatchPassPackets        uint64                                                                                                      `protobuf:"varint,16,opt,name=match_pass_packets,json=match-pass-packets,proto3" json:"match_pass_packets,omitempty"`
	MatchPassBytes          uint64                                                                                                      `protobuf:"varint,17,opt,name=match_pass_bytes,json=match-pass-bytes,proto3" json:"match_pass_bytes,omitempty"`
	MatchPassPacketRate     uint64                                                                                                      `protobuf:"varint,18,opt,name=match_pass_packet_rate,json=match-pass-packet-rate,proto3" json:"match_pass_packet_rate,omitempty"`
	MatchPassByteRate       uint64                                                                                                      `protobuf:"varint,19,opt,name=match_pass_byte_rate,json=match-pass-byte-rate,proto3" json:"match_pass_byte_rate,omitempty"`
	MatchDropPackets        uint64                                                                                                      `protobuf:"varint,20,opt,name=match_drop_packets,json=match-drop-packets,proto3" json:"match_drop_packets,omitempty"`
	MatchDropBytes          uint64                                                                                                      `protobuf:"varint,21,opt,name=match_drop_bytes,json=match-drop-bytes,proto3" json:"match_drop_bytes,omitempty"`
	MatchDropPacketRate     uint64                                                                                                      `protobuf:"varint,22,opt,name=match_drop_packet_rate,json=match-drop-packet-rate,proto3" json:"match_drop_packet_rate,omitempty"`
	MatchDropByteRate       uint64                                                                                                      `protobuf:"varint,23,opt,name=match_drop_byte_rate,json=match-drop-byte-rate,proto3" json:"match_drop_byte_rate,omitempty"`
	MissPackets             uint64                                                                                                      `protobuf:"varint,24,opt,name=miss_packets,json=miss-packets,proto3" json:"miss_packets,omitempty"`
	MissBytes               uint64                                                                                                      `protobuf:"varint,25,opt,name=miss_bytes,json=miss-bytes,proto3" json:"miss_bytes,omitempty"`
	MissPacketRate          uint64                                                                                                      `protobuf:"varint,26,opt,name=miss_packet_rate,json=miss-packet-rate,proto3" json:"miss_packet_rate,omitempty"`
	MissByteRate            uint64                                                                                                      `protobuf:"varint,27,opt,name=miss_byte_rate,json=miss-byte-rate,proto3" json:"miss_byte_rate,omitempty"`
	UrpfPackets             uint64                                                                                                      `protobuf:"varint,28,opt,name=urpf_packets,json=urpf-packets,proto3" json:"urpf_packets,omitempty"`
	UrpfBytes               uint64                                                                                                      `protobuf:"varint,29,opt,name=urpf_bytes,json=urpf-bytes,proto3" json:"urpf_bytes,omitempty"`
	UrpfPacketRate          uint64                                                                                                      `protobuf:"varint,30,opt,name=urpf_packet_rate,json=urpf-packet-rate,proto3" json:"urpf_packet_rate,omitempty"`
	UrpfByteRate            uint64                                                                                                      `protobuf:"varint,31,opt,name=urpf_byte_rate,json=urpf-byte-rate,proto3" json:"urpf_byte_rate,omitempty"`
	CarPackets              uint64                                                                                                      `protobuf:"varint,32,opt,name=car_packets,json=car-packets,proto3" json:"car_packets,omitempty"`
	CarBytes                uint64                                                                                                      `protobuf:"varint,33,opt,name=car_bytes,json=car-bytes,proto3" json:"car_bytes,omitempty"`
	CarPacketRate           uint64                                                                                                      `protobuf:"varint,34,opt,name=car_packet_rate,json=car-packet-rate,proto3" json:"car_packet_rate,omitempty"`
	CarByteRate             uint64                                                                                                      `protobuf:"varint,35,opt,name=car_byte_rate,json=car-byte-rate,proto3" json:"car_byte_rate,omitempty"`
	FilterPackets           uint64                                                                                                      `protobuf:"varint,36,opt,name=filter_packets,json=filter-packets,proto3" json:"filter_packets,omitempty"`
	FilterBytes             uint64                                                                                                      `protobuf:"varint,37,opt,name=filter_bytes,json=filter-bytes,proto3" json:"filter_bytes,omitempty"`
	FilterPacketRate        uint64                                                                                                      `protobuf:"varint,38,opt,name=filter_packet_rate,json=filter-packet-rate,proto3" json:"filter_packet_rate,omitempty"`
	FilterByteRate          uint64                                                                                                      `protobuf:"varint,39,opt,name=filter_byte_rate,json=filter-byte-rate,proto3" json:"filter_byte_rate,omitempty"`
	RuleBasedStaticss       *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss       `protobuf:"bytes,40,opt,name=rule_based_staticss,json=rule-based-staticss,proto3" json:"rule_based_staticss,omitempty"`
	ClassifierBasedStaticss *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss `protobuf:"bytes,41,opt,name=classifier_based_staticss,json=classifier-based-staticss,proto3" json:"classifier_based_staticss,omitempty"`
	ClassifierStatisticss   *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss   `protobuf:"bytes,42,opt,name=classifier_statisticss,json=classifier-statisticss,proto3" json:"classifier_statisticss,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetDirection() Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetTrafficPolicyName() string {
	if x != nil {
		return x.TrafficPolicyName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetApplyTime() string {
	if x != nil {
		return x.ApplyTime
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetSwitchStatus() Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus {
	if x != nil {
		return x.SwitchStatus
	}
	return Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus_DISABLE
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetSwitchTime() string {
	if x != nil {
		return x.SwitchTime
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetClearTime() string {
	if x != nil {
		return x.ClearTime
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetClearFlag() bool {
	if x != nil {
		return x.ClearFlag
	}
	return false
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchPackets() uint64 {
	if x != nil {
		return x.MatchPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchBytes() uint64 {
	if x != nil {
		return x.MatchBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchPacketRate() uint64 {
	if x != nil {
		return x.MatchPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchByteRate() uint64 {
	if x != nil {
		return x.MatchByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchPassPackets() uint64 {
	if x != nil {
		return x.MatchPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchPassBytes() uint64 {
	if x != nil {
		return x.MatchPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchPassPacketRate() uint64 {
	if x != nil {
		return x.MatchPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchPassByteRate() uint64 {
	if x != nil {
		return x.MatchPassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchDropPackets() uint64 {
	if x != nil {
		return x.MatchDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchDropBytes() uint64 {
	if x != nil {
		return x.MatchDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchDropPacketRate() uint64 {
	if x != nil {
		return x.MatchDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMatchDropByteRate() uint64 {
	if x != nil {
		return x.MatchDropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMissPackets() uint64 {
	if x != nil {
		return x.MissPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMissBytes() uint64 {
	if x != nil {
		return x.MissBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMissPacketRate() uint64 {
	if x != nil {
		return x.MissPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetMissByteRate() uint64 {
	if x != nil {
		return x.MissByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetUrpfPackets() uint64 {
	if x != nil {
		return x.UrpfPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetUrpfBytes() uint64 {
	if x != nil {
		return x.UrpfBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetUrpfPacketRate() uint64 {
	if x != nil {
		return x.UrpfPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetUrpfByteRate() uint64 {
	if x != nil {
		return x.UrpfByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetCarPackets() uint64 {
	if x != nil {
		return x.CarPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetCarBytes() uint64 {
	if x != nil {
		return x.CarBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetCarPacketRate() uint64 {
	if x != nil {
		return x.CarPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetCarByteRate() uint64 {
	if x != nil {
		return x.CarByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetFilterPackets() uint64 {
	if x != nil {
		return x.FilterPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetFilterBytes() uint64 {
	if x != nil {
		return x.FilterBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetFilterPacketRate() uint64 {
	if x != nil {
		return x.FilterPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetFilterByteRate() uint64 {
	if x != nil {
		return x.FilterByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetRuleBasedStaticss() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss {
	if x != nil {
		return x.RuleBasedStaticss
	}
	return nil
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetClassifierBasedStaticss() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss {
	if x != nil {
		return x.ClassifierBasedStaticss
	}
	return nil
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics) GetClassifierStatisticss() *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss {
	if x != nil {
		return x.ClassifierStatisticss
	}
	return nil
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleBasedStatics []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics `protobuf:"bytes,1,rep,name=rule_based_statics,json=rule-based-statics,proto3" json:"rule_based_statics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 0}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss) GetRuleBasedStatics() []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics {
	if x != nil {
		return x.RuleBasedStatics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierBasedStatics []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics `protobuf:"bytes,1,rep,name=classifier_based_statics,json=classifier-based-statics,proto3" json:"classifier_based_statics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 1}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss) GetClassifierBasedStatics() []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics {
	if x != nil {
		return x.ClassifierBasedStatics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierStatistics []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics `protobuf:"bytes,1,rep,name=classifier_statistics,json=classifier-statistics,proto3" json:"classifier_statistics,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 2}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss) GetClassifierStatistics() []*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics {
	if x != nil {
		return x.ClassifierStatistics
	}
	return nil
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierName    string                                                                                                                               `protobuf:"bytes,1,opt,name=classifier_name,json=classifier-name,proto3" json:"classifier_name,omitempty"`
	TrafficPolicyName string                                                                                                                               `protobuf:"bytes,2,opt,name=traffic_policy_name,json=traffic-policy-name,proto3" json:"traffic_policy_name,omitempty"`
	ServiceType       Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType    `protobuf:"varint,3,opt,name=service_type,json=service-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType" json:"service_type,omitempty"`
	IfmatchId         uint32                                                                                                                               `protobuf:"varint,4,opt,name=ifmatch_id,json=ifmatch-id,proto3" json:"ifmatch_id,omitempty"`
	AclName           string                                                                                                                               `protobuf:"bytes,5,opt,name=acl_name,json=acl-name,proto3" json:"acl_name,omitempty"`
	ProtocolFamily    Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily `protobuf:"varint,6,opt,name=protocol_family,json=protocol-family,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily" json:"protocol_family,omitempty"`
	RuleId            uint32                                                                                                                               `protobuf:"varint,7,opt,name=rule_id,json=rule-id,proto3" json:"rule_id,omitempty"`
	MatchPassPackets  uint64                                                                                                                               `protobuf:"varint,8,opt,name=match_pass_packets,json=match-pass-packets,proto3" json:"match_pass_packets,omitempty"`
	MatchPassBytes    uint64                                                                                                                               `protobuf:"varint,9,opt,name=match_pass_bytes,json=match-pass-bytes,proto3" json:"match_pass_bytes,omitempty"`
	MatchDropPackets  uint64                                                                                                                               `protobuf:"varint,10,opt,name=match_drop_packets,json=match-drop-packets,proto3" json:"match_drop_packets,omitempty"`
	MatchDropBytes    uint64                                                                                                                               `protobuf:"varint,11,opt,name=match_drop_bytes,json=match-drop-bytes,proto3" json:"match_drop_bytes,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 0, 0}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetTrafficPolicyName() string {
	if x != nil {
		return x.TrafficPolicyName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetServiceType() Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType_NORMAL
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetIfmatchId() uint32 {
	if x != nil {
		return x.IfmatchId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetAclName() string {
	if x != nil {
		return x.AclName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetProtocolFamily() Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily {
	if x != nil {
		return x.ProtocolFamily
	}
	return Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_INVALID_ENUM_VALUE_ProtocolFamily
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetRuleId() uint32 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetMatchPassPackets() uint64 {
	if x != nil {
		return x.MatchPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetMatchPassBytes() uint64 {
	if x != nil {
		return x.MatchPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetMatchDropPackets() uint64 {
	if x != nil {
		return x.MatchDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics) GetMatchDropBytes() uint64 {
	if x != nil {
		return x.MatchDropBytes
	}
	return 0
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierName    string                                                                                                                                        `protobuf:"bytes,1,opt,name=classifier_name,json=classifier-name,proto3" json:"classifier_name,omitempty"`
	TrafficPolicyName string                                                                                                                                        `protobuf:"bytes,2,opt,name=traffic_policy_name,json=traffic-policy-name,proto3" json:"traffic_policy_name,omitempty"`
	ServiceType       Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType `protobuf:"varint,3,opt,name=service_type,json=service-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType" json:"service_type,omitempty"`
	ShareMode         Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode   `protobuf:"varint,4,opt,name=share_mode,json=share-mode,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode" json:"share_mode,omitempty"`
	MatchPassPackets  uint64                                                                                                                                        `protobuf:"varint,5,opt,name=match_pass_packets,json=match-pass-packets,proto3" json:"match_pass_packets,omitempty"`
	MatchPassBytes    uint64                                                                                                                                        `protobuf:"varint,6,opt,name=match_pass_bytes,json=match-pass-bytes,proto3" json:"match_pass_bytes,omitempty"`
	MatchDropPackets  uint64                                                                                                                                        `protobuf:"varint,7,opt,name=match_drop_packets,json=match-drop-packets,proto3" json:"match_drop_packets,omitempty"`
	MatchDropBytes    uint64                                                                                                                                        `protobuf:"varint,8,opt,name=match_drop_bytes,json=match-drop-bytes,proto3" json:"match_drop_bytes,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 1, 0}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetTrafficPolicyName() string {
	if x != nil {
		return x.TrafficPolicyName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetServiceType() Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType_NORMAL
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetShareMode() Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode {
	if x != nil {
		return x.ShareMode
	}
	return Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode_DISABLE
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetMatchPassPackets() uint64 {
	if x != nil {
		return x.MatchPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetMatchPassBytes() uint64 {
	if x != nil {
		return x.MatchPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetMatchDropPackets() uint64 {
	if x != nil {
		return x.MatchDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics) GetMatchDropBytes() uint64 {
	if x != nil {
		return x.MatchDropBytes
	}
	return 0
}

type Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierName              string `protobuf:"bytes,1,opt,name=classifier_name,json=classifier-name,proto3" json:"classifier_name,omitempty"`
	MatchPackets                uint64 `protobuf:"varint,2,opt,name=match_packets,json=match-packets,proto3" json:"match_packets,omitempty"`
	MatchBytes                  uint64 `protobuf:"varint,3,opt,name=match_bytes,json=match-bytes,proto3" json:"match_bytes,omitempty"`
	MatchPacketRate             uint64 `protobuf:"varint,4,opt,name=match_packet_rate,json=match-packet-rate,proto3" json:"match_packet_rate,omitempty"`
	MatchByteRate               uint64 `protobuf:"varint,5,opt,name=match_byte_rate,json=match-byte-rate,proto3" json:"match_byte_rate,omitempty"`
	MatchPassPackets            uint64 `protobuf:"varint,6,opt,name=match_pass_packets,json=match-pass-packets,proto3" json:"match_pass_packets,omitempty"`
	MatchPassBytes              uint64 `protobuf:"varint,7,opt,name=match_pass_bytes,json=match-pass-bytes,proto3" json:"match_pass_bytes,omitempty"`
	MatchPassPacketRate         uint64 `protobuf:"varint,8,opt,name=match_pass_packet_rate,json=match-pass-packet-rate,proto3" json:"match_pass_packet_rate,omitempty"`
	MatchPassByteRate           uint64 `protobuf:"varint,9,opt,name=match_pass_byte_rate,json=match-pass-byte-rate,proto3" json:"match_pass_byte_rate,omitempty"`
	MatchDropPackets            uint64 `protobuf:"varint,10,opt,name=match_drop_packets,json=match-drop-packets,proto3" json:"match_drop_packets,omitempty"`
	MatchDropBytes              uint64 `protobuf:"varint,11,opt,name=match_drop_bytes,json=match-drop-bytes,proto3" json:"match_drop_bytes,omitempty"`
	MatchDropPacketRate         uint64 `protobuf:"varint,12,opt,name=match_drop_packet_rate,json=match-drop-packet-rate,proto3" json:"match_drop_packet_rate,omitempty"`
	MatchDropByteRate           uint64 `protobuf:"varint,13,opt,name=match_drop_byte_rate,json=match-drop-byte-rate,proto3" json:"match_drop_byte_rate,omitempty"`
	UrpfDropPackets             uint64 `protobuf:"varint,14,opt,name=urpf_drop_packets,json=urpf-drop-packets,proto3" json:"urpf_drop_packets,omitempty"`
	UrpfDropBytes               uint64 `protobuf:"varint,15,opt,name=urpf_drop_bytes,json=urpf-drop-bytes,proto3" json:"urpf_drop_bytes,omitempty"`
	UrpfDropPacketRate          uint64 `protobuf:"varint,16,opt,name=urpf_drop_packet_rate,json=urpf-drop-packet-rate,proto3" json:"urpf_drop_packet_rate,omitempty"`
	UrpfDropByteRate            uint64 `protobuf:"varint,17,opt,name=urpf_drop_byte_rate,json=urpf-drop-byte-rate,proto3" json:"urpf_drop_byte_rate,omitempty"`
	CarPackets                  uint64 `protobuf:"varint,18,opt,name=car_packets,json=car-packets,proto3" json:"car_packets,omitempty"`
	CarBytes                    uint64 `protobuf:"varint,19,opt,name=car_bytes,json=car-bytes,proto3" json:"car_bytes,omitempty"`
	CarPacketRate               uint64 `protobuf:"varint,20,opt,name=car_packet_rate,json=car-packet-rate,proto3" json:"car_packet_rate,omitempty"`
	CarByteRate                 uint64 `protobuf:"varint,21,opt,name=car_byte_rate,json=car-byte-rate,proto3" json:"car_byte_rate,omitempty"`
	CarPassPackets              uint64 `protobuf:"varint,22,opt,name=car_pass_packets,json=car-pass-packets,proto3" json:"car_pass_packets,omitempty"`
	CarPassBytes                uint64 `protobuf:"varint,23,opt,name=car_pass_bytes,json=car-pass-bytes,proto3" json:"car_pass_bytes,omitempty"`
	CarPassPacketRate           uint64 `protobuf:"varint,24,opt,name=car_pass_packet_rate,json=car-pass-packet-rate,proto3" json:"car_pass_packet_rate,omitempty"`
	CarPassByteRate             uint64 `protobuf:"varint,25,opt,name=car_pass_byte_rate,json=car-pass-byte-rate,proto3" json:"car_pass_byte_rate,omitempty"`
	CarDropPackets              uint64 `protobuf:"varint,26,opt,name=car_drop_packets,json=car-drop-packets,proto3" json:"car_drop_packets,omitempty"`
	CarDropBytes                uint64 `protobuf:"varint,27,opt,name=car_drop_bytes,json=car-drop-bytes,proto3" json:"car_drop_bytes,omitempty"`
	CarDropPacketRate           uint64 `protobuf:"varint,28,opt,name=car_drop_packet_rate,json=car-drop-packet-rate,proto3" json:"car_drop_packet_rate,omitempty"`
	CarDropByteRate             uint64 `protobuf:"varint,29,opt,name=car_drop_byte_rate,json=car-drop-byte-rate,proto3" json:"car_drop_byte_rate,omitempty"`
	CarGreenPackets             uint64 `protobuf:"varint,30,opt,name=car_green_packets,json=car-green-packets,proto3" json:"car_green_packets,omitempty"`
	CarGreenBytes               uint64 `protobuf:"varint,31,opt,name=car_green_bytes,json=car-green-bytes,proto3" json:"car_green_bytes,omitempty"`
	CarGreenPacketRate          uint64 `protobuf:"varint,32,opt,name=car_green_packet_rate,json=car-green-packet-rate,proto3" json:"car_green_packet_rate,omitempty"`
	CarGreenByteRate            uint64 `protobuf:"varint,33,opt,name=car_green_byte_rate,json=car-green-byte-rate,proto3" json:"car_green_byte_rate,omitempty"`
	CarYellowPackets            uint64 `protobuf:"varint,34,opt,name=car_yellow_packets,json=car-yellow-packets,proto3" json:"car_yellow_packets,omitempty"`
	CarYellowBytes              uint64 `protobuf:"varint,35,opt,name=car_yellow_bytes,json=car-yellow-bytes,proto3" json:"car_yellow_bytes,omitempty"`
	CarYellowPacketRate         uint64 `protobuf:"varint,36,opt,name=car_yellow_packet_rate,json=car-yellow-packet-rate,proto3" json:"car_yellow_packet_rate,omitempty"`
	CarYellowByteRate           uint64 `protobuf:"varint,37,opt,name=car_yellow_byte_rate,json=car-yellow-byte-rate,proto3" json:"car_yellow_byte_rate,omitempty"`
	CarRedPackets               uint64 `protobuf:"varint,38,opt,name=car_red_packets,json=car-red-packets,proto3" json:"car_red_packets,omitempty"`
	CarRedBytes                 uint64 `protobuf:"varint,39,opt,name=car_red_bytes,json=car-red-bytes,proto3" json:"car_red_bytes,omitempty"`
	CarRedPacketRate            uint64 `protobuf:"varint,40,opt,name=car_red_packet_rate,json=car-red-packet-rate,proto3" json:"car_red_packet_rate,omitempty"`
	CarRedByteRate              uint64 `protobuf:"varint,41,opt,name=car_red_byte_rate,json=car-red-byte-rate,proto3" json:"car_red_byte_rate,omitempty"`
	FilterPackets               uint64 `protobuf:"varint,42,opt,name=filter_packets,json=filter-packets,proto3" json:"filter_packets,omitempty"`
	FilterBytes                 uint64 `protobuf:"varint,43,opt,name=filter_bytes,json=filter-bytes,proto3" json:"filter_bytes,omitempty"`
	FilterPacketRate            uint64 `protobuf:"varint,44,opt,name=filter_packet_rate,json=filter-packet-rate,proto3" json:"filter_packet_rate,omitempty"`
	FilterByteRate              uint64 `protobuf:"varint,45,opt,name=filter_byte_rate,json=filter-byte-rate,proto3" json:"filter_byte_rate,omitempty"`
	UnknownunisupPassPackets    uint64 `protobuf:"varint,46,opt,name=unknownunisup_pass_packets,json=unknownunisup-pass-packets,proto3" json:"unknownunisup_pass_packets,omitempty"`
	UnknownunisupPassBytes      uint64 `protobuf:"varint,47,opt,name=unknownunisup_pass_bytes,json=unknownunisup-pass-bytes,proto3" json:"unknownunisup_pass_bytes,omitempty"`
	UnknownunisupPassPacketRate uint64 `protobuf:"varint,48,opt,name=unknownunisup_pass_packet_rate,json=unknownunisup-pass-packet-rate,proto3" json:"unknownunisup_pass_packet_rate,omitempty"`
	UnknownunisupPassByteRate   uint64 `protobuf:"varint,49,opt,name=unknownunisup_pass_byte_rate,json=unknownunisup-pass-byte-rate,proto3" json:"unknownunisup_pass_byte_rate,omitempty"`
	UnknownunisupDropPackets    uint64 `protobuf:"varint,50,opt,name=unknownunisup_drop_packets,json=unknownunisup-drop-packets,proto3" json:"unknownunisup_drop_packets,omitempty"`
	UnknownunisupDropBytes      uint64 `protobuf:"varint,51,opt,name=unknownunisup_drop_bytes,json=unknownunisup-drop-bytes,proto3" json:"unknownunisup_drop_bytes,omitempty"`
	UnknownunisupDropPacketRate uint64 `protobuf:"varint,52,opt,name=unknownunisup_drop_packet_rate,json=unknownunisup-drop-packet-rate,proto3" json:"unknownunisup_drop_packet_rate,omitempty"`
	UnknownunisupDropByteRate   uint64 `protobuf:"varint,53,opt,name=unknownunisup_drop_byte_rate,json=unknownunisup-drop-byte-rate,proto3" json:"unknownunisup_drop_byte_rate,omitempty"`
	MulticastsupPassPackets     uint64 `protobuf:"varint,54,opt,name=multicastsup_pass_packets,json=multicastsup-pass-packets,proto3" json:"multicastsup_pass_packets,omitempty"`
	MulticastsupPassBytes       uint64 `protobuf:"varint,55,opt,name=multicastsup_pass_bytes,json=multicastsup-pass-bytes,proto3" json:"multicastsup_pass_bytes,omitempty"`
	MulticastsupPassPacketRate  uint64 `protobuf:"varint,56,opt,name=multicastsup_pass_packet_rate,json=multicastsup-pass-packet-rate,proto3" json:"multicastsup_pass_packet_rate,omitempty"`
	MulticastsupPassByteRate    uint64 `protobuf:"varint,57,opt,name=multicastsup_pass_byte_rate,json=multicastsup-pass-byte-rate,proto3" json:"multicastsup_pass_byte_rate,omitempty"`
	MulticastsupDropPackets     uint64 `protobuf:"varint,58,opt,name=multicastsup_drop_packets,json=multicastsup-drop-packets,proto3" json:"multicastsup_drop_packets,omitempty"`
	MulticastsupDropBytes       uint64 `protobuf:"varint,59,opt,name=multicastsup_drop_bytes,json=multicastsup-drop-bytes,proto3" json:"multicastsup_drop_bytes,omitempty"`
	MulticastsupDropPacketRate  uint64 `protobuf:"varint,60,opt,name=multicastsup_drop_packet_rate,json=multicastsup-drop-packet-rate,proto3" json:"multicastsup_drop_packet_rate,omitempty"`
	MulticastsupDropByteRate    uint64 `protobuf:"varint,61,opt,name=multicastsup_drop_byte_rate,json=multicastsup-drop-byte-rate,proto3" json:"multicastsup_drop_byte_rate,omitempty"`
	BroadcastsupPassPackets     uint64 `protobuf:"varint,62,opt,name=broadcastsup_pass_packets,json=broadcastsup-pass-packets,proto3" json:"broadcastsup_pass_packets,omitempty"`
	BroadcastsupPassBytes       uint64 `protobuf:"varint,63,opt,name=broadcastsup_pass_bytes,json=broadcastsup-pass-bytes,proto3" json:"broadcastsup_pass_bytes,omitempty"`
	BroadcastsupPassPacketRate  uint64 `protobuf:"varint,64,opt,name=broadcastsup_pass_packet_rate,json=broadcastsup-pass-packet-rate,proto3" json:"broadcastsup_pass_packet_rate,omitempty"`
	BroadcastsupPassByteRate    uint64 `protobuf:"varint,65,opt,name=broadcastsup_pass_byte_rate,json=broadcastsup-pass-byte-rate,proto3" json:"broadcastsup_pass_byte_rate,omitempty"`
	BroadcastsupDropPackets     uint64 `protobuf:"varint,66,opt,name=broadcastsup_drop_packets,json=broadcastsup-drop-packets,proto3" json:"broadcastsup_drop_packets,omitempty"`
	BroadcastsupDropBytes       uint64 `protobuf:"varint,67,opt,name=broadcastsup_drop_bytes,json=broadcastsup-drop-bytes,proto3" json:"broadcastsup_drop_bytes,omitempty"`
	BroadcastsupDropPacketRate  uint64 `protobuf:"varint,68,opt,name=broadcastsup_drop_packet_rate,json=broadcastsup-drop-packet-rate,proto3" json:"broadcastsup_drop_packet_rate,omitempty"`
	BroadcastsupDropByteRate    uint64 `protobuf:"varint,69,opt,name=broadcastsup_drop_byte_rate,json=broadcastsup-drop-byte-rate,proto3" json:"broadcastsup_drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 4, 0, 2, 0}
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPackets() uint64 {
	if x != nil {
		return x.MatchPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchBytes() uint64 {
	if x != nil {
		return x.MatchBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPacketRate() uint64 {
	if x != nil {
		return x.MatchPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchByteRate() uint64 {
	if x != nil {
		return x.MatchByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassPackets() uint64 {
	if x != nil {
		return x.MatchPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassBytes() uint64 {
	if x != nil {
		return x.MatchPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassPacketRate() uint64 {
	if x != nil {
		return x.MatchPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchPassByteRate() uint64 {
	if x != nil {
		return x.MatchPassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropPackets() uint64 {
	if x != nil {
		return x.MatchDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropBytes() uint64 {
	if x != nil {
		return x.MatchDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropPacketRate() uint64 {
	if x != nil {
		return x.MatchDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMatchDropByteRate() uint64 {
	if x != nil {
		return x.MatchDropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropPackets() uint64 {
	if x != nil {
		return x.UrpfDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropBytes() uint64 {
	if x != nil {
		return x.UrpfDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropPacketRate() uint64 {
	if x != nil {
		return x.UrpfDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUrpfDropByteRate() uint64 {
	if x != nil {
		return x.UrpfDropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPackets() uint64 {
	if x != nil {
		return x.CarPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarBytes() uint64 {
	if x != nil {
		return x.CarBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPacketRate() uint64 {
	if x != nil {
		return x.CarPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarByteRate() uint64 {
	if x != nil {
		return x.CarByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassPackets() uint64 {
	if x != nil {
		return x.CarPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassBytes() uint64 {
	if x != nil {
		return x.CarPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassPacketRate() uint64 {
	if x != nil {
		return x.CarPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarPassByteRate() uint64 {
	if x != nil {
		return x.CarPassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropPackets() uint64 {
	if x != nil {
		return x.CarDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropBytes() uint64 {
	if x != nil {
		return x.CarDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropPacketRate() uint64 {
	if x != nil {
		return x.CarDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarDropByteRate() uint64 {
	if x != nil {
		return x.CarDropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenPackets() uint64 {
	if x != nil {
		return x.CarGreenPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenBytes() uint64 {
	if x != nil {
		return x.CarGreenBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenPacketRate() uint64 {
	if x != nil {
		return x.CarGreenPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarGreenByteRate() uint64 {
	if x != nil {
		return x.CarGreenByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowPackets() uint64 {
	if x != nil {
		return x.CarYellowPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowBytes() uint64 {
	if x != nil {
		return x.CarYellowBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowPacketRate() uint64 {
	if x != nil {
		return x.CarYellowPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarYellowByteRate() uint64 {
	if x != nil {
		return x.CarYellowByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedPackets() uint64 {
	if x != nil {
		return x.CarRedPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedBytes() uint64 {
	if x != nil {
		return x.CarRedBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedPacketRate() uint64 {
	if x != nil {
		return x.CarRedPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetCarRedByteRate() uint64 {
	if x != nil {
		return x.CarRedByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterPackets() uint64 {
	if x != nil {
		return x.FilterPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterBytes() uint64 {
	if x != nil {
		return x.FilterBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterPacketRate() uint64 {
	if x != nil {
		return x.FilterPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetFilterByteRate() uint64 {
	if x != nil {
		return x.FilterByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupPassPackets() uint64 {
	if x != nil {
		return x.UnknownunisupPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupPassBytes() uint64 {
	if x != nil {
		return x.UnknownunisupPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupPassPacketRate() uint64 {
	if x != nil {
		return x.UnknownunisupPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupPassByteRate() uint64 {
	if x != nil {
		return x.UnknownunisupPassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupDropPackets() uint64 {
	if x != nil {
		return x.UnknownunisupDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupDropBytes() uint64 {
	if x != nil {
		return x.UnknownunisupDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupDropPacketRate() uint64 {
	if x != nil {
		return x.UnknownunisupDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetUnknownunisupDropByteRate() uint64 {
	if x != nil {
		return x.UnknownunisupDropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupPassPackets() uint64 {
	if x != nil {
		return x.MulticastsupPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupPassBytes() uint64 {
	if x != nil {
		return x.MulticastsupPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupPassPacketRate() uint64 {
	if x != nil {
		return x.MulticastsupPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupPassByteRate() uint64 {
	if x != nil {
		return x.MulticastsupPassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupDropPackets() uint64 {
	if x != nil {
		return x.MulticastsupDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupDropBytes() uint64 {
	if x != nil {
		return x.MulticastsupDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupDropPacketRate() uint64 {
	if x != nil {
		return x.MulticastsupDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetMulticastsupDropByteRate() uint64 {
	if x != nil {
		return x.MulticastsupDropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupPassPackets() uint64 {
	if x != nil {
		return x.BroadcastsupPassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupPassBytes() uint64 {
	if x != nil {
		return x.BroadcastsupPassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupPassPacketRate() uint64 {
	if x != nil {
		return x.BroadcastsupPassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupPassByteRate() uint64 {
	if x != nil {
		return x.BroadcastsupPassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupDropPackets() uint64 {
	if x != nil {
		return x.BroadcastsupDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupDropBytes() uint64 {
	if x != nil {
		return x.BroadcastsupDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupDropPacketRate() uint64 {
	if x != nil {
		return x.BroadcastsupDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics) GetBroadcastsupDropByteRate() uint64 {
	if x != nil {
		return x.BroadcastsupDropByteRate
	}
	return 0
}

type Qos_GlobalQuery_CarResources_CarResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId           string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	CarType          string `protobuf:"bytes,2,opt,name=car_type,json=car-type,proto3" json:"car_type,omitempty"`
	InboundResource  uint32 `protobuf:"varint,3,opt,name=inbound_resource,json=inbound-resource,proto3" json:"inbound_resource,omitempty"`
	OutboundResource uint32 `protobuf:"varint,4,opt,name=outbound_resource,json=outbound-resource,proto3" json:"outbound_resource,omitempty"`
}

func (x *Qos_GlobalQuery_CarResources_CarResource) Reset() {
	*x = Qos_GlobalQuery_CarResources_CarResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_CarResources_CarResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_CarResources_CarResource) ProtoMessage() {}

func (x *Qos_GlobalQuery_CarResources_CarResource) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_CarResources_CarResource.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_CarResources_CarResource) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 5, 0}
}

func (x *Qos_GlobalQuery_CarResources_CarResource) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_CarResources_CarResource) GetCarType() string {
	if x != nil {
		return x.CarType
	}
	return ""
}

func (x *Qos_GlobalQuery_CarResources_CarResource) GetInboundResource() uint32 {
	if x != nil {
		return x.InboundResource
	}
	return 0
}

func (x *Qos_GlobalQuery_CarResources_CarResource) GetOutboundResource() uint32 {
	if x != nil {
		return x.OutboundResource
	}
	return 0
}

type Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId    string                                                       `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction" json:"direction,omitempty"`
	ChipName  string                                                       `protobuf:"bytes,3,opt,name=chip_name,json=chip-name,proto3" json:"chip_name,omitempty"`
	ChipType  string                                                       `protobuf:"bytes,4,opt,name=chip_type,json=chip-type,proto3" json:"chip_type,omitempty"`
	TotalSize uint32                                                       `protobuf:"varint,5,opt,name=total_size,json=total-size,proto3" json:"total_size,omitempty"`
	UsedSize  uint32                                                       `protobuf:"varint,6,opt,name=used_size,json=used-size,proto3" json:"used_size,omitempty"`
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) Reset() {
	*x = Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) ProtoMessage() {}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 6, 0}
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) GetDirection() Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction_INBOUND
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) GetChipName() string {
	if x != nil {
		return x.ChipName
	}
	return ""
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) GetChipType() string {
	if x != nil {
		return x.ChipType
	}
	return ""
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse) GetUsedSize() uint32 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

type Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Used   uint32 `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
	Free   uint32 `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) Reset() {
	*x = Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) ProtoMessage() {
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 7, 0}
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) GetUsed() uint32 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource) GetFree() uint32 {
	if x != nil {
		return x.Free
	}
	return 0
}

type Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId         string                                                                   `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction      Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction" json:"direction,omitempty"`
	TmType         string                                                                   `protobuf:"bytes,3,opt,name=tm_type,json=tm-type,proto3" json:"tm_type,omitempty"`
	ResourcePool   string                                                                   `protobuf:"bytes,4,opt,name=resource_pool,json=resource-pool,proto3" json:"resource_pool,omitempty"`
	UsedIdResource uint32                                                                   `protobuf:"varint,5,opt,name=used_id_resource,json=used-id-resource,proto3" json:"used_id_resource,omitempty"`
	FreeIdResource uint32                                                                   `protobuf:"varint,6,opt,name=free_id_resource,json=free-id-resource,proto3" json:"free_id_resource,omitempty"`
	Pool           string                                                                   `protobuf:"bytes,7,opt,name=pool,proto3" json:"pool,omitempty"`
	UsedNumber     uint32                                                                   `protobuf:"varint,8,opt,name=used_number,json=used-number,proto3" json:"used_number,omitempty"`
	FreeNumber     uint32                                                                   `protobuf:"varint,9,opt,name=free_number,json=free-number,proto3" json:"free_number,omitempty"`
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) Reset() {
	*x = Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 8, 0}
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetDirection() Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction_INBOUND
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetTmType() string {
	if x != nil {
		return x.TmType
	}
	return ""
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetResourcePool() string {
	if x != nil {
		return x.ResourcePool
	}
	return ""
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetUsedIdResource() uint32 {
	if x != nil {
		return x.UsedIdResource
	}
	return 0
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetFreeIdResource() uint32 {
	if x != nil {
		return x.FreeIdResource
	}
	return 0
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetUsedNumber() uint32 {
	if x != nil {
		return x.UsedNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource) GetFreeNumber() uint32 {
	if x != nil {
		return x.FreeNumber
	}
	return 0
}

type Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserQueue []*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue `protobuf:"bytes,1,rep,name=user_queue,json=user-queue,proto3" json:"user_queue,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 0}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues) GetUserQueue() []*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue {
	if x != nil {
		return x.UserQueue
	}
	return nil
}

type Qos_GlobalQuery_InterfaceProfileStatistics_Cars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Car []*Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car `protobuf:"bytes,1,rep,name=car,proto3" json:"car,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_Cars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_Cars) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_Cars.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_Cars) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 1}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars) GetCar() []*Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car {
	if x != nil {
		return x.Car
	}
	return nil
}

type Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareShaping []*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping `protobuf:"bytes,1,rep,name=share_shaping,json=share-shaping,proto3" json:"share_shaping,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 2}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings) GetShareShaping() []*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping {
	if x != nil {
		return x.ShareShaping
	}
	return nil
}

type Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityCar []*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar `protobuf:"bytes,1,rep,name=priority_car,json=priority-car,proto3" json:"priority_car,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 3}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars) GetPriorityCar() []*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar {
	if x != nil {
		return x.PriorityCar
	}
	return nil
}

type Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName        string                                                                       `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PeVlanId             uint32                                                                       `protobuf:"varint,2,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId               uint32                                                                       `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Direction            Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction    `protobuf:"varint,4,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction" json:"direction,omitempty"`
	ServiceClass         Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass `protobuf:"varint,5,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass" json:"service_class,omitempty"`
	PassPackets          uint64                                                                       `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes            uint64                                                                       `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate       uint64                                                                       `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate         uint64                                                                       `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets          uint64                                                                       `protobuf:"varint,10,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes            uint64                                                                       `protobuf:"varint,11,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate       uint64                                                                       `protobuf:"varint,12,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate         uint64                                                                       `protobuf:"varint,13,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
	RandomDropPackets    uint64                                                                       `protobuf:"varint,14,opt,name=random_drop_packets,json=random-drop-packets,proto3" json:"random_drop_packets,omitempty"`
	RandomDropBytes      uint64                                                                       `protobuf:"varint,15,opt,name=random_drop_bytes,json=random-drop-bytes,proto3" json:"random_drop_bytes,omitempty"`
	RandomDropPacketRate uint64                                                                       `protobuf:"varint,16,opt,name=random_drop_packet_rate,json=random-drop-packet-rate,proto3" json:"random_drop_packet_rate,omitempty"`
	RandomDropByteRate   uint64                                                                       `protobuf:"varint,17,opt,name=random_drop_byte_rate,json=random-drop-byte-rate,proto3" json:"random_drop_byte_rate,omitempty"`
	TimeStamp            string                                                                       `protobuf:"bytes,18,opt,name=time_stamp,json=time-stamp,proto3" json:"time_stamp,omitempty"`
	BufferTotal          uint32                                                                       `protobuf:"varint,19,opt,name=buffer_total,json=buffer-total,proto3" json:"buffer_total,omitempty"`
	BufferUsed           uint32                                                                       `protobuf:"varint,20,opt,name=buffer_used,json=buffer-used,proto3" json:"buffer_used,omitempty"`
	ClearTime            string                                                                       `protobuf:"bytes,21,opt,name=clear_time,json=clear-time,proto3" json:"clear_time,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 0, 0}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetDirection() Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetServiceClass() Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass_BE
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetRandomDropPackets() uint64 {
	if x != nil {
		return x.RandomDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetRandomDropBytes() uint64 {
	if x != nil {
		return x.RandomDropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetRandomDropPacketRate() uint64 {
	if x != nil {
		return x.RandomDropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetRandomDropByteRate() uint64 {
	if x != nil {
		return x.RandomDropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetBufferTotal() uint32 {
	if x != nil {
		return x.BufferTotal
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetBufferUsed() uint32 {
	if x != nil {
		return x.BufferUsed
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue) GetClearTime() string {
	if x != nil {
		return x.ClearTime
	}
	return ""
}

type Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarType        Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType   `protobuf:"varint,1,opt,name=car_type,json=car-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType" json:"car_type,omitempty"`
	InterfaceName  string                                                        `protobuf:"bytes,2,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PeVlanId       uint32                                                        `protobuf:"varint,3,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId         uint32                                                        `protobuf:"varint,4,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction" json:"direction,omitempty"`
	PassPackets    uint64                                                        `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                        `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                        `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                        `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                        `protobuf:"varint,10,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                        `protobuf:"varint,11,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                        `protobuf:"varint,12,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                        `protobuf:"varint,13,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 1, 0}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetCarType() Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType {
	if x != nil {
		return x.CarType
	}
	return Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_INVALID_ENUM_VALUE_CarType
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetDirection() Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                          `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PeVlanId       uint32                                                                          `protobuf:"varint,2,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId         uint32                                                                          `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction" json:"direction,omitempty"`
	ShapingId      uint64                                                                          `protobuf:"varint,5,opt,name=shaping_id,json=shaping-id,proto3" json:"shaping_id,omitempty"`
	PassPackets    uint64                                                                          `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                          `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                          `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                          `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                          `protobuf:"varint,10,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                          `protobuf:"varint,11,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                          `protobuf:"varint,12,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                          `protobuf:"varint,13,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 2, 0}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetDirection() Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetShapingId() uint64 {
	if x != nil {
		return x.ShapingId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                          `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PeVlanId       uint32                                                                          `protobuf:"varint,2,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId         uint32                                                                          `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction   `protobuf:"varint,4,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction" json:"direction,omitempty"`
	PriorityNum    Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum `protobuf:"varint,5,opt,name=priority_num,json=priority-num,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum" json:"priority_num,omitempty"`
	PassPackets    uint64                                                                          `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                          `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                          `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                          `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                          `protobuf:"varint,10,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                          `protobuf:"varint,11,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                          `protobuf:"varint,12,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                          `protobuf:"varint,13,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) Reset() {
	*x = Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 9, 3, 0}
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetDirection() Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetPriorityNum() Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum {
	if x != nil {
		return x.PriorityNum
	}
	return Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum_P0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                          `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Direction      Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction    `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction" json:"direction,omitempty"`
	ServiceClass   Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass `protobuf:"varint,3,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets    uint64                                                          `protobuf:"varint,4,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                          `protobuf:"varint,5,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                          `protobuf:"varint,6,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                          `protobuf:"varint,7,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                          `protobuf:"varint,8,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                          `protobuf:"varint,9,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                          `protobuf:"varint,10,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                          `protobuf:"varint,11,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
	TotalBuffer    uint32                                                          `protobuf:"varint,12,opt,name=total_buffer,json=total-buffer,proto3" json:"total_buffer,omitempty"`
	CurrentBuffer  uint32                                                          `protobuf:"varint,13,opt,name=current_buffer,json=current-buffer,proto3" json:"current_buffer,omitempty"`
	ClearTime      string                                                          `protobuf:"bytes,14,opt,name=clear_time,json=clear-time,proto3" json:"clear_time,omitempty"`
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) Reset() {
	*x = Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 10, 0}
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetDirection() Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetServiceClass() Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetTotalBuffer() uint32 {
	if x != nil {
		return x.TotalBuffer
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetCurrentBuffer() uint32 {
	if x != nil {
		return x.CurrentBuffer
	}
	return 0
}

func (x *Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics) GetClearTime() string {
	if x != nil {
		return x.ClearTime
	}
	return ""
}

type Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId    string                                                           `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction" json:"direction,omitempty"`
	ChipName  string                                                           `protobuf:"bytes,3,opt,name=chip_name,json=chip-name,proto3" json:"chip_name,omitempty"`
	ChipType  string                                                           `protobuf:"bytes,4,opt,name=chip_type,json=chip-type,proto3" json:"chip_type,omitempty"`
	TotalSize uint32                                                           `protobuf:"varint,5,opt,name=total_size,json=total-size,proto3" json:"total_size,omitempty"`
	UsedSize  uint32                                                           `protobuf:"varint,6,opt,name=used_size,json=used-size,proto3" json:"used_size,omitempty"`
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) Reset() {
	*x = Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) ProtoMessage() {}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 11, 0}
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) GetDirection() Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction_INBOUND
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) GetChipName() string {
	if x != nil {
		return x.ChipName
	}
	return ""
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) GetChipType() string {
	if x != nil {
		return x.ChipType
	}
	return ""
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage) GetUsedSize() uint32 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

type Qos_GlobalQuery_QueueStatisticss_QueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName     string                                                        `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass      Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets       uint64                                                        `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes         uint64                                                        `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate    uint64                                                        `protobuf:"varint,5,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate      uint64                                                        `protobuf:"varint,6,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DiscardPackets    uint64                                                        `protobuf:"varint,7,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	DiscardBytes      uint64                                                        `protobuf:"varint,8,opt,name=discard_bytes,json=discard-bytes,proto3" json:"discard_bytes,omitempty"`
	DiscardPacketRate uint64                                                        `protobuf:"varint,9,opt,name=discard_packet_rate,json=discard-packet-rate,proto3" json:"discard_packet_rate,omitempty"`
	DiscardByteRate   uint64                                                        `protobuf:"varint,10,opt,name=discard_byte_rate,json=discard-byte-rate,proto3" json:"discard_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) Reset() {
	*x = Qos_GlobalQuery_QueueStatisticss_QueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_QueueStatisticss_QueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_QueueStatisticss_QueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_QueueStatisticss_QueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 12, 0}
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetServiceClass() Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetDiscardPackets() uint64 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetDiscardBytes() uint64 {
	if x != nil {
		return x.DiscardBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetDiscardPacketRate() uint64 {
	if x != nil {
		return x.DiscardPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_QueueStatisticss_QueueStatistics) GetDiscardByteRate() uint64 {
	if x != nil {
		return x.DiscardByteRate
	}
	return 0
}

type Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName      string                                                                `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass       Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets        uint64                                                                `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes          uint64                                                                `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DropPackets        uint64                                                                `protobuf:"varint,5,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes          uint64                                                                `protobuf:"varint,6,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropTailPackets    uint64                                                                `protobuf:"varint,7,opt,name=drop_tail_packets,json=drop-tail-packets,proto3" json:"drop_tail_packets,omitempty"`
	DropTailBytes      uint64                                                                `protobuf:"varint,8,opt,name=drop_tail_bytes,json=drop-tail-bytes,proto3" json:"drop_tail_bytes,omitempty"`
	DropWredPackets    uint64                                                                `protobuf:"varint,9,opt,name=drop_wred_packets,json=drop-wred-packets,proto3" json:"drop_wred_packets,omitempty"`
	DropWredBytes      uint64                                                                `protobuf:"varint,10,opt,name=drop_wred_bytes,json=drop-wred-bytes,proto3" json:"drop_wred_bytes,omitempty"`
	StatisticsInterval uint32                                                                `protobuf:"varint,11,opt,name=statistics_interval,json=statistics-interval,proto3" json:"statistics_interval,omitempty"`
	PassPacketRate     uint64                                                                `protobuf:"varint,12,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate       uint64                                                                `protobuf:"varint,13,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPacketRate     uint64                                                                `protobuf:"varint,14,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate       uint64                                                                `protobuf:"varint,15,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
	DropTailPacketRate uint64                                                                `protobuf:"varint,16,opt,name=drop_tail_packet_rate,json=drop-tail-packet-rate,proto3" json:"drop_tail_packet_rate,omitempty"`
	DropTailByteRate   uint64                                                                `protobuf:"varint,17,opt,name=drop_tail_byte_rate,json=drop-tail-byte-rate,proto3" json:"drop_tail_byte_rate,omitempty"`
	DropWredPacketRate uint64                                                                `protobuf:"varint,18,opt,name=drop_wred_packet_rate,json=drop-wred-packet-rate,proto3" json:"drop_wred_packet_rate,omitempty"`
	DropWredByteRate   uint64                                                                `protobuf:"varint,19,opt,name=drop_wred_byte_rate,json=drop-wred-byte-rate,proto3" json:"drop_wred_byte_rate,omitempty"`
	PeakTime           string                                                                `protobuf:"bytes,20,opt,name=peak_time,json=peak-time,proto3" json:"peak_time,omitempty"`
	PeakRate           uint64                                                                `protobuf:"varint,21,opt,name=peak_rate,json=peak-rate,proto3" json:"peak_rate,omitempty"`
	CurrentQueueUsage  uint32                                                                `protobuf:"varint,22,opt,name=current_queue_usage,json=current-queue-usage,proto3" json:"current_queue_usage,omitempty"`
	TotalBufferSize    uint32                                                                `protobuf:"varint,23,opt,name=total_buffer_size,json=total-buffer-size,proto3" json:"total_buffer_size,omitempty"`
	UsedBufferSize     uint32                                                                `protobuf:"varint,24,opt,name=used_buffer_size,json=used-buffer-size,proto3" json:"used_buffer_size,omitempty"`
	TrafficFlow        uint64                                                                `protobuf:"varint,25,opt,name=traffic_flow,json=traffic-flow,proto3" json:"traffic_flow,omitempty"`
	PhysicalBandwidth  uint64                                                                `protobuf:"varint,26,opt,name=physical_bandwidth,json=physical-bandwidth,proto3" json:"physical_bandwidth,omitempty"`
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 13, 0}
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetServiceClass() Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropTailPackets() uint64 {
	if x != nil {
		return x.DropTailPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropTailBytes() uint64 {
	if x != nil {
		return x.DropTailBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropWredPackets() uint64 {
	if x != nil {
		return x.DropWredPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropWredBytes() uint64 {
	if x != nil {
		return x.DropWredBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetStatisticsInterval() uint32 {
	if x != nil {
		return x.StatisticsInterval
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropTailPacketRate() uint64 {
	if x != nil {
		return x.DropTailPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropTailByteRate() uint64 {
	if x != nil {
		return x.DropTailByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropWredPacketRate() uint64 {
	if x != nil {
		return x.DropWredPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetDropWredByteRate() uint64 {
	if x != nil {
		return x.DropWredByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetPeakTime() string {
	if x != nil {
		return x.PeakTime
	}
	return ""
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetPeakRate() uint64 {
	if x != nil {
		return x.PeakRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetCurrentQueueUsage() uint32 {
	if x != nil {
		return x.CurrentQueueUsage
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetTotalBufferSize() uint32 {
	if x != nil {
		return x.TotalBufferSize
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetUsedBufferSize() uint32 {
	if x != nil {
		return x.UsedBufferSize
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetTrafficFlow() uint64 {
	if x != nil {
		return x.TrafficFlow
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics) GetPhysicalBandwidth() uint64 {
	if x != nil {
		return x.PhysicalBandwidth
	}
	return 0
}

type Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName        string                                                                              `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass         Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets          uint64                                                                              `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes            uint64                                                                              `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DropPackets          uint64                                                                              `protobuf:"varint,5,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes            uint64                                                                              `protobuf:"varint,6,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	StatisticsInterval   uint32                                                                              `protobuf:"varint,7,opt,name=statistics_interval,json=statistics-interval,proto3" json:"statistics_interval,omitempty"`
	PassPacketRate       uint64                                                                              `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate         uint64                                                                              `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPacketRate       uint64                                                                              `protobuf:"varint,10,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate         uint64                                                                              `protobuf:"varint,11,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
	ConfiguredQueueDepth uint32                                                                              `protobuf:"varint,12,opt,name=configured_queue_depth,json=configured-queue-depth,proto3" json:"configured_queue_depth,omitempty"`
	UsedBufferSize       uint32                                                                              `protobuf:"varint,13,opt,name=used_buffer_size,json=used-buffer-size,proto3" json:"used_buffer_size,omitempty"`
	ResetTime            string                                                                              `protobuf:"bytes,14,opt,name=reset_time,json=reset-time,proto3" json:"reset_time,omitempty"`
	TrafficFlow          uint64                                                                              `protobuf:"varint,15,opt,name=traffic_flow,json=traffic-flow,proto3" json:"traffic_flow,omitempty"`
	PhysicalBandwidth    uint64                                                                              `protobuf:"varint,16,opt,name=physical_bandwidth,json=physical-bandwidth,proto3" json:"physical_bandwidth,omitempty"`
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) Reset() {
	*x = Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 14, 0}
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetServiceClass() Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetStatisticsInterval() uint32 {
	if x != nil {
		return x.StatisticsInterval
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetConfiguredQueueDepth() uint32 {
	if x != nil {
		return x.ConfiguredQueueDepth
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetUsedBufferSize() uint32 {
	if x != nil {
		return x.UsedBufferSize
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetResetTime() string {
	if x != nil {
		return x.ResetTime
	}
	return ""
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetTrafficFlow() uint64 {
	if x != nil {
		return x.TrafficFlow
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics) GetPhysicalBandwidth() uint64 {
	if x != nil {
		return x.PhysicalBandwidth
	}
	return 0
}

type Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string                                                                              `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass  Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets   uint64                                                                              `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes     uint64                                                                              `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DropPackets   uint64                                                                              `protobuf:"varint,5,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes     uint64                                                                              `protobuf:"varint,6,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) Reset() {
	*x = Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 15, 0}
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) GetServiceClass() Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

type Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName     string                                                                              `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass      Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets       uint64                                                                              `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes         uint64                                                                              `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate    uint64                                                                              `protobuf:"varint,5,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate      uint64                                                                              `protobuf:"varint,6,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DiscardPackets    uint64                                                                              `protobuf:"varint,7,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	DiscardBytes      uint64                                                                              `protobuf:"varint,8,opt,name=discard_bytes,json=discard-bytes,proto3" json:"discard_bytes,omitempty"`
	DiscardPacketRate uint64                                                                              `protobuf:"varint,9,opt,name=discard_packet_rate,json=discard-packet-rate,proto3" json:"discard_packet_rate,omitempty"`
	DiscardByteRate   uint64                                                                              `protobuf:"varint,10,opt,name=discard_byte_rate,json=discard-byte-rate,proto3" json:"discard_byte_rate,omitempty"`
	TotalBufferSize   uint32                                                                              `protobuf:"varint,11,opt,name=total_buffer_size,json=total-buffer-size,proto3" json:"total_buffer_size,omitempty"`
	UsedBufferSize    uint32                                                                              `protobuf:"varint,12,opt,name=used_buffer_size,json=used-buffer-size,proto3" json:"used_buffer_size,omitempty"`
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 16, 0}
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetServiceClass() Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetDiscardPackets() uint64 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetDiscardBytes() uint64 {
	if x != nil {
		return x.DiscardBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetDiscardPacketRate() uint64 {
	if x != nil {
		return x.DiscardPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetDiscardByteRate() uint64 {
	if x != nil {
		return x.DiscardByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetTotalBufferSize() uint32 {
	if x != nil {
		return x.TotalBufferSize
	}
	return 0
}

func (x *Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics) GetUsedBufferSize() uint32 {
	if x != nil {
		return x.UsedBufferSize
	}
	return 0
}

type Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string                                                   `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Ability       Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability `protobuf:"varint,2,opt,name=ability,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability" json:"ability,omitempty"`
}

func (x *Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility) Reset() {
	*x = Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility) ProtoMessage() {}

func (x *Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 17, 0}
}

func (x *Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility) GetAbility() Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability {
	if x != nil {
		return x.Ability
	}
	return Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_INVALID_ENUM_VALUE_Ability
}

type Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                     `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Direction      Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction" json:"direction,omitempty"`
	PassPackets    uint64                                                                     `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                     `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DropPackets    uint64                                                                     `protobuf:"varint,5,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                     `protobuf:"varint,6,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	PassPacketRate uint64                                                                     `protobuf:"varint,7,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                     `protobuf:"varint,8,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPacketRate uint64                                                                     `protobuf:"varint,9,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                     `protobuf:"varint,10,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) Reset() {
	*x = Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 18, 0}
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetDirection() Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpType         Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType    `protobuf:"varint,1,opt,name=ip_type,json=ip-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType" json:"ip_type,omitempty"`
	SlotId         string                                                         `protobuf:"bytes,2,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction      Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction" json:"direction,omitempty"`
	Ip             string                                                         `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	PassPackets    uint64                                                         `protobuf:"varint,5,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                         `protobuf:"varint,6,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                         `protobuf:"varint,7,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                         `protobuf:"varint,8,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                         `protobuf:"varint,9,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                         `protobuf:"varint,10,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                         `protobuf:"varint,11,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                         `protobuf:"varint,12,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) Reset() {
	*x = Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 20, 0}
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetIpType() Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType {
	if x != nil {
		return x.IpType
	}
	return Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_INVALID_ENUM_VALUE_IpType
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetDirection() Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                                              `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PeVlanId       uint32                                                                                              `protobuf:"varint,2,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId         uint32                                                                                              `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction    `protobuf:"varint,4,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction" json:"direction,omitempty"`
	ClassifierName string                                                                                              `protobuf:"bytes,5,opt,name=classifier_name,json=classifier-name,proto3" json:"classifier_name,omitempty"`
	ServiceClass   Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass `protobuf:"varint,6,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets    uint64                                                                                              `protobuf:"varint,7,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                                              `protobuf:"varint,8,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                                              `protobuf:"varint,9,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                                              `protobuf:"varint,10,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                                              `protobuf:"varint,11,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                                              `protobuf:"varint,12,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                                              `protobuf:"varint,13,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                                              `protobuf:"varint,14,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
	BufferTotal    uint32                                                                                              `protobuf:"varint,15,opt,name=buffer_total,json=buffer-total,proto3" json:"buffer_total,omitempty"`
	BufferUsed     uint32                                                                                              `protobuf:"varint,16,opt,name=buffer_used,json=buffer-used,proto3" json:"buffer_used,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 21, 0}
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetDirection() Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetServiceClass() Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetBufferTotal() uint32 {
	if x != nil {
		return x.BufferTotal
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics) GetBufferUsed() uint32 {
	if x != nil {
		return x.BufferUsed
	}
	return 0
}

type Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                                          `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PeVlanId       uint32                                                                                          `protobuf:"varint,2,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	VlanId         uint32                                                                                          `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction    `protobuf:"varint,4,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction" json:"direction,omitempty"`
	ServiceClass   Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass `protobuf:"varint,5,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass" json:"service_class,omitempty"`
	PassPackets    uint64                                                                                          `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                                          `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                                          `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                                          `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                                          `protobuf:"varint,10,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                                          `protobuf:"varint,11,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                                          `protobuf:"varint,12,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                                          `protobuf:"varint,13,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) Reset() {
	*x = Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 22, 0}
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetDirection() Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetServiceClass() Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass_BE
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                                      `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	ServiceClass   Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass" json:"service_class,omitempty"`
	PassPackets    uint64                                                                                      `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                                      `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                                      `protobuf:"varint,5,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                                      `protobuf:"varint,6,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                                      `protobuf:"varint,7,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                                      `protobuf:"varint,8,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                                      `protobuf:"varint,9,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                                      `protobuf:"varint,10,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) Reset() {
	*x = Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 23, 0}
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetServiceClass() Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass_BE
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	PassPackets    uint64 `protobuf:"varint,2,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64 `protobuf:"varint,3,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DropPackets    uint64 `protobuf:"varint,4,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64 `protobuf:"varint,5,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	PassPacketRate uint64 `protobuf:"varint,6,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64 `protobuf:"varint,7,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPacketRate uint64 `protobuf:"varint,8,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64 `protobuf:"varint,9,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 24, 0}
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_QosResourceRules_QosResourceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleType         Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType `protobuf:"varint,1,opt,name=rule_type,json=rule-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType" json:"rule_type,omitempty"`
	SlotId           string                                                    `protobuf:"bytes,2,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ResourcePool     string                                                    `protobuf:"bytes,3,opt,name=resource_pool,json=resource-pool,proto3" json:"resource_pool,omitempty"`
	UsedResource     uint32                                                    `protobuf:"varint,4,opt,name=used_resource,json=used-resource,proto3" json:"used_resource,omitempty"`
	FreeResource     uint32                                                    `protobuf:"varint,5,opt,name=free_resource,json=free-resource,proto3" json:"free_resource,omitempty"`
	ReservedResource uint32                                                    `protobuf:"varint,6,opt,name=reserved_resource,json=reserved-resource,proto3" json:"reserved_resource,omitempty"`
	TotalResource    uint32                                                    `protobuf:"varint,7,opt,name=total_resource,json=total-resource,proto3" json:"total_resource,omitempty"`
	UtilizationRate  uint32                                                    `protobuf:"varint,8,opt,name=utilization_rate,json=utilization-rate,proto3" json:"utilization_rate,omitempty"`
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) Reset() {
	*x = Qos_GlobalQuery_QosResourceRules_QosResourceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_QosResourceRules_QosResourceRule) ProtoMessage() {}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_QosResourceRules_QosResourceRule.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_QosResourceRules_QosResourceRule) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 25, 0}
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetRuleType() Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType {
	if x != nil {
		return x.RuleType
	}
	return Qos_GlobalQuery_QosResourceRules_QosResourceRule_INVALID_ENUM_VALUE_RuleType
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetResourcePool() string {
	if x != nil {
		return x.ResourcePool
	}
	return ""
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetUsedResource() uint32 {
	if x != nil {
		return x.UsedResource
	}
	return 0
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetFreeResource() uint32 {
	if x != nil {
		return x.FreeResource
	}
	return 0
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetReservedResource() uint32 {
	if x != nil {
		return x.ReservedResource
	}
	return 0
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetTotalResource() uint32 {
	if x != nil {
		return x.TotalResource
	}
	return 0
}

func (x *Qos_GlobalQuery_QosResourceRules_QosResourceRule) GetUtilizationRate() uint32 {
	if x != nil {
		return x.UtilizationRate
	}
	return 0
}

type Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId       string                                                               `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction    Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction" json:"direction,omitempty"`
	TmType       string                                                               `protobuf:"bytes,3,opt,name=tm_type,json=tm-type,proto3" json:"tm_type,omitempty"`
	UsedResource uint32                                                               `protobuf:"varint,4,opt,name=used_resource,json=used-resource,proto3" json:"used_resource,omitempty"`
	FreeResource uint32                                                               `protobuf:"varint,5,opt,name=free_resource,json=free-resource,proto3" json:"free_resource,omitempty"`
}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) Reset() {
	*x = Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) ProtoMessage() {}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 26, 0}
}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) GetDirection() Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) GetTmType() string {
	if x != nil {
		return x.TmType
	}
	return ""
}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) GetUsedResource() uint32 {
	if x != nil {
		return x.UsedResource
	}
	return 0
}

func (x *Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource) GetFreeResource() uint32 {
	if x != nil {
		return x.FreeResource
	}
	return 0
}

type Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                   `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction" json:"direction,omitempty"`
	VlanId         uint32                                                                   `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	SlotId         string                                                                   `protobuf:"bytes,4,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Vid            uint32                                                                   `protobuf:"varint,5,opt,name=vid,proto3" json:"vid,omitempty"`
	PassPackets    uint64                                                                   `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                   `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                   `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                   `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                   `protobuf:"varint,10,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                   `protobuf:"varint,11,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                   `protobuf:"varint,12,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                   `protobuf:"varint,13,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 27, 0}
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetDirection() Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetVid() uint32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                               `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction" json:"direction,omitempty"`
	VlanId         uint32                                                                               `protobuf:"varint,3,opt,name=vlan_id,json=vlan-id,proto3" json:"vlan_id,omitempty"`
	SlotId         string                                                                               `protobuf:"bytes,4,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	PassPackets    uint64                                                                               `protobuf:"varint,5,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                               `protobuf:"varint,6,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                               `protobuf:"varint,7,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                               `protobuf:"varint,8,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                               `protobuf:"varint,9,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                               `protobuf:"varint,10,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                               `protobuf:"varint,11,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                               `protobuf:"varint,12,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 28, 0}
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetDirection() Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName  string                                                                                     `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Direction      Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction" json:"direction,omitempty"`
	PeVlanId       uint32                                                                                     `protobuf:"varint,3,opt,name=pe_vlan_id,json=pe-vlan-id,proto3" json:"pe_vlan_id,omitempty"`
	PriorityValue  uint32                                                                                     `protobuf:"varint,4,opt,name=priority_value,json=priority-value,proto3" json:"priority_value,omitempty"`
	SlotId         string                                                                                     `protobuf:"bytes,5,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	PassPackets    uint64                                                                                     `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes      uint64                                                                                     `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate uint64                                                                                     `protobuf:"varint,8,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate   uint64                                                                                     `protobuf:"varint,9,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets    uint64                                                                                     `protobuf:"varint,10,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropBytes      uint64                                                                                     `protobuf:"varint,11,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropPacketRate uint64                                                                                     `protobuf:"varint,12,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropByteRate   uint64                                                                                     `protobuf:"varint,13,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 29, 0}
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetDirection() Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction_INBOUND
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetPeVlanId() uint32 {
	if x != nil {
		return x.PeVlanId
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetPriorityValue() uint32 {
	if x != nil {
		return x.PriorityValue
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

type Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName                        string `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	InterfaceCarInboundDropPackets       uint64 `protobuf:"varint,2,opt,name=interface_car_inbound_drop_packets,json=interface-car-inbound-drop-packets,proto3" json:"interface_car_inbound_drop_packets,omitempty"`
	InterfaceCarOutboundDropPackets      uint64 `protobuf:"varint,3,opt,name=interface_car_outbound_drop_packets,json=interface-car-outbound-drop-packets,proto3" json:"interface_car_outbound_drop_packets,omitempty"`
	PortQueueOutboundDropPackets         uint64 `protobuf:"varint,4,opt,name=port_queue_outbound_drop_packets,json=port-queue-outbound-drop-packets,proto3" json:"port_queue_outbound_drop_packets,omitempty"`
	VlanCarInboundDropPackets            uint64 `protobuf:"varint,5,opt,name=vlan_car_inbound_drop_packets,json=vlan-car-inbound-drop-packets,proto3" json:"vlan_car_inbound_drop_packets,omitempty"`
	VlanCarOutboundDropPackets           uint64 `protobuf:"varint,6,opt,name=vlan_car_outbound_drop_packets,json=vlan-car-outbound-drop-packets,proto3" json:"vlan_car_outbound_drop_packets,omitempty"`
	ReceivePacketEqual_64Bytes           string `protobuf:"bytes,7,opt,name=receive_packet_equal_64bytes,json=receive-packet-equal-64bytes,proto3" json:"receive_packet_equal_64bytes,omitempty"`
	ReceivePacketBetween_65To127Bytes    string `protobuf:"bytes,8,opt,name=receive_packet_between_65to127bytes,json=receive-packet-between-65to127bytes,proto3" json:"receive_packet_between_65to127bytes,omitempty"`
	ReceivePacketBetween_128To255Bytes   string `protobuf:"bytes,9,opt,name=receive_packet_between_128to255bytes,json=receive-packet-between-128to255bytes,proto3" json:"receive_packet_between_128to255bytes,omitempty"`
	ReceivePacketBetween_256To511Bytes   string `protobuf:"bytes,10,opt,name=receive_packet_between_256to511bytes,json=receive-packet-between-256to511bytes,proto3" json:"receive_packet_between_256to511bytes,omitempty"`
	ReceivePacketBetween_512To1023Bytes  string `protobuf:"bytes,11,opt,name=receive_packet_between_512to1023bytes,json=receive-packet-between-512to1023bytes,proto3" json:"receive_packet_between_512to1023bytes,omitempty"`
	ReceivePacketBetween_1024To1518Bytes string `protobuf:"bytes,12,opt,name=receive_packet_between_1024to1518bytes,json=receive-packet-between-1024to1518bytes,proto3" json:"receive_packet_between_1024to1518bytes,omitempty"`
	ReceivePacketLarger_1518Bytes        string `protobuf:"bytes,13,opt,name=receive_packet_larger_1518bytes,json=receive-packet-larger-1518bytes,proto3" json:"receive_packet_larger_1518bytes,omitempty"`
	SendPacketEqual_64Bytes              string `protobuf:"bytes,14,opt,name=send_packet_equal_64bytes,json=send-packet-equal-64bytes,proto3" json:"send_packet_equal_64bytes,omitempty"`
	SendPacketBetween_65To127Bytes       string `protobuf:"bytes,15,opt,name=send_packet_between_65to127bytes,json=send-packet-between-65to127bytes,proto3" json:"send_packet_between_65to127bytes,omitempty"`
	SendPacketBetween_128To255Bytes      string `protobuf:"bytes,16,opt,name=send_packet_between_128to255bytes,json=send-packet-between-128to255bytes,proto3" json:"send_packet_between_128to255bytes,omitempty"`
	SendPacketBetween_256To511Bytes      string `protobuf:"bytes,17,opt,name=send_packet_between_256to511bytes,json=send-packet-between-256to511bytes,proto3" json:"send_packet_between_256to511bytes,omitempty"`
	SendPacketBetween_512To1023Bytes     string `protobuf:"bytes,18,opt,name=send_packet_between_512to1023bytes,json=send-packet-between-512to1023bytes,proto3" json:"send_packet_between_512to1023bytes,omitempty"`
	SendPacketBetween_1024To1518Bytes    string `protobuf:"bytes,19,opt,name=send_packet_between_1024to1518bytes,json=send-packet-between-1024to1518bytes,proto3" json:"send_packet_between_1024to1518bytes,omitempty"`
	SendPacketLarger_1518Bytes           string `protobuf:"bytes,20,opt,name=send_packet_larger_1518bytes,json=send-packet-larger-1518bytes,proto3" json:"send_packet_larger_1518bytes,omitempty"`
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) Reset() {
	*x = Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 30, 0}
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetInterfaceCarInboundDropPackets() uint64 {
	if x != nil {
		return x.InterfaceCarInboundDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetInterfaceCarOutboundDropPackets() uint64 {
	if x != nil {
		return x.InterfaceCarOutboundDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetPortQueueOutboundDropPackets() uint64 {
	if x != nil {
		return x.PortQueueOutboundDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetVlanCarInboundDropPackets() uint64 {
	if x != nil {
		return x.VlanCarInboundDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetVlanCarOutboundDropPackets() uint64 {
	if x != nil {
		return x.VlanCarOutboundDropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetReceivePacketEqual_64Bytes() string {
	if x != nil {
		return x.ReceivePacketEqual_64Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetReceivePacketBetween_65To127Bytes() string {
	if x != nil {
		return x.ReceivePacketBetween_65To127Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetReceivePacketBetween_128To255Bytes() string {
	if x != nil {
		return x.ReceivePacketBetween_128To255Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetReceivePacketBetween_256To511Bytes() string {
	if x != nil {
		return x.ReceivePacketBetween_256To511Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetReceivePacketBetween_512To1023Bytes() string {
	if x != nil {
		return x.ReceivePacketBetween_512To1023Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetReceivePacketBetween_1024To1518Bytes() string {
	if x != nil {
		return x.ReceivePacketBetween_1024To1518Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetReceivePacketLarger_1518Bytes() string {
	if x != nil {
		return x.ReceivePacketLarger_1518Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetSendPacketEqual_64Bytes() string {
	if x != nil {
		return x.SendPacketEqual_64Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetSendPacketBetween_65To127Bytes() string {
	if x != nil {
		return x.SendPacketBetween_65To127Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetSendPacketBetween_128To255Bytes() string {
	if x != nil {
		return x.SendPacketBetween_128To255Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetSendPacketBetween_256To511Bytes() string {
	if x != nil {
		return x.SendPacketBetween_256To511Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetSendPacketBetween_512To1023Bytes() string {
	if x != nil {
		return x.SendPacketBetween_512To1023Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetSendPacketBetween_1024To1518Bytes() string {
	if x != nil {
		return x.SendPacketBetween_1024To1518Bytes
	}
	return ""
}

func (x *Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics) GetSendPacketLarger_1518Bytes() string {
	if x != nil {
		return x.SendPacketLarger_1518Bytes
	}
	return ""
}

type Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                 string                                                                                                 `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction              Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction               `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction" json:"direction,omitempty"`
	TotalAbnormalNumber    uint32                                                                                                 `protobuf:"varint,3,opt,name=total_abnormal_number,json=total-abnormal-number,proto3" json:"total_abnormal_number,omitempty"`
	AbnormalConfigurations *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations `protobuf:"bytes,4,opt,name=abnormal_configurations,json=abnormal-configurations,proto3" json:"abnormal_configurations,omitempty"`
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) Reset() {
	*x = Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) ProtoMessage() {
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 31, 0}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) GetDirection() Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) GetTotalAbnormalNumber() uint32 {
	if x != nil {
		return x.TotalAbnormalNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation) GetAbnormalConfigurations() *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations {
	if x != nil {
		return x.AbnormalConfigurations
	}
	return nil
}

type Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbnormalConfiguration []*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration `protobuf:"bytes,1,rep,name=abnormal_configuration,json=abnormal-configuration,proto3" json:"abnormal_configuration,omitempty"`
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations) Reset() {
	*x = Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations) ProtoMessage() {
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 31, 0, 0}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations) GetAbnormalConfiguration() []*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration {
	if x != nil {
		return x.AbnormalConfiguration
	}
	return nil
}

type Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Configuration string `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) Reset() {
	*x = Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) ProtoMessage() {
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 31, 0, 0, 0}
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

type Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                 string                                                                                                     `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction              Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction               `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction" json:"direction,omitempty"`
	TotalAbnormalNumber    uint32                                                                                                     `protobuf:"varint,3,opt,name=total_abnormal_number,json=total-abnormal-number,proto3" json:"total_abnormal_number,omitempty"`
	AbnormalConfigurations *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations `protobuf:"bytes,4,opt,name=abnormal_configurations,json=abnormal-configurations,proto3" json:"abnormal_configurations,omitempty"`
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) Reset() {
	*x = Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 32, 0}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) GetDirection() Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction_INBOUND
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) GetTotalAbnormalNumber() uint32 {
	if x != nil {
		return x.TotalAbnormalNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation) GetAbnormalConfigurations() *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations {
	if x != nil {
		return x.AbnormalConfigurations
	}
	return nil
}

type Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbnormalConfiguration []*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration `protobuf:"bytes,1,rep,name=abnormal_configuration,json=abnormal-configuration,proto3" json:"abnormal_configuration,omitempty"`
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations) Reset() {
	*x = Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 32, 0, 0}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations) GetAbnormalConfiguration() []*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration {
	if x != nil {
		return x.AbnormalConfiguration
	}
	return nil
}

type Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Configuration string `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) Reset() {
	*x = Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 32, 0, 0, 0}
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

type Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                 string                                                                                           `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction              Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction               `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction" json:"direction,omitempty"`
	TotalAbnormalNumber    uint32                                                                                           `protobuf:"varint,3,opt,name=total_abnormal_number,json=total-abnormal-number,proto3" json:"total_abnormal_number,omitempty"`
	AbnormalConfigurations *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations `protobuf:"bytes,4,opt,name=abnormal_configurations,json=abnormal-configurations,proto3" json:"abnormal_configurations,omitempty"`
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) Reset() {
	*x = Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 33, 0}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) GetDirection() Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction_INBOUND
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) GetTotalAbnormalNumber() uint32 {
	if x != nil {
		return x.TotalAbnormalNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation) GetAbnormalConfigurations() *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations {
	if x != nil {
		return x.AbnormalConfigurations
	}
	return nil
}

type Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbnormalConfiguration []*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration `protobuf:"bytes,1,rep,name=abnormal_configuration,json=abnormal-configuration,proto3" json:"abnormal_configuration,omitempty"`
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations) Reset() {
	*x = Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 33, 0, 0}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations) GetAbnormalConfiguration() []*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration {
	if x != nil {
		return x.AbnormalConfiguration
	}
	return nil
}

type Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interface-name,proto3" json:"interface_name,omitempty"`
	Configuration string `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) Reset() {
	*x = Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) ProtoMessage() {
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 33, 0, 0, 0}
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

type Qos_GlobalQuery_UserQueueResources_UserQueueResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          string                                                         `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction       Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction" json:"direction,omitempty"`
	TmType          string                                                         `protobuf:"bytes,3,opt,name=tm_type,json=tm-type,proto3" json:"tm_type,omitempty"`
	ResourcePool    string                                                         `protobuf:"bytes,4,opt,name=resource_pool,json=resource-pool,proto3" json:"resource_pool,omitempty"`
	UsedIdResource  string                                                         `protobuf:"bytes,5,opt,name=used_id_resource,json=used-id-resource,proto3" json:"used_id_resource,omitempty"`
	FreeIdResource  string                                                         `protobuf:"bytes,6,opt,name=free_id_resource,json=free-id-resource,proto3" json:"free_id_resource,omitempty"`
	UsedCirResource string                                                         `protobuf:"bytes,7,opt,name=used_cir_resource,json=used-cir-resource,proto3" json:"used_cir_resource,omitempty"`
	UsedPirResource string                                                         `protobuf:"bytes,8,opt,name=used_pir_resource,json=used-pir-resource,proto3" json:"used_pir_resource,omitempty"`
	FreeCirResource string                                                         `protobuf:"bytes,9,opt,name=free_cir_resource,json=free-cir-resource,proto3" json:"free_cir_resource,omitempty"`
	FreePirResource string                                                         `protobuf:"bytes,10,opt,name=free_pir_resource,json=free-pir-resource,proto3" json:"free_pir_resource,omitempty"`
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) Reset() {
	*x = Qos_GlobalQuery_UserQueueResources_UserQueueResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_UserQueueResources_UserQueueResource) ProtoMessage() {}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_UserQueueResources_UserQueueResource.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_UserQueueResources_UserQueueResource) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 34, 0}
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetDirection() Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction_INBOUND
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetTmType() string {
	if x != nil {
		return x.TmType
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetResourcePool() string {
	if x != nil {
		return x.ResourcePool
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetUsedIdResource() string {
	if x != nil {
		return x.UsedIdResource
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetFreeIdResource() string {
	if x != nil {
		return x.FreeIdResource
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetUsedCirResource() string {
	if x != nil {
		return x.UsedCirResource
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetUsedPirResource() string {
	if x != nil {
		return x.UsedPirResource
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetFreeCirResource() string {
	if x != nil {
		return x.FreeCirResource
	}
	return ""
}

func (x *Qos_GlobalQuery_UserQueueResources_UserQueueResource) GetFreePirResource() string {
	if x != nil {
		return x.FreePirResource
	}
	return ""
}

type Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSlotId        string                                                                                  `protobuf:"bytes,1,opt,name=source_slot_id,json=source-slot-id,proto3" json:"source_slot_id,omitempty"`
	DestinationSlotId   string                                                                                  `protobuf:"bytes,2,opt,name=destination_slot_id,json=destination-slot-id,proto3" json:"destination_slot_id,omitempty"`
	CosValueType        Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType `protobuf:"varint,3,opt,name=cos_value_type,json=cos-value-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType" json:"cos_value_type,omitempty"`
	SourceTmNumber      uint32                                                                                  `protobuf:"varint,4,opt,name=source_tm_number,json=source-tm-number,proto3" json:"source_tm_number,omitempty"`
	DestinationTmNumber uint32                                                                                  `protobuf:"varint,5,opt,name=destination_tm_number,json=destination-tm-number,proto3" json:"destination_tm_number,omitempty"`
	PassPackets         uint64                                                                                  `protobuf:"varint,6,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes           uint64                                                                                  `protobuf:"varint,7,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DiscardPackets      uint64                                                                                  `protobuf:"varint,8,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	DiscardBytes        uint64                                                                                  `protobuf:"varint,9,opt,name=discard_bytes,json=discard-bytes,proto3" json:"discard_bytes,omitempty"`
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) Reset() {
	*x = Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 35, 0}
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetSourceSlotId() string {
	if x != nil {
		return x.SourceSlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetDestinationSlotId() string {
	if x != nil {
		return x.DestinationSlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetCosValueType() Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType {
	if x != nil {
		return x.CosValueType
	}
	return Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType_BE
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetSourceTmNumber() uint32 {
	if x != nil {
		return x.SourceTmNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetDestinationTmNumber() uint32 {
	if x != nil {
		return x.DestinationTmNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetDiscardPackets() uint64 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics) GetDiscardBytes() uint64 {
	if x != nil {
		return x.DiscardBytes
	}
	return 0
}

type Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSlotId        string                                                                                      `protobuf:"bytes,1,opt,name=source_slot_id,json=source-slot-id,proto3" json:"source_slot_id,omitempty"`
	CosValueType        Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType `protobuf:"varint,2,opt,name=cos_value_type,json=cos-value-type,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType" json:"cos_value_type,omitempty"`
	SourceTmNumber      uint32                                                                                      `protobuf:"varint,3,opt,name=source_tm_number,json=source-tm-number,proto3" json:"source_tm_number,omitempty"`
	DestinationTmNumber uint32                                                                                      `protobuf:"varint,4,opt,name=destination_tm_number,json=destination-tm-number,proto3" json:"destination_tm_number,omitempty"`
	PassPackets         uint64                                                                                      `protobuf:"varint,5,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes           uint64                                                                                      `protobuf:"varint,6,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	DiscardPackets      uint64                                                                                      `protobuf:"varint,7,opt,name=discard_packets,json=discard-packets,proto3" json:"discard_packets,omitempty"`
	DiscardBytes        uint64                                                                                      `protobuf:"varint,8,opt,name=discard_bytes,json=discard-bytes,proto3" json:"discard_bytes,omitempty"`
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) Reset() {
	*x = Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) ProtoMessage() {
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 36, 0}
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetSourceSlotId() string {
	if x != nil {
		return x.SourceSlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetCosValueType() Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType {
	if x != nil {
		return x.CosValueType
	}
	return Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType_BE
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetSourceTmNumber() uint32 {
	if x != nil {
		return x.SourceTmNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetDestinationTmNumber() uint32 {
	if x != nil {
		return x.DestinationTmNumber
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetDiscardPackets() uint64 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics) GetDiscardBytes() uint64 {
	if x != nil {
		return x.DiscardBytes
	}
	return 0
}

type Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId             string                                                                        `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	ServiceClass       Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass `protobuf:"varint,2,opt,name=service_class,json=service-class,proto3,enum=huaweiV8R12_qos.Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass" json:"service_class,omitempty"`
	PassPackets        uint64                                                                        `protobuf:"varint,3,opt,name=pass_packets,json=pass-packets,proto3" json:"pass_packets,omitempty"`
	PassBytes          uint64                                                                        `protobuf:"varint,4,opt,name=pass_bytes,json=pass-bytes,proto3" json:"pass_bytes,omitempty"`
	PassPacketRate     uint64                                                                        `protobuf:"varint,5,opt,name=pass_packet_rate,json=pass-packet-rate,proto3" json:"pass_packet_rate,omitempty"`
	PassByteRate       uint64                                                                        `protobuf:"varint,6,opt,name=pass_byte_rate,json=pass-byte-rate,proto3" json:"pass_byte_rate,omitempty"`
	DropPackets        uint64                                                                        `protobuf:"varint,7,opt,name=drop_packets,json=drop-packets,proto3" json:"drop_packets,omitempty"`
	DropTailPackets    uint64                                                                        `protobuf:"varint,8,opt,name=drop_tail_packets,json=drop-tail-packets,proto3" json:"drop_tail_packets,omitempty"`
	DropWredPackets    uint64                                                                        `protobuf:"varint,9,opt,name=drop_wred_packets,json=drop-wred-packets,proto3" json:"drop_wred_packets,omitempty"`
	DropBytes          uint64                                                                        `protobuf:"varint,10,opt,name=drop_bytes,json=drop-bytes,proto3" json:"drop_bytes,omitempty"`
	DropTailBytes      uint64                                                                        `protobuf:"varint,11,opt,name=drop_tail_bytes,json=drop-tail-bytes,proto3" json:"drop_tail_bytes,omitempty"`
	DropWredBytes      uint64                                                                        `protobuf:"varint,12,opt,name=drop_wred_bytes,json=drop-wred-bytes,proto3" json:"drop_wred_bytes,omitempty"`
	DropPacketRate     uint64                                                                        `protobuf:"varint,13,opt,name=drop_packet_rate,json=drop-packet-rate,proto3" json:"drop_packet_rate,omitempty"`
	DropTailPacketRate uint64                                                                        `protobuf:"varint,14,opt,name=drop_tail_packet_rate,json=drop-tail-packet-rate,proto3" json:"drop_tail_packet_rate,omitempty"`
	DropWredPacketRate uint64                                                                        `protobuf:"varint,15,opt,name=drop_wred_packet_rate,json=drop-wred-packet-rate,proto3" json:"drop_wred_packet_rate,omitempty"`
	DropByteRate       uint64                                                                        `protobuf:"varint,16,opt,name=drop_byte_rate,json=drop-byte-rate,proto3" json:"drop_byte_rate,omitempty"`
	DropTailByteRate   uint64                                                                        `protobuf:"varint,17,opt,name=drop_tail_byte_rate,json=drop-tail-byte-rate,proto3" json:"drop_tail_byte_rate,omitempty"`
	DropWredByteRate   uint64                                                                        `protobuf:"varint,18,opt,name=drop_wred_byte_rate,json=drop-wred-byte-rate,proto3" json:"drop_wred_byte_rate,omitempty"`
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) Reset() {
	*x = Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 37, 0}
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetServiceClass() Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass {
	if x != nil {
		return x.ServiceClass
	}
	return Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass_BE
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetPassPackets() uint64 {
	if x != nil {
		return x.PassPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetPassBytes() uint64 {
	if x != nil {
		return x.PassBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetPassPacketRate() uint64 {
	if x != nil {
		return x.PassPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetPassByteRate() uint64 {
	if x != nil {
		return x.PassByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropTailPackets() uint64 {
	if x != nil {
		return x.DropTailPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropWredPackets() uint64 {
	if x != nil {
		return x.DropWredPackets
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropTailBytes() uint64 {
	if x != nil {
		return x.DropTailBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropWredBytes() uint64 {
	if x != nil {
		return x.DropWredBytes
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropPacketRate() uint64 {
	if x != nil {
		return x.DropPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropTailPacketRate() uint64 {
	if x != nil {
		return x.DropTailPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropWredPacketRate() uint64 {
	if x != nil {
		return x.DropWredPacketRate
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropByteRate() uint64 {
	if x != nil {
		return x.DropByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropTailByteRate() uint64 {
	if x != nil {
		return x.DropTailByteRate
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics) GetDropWredByteRate() uint64 {
	if x != nil {
		return x.DropWredByteRate
	}
	return 0
}

type Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                  string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	TmId                    uint32 `protobuf:"varint,2,opt,name=tm_id,json=tm-id,proto3" json:"tm_id,omitempty"`
	ChannelId               uint32 `protobuf:"varint,3,opt,name=channel_id,json=channel-id,proto3" json:"channel_id,omitempty"`
	ChannelProfileName      string `protobuf:"bytes,4,opt,name=channel_profile_name,json=channel-profile-name,proto3" json:"channel_profile_name,omitempty"`
	SlotConfiguredBandwidth uint32 `protobuf:"varint,5,opt,name=slot_configured_bandwidth,json=slot-configured-bandwidth,proto3" json:"slot_configured_bandwidth,omitempty"`
	SlotRealBandwidth       uint32 `protobuf:"varint,6,opt,name=slot_real_bandwidth,json=slot-real-bandwidth,proto3" json:"slot_real_bandwidth,omitempty"`
	SlotQuantity            uint32 `protobuf:"varint,7,opt,name=slot_quantity,json=slot-quantity,proto3" json:"slot_quantity,omitempty"`
	SlotMaxQuantity         uint32 `protobuf:"varint,8,opt,name=slot_max_quantity,json=slot-max-quantity,proto3" json:"slot_max_quantity,omitempty"`
	BandwidthPool_0         uint32 `protobuf:"varint,9,opt,name=bandwidth_pool_0,json=bandwidth-pool-0,proto3" json:"bandwidth_pool_0,omitempty"`
	BandwidthPool_1         uint32 `protobuf:"varint,10,opt,name=bandwidth_pool_1,json=bandwidth-pool-1,proto3" json:"bandwidth_pool_1,omitempty"`
	UsedQuantityPool_0      uint32 `protobuf:"varint,11,opt,name=used_quantity_pool_0,json=used-quantity-pool-0,proto3" json:"used_quantity_pool_0,omitempty"`
	FreeQuantityPool_0      uint32 `protobuf:"varint,12,opt,name=free_quantity_pool_0,json=free-quantity-pool-0,proto3" json:"free_quantity_pool_0,omitempty"`
	UsedQuantityPool_1      uint32 `protobuf:"varint,13,opt,name=used_quantity_pool_1,json=used-quantity-pool-1,proto3" json:"used_quantity_pool_1,omitempty"`
	FreeQuantityPool_1      uint32 `protobuf:"varint,14,opt,name=free_quantity_pool_1,json=free-quantity-pool-1,proto3" json:"free_quantity_pool_1,omitempty"`
	UsedPirPool_0           uint32 `protobuf:"varint,15,opt,name=used_pir_pool_0,json=used-pir-pool-0,proto3" json:"used_pir_pool_0,omitempty"`
	FreePirPool_0           uint32 `protobuf:"varint,16,opt,name=free_pir_pool_0,json=free-pir-pool-0,proto3" json:"free_pir_pool_0,omitempty"`
	UsedBanknotePool_0      uint32 `protobuf:"varint,17,opt,name=used_banknote_pool_0,json=used-banknote-pool-0,proto3" json:"used_banknote_pool_0,omitempty"`
	FreeBanknotePool_0      uint32 `protobuf:"varint,18,opt,name=free_banknote_pool_0,json=free-banknote-pool-0,proto3" json:"free_banknote_pool_0,omitempty"`
	UsedPirPool_1           uint32 `protobuf:"varint,19,opt,name=used_pir_pool_1,json=used-pir-pool-1,proto3" json:"used_pir_pool_1,omitempty"`
	FreePirPool_1           uint32 `protobuf:"varint,20,opt,name=free_pir_pool_1,json=free-pir-pool-1,proto3" json:"free_pir_pool_1,omitempty"`
	UsedBanknotePool_1      uint32 `protobuf:"varint,21,opt,name=used_banknote_pool_1,json=used-banknote-pool-1,proto3" json:"used_banknote_pool_1,omitempty"`
	FreeBanknotePool_1      uint32 `protobuf:"varint,22,opt,name=free_banknote_pool_1,json=free-banknote-pool-1,proto3" json:"free_banknote_pool_1,omitempty"`
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) Reset() {
	*x = Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) ProtoMessage() {}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics.ProtoReflect.Descriptor instead.
func (*Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 4, 38, 0}
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetTmId() uint32 {
	if x != nil {
		return x.TmId
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetChannelProfileName() string {
	if x != nil {
		return x.ChannelProfileName
	}
	return ""
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetSlotConfiguredBandwidth() uint32 {
	if x != nil {
		return x.SlotConfiguredBandwidth
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetSlotRealBandwidth() uint32 {
	if x != nil {
		return x.SlotRealBandwidth
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetSlotQuantity() uint32 {
	if x != nil {
		return x.SlotQuantity
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetSlotMaxQuantity() uint32 {
	if x != nil {
		return x.SlotMaxQuantity
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetBandwidthPool_0() uint32 {
	if x != nil {
		return x.BandwidthPool_0
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetBandwidthPool_1() uint32 {
	if x != nil {
		return x.BandwidthPool_1
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetUsedQuantityPool_0() uint32 {
	if x != nil {
		return x.UsedQuantityPool_0
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetFreeQuantityPool_0() uint32 {
	if x != nil {
		return x.FreeQuantityPool_0
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetUsedQuantityPool_1() uint32 {
	if x != nil {
		return x.UsedQuantityPool_1
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetFreeQuantityPool_1() uint32 {
	if x != nil {
		return x.FreeQuantityPool_1
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetUsedPirPool_0() uint32 {
	if x != nil {
		return x.UsedPirPool_0
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetFreePirPool_0() uint32 {
	if x != nil {
		return x.FreePirPool_0
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetUsedBanknotePool_0() uint32 {
	if x != nil {
		return x.UsedBanknotePool_0
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetFreeBanknotePool_0() uint32 {
	if x != nil {
		return x.FreeBanknotePool_0
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetUsedPirPool_1() uint32 {
	if x != nil {
		return x.UsedPirPool_1
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetFreePirPool_1() uint32 {
	if x != nil {
		return x.FreePirPool_1
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetUsedBanknotePool_1() uint32 {
	if x != nil {
		return x.UsedBanknotePool_1
	}
	return 0
}

func (x *Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics) GetFreeBanknotePool_1() uint32 {
	if x != nil {
		return x.FreeBanknotePool_1
	}
	return 0
}

type Qos_Qppb_LocalPolicys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPolicy []*Qos_Qppb_LocalPolicys_LocalPolicy `protobuf:"bytes,1,rep,name=local_policy,json=local-policy,proto3" json:"local_policy,omitempty"`
}

func (x *Qos_Qppb_LocalPolicys) Reset() {
	*x = Qos_Qppb_LocalPolicys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_LocalPolicys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_LocalPolicys) ProtoMessage() {}

func (x *Qos_Qppb_LocalPolicys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_LocalPolicys.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_LocalPolicys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Qos_Qppb_LocalPolicys) GetLocalPolicy() []*Qos_Qppb_LocalPolicys_LocalPolicy {
	if x != nil {
		return x.LocalPolicy
	}
	return nil
}

type Qos_Qppb_QueryPolicys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryPolicy []*Qos_Qppb_QueryPolicys_QueryPolicy `protobuf:"bytes,1,rep,name=query_policy,json=query-policy,proto3" json:"query_policy,omitempty"`
}

func (x *Qos_Qppb_QueryPolicys) Reset() {
	*x = Qos_Qppb_QueryPolicys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_QueryPolicys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_QueryPolicys) ProtoMessage() {}

func (x *Qos_Qppb_QueryPolicys) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_QueryPolicys.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_QueryPolicys) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *Qos_Qppb_QueryPolicys) GetQueryPolicy() []*Qos_Qppb_QueryPolicys_QueryPolicy {
	if x != nil {
		return x.QueryPolicy
	}
	return nil
}

type Qos_Qppb_QueryStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryStatistic []*Qos_Qppb_QueryStatistics_QueryStatistic `protobuf:"bytes,1,rep,name=query_statistic,json=query-statistic,proto3" json:"query_statistic,omitempty"`
}

func (x *Qos_Qppb_QueryStatistics) Reset() {
	*x = Qos_Qppb_QueryStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_QueryStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_QueryStatistics) ProtoMessage() {}

func (x *Qos_Qppb_QueryStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_QueryStatistics.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_QueryStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 2}
}

func (x *Qos_Qppb_QueryStatistics) GetQueryStatistic() []*Qos_Qppb_QueryStatistics_QueryStatistic {
	if x != nil {
		return x.QueryStatistic
	}
	return nil
}

type Qos_Qppb_LocalPolicys_LocalPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName           string                                         `protobuf:"bytes,1,opt,name=policy_name,json=policy-name,proto3" json:"policy_name,omitempty"`
	StatisticEnable      bool                                           `protobuf:"varint,2,opt,name=statistic_enable,json=statistic-enable,proto3" json:"statistic_enable,omitempty"`
	ServiceClassOutbound bool                                           `protobuf:"varint,3,opt,name=service_class_outbound,json=service-class-outbound,proto3" json:"service_class_outbound,omitempty"`
	QosLocalIds          *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds `protobuf:"bytes,4,opt,name=qos_local_ids,json=qos-local-ids,proto3" json:"qos_local_ids,omitempty"`
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy) Reset() {
	*x = Qos_Qppb_LocalPolicys_LocalPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_LocalPolicys_LocalPolicy) ProtoMessage() {}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_LocalPolicys_LocalPolicy.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_LocalPolicys_LocalPolicy) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy) GetStatisticEnable() bool {
	if x != nil {
		return x.StatisticEnable
	}
	return false
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy) GetServiceClassOutbound() bool {
	if x != nil {
		return x.ServiceClassOutbound
	}
	return false
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy) GetQosLocalIds() *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds {
	if x != nil {
		return x.QosLocalIds
	}
	return nil
}

type Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosLocalId []*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId `protobuf:"bytes,1,rep,name=qos_local_id,json=qos-local-id,proto3" json:"qos_local_id,omitempty"`
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds) Reset() {
	*x = Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds) ProtoMessage() {}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 0, 0, 0}
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds) GetQosLocalId() []*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId {
	if x != nil {
		return x.QosLocalId
	}
	return nil
}

type Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalId      uint32 `protobuf:"varint,1,opt,name=local_id,json=local-id,proto3" json:"local_id,omitempty"`
	BehaviorName string `protobuf:"bytes,2,opt,name=behavior_name,json=behavior-name,proto3" json:"behavior_name,omitempty"`
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId) Reset() {
	*x = Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId) ProtoMessage() {}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 0, 0, 0, 0}
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId) GetBehaviorName() string {
	if x != nil {
		return x.BehaviorName
	}
	return ""
}

type Qos_Qppb_QueryPolicys_QueryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName       string                                      `protobuf:"bytes,1,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
	Direction    Qos_Qppb_QueryPolicys_QueryPolicy_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_Qppb_QueryPolicys_QueryPolicy_Direction" json:"direction,omitempty"`
	PolicyName   string                                      `protobuf:"bytes,3,opt,name=policy_name,json=policy-name,proto3" json:"policy_name,omitempty"`
	LocalId      uint32                                      `protobuf:"varint,4,opt,name=local_id,json=local-id,proto3" json:"local_id,omitempty"`
	BehaviorName string                                      `protobuf:"bytes,5,opt,name=behavior_name,json=behavior-name,proto3" json:"behavior_name,omitempty"`
	State        Qos_Qppb_QueryPolicys_QueryPolicy_State     `protobuf:"varint,6,opt,name=state,proto3,enum=huaweiV8R12_qos.Qos_Qppb_QueryPolicys_QueryPolicy_State" json:"state,omitempty"`
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) Reset() {
	*x = Qos_Qppb_QueryPolicys_QueryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_QueryPolicys_QueryPolicy) ProtoMessage() {}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_QueryPolicys_QueryPolicy.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_QueryPolicys_QueryPolicy) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 1, 0}
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) GetDirection() Qos_Qppb_QueryPolicys_QueryPolicy_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_Qppb_QueryPolicys_QueryPolicy_Direction_INBOUND
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) GetBehaviorName() string {
	if x != nil {
		return x.BehaviorName
	}
	return ""
}

func (x *Qos_Qppb_QueryPolicys_QueryPolicy) GetState() Qos_Qppb_QueryPolicys_QueryPolicy_State {
	if x != nil {
		return x.State
	}
	return Qos_Qppb_QueryPolicys_QueryPolicy_State_ACTIVE
}

type Qos_Qppb_QueryStatistics_QueryStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName                  string                                            `protobuf:"bytes,1,opt,name=if_name,json=if-name,proto3" json:"if_name,omitempty"`
	SlotId                  string                                            `protobuf:"bytes,2,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Direction               Qos_Qppb_QueryStatistics_QueryStatistic_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=huaweiV8R12_qos.Qos_Qppb_QueryStatistics_QueryStatistic_Direction" json:"direction,omitempty"`
	LocalId                 uint32                                            `protobuf:"varint,4,opt,name=local_id,json=local-id,proto3" json:"local_id,omitempty"`
	MatchPackets            uint64                                            `protobuf:"varint,5,opt,name=match_packets,json=match-packets,proto3" json:"match_packets,omitempty"`
	MatchBytes              uint64                                            `protobuf:"varint,6,opt,name=match_bytes,json=match-bytes,proto3" json:"match_bytes,omitempty"`
	MatchPacketsRate        uint64                                            `protobuf:"varint,7,opt,name=match_packets_rate,json=match-packets-rate,proto3" json:"match_packets_rate,omitempty"`
	MatchBytesRate          uint64                                            `protobuf:"varint,8,opt,name=match_bytes_rate,json=match-bytes-rate,proto3" json:"match_bytes_rate,omitempty"`
	PassedCarPackets        uint64                                            `protobuf:"varint,9,opt,name=passed_car_packets,json=passed-car-packets,proto3" json:"passed_car_packets,omitempty"`
	PassedCarBytes          uint64                                            `protobuf:"varint,10,opt,name=passed_car_bytes,json=passed-car-bytes,proto3" json:"passed_car_bytes,omitempty"`
	DroppedCarPackets       uint64                                            `protobuf:"varint,11,opt,name=dropped_car_packets,json=dropped-car-packets,proto3" json:"dropped_car_packets,omitempty"`
	DroppedCarBytes         uint64                                            `protobuf:"varint,12,opt,name=dropped_car_bytes,json=dropped-car-bytes,proto3" json:"dropped_car_bytes,omitempty"`
	PassedCarPacketsRate    uint64                                            `protobuf:"varint,13,opt,name=passed_car_packets_rate,json=passed-car-packets-rate,proto3" json:"passed_car_packets_rate,omitempty"`
	PassedCarBytesRate      uint64                                            `protobuf:"varint,14,opt,name=passed_car_bytes_rate,json=passed-car-bytes-rate,proto3" json:"passed_car_bytes_rate,omitempty"`
	DroppedCarPacketsRate   uint64                                            `protobuf:"varint,15,opt,name=dropped_car_packets_rate,json=dropped-car-packets-rate,proto3" json:"dropped_car_packets_rate,omitempty"`
	DroppedCarBytesRate     uint64                                            `protobuf:"varint,16,opt,name=dropped_car_bytes_rate,json=dropped-car-bytes-rate,proto3" json:"dropped_car_bytes_rate,omitempty"`
	CarGreenPackets         uint64                                            `protobuf:"varint,17,opt,name=car_green_packets,json=car-green-packets,proto3" json:"car_green_packets,omitempty"`
	CarGreenBytes           uint64                                            `protobuf:"varint,18,opt,name=car_green_bytes,json=car-green-bytes,proto3" json:"car_green_bytes,omitempty"`
	CarGreenPacketsRate     uint64                                            `protobuf:"varint,19,opt,name=car_green_packets_rate,json=car-green-packets-rate,proto3" json:"car_green_packets_rate,omitempty"`
	CarGreenBytesRate       uint64                                            `protobuf:"varint,20,opt,name=car_green_bytes_rate,json=car-green-bytes-rate,proto3" json:"car_green_bytes_rate,omitempty"`
	CarYellowPackets        uint64                                            `protobuf:"varint,21,opt,name=car_yellow_packets,json=car-yellow-packets,proto3" json:"car_yellow_packets,omitempty"`
	CarYellowBytes          uint64                                            `protobuf:"varint,22,opt,name=car_yellow_bytes,json=car-yellow-bytes,proto3" json:"car_yellow_bytes,omitempty"`
	CarYellowPacketsRate    uint64                                            `protobuf:"varint,23,opt,name=car_yellow_packets_rate,json=car-yellow-packets-rate,proto3" json:"car_yellow_packets_rate,omitempty"`
	CarYellowBytesRate      uint64                                            `protobuf:"varint,24,opt,name=car_yellow_bytes_rate,json=car-yellow-bytes-rate,proto3" json:"car_yellow_bytes_rate,omitempty"`
	CarRedPackets           uint64                                            `protobuf:"varint,25,opt,name=car_red_packets,json=car-red-packets,proto3" json:"car_red_packets,omitempty"`
	CarRedBytes             uint64                                            `protobuf:"varint,26,opt,name=car_red_bytes,json=car-red-bytes,proto3" json:"car_red_bytes,omitempty"`
	CarRedPacketsRate       uint64                                            `protobuf:"varint,27,opt,name=car_red_packets_rate,json=car-red-packets-rate,proto3" json:"car_red_packets_rate,omitempty"`
	CarRedBytesRate         uint64                                            `protobuf:"varint,28,opt,name=car_red_bytes_rate,json=car-red-bytes-rate,proto3" json:"car_red_bytes_rate,omitempty"`
	PassedSqBePackets       uint64                                            `protobuf:"varint,29,opt,name=passed_sq_be_packets,json=passed-sq-be-packets,proto3" json:"passed_sq_be_packets,omitempty"`
	DroppedSqBePackets      uint64                                            `protobuf:"varint,30,opt,name=dropped_sq_be_packets,json=dropped-sq-be-packets,proto3" json:"dropped_sq_be_packets,omitempty"`
	PassedSqAf1Packets      uint64                                            `protobuf:"varint,31,opt,name=passed_sq_af1_packets,json=passed-sq-af1-packets,proto3" json:"passed_sq_af1_packets,omitempty"`
	DroppedSqAf1Packets     uint64                                            `protobuf:"varint,32,opt,name=dropped_sq_af1_packets,json=dropped-sq-af1-packets,proto3" json:"dropped_sq_af1_packets,omitempty"`
	PassedSqAf2Packets      uint64                                            `protobuf:"varint,33,opt,name=passed_sq_af2_packets,json=passed-sq-af2-packets,proto3" json:"passed_sq_af2_packets,omitempty"`
	DroppedSqAf2Packets     uint64                                            `protobuf:"varint,34,opt,name=dropped_sq_af2_packets,json=dropped-sq-af2-packets,proto3" json:"dropped_sq_af2_packets,omitempty"`
	PassedSqAf3Packets      uint64                                            `protobuf:"varint,35,opt,name=passed_sq_af3_packets,json=passed-sq-af3-packets,proto3" json:"passed_sq_af3_packets,omitempty"`
	DroppedSqAf3Packets     uint64                                            `protobuf:"varint,36,opt,name=dropped_sq_af3_packets,json=dropped-sq-af3-packets,proto3" json:"dropped_sq_af3_packets,omitempty"`
	PassedSqAf4Packets      uint64                                            `protobuf:"varint,37,opt,name=passed_sq_af4_packets,json=passed-sq-af4-packets,proto3" json:"passed_sq_af4_packets,omitempty"`
	DroppedSqAf4Packets     uint64                                            `protobuf:"varint,38,opt,name=dropped_sq_af4_packets,json=dropped-sq-af4-packets,proto3" json:"dropped_sq_af4_packets,omitempty"`
	PassedSqEfPackets       uint64                                            `protobuf:"varint,39,opt,name=passed_sq_ef_packets,json=passed-sq-ef-packets,proto3" json:"passed_sq_ef_packets,omitempty"`
	DroppedSqEfPackets      uint64                                            `protobuf:"varint,40,opt,name=dropped_sq_ef_packets,json=dropped-sq-ef-packets,proto3" json:"dropped_sq_ef_packets,omitempty"`
	PassedSqCs6Packets      uint64                                            `protobuf:"varint,41,opt,name=passed_sq_cs6_packets,json=passed-sq-cs6-packets,proto3" json:"passed_sq_cs6_packets,omitempty"`
	DroppedSqCs6Packets     uint64                                            `protobuf:"varint,42,opt,name=dropped_sq_cs6_packets,json=dropped-sq-cs6-packets,proto3" json:"dropped_sq_cs6_packets,omitempty"`
	PassedSqCs7Packets      uint64                                            `protobuf:"varint,43,opt,name=passed_sq_cs7_packets,json=passed-sq-cs7-packets,proto3" json:"passed_sq_cs7_packets,omitempty"`
	DroppedSqCs7Packets     uint64                                            `protobuf:"varint,44,opt,name=dropped_sq_cs7_packets,json=dropped-sq-cs7-packets,proto3" json:"dropped_sq_cs7_packets,omitempty"`
	PassedSqBeBytes         uint64                                            `protobuf:"varint,45,opt,name=passed_sq_be_bytes,json=passed-sq-be-bytes,proto3" json:"passed_sq_be_bytes,omitempty"`
	DroppedSqBeBytes        uint64                                            `protobuf:"varint,46,opt,name=dropped_sq_be_bytes,json=dropped-sq-be-bytes,proto3" json:"dropped_sq_be_bytes,omitempty"`
	PassedSqAf1Bytes        uint64                                            `protobuf:"varint,47,opt,name=passed_sq_af1_bytes,json=passed-sq-af1-bytes,proto3" json:"passed_sq_af1_bytes,omitempty"`
	DroppedSqAf1Bytes       uint64                                            `protobuf:"varint,48,opt,name=dropped_sq_af1_bytes,json=dropped-sq-af1-bytes,proto3" json:"dropped_sq_af1_bytes,omitempty"`
	PassedSqAf2Bytes        uint64                                            `protobuf:"varint,49,opt,name=passed_sq_af2_bytes,json=passed-sq-af2-bytes,proto3" json:"passed_sq_af2_bytes,omitempty"`
	DroppedSqAf2Bytes       uint64                                            `protobuf:"varint,50,opt,name=dropped_sq_af2_bytes,json=dropped-sq-af2-bytes,proto3" json:"dropped_sq_af2_bytes,omitempty"`
	PassedSqAf3Bytes        uint64                                            `protobuf:"varint,51,opt,name=passed_sq_af3_bytes,json=passed-sq-af3-bytes,proto3" json:"passed_sq_af3_bytes,omitempty"`
	DroppedSqAf3Bytes       uint64                                            `protobuf:"varint,52,opt,name=dropped_sq_af3_bytes,json=dropped-sq-af3-bytes,proto3" json:"dropped_sq_af3_bytes,omitempty"`
	PassedSqAf4Bytes        uint64                                            `protobuf:"varint,53,opt,name=passed_sq_af4_bytes,json=passed-sq-af4-bytes,proto3" json:"passed_sq_af4_bytes,omitempty"`
	DroppedSqAf4Bytes       uint64                                            `protobuf:"varint,54,opt,name=dropped_sq_af4_bytes,json=dropped-sq-af4-bytes,proto3" json:"dropped_sq_af4_bytes,omitempty"`
	PassedSqEfBytes         uint64                                            `protobuf:"varint,55,opt,name=passed_sq_ef_bytes,json=passed-sq-ef-bytes,proto3" json:"passed_sq_ef_bytes,omitempty"`
	DroppedSqEfBytes        uint64                                            `protobuf:"varint,56,opt,name=dropped_sq_ef_bytes,json=dropped-sq-ef-bytes,proto3" json:"dropped_sq_ef_bytes,omitempty"`
	PassedSqCs6Bytes        uint64                                            `protobuf:"varint,57,opt,name=passed_sq_cs6_bytes,json=passed-sq-cs6-bytes,proto3" json:"passed_sq_cs6_bytes,omitempty"`
	DroppedSqCs6Bytes       uint64                                            `protobuf:"varint,58,opt,name=dropped_sq_cs6_bytes,json=dropped-sq-cs6-bytes,proto3" json:"dropped_sq_cs6_bytes,omitempty"`
	PassedSqCs7Bytes        uint64                                            `protobuf:"varint,59,opt,name=passed_sq_cs7_bytes,json=passed-sq-cs7-bytes,proto3" json:"passed_sq_cs7_bytes,omitempty"`
	DroppedSqCs7Bytes       uint64                                            `protobuf:"varint,60,opt,name=dropped_sq_cs7_bytes,json=dropped-sq-cs7-bytes,proto3" json:"dropped_sq_cs7_bytes,omitempty"`
	PassedSqBeBytesRate     uint64                                            `protobuf:"varint,61,opt,name=passed_sq_be_bytes_rate,json=passed-sq-be-bytes-rate,proto3" json:"passed_sq_be_bytes_rate,omitempty"`
	DroppedSqBeBytesRate    uint64                                            `protobuf:"varint,62,opt,name=dropped_sq_be_bytes_rate,json=dropped-sq-be-bytes-rate,proto3" json:"dropped_sq_be_bytes_rate,omitempty"`
	PassedSqAf1BytesRate    uint64                                            `protobuf:"varint,63,opt,name=passed_sq_af1_bytes_rate,json=passed-sq-af1-bytes-rate,proto3" json:"passed_sq_af1_bytes_rate,omitempty"`
	DroppedSqAf1BytesRate   uint64                                            `protobuf:"varint,64,opt,name=dropped_sq_af1_bytes_rate,json=dropped-sq-af1-bytes-rate,proto3" json:"dropped_sq_af1_bytes_rate,omitempty"`
	PassedSqAf2BytesRate    uint64                                            `protobuf:"varint,65,opt,name=passed_sq_af2_bytes_rate,json=passed-sq-af2-bytes-rate,proto3" json:"passed_sq_af2_bytes_rate,omitempty"`
	DroppedSqAf2BytesRate   uint64                                            `protobuf:"varint,66,opt,name=dropped_sq_af2_bytes_rate,json=dropped-sq-af2-bytes-rate,proto3" json:"dropped_sq_af2_bytes_rate,omitempty"`
	PassedSqAf3BytesRate    uint64                                            `protobuf:"varint,67,opt,name=passed_sq_af3_bytes_rate,json=passed-sq-af3-bytes-rate,proto3" json:"passed_sq_af3_bytes_rate,omitempty"`
	DroppedSqAf3BytesRate   uint64                                            `protobuf:"varint,68,opt,name=dropped_sq_af3_bytes_rate,json=dropped-sq-af3-bytes-rate,proto3" json:"dropped_sq_af3_bytes_rate,omitempty"`
	PassedSqAf4BytesRate    uint64                                            `protobuf:"varint,69,opt,name=passed_sq_af4_bytes_rate,json=passed-sq-af4-bytes-rate,proto3" json:"passed_sq_af4_bytes_rate,omitempty"`
	DroppedSqAf4BytesRate   uint64                                            `protobuf:"varint,70,opt,name=dropped_sq_af4_bytes_rate,json=dropped-sq-af4-bytes-rate,proto3" json:"dropped_sq_af4_bytes_rate,omitempty"`
	PassedSqEfBytesRate     uint64                                            `protobuf:"varint,71,opt,name=passed_sq_ef_bytes_rate,json=passed-sq-ef-bytes-rate,proto3" json:"passed_sq_ef_bytes_rate,omitempty"`
	DroppedSqEfBytesRate    uint64                                            `protobuf:"varint,72,opt,name=dropped_sq_ef_bytes_rate,json=dropped-sq-ef-bytes-rate,proto3" json:"dropped_sq_ef_bytes_rate,omitempty"`
	PassedSqCs6BytesRate    uint64                                            `protobuf:"varint,73,opt,name=passed_sq_cs6_bytes_rate,json=passed-sq-cs6-bytes-rate,proto3" json:"passed_sq_cs6_bytes_rate,omitempty"`
	DroppedSqCs6BytesRate   uint64                                            `protobuf:"varint,74,opt,name=dropped_sq_cs6_bytes_rate,json=dropped-sq-cs6-bytes-rate,proto3" json:"dropped_sq_cs6_bytes_rate,omitempty"`
	PassedSqCs7BytesRate    uint64                                            `protobuf:"varint,75,opt,name=passed_sq_cs7_bytes_rate,json=passed-sq-cs7-bytes-rate,proto3" json:"passed_sq_cs7_bytes_rate,omitempty"`
	DroppedSqCs7BytesRate   uint64                                            `protobuf:"varint,76,opt,name=dropped_sq_cs7_bytes_rate,json=dropped-sq-cs7-bytes-rate,proto3" json:"dropped_sq_cs7_bytes_rate,omitempty"`
	PassedSqBePacketsRate   uint64                                            `protobuf:"varint,77,opt,name=passed_sq_be_packets_rate,json=passed-sq-be-packets-rate,proto3" json:"passed_sq_be_packets_rate,omitempty"`
	DroppedSqBePacketsRate  uint64                                            `protobuf:"varint,78,opt,name=dropped_sq_be_packets_rate,json=dropped-sq-be-packets-rate,proto3" json:"dropped_sq_be_packets_rate,omitempty"`
	PassedSqAf1PacketsRate  uint64                                            `protobuf:"varint,79,opt,name=passed_sq_af1_packets_rate,json=passed-sq-af1-packets-rate,proto3" json:"passed_sq_af1_packets_rate,omitempty"`
	DroppedSqAf1PacketsRate uint64                                            `protobuf:"varint,80,opt,name=dropped_sq_af1_packets_rate,json=dropped-sq-af1-packets-rate,proto3" json:"dropped_sq_af1_packets_rate,omitempty"`
	PassedSqAf2PacketsRate  uint64                                            `protobuf:"varint,81,opt,name=passed_sq_af2_packets_rate,json=passed-sq-af2-packets-rate,proto3" json:"passed_sq_af2_packets_rate,omitempty"`
	DroppedSqAf2PacketsRate uint64                                            `protobuf:"varint,82,opt,name=dropped_sq_af2_packets_rate,json=dropped-sq-af2-packets-rate,proto3" json:"dropped_sq_af2_packets_rate,omitempty"`
	PassedSqAf3PacketsRate  uint64                                            `protobuf:"varint,83,opt,name=passed_sq_af3_packets_rate,json=passed-sq-af3-packets-rate,proto3" json:"passed_sq_af3_packets_rate,omitempty"`
	DroppedSqAf3PacketsRate uint64                                            `protobuf:"varint,84,opt,name=dropped_sq_af3_packets_rate,json=dropped-sq-af3-packets-rate,proto3" json:"dropped_sq_af3_packets_rate,omitempty"`
	PassedSqAf4PacketsRate  uint64                                            `protobuf:"varint,85,opt,name=passed_sq_af4_packets_rate,json=passed-sq-af4-packets-rate,proto3" json:"passed_sq_af4_packets_rate,omitempty"`
	DroppedSqAf4PacketsRate uint64                                            `protobuf:"varint,86,opt,name=dropped_sq_af4_packets_rate,json=dropped-sq-af4-packets-rate,proto3" json:"dropped_sq_af4_packets_rate,omitempty"`
	PassedSqEfPacketsRate   uint64                                            `protobuf:"varint,87,opt,name=passed_sq_ef_packets_rate,json=passed-sq-ef-packets-rate,proto3" json:"passed_sq_ef_packets_rate,omitempty"`
	DroppedSqEfPacketsRate  uint64                                            `protobuf:"varint,88,opt,name=dropped_sq_ef_packets_rate,json=dropped-sq-ef-packets-rate,proto3" json:"dropped_sq_ef_packets_rate,omitempty"`
	PassedSqCs6PacketsRate  uint64                                            `protobuf:"varint,89,opt,name=passed_sq_cs6_packets_rate,json=passed-sq-cs6-packets-rate,proto3" json:"passed_sq_cs6_packets_rate,omitempty"`
	DroppedSqCs6PacketsRate uint64                                            `protobuf:"varint,90,opt,name=dropped_sq_cs6_packets_rate,json=dropped-sq-cs6-packets-rate,proto3" json:"dropped_sq_cs6_packets_rate,omitempty"`
	PassedSqCs7PacketsRate  uint64                                            `protobuf:"varint,91,opt,name=passed_sq_cs7_packets_rate,json=passed-sq-cs7-packets-rate,proto3" json:"passed_sq_cs7_packets_rate,omitempty"`
	DroppedSqCs7PacketsRate uint64                                            `protobuf:"varint,92,opt,name=dropped_sq_cs7_packets_rate,json=dropped-sq-cs7-packets-rate,proto3" json:"dropped_sq_cs7_packets_rate,omitempty"`
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) Reset() {
	*x = Qos_Qppb_QueryStatistics_QueryStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_qos_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qos_Qppb_QueryStatistics_QueryStatistic) ProtoMessage() {}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_qos_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qos_Qppb_QueryStatistics_QueryStatistic.ProtoReflect.Descriptor instead.
func (*Qos_Qppb_QueryStatistics_QueryStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_qos_proto_rawDescGZIP(), []int{0, 5, 2, 0}
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDirection() Qos_Qppb_QueryStatistics_QueryStatistic_Direction {
	if x != nil {
		return x.Direction
	}
	return Qos_Qppb_QueryStatistics_QueryStatistic_INVALID_ENUM_VALUE_Direction
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetMatchPackets() uint64 {
	if x != nil {
		return x.MatchPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetMatchBytes() uint64 {
	if x != nil {
		return x.MatchBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetMatchPacketsRate() uint64 {
	if x != nil {
		return x.MatchPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetMatchBytesRate() uint64 {
	if x != nil {
		return x.MatchBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedCarPackets() uint64 {
	if x != nil {
		return x.PassedCarPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedCarBytes() uint64 {
	if x != nil {
		return x.PassedCarBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedCarPackets() uint64 {
	if x != nil {
		return x.DroppedCarPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedCarBytes() uint64 {
	if x != nil {
		return x.DroppedCarBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedCarPacketsRate() uint64 {
	if x != nil {
		return x.PassedCarPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedCarBytesRate() uint64 {
	if x != nil {
		return x.PassedCarBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedCarPacketsRate() uint64 {
	if x != nil {
		return x.DroppedCarPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedCarBytesRate() uint64 {
	if x != nil {
		return x.DroppedCarBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarGreenPackets() uint64 {
	if x != nil {
		return x.CarGreenPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarGreenBytes() uint64 {
	if x != nil {
		return x.CarGreenBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarGreenPacketsRate() uint64 {
	if x != nil {
		return x.CarGreenPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarGreenBytesRate() uint64 {
	if x != nil {
		return x.CarGreenBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarYellowPackets() uint64 {
	if x != nil {
		return x.CarYellowPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarYellowBytes() uint64 {
	if x != nil {
		return x.CarYellowBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarYellowPacketsRate() uint64 {
	if x != nil {
		return x.CarYellowPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarYellowBytesRate() uint64 {
	if x != nil {
		return x.CarYellowBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarRedPackets() uint64 {
	if x != nil {
		return x.CarRedPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarRedBytes() uint64 {
	if x != nil {
		return x.CarRedBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarRedPacketsRate() uint64 {
	if x != nil {
		return x.CarRedPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetCarRedBytesRate() uint64 {
	if x != nil {
		return x.CarRedBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqBePackets() uint64 {
	if x != nil {
		return x.PassedSqBePackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqBePackets() uint64 {
	if x != nil {
		return x.DroppedSqBePackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf1Packets() uint64 {
	if x != nil {
		return x.PassedSqAf1Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf1Packets() uint64 {
	if x != nil {
		return x.DroppedSqAf1Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf2Packets() uint64 {
	if x != nil {
		return x.PassedSqAf2Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf2Packets() uint64 {
	if x != nil {
		return x.DroppedSqAf2Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf3Packets() uint64 {
	if x != nil {
		return x.PassedSqAf3Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf3Packets() uint64 {
	if x != nil {
		return x.DroppedSqAf3Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf4Packets() uint64 {
	if x != nil {
		return x.PassedSqAf4Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf4Packets() uint64 {
	if x != nil {
		return x.DroppedSqAf4Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqEfPackets() uint64 {
	if x != nil {
		return x.PassedSqEfPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqEfPackets() uint64 {
	if x != nil {
		return x.DroppedSqEfPackets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs6Packets() uint64 {
	if x != nil {
		return x.PassedSqCs6Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs6Packets() uint64 {
	if x != nil {
		return x.DroppedSqCs6Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs7Packets() uint64 {
	if x != nil {
		return x.PassedSqCs7Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs7Packets() uint64 {
	if x != nil {
		return x.DroppedSqCs7Packets
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqBeBytes() uint64 {
	if x != nil {
		return x.PassedSqBeBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqBeBytes() uint64 {
	if x != nil {
		return x.DroppedSqBeBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf1Bytes() uint64 {
	if x != nil {
		return x.PassedSqAf1Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf1Bytes() uint64 {
	if x != nil {
		return x.DroppedSqAf1Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf2Bytes() uint64 {
	if x != nil {
		return x.PassedSqAf2Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf2Bytes() uint64 {
	if x != nil {
		return x.DroppedSqAf2Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf3Bytes() uint64 {
	if x != nil {
		return x.PassedSqAf3Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf3Bytes() uint64 {
	if x != nil {
		return x.DroppedSqAf3Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf4Bytes() uint64 {
	if x != nil {
		return x.PassedSqAf4Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf4Bytes() uint64 {
	if x != nil {
		return x.DroppedSqAf4Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqEfBytes() uint64 {
	if x != nil {
		return x.PassedSqEfBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqEfBytes() uint64 {
	if x != nil {
		return x.DroppedSqEfBytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs6Bytes() uint64 {
	if x != nil {
		return x.PassedSqCs6Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs6Bytes() uint64 {
	if x != nil {
		return x.DroppedSqCs6Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs7Bytes() uint64 {
	if x != nil {
		return x.PassedSqCs7Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs7Bytes() uint64 {
	if x != nil {
		return x.DroppedSqCs7Bytes
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqBeBytesRate() uint64 {
	if x != nil {
		return x.PassedSqBeBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqBeBytesRate() uint64 {
	if x != nil {
		return x.DroppedSqBeBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf1BytesRate() uint64 {
	if x != nil {
		return x.PassedSqAf1BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf1BytesRate() uint64 {
	if x != nil {
		return x.DroppedSqAf1BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf2BytesRate() uint64 {
	if x != nil {
		return x.PassedSqAf2BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf2BytesRate() uint64 {
	if x != nil {
		return x.DroppedSqAf2BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf3BytesRate() uint64 {
	if x != nil {
		return x.PassedSqAf3BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf3BytesRate() uint64 {
	if x != nil {
		return x.DroppedSqAf3BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf4BytesRate() uint64 {
	if x != nil {
		return x.PassedSqAf4BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf4BytesRate() uint64 {
	if x != nil {
		return x.DroppedSqAf4BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqEfBytesRate() uint64 {
	if x != nil {
		return x.PassedSqEfBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqEfBytesRate() uint64 {
	if x != nil {
		return x.DroppedSqEfBytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs6BytesRate() uint64 {
	if x != nil {
		return x.PassedSqCs6BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs6BytesRate() uint64 {
	if x != nil {
		return x.DroppedSqCs6BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs7BytesRate() uint64 {
	if x != nil {
		return x.PassedSqCs7BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs7BytesRate() uint64 {
	if x != nil {
		return x.DroppedSqCs7BytesRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqBePacketsRate() uint64 {
	if x != nil {
		return x.PassedSqBePacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqBePacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqBePacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf1PacketsRate() uint64 {
	if x != nil {
		return x.PassedSqAf1PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf1PacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqAf1PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf2PacketsRate() uint64 {
	if x != nil {
		return x.PassedSqAf2PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf2PacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqAf2PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf3PacketsRate() uint64 {
	if x != nil {
		return x.PassedSqAf3PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf3PacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqAf3PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqAf4PacketsRate() uint64 {
	if x != nil {
		return x.PassedSqAf4PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqAf4PacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqAf4PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqEfPacketsRate() uint64 {
	if x != nil {
		return x.PassedSqEfPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqEfPacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqEfPacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs6PacketsRate() uint64 {
	if x != nil {
		return x.PassedSqCs6PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs6PacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqCs6PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetPassedSqCs7PacketsRate() uint64 {
	if x != nil {
		return x.PassedSqCs7PacketsRate
	}
	return 0
}

func (x *Qos_Qppb_QueryStatistics_QueryStatistic) GetDroppedSqCs7PacketsRate() uint64 {
	if x != nil {
		return x.DroppedSqCs7PacketsRate
	}
	return 0
}

var File_huaweiV8R12_qos_proto protoreflect.FileDescriptor

var file_huaweiV8R12_qos_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x71, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x22, 0xe6, 0xee, 0x09, 0x0a, 0x03, 0x51, 0x6f,
	0x73, 0x12, 0x47, 0x0a, 0x0d, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57,
	0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x65,
	0x64, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x18, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x47,
	0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a,
	0x04, 0x71, 0x70, 0x70, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x52, 0x04, 0x71, 0x70, 0x70, 0x62, 0x1a, 0xcf, 0x15, 0x0a,
	0x0c, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x73, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x77, 0x72, 0x65, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x73, 0x52,
	0x05, 0x77, 0x72, 0x65, 0x64, 0x73, 0x1a, 0xc9, 0x05, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x57,
	0x72, 0x65, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72,
	0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x57,
	0x72, 0x65, 0x64, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x52, 0x09, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x1a, 0xe7, 0x04, 0x0a, 0x08, 0x46, 0x6c, 0x6f,
	0x77, 0x57, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x0b, 0x77,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x52, 0x0b, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0xc1,
	0x03, 0x0a, 0x0a, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x69, 0x0a,
	0x0a, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x77, 0x72,
	0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xc7, 0x02, 0x0a, 0x09, 0x57, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65,
	0x64, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x77,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0xab, 0x0a, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x73,
	0x12, 0x52, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x77, 0x72, 0x65, 0x64, 0x1a, 0xc9, 0x09, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x0b, 0x77, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72,
	0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x77,
	0x72, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x11, 0x77, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65,
	0x64, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x11, 0x77, 0x72, 0x65,
	0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xc1,
	0x03, 0x0a, 0x0a, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x69, 0x0a,
	0x0a, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x77, 0x72,
	0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xc7, 0x02, 0x0a, 0x09, 0x57, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65,
	0x64, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x77,
	0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0xeb, 0x03, 0x0a, 0x0f, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x10, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd6, 0x02, 0x0a, 0x0e, 0x57, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x72, 0x65, 0x64, 0x2e,
	0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x57, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x77, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x68, 0x69, 0x67, 0x68, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x1a, 0xeb, 0x03, 0x0a, 0x05, 0x57, 0x72, 0x65, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x77, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57,
	0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x52, 0x04, 0x77, 0x72, 0x65, 0x64, 0x1a, 0x9f, 0x03, 0x0a,
	0x04, 0x57, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0xfd,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x57,
	0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x72, 0x65, 0x64,
	0x73, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xa1, 0x01, 0x0a, 0x05, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x84,
	0x90, 0x03, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x12, 0x6a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6f, 0x0a,
	0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x34, 0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2d, 0x34, 0x63, 0x6f, 0x73, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x72,
	0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x14, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x67, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x52, 0x0e,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0x6f,
	0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x13, 0x71, 0x6f, 0x73, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x63, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xab, 0x8f, 0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x0a, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xb9, 0x8e, 0x01, 0x0a, 0x09, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x0e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x7e, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x73, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x2d, 0x69, 0x64, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x2d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x1b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x1b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x2d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x14, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x46, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x52, 0x14, 0x66, 0x6f, 0x75, 0x72, 0x2d, 0x63, 0x6f, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x14, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x17, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x1c, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1c, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x15, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2d, 0x63, 0x6f, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x1a, 0xf0, 0x1d, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x1a, 0x80, 0x1d, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x77,
	0x72, 0x65, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x90, 0x19, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x7c,
	0x0a, 0x08, 0x63, 0x69, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x63, 0x69, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xe5, 0x0d, 0x0a,
	0x0b, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x97, 0x01, 0x0a,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x71, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73,
	0x12, 0x91, 0x01, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x77,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x4c, 0x6f, 0x77, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x2d, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x76, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xe5,
	0x06, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0xb0, 0x01, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x03, 0x63, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x7a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x03, 0x63, 0x61,
	0x72, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x72,
	0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x40, 0x0a, 0x0e, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x0a, 0x03, 0x43,
	0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x34, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x6f, 0x77, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x77, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22,
	0x43, 0x0a, 0x09, 0x4c, 0x6f, 0x77, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x4c, 0x6f, 0x77, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x6f, 0x77, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0x90, 0x09, 0x0a, 0x07, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x9e, 0x01, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11,
	0x63, 0x69, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x70, 0x69, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x50, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x11, 0x70, 0x69, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x72, 0x2d, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x63, 0x62, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x62, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x62, 0x73, 0x12, 0x96,
	0x01, 0x0a, 0x0e, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xd5, 0x03, 0x0a, 0x0d, 0x43, 0x69, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x63, 0x69,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x52, 0x03, 0x63, 0x69, 0x72,
	0x12, 0x9b, 0x01, 0x0a, 0x0b, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x41,
	0x0a, 0x03, 0x43, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x69, 0x72, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x5c, 0x0a, 0x0a, 0x43, 0x69, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x69, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0x29, 0x0a, 0x0f, 0x43, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x22, 0x5b, 0x0a, 0x0f, 0x50, 0x69,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x69, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xb6, 0x04, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x11,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x8f, 0x03,
	0x0a, 0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45,
	0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a,
	0x96, 0x0f, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x80, 0x0e, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x6e, 0x0a, 0x02, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x65, 0x52, 0x02, 0x62, 0x65, 0x12, 0x71, 0x0a, 0x03, 0x61, 0x66, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x66, 0x31, 0x52, 0x03, 0x61, 0x66, 0x31, 0x12, 0x71, 0x0a, 0x03, 0x61, 0x66, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x66, 0x32, 0x52, 0x03, 0x61, 0x66, 0x32, 0x12, 0x71, 0x0a, 0x03,
	0x61, 0x66, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x66, 0x33, 0x52, 0x03, 0x61, 0x66, 0x33, 0x12,
	0x71, 0x0a, 0x03, 0x61, 0x66, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x66, 0x34, 0x52, 0x03, 0x61,
	0x66, 0x34, 0x12, 0x6e, 0x0a, 0x02, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x66, 0x52, 0x02,
	0x65, 0x66, 0x12, 0x71, 0x0a, 0x03, 0x63, 0x73, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x73, 0x36,
	0x52, 0x03, 0x63, 0x73, 0x36, 0x12, 0x71, 0x0a, 0x03, 0x63, 0x73, 0x37, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x73, 0x37, 0x52, 0x03, 0x63, 0x73, 0x37, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x69, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x62, 0x73, 0x22, 0x1f, 0x0a, 0x02, 0x42, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x65, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x65, 0x5f, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x66, 0x31, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x31, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x31, 0x5f, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66, 0x32, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x66, 0x32, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x32, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x32, 0x5f, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x66, 0x33, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x33, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x33, 0x5f, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x66, 0x34, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x34, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x34, 0x5f, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x08, 0x22, 0x3a, 0x0a, 0x02, 0x45, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x45, 0x66, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x66, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x66, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x3e, 0x0a, 0x03, 0x43, 0x73, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x36,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x36, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x73, 0x36, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x3e, 0x0a, 0x03, 0x43, 0x73, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x37,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x37, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x73, 0x37, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x86, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x4c, 0x50, 0x51, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x1a, 0x84, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x8b, 0x01, 0x0a,
	0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d,
	0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x64, 0x1a, 0xe2, 0x0f, 0x0a, 0x0e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x80, 0x01,
	0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x66, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x2d, 0x69, 0x64,
	0x12, 0x72, 0x0a, 0x02, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x2e, 0x42, 0x65,
	0x52, 0x02, 0x62, 0x65, 0x12, 0x75, 0x0a, 0x03, 0x61, 0x66, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x2e, 0x41, 0x66, 0x31, 0x52, 0x03, 0x61, 0x66, 0x31, 0x12, 0x75, 0x0a, 0x03, 0x61,
	0x66, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x2e, 0x41, 0x66, 0x32, 0x52, 0x03, 0x61,
	0x66, 0x32, 0x12, 0x75, 0x0a, 0x03, 0x61, 0x66, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x2e, 0x41, 0x66, 0x33, 0x52, 0x03, 0x61, 0x66, 0x33, 0x12, 0x75, 0x0a, 0x03, 0x61, 0x66, 0x34,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x2e, 0x41, 0x66, 0x34, 0x52, 0x03, 0x61, 0x66, 0x34,
	0x12, 0x72, 0x0a, 0x02, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x2e, 0x45, 0x66,
	0x52, 0x02, 0x65, 0x66, 0x12, 0x75, 0x0a, 0x03, 0x63, 0x73, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x2e, 0x43, 0x73, 0x36, 0x52, 0x03, 0x63, 0x73, 0x36, 0x12, 0x75, 0x0a, 0x03, 0x63,
	0x73, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x2e, 0x43, 0x73, 0x37, 0x52, 0x03, 0x63,
	0x73, 0x37, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x71, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x69, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73,
	0x22, 0x37, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x68, 0x61,
	0x70, 0x49, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x10, 0x01, 0x22, 0x1f, 0x0a, 0x02, 0x42, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x65, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x31, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x31, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x31, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x31, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x32, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x32, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x32, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x32, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x33, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x33, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x33, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x33, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x34, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x34, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x34, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x34, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3a, 0x0a, 0x02, 0x45, 0x66,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x66, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x66, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x66, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x43, 0x73, 0x36, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x36, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x36,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x73, 0x36, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x43, 0x73, 0x37, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x37, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x37,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x73, 0x37, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x1a,
	0xb9, 0x0e, 0x0a, 0x18, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0xb1, 0x01, 0x0a,
	0x1a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x71, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x52, 0x1a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x2d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x1a, 0xe8, 0x0c, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x84, 0x01, 0x0a,
	0x02, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x74, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x65, 0x52,
	0x02, 0x62, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x03, 0x61, 0x66, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x66, 0x31, 0x52, 0x03, 0x61, 0x66, 0x31, 0x12, 0x87, 0x01,
	0x0a, 0x03, 0x61, 0x66, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x41,
	0x66, 0x32, 0x52, 0x03, 0x61, 0x66, 0x32, 0x12, 0x87, 0x01, 0x0a, 0x03, 0x61, 0x66, 0x33, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x66, 0x33, 0x52, 0x03, 0x61, 0x66,
	0x33, 0x12, 0x87, 0x01, 0x0a, 0x03, 0x61, 0x66, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x41, 0x66, 0x34, 0x52, 0x03, 0x61, 0x66, 0x34, 0x12, 0x84, 0x01, 0x0a, 0x02,
	0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x74, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x45, 0x66, 0x52, 0x02,
	0x65, 0x66, 0x12, 0x87, 0x01, 0x0a, 0x03, 0x63, 0x73, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x43, 0x73, 0x36, 0x52, 0x03, 0x63, 0x73, 0x36, 0x12, 0x87, 0x01, 0x0a,
	0x03, 0x63, 0x73, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x73,
	0x37, 0x52, 0x03, 0x63, 0x73, 0x37, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x22, 0x1f,
	0x0a, 0x02, 0x42, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x65, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x3e, 0x0a, 0x03, 0x41, 0x66, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x31,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x31, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x31, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x3e, 0x0a, 0x03, 0x41, 0x66, 0x32, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x32,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x32, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x32, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x3e, 0x0a, 0x03, 0x41, 0x66, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x33,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x33, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x33, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x3e, 0x0a, 0x03, 0x41, 0x66, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x34,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x66, 0x34, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x34, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22,
	0x3a, 0x0a, 0x02, 0x45, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x66, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x66, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x66, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x43,
	0x73, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x36, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x73, 0x36, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x73, 0x36, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x43,
	0x73, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x37, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x73, 0x37, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x73, 0x37, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x1a, 0xf8, 0x04, 0x0a, 0x18,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x1a, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x52, 0x1a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x1a, 0xa7, 0x03, 0x0a,
	0x17, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x7e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xab, 0x06, 0x0a, 0x11, 0x46, 0x6f, 0x75, 0x72, 0x43,
	0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a,
	0x13, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x46, 0x6f, 0x75,
	0x72, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6f, 0x75, 0x72, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x13, 0x66, 0x6f, 0x75, 0x72, 0x2d, 0x63, 0x6f, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x1a, 0xfd, 0x04, 0x0a, 0x10, 0x46, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x63, 0x6f,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x46, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x46, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x73,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x46, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x72, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x08, 0x43,
	0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x43, 0x4f, 0x53, 0x30, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x43, 0x4f, 0x53, 0x31, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x43, 0x4f, 0x53, 0x32, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x43, 0x4f, 0x53,
	0x33, 0x10, 0x03, 0x22, 0x4f, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c,
	0x50, 0x51, 0x10, 0x02, 0x1a, 0xd6, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xa5, 0x04, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x77,
	0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xce, 0x03,
	0x0a, 0x15, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x8e, 0x02,
	0x0a, 0x14, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x78, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x1a, 0xd6,
	0x11, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xb5, 0x01, 0x0a,
	0x1b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x73, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0x80, 0x10, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x94, 0x01, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x7a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x70, 0x2d, 0x69, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x02, 0x62, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x76, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x65, 0x52, 0x02, 0x62,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x03, 0x61, 0x66, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x66, 0x31, 0x52, 0x03, 0x61, 0x66, 0x31, 0x12, 0x89, 0x01,
	0x0a, 0x03, 0x61, 0x66, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x66, 0x32, 0x52, 0x03, 0x61, 0x66, 0x32, 0x12, 0x89, 0x01, 0x0a, 0x03, 0x61, 0x66,
	0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x66, 0x33,
	0x52, 0x03, 0x61, 0x66, 0x33, 0x12, 0x89, 0x01, 0x0a, 0x03, 0x61, 0x66, 0x34, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x66, 0x34, 0x52, 0x03, 0x61, 0x66,
	0x34, 0x12, 0x86, 0x01, 0x0a, 0x02, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x76,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x66, 0x52, 0x02, 0x65, 0x66, 0x12, 0x89, 0x01, 0x0a, 0x03, 0x63,
	0x73, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x73,
	0x36, 0x52, 0x03, 0x63, 0x73, 0x36, 0x12, 0x89, 0x01, 0x0a, 0x03, 0x63, 0x73, 0x37, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x73, 0x37, 0x52, 0x03, 0x63,
	0x73, 0x37, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x80, 0x01, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x62, 0x73, 0x22, 0x4f, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x68, 0x61, 0x70, 0x49, 0x64, 0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x02, 0x22, 0x11, 0x0a, 0x02, 0x42, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x65, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x22, 0x2f, 0x0a, 0x03, 0x41, 0x66, 0x31, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x31, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x66, 0x31, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x03, 0x41, 0x66, 0x32,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x32, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x66, 0x32, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x22, 0x2f, 0x0a, 0x03, 0x41, 0x66,
	0x33, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x33, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x33, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x03, 0x22, 0x2f, 0x0a, 0x03, 0x41,
	0x66, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x34, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x66, 0x34, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x04, 0x22, 0x2c, 0x0a, 0x02,
	0x45, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x66, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x66, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x05, 0x22, 0x2f, 0x0a, 0x03, 0x43, 0x73,
	0x36, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x36, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x73, 0x36, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x06, 0x22, 0x2f, 0x0a, 0x03, 0x43,
	0x73, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x37, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x73, 0x37, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x07, 0x22, 0x39, 0x0a, 0x0c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x1a, 0xc5, 0x09, 0x0a, 0x12, 0x45, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x99,
	0x01, 0x0a, 0x14, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x14, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x63, 0x6f, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x92, 0x08, 0x0a, 0x11, 0x45,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63,
	0x6f, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x77, 0x72, 0x65,
	0x64, 0x12, 0x89, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x95, 0x01,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x74, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x7b, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x69, 0x72, 0x52, 0x03,
	0x70, 0x69, 0x72, 0x1a, 0x1e, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x72, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x09, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x0d,
	0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0xb4, 0x01,
	0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63,
	0x69, 0x72, 0x2d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x69, 0x72, 0x2d, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x72, 0x2d, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x1a, 0x29, 0x0a, 0x03, 0x50, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x22,
	0x55, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x43, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x43, 0x4f, 0x53, 0x58, 0x5f, 0x45, 0x4e, 0x48,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x1a, 0x9b, 0x62, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0xb6, 0x61, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12,
	0x7d, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x88,
	0x01, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x52, 0x04, 0x63, 0x61, 0x72, 0x73,
	0x12, 0x6c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x12, 0x6d,
	0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x17, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x52, 0x17, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x15,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x15, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2d, 0x63, 0x6f, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x1a, 0xbd, 0x0c, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x71, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xbb, 0x0b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x79, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x62, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x2d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72,
	0x64, 0x1a, 0xae, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x80, 0x01, 0x0a, 0x08, 0x63, 0x69, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x69, 0x72, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x10, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x69, 0x72,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x63, 0x69, 0x72,
	0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x2d, 0x0a,
	0x07, 0x43, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x1a, 0x54, 0x0a, 0x0e,
	0x43, 0x69, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x02, 0x22, 0x6d, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0xff, 0x01,
	0x22, 0x41, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0xa3, 0x03, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x80, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4d, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0xcc, 0x09, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x99, 0x01, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x98, 0x08,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63,
	0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x62, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x73, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x98, 0x01, 0x0a,
	0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d,
	0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x22, 0x4d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x6d, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0xff, 0x01, 0x22, 0x41, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xcf, 0x16, 0x0a, 0x04, 0x43, 0x61, 0x72,
	0x73, 0x12, 0x57, 0x0a, 0x03, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x03, 0x63, 0x61, 0x72, 0x1a, 0xed, 0x15, 0x0a, 0x03, 0x43,
	0x61, 0x72, 0x12, 0x5e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43,
	0x61, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a,
	0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x72, 0x0a, 0x0b, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x78, 0x0a, 0x0d,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43,
	0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x0a,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01,
	0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x2e, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x11, 0x72, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x6c, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x72, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2d,
	0x61, 0x77, 0x61, 0x72, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x01, 0x22, 0x4d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x3c, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10,
	0x07, 0x22, 0x4d, 0x0a, 0x0a, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x3f, 0x0a, 0x0c, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x11, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x02, 0x22, 0xf2, 0x01, 0x0a, 0x12, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42,
	0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x59,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x51, 0x0a, 0x0b, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x09, 0x52, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x02, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x45, 0x0a, 0x08, 0x52,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x22, 0x46, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72,
	0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x90, 0x1b, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x12, 0x75, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x61, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x63, 0x61,
	0x72, 0x1a, 0x89, 0x1a, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72,
	0x12, 0x6c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x69, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x69, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69,
	0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x2d, 0x61, 0x77, 0x61, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x13,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x9a, 0x01, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x66,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x7d, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x11, 0x72, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x7a, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61,
	0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x52, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2d, 0x61,
	0x77, 0x61, 0x72, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x01, 0x22, 0x40, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x0d, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x77, 0x61, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x77, 0x61, 0x72, 0x65, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3c, 0x0a, 0x0b, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x14, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x31, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x34, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x22, 0x4d, 0x0a, 0x0a, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x3f, 0x0a, 0x0c, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x22, 0xf2, 0x01, 0x0a, 0x12, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x59,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x51, 0x0a, 0x0b, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59,
	0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x09,
	0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x34, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x45,
	0x0a, 0x08, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77,
	0x61, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41,
	0x77, 0x61, 0x72, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xbc, 0x05,
	0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x77,
	0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xb2, 0x04, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x58, 0x5f, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x55, 0x4d, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x55, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x58, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x09, 0x22, 0x4d, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x92, 0x03, 0x0a,
	0x14, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x16, 0x6d,
	0x70, 0x6c, 0x73, 0x2d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xd9, 0x01, 0x0a, 0x13, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0xa7, 0x04, 0x0a, 0x12, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x14, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x14, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2d, 0x63, 0x6f, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x1a, 0xf8, 0x02, 0x0a, 0x11, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55,
	0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x58, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x43, 0x4f, 0x53, 0x58, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x05, 0x1a, 0x9f, 0x0a, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x68, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a,
	0xa4, 0x09, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x8f, 0x08, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x87, 0x07, 0x0a,
	0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x18, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x18,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x18, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x18, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xba, 0x21, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x1a, 0xae, 0x20, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x7d,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x74, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x74, 0x79, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x74, 0x79, 0x73, 0x12, 0x6e, 0x0a, 0x08, 0x63, 0x69, 0x72, 0x5f, 0x70,
	0x69, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x69, 0x72, 0x73, 0x52, 0x08, 0x63,
	0x69, 0x72, 0x2d, 0x70, 0x69, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x07, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x52, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x1a, 0xf3, 0x02, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x75, 0x0a,
	0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0xef, 0x01, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x83, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xcc, 0x05, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x74, 0x79, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x0f, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x74, 0x79, 0x73,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x74, 0x79, 0x52,
	0x0f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x74, 0x79,
	0x1a, 0xa2, 0x04, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x74, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x74,
	0x79, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x74,
	0x79, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x74, 0x79, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x74, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73,
	0x22, 0x6c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x30, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x31, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x32, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x4e, 0x4f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0xff, 0x01, 0x22, 0x45,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x9c, 0x03, 0x0a, 0x07, 0x43, 0x69, 0x72, 0x50, 0x69, 0x72,
	0x73, 0x12, 0x73, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x69, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43,
	0x69, 0x72, 0x50, 0x69, 0x72, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x69, 0x72, 0x52, 0x07, 0x63,
	0x69, 0x72, 0x2d, 0x70, 0x69, 0x72, 0x1a, 0x9b, 0x02, 0x0a, 0x06, 0x43, 0x69, 0x72, 0x50, 0x69,
	0x72, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x69, 0x72, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x50, 0x69, 0x72,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x22, 0x45, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x1a, 0xf6, 0x02, 0x0a, 0x07, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x71, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x1a, 0xf7, 0x01, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x81,
	0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xd4, 0x09,
	0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x1b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x7d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xf4, 0x07,
	0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x2d, 0x69, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x87, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x8a, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xd4, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42,
	0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x10, 0x08, 0x22, 0x2a, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01,
	0x22, 0x41, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0xb9, 0x07, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x1a, 0xaa, 0x06, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x2d, 0x69, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x95, 0x01, 0x0a,
	0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x6f, 0x6e, 0x5f, 0x65, 0x74, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4f, 0x6e, 0x45, 0x74, 0x6d, 0x52, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2d, 0x6f, 0x6e,
	0x2d, 0x65, 0x74, 0x6d, 0x1a, 0x9c, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xf5, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x91, 0x01,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x73, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x1a, 0x2a, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4f, 0x6e, 0x45, 0x74, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xf2, 0x09, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7e, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x34,
	0x63, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x34, 0x63, 0x6f, 0x73, 0x2d, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xdc, 0x08, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34,
	0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x79,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xb8, 0x07, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34,
	0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0xa5, 0x06, 0x0a,
	0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0xb5, 0x01, 0x0a, 0x18, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x79, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x18, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x79, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x34, 0x43, 0x6f, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x75, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x18, 0x66, 0x6f, 0x75, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x46,
	0x6f, 0x75, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x6f, 0x75, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f,
	0x53, 0x30, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x6f, 0x75, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f,
	0x53, 0x31, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x6f, 0x75, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f,
	0x53, 0x32, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x6f, 0x75, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f,
	0x53, 0x33, 0x10, 0x03, 0x1a, 0xa4, 0x1c, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x13,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x1a, 0x88, 0x1b, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x80,
	0x01, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x1a, 0x81, 0x04, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x1a, 0x81, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x77, 0x72, 0x65,
	0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xac, 0x04, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x90, 0x03, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x74, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x77, 0x72, 0x65, 0x64,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x1a, 0xb4, 0x0f, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x1a, 0x98, 0x0e, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x7a, 0x0a, 0x02, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x2e, 0x42, 0x65, 0x52, 0x02, 0x62, 0x65, 0x12, 0x7d, 0x0a, 0x03, 0x61,
	0x66, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x2e, 0x41, 0x66, 0x31, 0x52, 0x03, 0x61, 0x66, 0x31, 0x12, 0x7d, 0x0a, 0x03, 0x61, 0x66,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x2e, 0x41, 0x66, 0x32, 0x52, 0x03, 0x61, 0x66, 0x32, 0x12, 0x7d, 0x0a, 0x03, 0x61, 0x66, 0x33,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e,
	0x41, 0x66, 0x33, 0x52, 0x03, 0x61, 0x66, 0x33, 0x12, 0x7d, 0x0a, 0x03, 0x61, 0x66, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x41,
	0x66, 0x34, 0x52, 0x03, 0x61, 0x66, 0x34, 0x12, 0x7a, 0x0a, 0x02, 0x65, 0x66, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x45, 0x66, 0x52,
	0x02, 0x65, 0x66, 0x12, 0x7d, 0x0a, 0x03, 0x63, 0x73, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x43, 0x73, 0x36, 0x52, 0x03, 0x63,
	0x73, 0x36, 0x12, 0x7d, 0x0a, 0x03, 0x63, 0x73, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x43, 0x73, 0x37, 0x52, 0x03, 0x63, 0x73,
	0x37, 0x12, 0xab, 0x01, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x79, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x22, 0x1f, 0x0a, 0x02, 0x42, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x65, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x31, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x31, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x31, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x31, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x32, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x32, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x32, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x32, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x33, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x33, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x33, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x33, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x41, 0x66,
	0x34, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66, 0x34, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x66, 0x34, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x66, 0x34, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3a, 0x0a, 0x02, 0x45, 0x66,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x66, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x66, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x66, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x43, 0x73, 0x36, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x36, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x36,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x73, 0x36, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x3e, 0x0a, 0x03, 0x43, 0x73, 0x37, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x43, 0x73, 0x37, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x73, 0x37,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x73, 0x37, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x08, 0x22, 0x63, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02, 0x1a, 0xb1, 0x04, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x74, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0xa7, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x73, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x73, 0x1a, 0x81, 0x02, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x73, 0x12, 0x87, 0x01, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x1a, 0x67, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a,
	0xa7, 0x0c, 0x0a, 0x0d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0xa7, 0x0b, 0x0a, 0x0c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x16,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x1a, 0x9a, 0x05, 0x0a, 0x0f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x10, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0xf2, 0x03, 0x0a, 0x0e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x72, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x47, 0x65, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x2d, 0x67, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x31, 0x30, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x74,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x31, 0x30, 0x47, 0x65, 0x52, 0x10, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x2d, 0x31, 0x30, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x0c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x22, 0x45, 0x0a, 0x0e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x31, 0x30, 0x47, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x31, 0x30, 0x47, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x31, 0x30, 0x47, 0x65, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x1a, 0xc8,
	0x03, 0x0a, 0x14, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x15, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x15, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a,
	0x87, 0x02, 0x0a, 0x13, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x9c, 0x01, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x39,
	0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x1a, 0x93, 0x09, 0x0a, 0x11, 0x51, 0x6f,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x7e, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x71, 0x6f, 0x73,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a,
	0xfd, 0x07, 0x0a, 0x10, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x73, 0x52, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x73, 0x1a, 0xc4, 0x06, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x91, 0x05, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x69, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x2d, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x69, 0x72,
	0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x78, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x3f,
	0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02, 0x1a,
	0xe6, 0x03, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x12, 0x6e, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x1a, 0xe4, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x65, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x41, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x1a, 0x2c, 0x0a, 0x06, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd1, 0x07, 0x0a, 0x11, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x7c,
	0x0a, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xbd, 0x06, 0x0a,
	0x10, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x1a, 0xa5, 0x05, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12,
	0x71, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x1a, 0xa7, 0x04, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x68, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x77, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10,
	0x07, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x1a, 0xe7, 0x14, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xcb, 0x13, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x72, 0x0a,
	0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x66, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x17, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x73, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x2d, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x63, 0x62, 0x73, 0x1a, 0x25, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xef, 0x03,
	0x0a, 0x15, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x9f, 0x02,
	0x0a, 0x14, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0xaf, 0x01, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x88, 0x01, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x51, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x1a,
	0x99, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x16, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x16, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a,
	0x4a, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xc0, 0x02, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x90, 0x01, 0x0a, 0x0e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x69,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x69, 0x72, 0x2d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x69, 0x72, 0x2d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x85,
	0x02, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x1a, 0x51, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x22, 0x1e, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x00, 0x1a, 0xff, 0xed, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x63,
	0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x13, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x66, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x52, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x1a, 0xfd, 0x18, 0x0a, 0x0f,
	0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x70, 0x0a, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x1a, 0xf7, 0x17, 0x0a, 0x0e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x11, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73,
	0x52, 0x11, 0x70, 0x65, 0x72, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x1c, 0x64, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1c, 0x64,
	0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x95, 0x08, 0x0a, 0x14,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd6, 0x06, 0x0a, 0x13, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x74, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x71, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x44, 0x53, 0x43,
	0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x58, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x1a, 0xc1, 0x07, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f,
	0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f,
	0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x10, 0x70, 0x65, 0x72, 0x2d, 0x68,
	0x6f, 0x70, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x1a, 0x99, 0x06, 0x0a, 0x0e,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x7e,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x98,
	0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x45,
	0x58, 0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x22, 0xbc, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42,
	0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x39, 0x0a, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x1a, 0xa1, 0x04, 0x0a, 0x1a, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x1b, 0x64, 0x69, 0x66, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x64, 0x69, 0x66, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc2, 0x02, 0x0a, 0x19, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa4, 0x01, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x85, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x73, 0x65, 0x72, 0x76, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x16, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e,
	0x58, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x81, 0x48, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x7c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0xec, 0x46, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x73, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x2d,
	0x61, 0x63, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x63,
	0x6c, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x53, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x61,
	0x63, 0x6c, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x73, 0x12, 0x73, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x61, 0x6e, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e,
	0x79, 0x73, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x61, 0x6e, 0x79, 0x73, 0x12, 0x82, 0x01,
	0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x73, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73,
	0x52, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x73, 0x12, 0x73, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x49, 0x70, 0x76, 0x36, 0x53, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x65, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x53, 0x52, 0x12,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x70, 0x76,
	0x36, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x12, 0x72,
	0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x6d, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x52, 0x11, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x12, 0x7c,
	0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0c,
	0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x90, 0x01, 0x0a,
	0x13, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x53, 0x52, 0x13, 0x72, 0x75, 0x6c, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x63, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x70, 0x76, 0x36, 0x53,
	0x52, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x2d,
	0x69, 0x70, 0x76, 0x36, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e,
	0x73, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x8c, 0x01,
	0x0a, 0x12, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x53, 0x72, 0x63, 0x44, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x52, 0x12, 0x73, 0x72, 0x63, 0x2d, 0x64, 0x65,
	0x73, 0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x73, 0x1a, 0xac, 0x01, 0x0a,
	0x08, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x12, 0x79, 0x0a, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x6c, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65,
	0x2d, 0x61, 0x63, 0x6c, 0x1a, 0x25, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x63, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc7, 0x01, 0x0a, 0x0c,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x53, 0x12, 0x8b, 0x01, 0x0a,
	0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x53, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x2d, 0x61, 0x63, 0x6c, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0x29, 0x0a, 0x0b, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6c,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x95, 0x03, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e,
	0x79, 0x73, 0x12, 0x79, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x79, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x6e, 0x79, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x61, 0x6e, 0x79, 0x1a, 0x8d, 0x02,
	0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x6e, 0x79, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41,
	0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x22, 0x69, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x1a, 0xd4, 0x03,
	0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x8d, 0x01, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0xb2, 0x02, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x80, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x30, 0x32,
	0x31, 0x50, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x44,
	0x53, 0x43, 0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x58, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x06, 0x1a, 0xae, 0x04, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0xf6, 0x02, 0x0a,
	0x10, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xa6, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x73, 0x12, 0x79, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x64, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x1a, 0x1f, 0x0a,
	0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc1,
	0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x49, 0x70, 0x76, 0x36, 0x53, 0x12,
	0x8b, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x49, 0x70, 0x76, 0x36, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0x23, 0x0a,
	0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x49, 0x70, 0x76, 0x36, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x65, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf4, 0x03, 0x0a, 0x10, 0x52, 0x75, 0x6c, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x53, 0x12, 0x9b, 0x01, 0x0a, 0x11,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x70, 0x76, 0x36, 0x53, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x52, 0x11, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0xc1, 0x02, 0x0a, 0x0f, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x9d, 0x01,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x79, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70,
	0x76, 0x36, 0x53, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x42, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0xd8, 0x03,
	0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x11, 0x72, 0x75, 0x6c, 0x65,
	0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x1a, 0xa8, 0x02,
	0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x8f, 0x01, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x2e, 0x4d, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x6d, 0x61, 0x73, 0x6b,
	0x22, 0x36, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x8e, 0x03, 0x0a, 0x0f, 0x52, 0x75, 0x6c,
	0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x12, 0x97, 0x01, 0x0a,
	0x10, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x53, 0x54,
	0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0xd4, 0x04, 0x0a, 0x0b, 0x52, 0x75,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x1a, 0xbc, 0x03, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x31, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6d,
	0x61, 0x73, 0x6b, 0x33, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x34, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x34,
	0x1a, 0xad, 0x03, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x70, 0x76, 0x36, 0x53, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x70,
	0x76, 0x36, 0x53, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x70, 0x76, 0x36, 0x52, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0xf5, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x12, 0x8e, 0x01,
	0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x76,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x53, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02,
	0x1a, 0x9d, 0x05, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x1a,
	0xfe, 0x03, 0x0a, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x9a, 0x01, 0x0a, 0x0e, 0x62, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x2e,
	0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x62, 0x69,
	0x74, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x8f,
	0x02, 0x0a, 0x0c, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x53,
	0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x59, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x53, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x53,
	0x48, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x52, 0x47, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x43, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x57, 0x52, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x10, 0x0a,
	0x1a, 0xfe, 0x04, 0x0a, 0x10, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x49, 0x70, 0x76, 0x36, 0x53, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x70, 0x76, 0x36,
	0x53, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x70, 0x76,
	0x36, 0x52, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67,
	0x2d, 0x69, 0x70, 0x76, 0x36, 0x1a, 0xc9, 0x03, 0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x70, 0x76, 0x36, 0x12, 0xa2, 0x01, 0x0a, 0x0e, 0x62, 0x69,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x7a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x70, 0x76, 0x36,
	0x53, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x62, 0x69, 0x74, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x63,
	0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x6d, 0x61, 0x73, 0x6b,
	0x22, 0xce, 0x01, 0x0a, 0x0c, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49,
	0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x59, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x53, 0x54, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x53, 0x48, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x52, 0x47, 0x10,
	0x07, 0x1a, 0xd0, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x7d, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x1a, 0x44,
	0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x65, 0x2d, 0x76, 0x6c, 0x61,
	0x6e, 0x2d, 0x69, 0x64, 0x1a, 0xf9, 0x01, 0x0a, 0x0f, 0x53, 0x72, 0x63, 0x44, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x73, 0x72, 0x63,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x53, 0x72, 0x63, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x73, 0x2e, 0x53, 0x72, 0x63, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x52, 0x11, 0x73, 0x72, 0x63, 0x2d, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x2d, 0x69, 0x64, 0x1a, 0x4a, 0x0a, 0x0e, 0x53, 0x72, 0x63, 0x44, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2d, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x1a,
	0x9c, 0x76, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x1a, 0x91, 0x75, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7e, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7d, 0x0a, 0x0e, 0x61, 0x63, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x63, 0x6c, 0x4c, 0x6f, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x63, 0x6c, 0x2d, 0x6c, 0x6f, 0x67, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x63, 0x61, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x10, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x7e, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x8d, 0x01, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x75, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x9e, 0x01, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4e,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x75, 0x0a, 0x0b, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x55, 0x72, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x75, 0x72, 0x70,
	0x66, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x64, 0x65, 0x6e, 0x79, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01,
	0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6c, 0x6f, 0x67, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0xbd, 0x01, 0x0a, 0x24, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x24, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2d, 0x6e, 0x61, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x5e, 0x0a, 0x03, 0x70, 0x62, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50, 0x62, 0x72, 0x52, 0x03, 0x70, 0x62, 0x72, 0x1a,
	0xb2, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x74, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x44, 0x45,
	0x4e, 0x59, 0x10, 0x01, 0x1a, 0xb7, 0x0a, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa3, 0x01, 0x0a,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xf9, 0x08, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x7a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x7c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xa2, 0x01, 0x0a, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x7c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x2a, 0x0a, 0x10, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x66, 0x64, 0x2d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x58, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x58, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x58, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x58,
	0x5f, 0x42, 0x46, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x58, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x58, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x58, 0x5f, 0x42, 0x46, 0x44, 0x10,
	0x02, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07,
	0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x41, 0x0a, 0x0c, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xf0,
	0x06, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x89, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd2, 0x05, 0x0a,
	0x0c, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x2d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10,
	0x0c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x58, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58,
	0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x10,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x4f, 0x53, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x44, 0x46, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x1a, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e,
	0x4e, 0x45, 0x52, 0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x58, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x50, 0x10, 0x23, 0x22, 0x46, 0x0a, 0x0a, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0xe2, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x41, 0x63, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x58, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x10, 0x27, 0x1a, 0xad, 0x0b, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x0a, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x68, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12,
	0x8d, 0x01, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x90, 0x01, 0x0a, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x72, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x68, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x2d, 0x61, 0x77, 0x61, 0x72, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x41, 0x52, 0x10, 0x00, 0x22, 0x3c, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x02, 0x22, 0x3f, 0x0a, 0x0c, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x22, 0x40, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x50, 0x53, 0x10, 0x01, 0x1a, 0xe1, 0x03, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77,
	0x2d, 0x63, 0x61, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbc, 0x02, 0x0a, 0x0d,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5a,
	0x0a, 0x06, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x58, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x1a, 0xed, 0x01, 0x0a, 0x16, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x68, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x4c, 0x0a, 0x08,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x58, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x1a, 0x84, 0x05, 0x0a, 0x0d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x89, 0x01, 0x0a,
	0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe6, 0x03, 0x0a, 0x0c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x10,
	0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x52, 0x10, 0x68, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x63, 0x61, 0x72, 0x12, 0x7f, 0x0a,
	0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x55,
	0x0a, 0x0f, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3a, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10,
	0x01, 0x1a, 0xeb, 0x11, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x10, 0x0a, 0x11, 0x53, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0,
	0x01, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x79, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x7f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x78, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xab, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x11, 0x72, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x94,
	0x01, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x76, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x64, 0x2d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x58, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x58, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x58, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0x3c, 0x0a,
	0x0b, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0xe9, 0x01, 0x0a, 0x11,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x4d, 0x0a, 0x0a, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0xd7,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x31, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x45, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x1a,
	0x83, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83,
	0x01, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x58, 0x5f, 0x4c, 0x32, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x58,
	0x5f, 0x4c, 0x33, 0x10, 0x03, 0x1a, 0xdb, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65,
	0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65,
	0x72, 0x6d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x43,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0xef, 0x05, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xb3, 0x01, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6e, 0x65, 0x74,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9d, 0x04, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x9f, 0x01, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x80, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x82, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30,
	0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01,
	0x22, 0x63, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x58,
	0x58, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x58, 0x58, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x58, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x10, 0x02, 0x1a, 0xd2, 0x04, 0x0a, 0x0a, 0x55, 0x72, 0x70, 0x66, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x55, 0x72, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x89, 0x01, 0x0a,
	0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x55, 0x72, 0x70, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x10, 0x01,
	0x22, 0x4c, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x2a,
	0x0a, 0x0d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0xe3, 0x01, 0x0a, 0x10, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x86, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x6e, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6e,
	0x79, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0a, 0x44, 0x65, 0x6e, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x65, 0x6e,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x6e,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x1a, 0xf9, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xac, 0x02, 0x0a,
	0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x91,
	0x01, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x67, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x50,
	0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x50, 0x53, 0x10, 0x02, 0x1a, 0xc7, 0x05, 0x0a, 0x06,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x0c, 0x6d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x0c,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x0a,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x52, 0x0a, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x2d, 0x63, 0x61, 0x72, 0x12, 0x76, 0x0a, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x6f, 0x52, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x74, 0x6f, 0x1a,
	0x0e, 0x0a, 0x0c, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0x2d, 0x0a, 0x0b, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x53,
	0x0a, 0x09, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x62,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x62, 0x73, 0x1a, 0x30, 0x0a, 0x08, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xce, 0x02, 0x0a, 0x20, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x1b, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x82, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x1b, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d,
	0x62, 0x69, 0x6e, 0x64, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x6e,
	0x61, 0x74, 0x1a, 0x62, 0x0a, 0x18, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xb5, 0x07, 0x0a, 0x03, 0x50, 0x62, 0x72, 0x12, 0x8d,
	0x01, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x2d, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x7c,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x73, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50,
	0x62, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x73, 0x70, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x6c, 0x73, 0x70, 0x12, 0x70, 0x0a, 0x08,
	0x70, 0x62, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x50, 0x62, 0x72,
	0x49, 0x70, 0x76, 0x34, 0x52, 0x08, 0x70, 0x62, 0x72, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x12, 0x70,
	0x0a, 0x08, 0x70, 0x62, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x50,
	0x62, 0x72, 0x49, 0x70, 0x76, 0x36, 0x52, 0x08, 0x70, 0x62, 0x72, 0x2d, 0x69, 0x70, 0x76, 0x36,
	0x12, 0x73, 0x0a, 0x09, 0x70, 0x62, 0x72, 0x5f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50, 0x62,
	0x72, 0x2e, 0x50, 0x62, 0x72, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x52, 0x09, 0x70, 0x62, 0x72, 0x2d,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x1a, 0x3a, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x70, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x35, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x73, 0x70,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x09, 0x0a, 0x07, 0x50, 0x62, 0x72, 0x49,
	0x70, 0x76, 0x34, 0x1a, 0x09, 0x0a, 0x07, 0x50, 0x62, 0x72, 0x49, 0x70, 0x76, 0x36, 0x1a, 0xbd,
	0x01, 0x0a, 0x08, 0x50, 0x62, 0x72, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x50, 0x62, 0x72,
	0x2e, 0x50, 0x62, 0x72, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x56, 0x73, 0x69, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2d,
	0x76, 0x73, 0x69, 0x1a, 0x29, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x56,
	0x73, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x73, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x73, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa8,
	0x13, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x12, 0x6c, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0xa7, 0x12, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x6e, 0x0a, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x74, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x74,
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x14, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x14, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64,
	0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0x86, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x78, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x1a, 0xdc, 0x06, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x6f, 0x64,
	0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x77, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x66, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x58, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x1a,
	0xc6, 0x01, 0x0a, 0x11, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x75, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x06,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x38, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x22, 0x35, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3e, 0x0a, 0x0b, 0x4c, 0x69, 0x6e,
	0x6b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xed, 0x72, 0x0a, 0x0c, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x12, 0x6b, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x52, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x73,
	0x12, 0x42, 0x0a, 0x07, 0x61, 0x63, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x61, 0x63, 0x6c,
	0x2d, 0x6c, 0x6f, 0x67, 0x12, 0x6a, 0x0a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x68, 0x0a, 0x14, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x52, 0x14, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x72, 0x65, 0x64, 0x73, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x77, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x13, 0x6c, 0x6f,
	0x77, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x69, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x19, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x12, 0x51,
	0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x59, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x5f, 0x70, 0x68, 0x62, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x50, 0x68, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x2d, 0x70, 0x68, 0x62, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x05, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x79, 0x0a, 0x1a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x1a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x2d, 0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x2d, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x26, 0x74, 0x6d, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x26, 0x74,
	0x6d, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x19, 0x72, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x19, 0x72, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x88,
	0x01, 0x0a, 0x1f, 0x72, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x1f, 0x72, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x52, 0x13, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x12, 0x73, 0x0a, 0x18, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x18, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x12, 0x6c, 0x32, 0x74, 0x70, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x12, 0x6c, 0x32, 0x74, 0x70, 0x2d, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x73, 0x0a, 0x18, 0x6c, 0x32, 0x74,
	0x70, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x52, 0x18, 0x6c, 0x32, 0x74, 0x70, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x37, 0x0a, 0x03, 0x70, 0x62, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x62, 0x72, 0x52, 0x03, 0x70, 0x62, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0xbb, 0x25, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xc5, 0x24, 0x0a, 0x0c, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x75, 0x70, 0x2d, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x75, 0x63, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x55, 0x63, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x75, 0x63, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x1a, 0xb6, 0x20, 0x0a, 0x17, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xa7, 0x01, 0x0a,
	0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x18, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xf0, 0x1e, 0x0a, 0x16, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x69, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x72, 0x70,
	0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x72, 0x70,
	0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75,
	0x72, 0x70, 0x66, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x72, 0x70,
	0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75,
	0x72, 0x70, 0x66, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x16, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x1a, 0xe4, 0x12, 0x0a, 0x15, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xcd, 0x01, 0x0a,
	0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x96, 0x01, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xfa, 0x10, 0x0a,
	0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x72,
	0x70, 0x66, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x72, 0x70,
	0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x75, 0x72,
	0x70, 0x66, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x72,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x63, 0x61, 0x72, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x2d, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x72,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x72, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x61, 0x72,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63,
	0x61, 0x72, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x61,
	0x72, 0x2d, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x72,
	0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72,
	0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x61, 0x72, 0x2d, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x61, 0x72, 0x2d, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63,
	0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x72,
	0x5f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x61, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x2b, 0x0a, 0x07, 0x55, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x43, 0x4c, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x43, 0x4c,
	0x10, 0x01, 0x1a, 0xdb, 0x03, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x12, 0x7c, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xc5, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x61, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x58, 0x5f, 0x4d, 0x43, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x55, 0x53, 0x48,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x58, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x58, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x50, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x07,
	0x1a, 0x48, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xd9, 0x01, 0x0a, 0x12, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x59, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x68, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x58, 0x5f, 0x35, 0x53, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x58, 0x5f, 0x33, 0x30, 0x53, 0x10, 0x1e,
	0x12, 0x14, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x58, 0x5f, 0x33,
	0x30, 0x30, 0x53, 0x10, 0xac, 0x02, 0x1a, 0xb7, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x78, 0x0a,
	0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x27, 0x0a, 0x11, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0xf9, 0x04, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x72, 0x65, 0x64, 0x73, 0x12,
	0x56, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x72, 0x65, 0x64,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x1a, 0x92, 0x04, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x57, 0x72, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x57, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x60, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x72, 0x65,
	0x64, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45,
	0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22,
	0x5b, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x58, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x58, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x58, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x9f, 0x04, 0x0a,
	0x11, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x74, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x93, 0x03, 0x0a, 0x10, 0x4c, 0x6f, 0x77,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x71, 0x0a,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x74, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x77, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x58, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x10, 0x01, 0x22, 0x49, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xc7,
	0x02, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xc7,
	0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x32, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x33, 0x10, 0x01, 0x1a, 0x9c, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x4e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x35, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0xa3, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x98, 0x01,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55,
	0x6e, 0x74, 0x61, 0x67, 0x12, 0x5e, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x2e, 0x55,
	0x6e, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a, 0x09, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0xc9, 0x04, 0x0a, 0x0b, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0xdd, 0x03, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x6b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53,
	0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x22, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x45, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0xb8, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x50, 0x68, 0x62, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x78, 0x70, 0x50, 0x68, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x4c, 0x10, 0x01, 0x1a,
	0x84, 0x02, 0x0a, 0x05, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x70, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x73,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x70, 0x61, 0x63, 0x6b, 0x1a, 0xb8, 0x01, 0x0a, 0x04,
	0x50, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x59,
	0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0b, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x3b, 0x0a, 0x0a, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x2d, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6c,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0xb2, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0xcb, 0x02, 0x0a,
	0x09, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x69, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x2e,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xbc, 0x02, 0x0a, 0x22, 0x54,
	0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0xbc, 0x01, 0x0a, 0x25, 0x74, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x66, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x25, 0x74, 0x6d, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x57, 0x0a, 0x21, 0x54, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x69, 0x64, 0x1a, 0xe8, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x41, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x43, 0x58, 0x5f, 0x41, 0x4e, 0x44, 0x58, 0x5f, 0x4c,
	0x4e, 0x53, 0x10, 0x03, 0x1a, 0xee, 0x03, 0x0a, 0x1c, 0x52, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x1e, 0x72, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0xa8, 0x02, 0x0a, 0x1b, 0x52,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x2d, 0x69, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x41, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x43, 0x58, 0x5f, 0x41, 0x4e, 0x44, 0x58, 0x5f,
	0x4c, 0x4e, 0x53, 0x10, 0x03, 0x1a, 0xd9, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x12, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x12, 0x6c,
	0x69, 0x6e, 0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x1a, 0xcd, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x71, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x1a, 0x96, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x17,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x17, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d,
	0x73, 0x6c, 0x6f, 0x74, 0x1a, 0xf3, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x79, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x58, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0xb3, 0x01, 0x0a, 0x10, 0x4c,
	0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12,
	0x59, 0x0a, 0x09, 0x6c, 0x32, 0x74, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x6c, 0x32, 0x74, 0x70, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x08, 0x4c, 0x32,
	0x54, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x32, 0x54,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x32, 0x54, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x58, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0c,
	0x1a, 0xd2, 0x01, 0x0a, 0x15, 0x4c, 0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x6c,
	0x32, 0x74, 0x70, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x4c, 0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x17, 0x6c, 0x32, 0x74, 0x70,
	0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2d, 0x73,
	0x6c, 0x6f, 0x74, 0x1a, 0x30, 0x0a, 0x14, 0x4c, 0x32, 0x54, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x2d, 0x69, 0x64, 0x1a, 0x7f, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x52, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x54, 0x6f,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x2d, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x1a, 0x21, 0x0a, 0x09, 0x54, 0x6f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xc6, 0x02, 0x0a, 0x03, 0x50, 0x62, 0x72, 0x12, 0x63,
	0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x62, 0x72,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0xd9, 0x01, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x70,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x70, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x62, 0x72, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d,
	0x76, 0x70, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x54, 0x0a, 0x0e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x76,
	0x70, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x70, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x72, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x97, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x48, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x45, 0x53,
	0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x1a, 0xef, 0xb0, 0x03, 0x0a, 0x0b, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x76, 0x0a, 0x19, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x76,
	0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x19, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x24, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x24, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x12, 0x53, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x73, 0x52, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x24,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x24,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x7f,
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x64, 0x0a, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x52, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x15, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x5f, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52,
	0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x12, 0x6d, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x73, 0x12, 0x84, 0x01, 0x0a, 0x1e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x1e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x1e, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52,
	0x1e, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x73, 0x52, 0x12, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65,
	0x2d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x12, 0x7b, 0x0a, 0x1b, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x1b, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x2d, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x14,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52,
	0x14, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x27, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x25, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x25, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x73, 0x75, 0x62,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52,
	0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x68, 0x61, 0x72, 0x64, 0x2d,
	0x70, 0x69, 0x70, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x12, 0x61, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x12, 0x71, 0x6f, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x18, 0x73,
	0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x63, 0x61, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12,
	0x8c, 0x01, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x5f, 0x6c, 0x32, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x21, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x6c, 0x32, 0x2d, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x95,
	0x01, 0x0a, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x5f, 0x38, 0x30, 0x32, 0x31, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x38, 0x30, 0x32, 0x31,
	0x50, 0x44, 0x73, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x52, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x2d,
	0x38, 0x30, 0x32, 0x31, 0x70, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x7f, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x23, 0x73, 0x75, 0x62, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x23, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a,
	0x25, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x25, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x67, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x20, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x20, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x22, 0x66, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x22, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x7b, 0x0a, 0x1b, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x1b, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x20, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x52, 0x20, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x1a, 0xec, 0x07, 0x0a, 0x17, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x12, 0x8b, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xc2,
	0x06, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x2d, 0x70, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x2d, 0x62, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53,
	0x37, 0x10, 0x07, 0x1a, 0xe4, 0x05, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x7b, 0x0a, 0x14, 0x61,
	0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xcf, 0x04, 0x0a, 0x12, 0x41, 0x6c, 0x6c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d,
	0x70, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x70,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d,
	0x62, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xec, 0x07, 0x0a, 0x17, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x18, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0xc2, 0x06, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x70, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c,
	0x65, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53,
	0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xaf, 0x28, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6d,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xab, 0x27,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x69, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a,
	0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x7a, 0x0a,
	0x0f, 0x63, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x7c, 0x0a, 0x10, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x65, 0x0a, 0x08, 0x63, 0x69, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x69, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x69, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xdc,
	0x0c, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xa0, 0x0b, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x77, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x65, 0x61, 0x6b,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x61, 0x69, 0x6c, 0x2d,
	0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x65, 0x61, 0x6b,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53,
	0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x4f, 0x53, 0x30, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x31, 0x10, 0x0a, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x4f, 0x53, 0x32, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x33, 0x10, 0x0c, 0x1a, 0xb6, 0x0d,
	0x0a, 0x0e, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x9a, 0x0c, 0x0a, 0x0d, 0x43, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x61,
	0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x65, 0x61,
	0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x72,
	0x6f, 0x70, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x76, 0x36, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x36, 0x2d, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x76, 0x36, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70,
	0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x76, 0x36, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x36, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x76, 0x36, 0x2d, 0x70, 0x61, 0x73, 0x73,
	0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x76, 0x36, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x76, 0x36, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x76,
	0x36, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x76,
	0x36, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x36, 0x5f, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x36, 0x2d, 0x74, 0x61, 0x69, 0x6c,
	0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x76, 0x36, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x76, 0x36, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x51, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x51, 0x58, 0x5f, 0x43,
	0x41, 0x52, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x32, 0x58, 0x5f, 0x4c, 0x33, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x33, 0x58,
	0x5f, 0x43, 0x41, 0x52, 0x10, 0x06, 0x1a, 0xa7, 0x07, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x89, 0x06, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb0, 0x02, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x30, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x31, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x4f, 0x53, 0x32, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x33, 0x10, 0x0c, 0x22,
	0x4f, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x51, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x46, 0x51, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x50, 0x51, 0x10, 0x02,
	0x1a, 0x2d, 0x0a, 0x07, 0x43, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x72, 0x22,
	0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xc0, 0x45, 0x0a, 0x21,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x73, 0x12, 0xb5, 0x01, 0x0a, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xe2, 0x43, 0x0a, 0x20, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d, 0x76,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64,
	0x12, 0x8b, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x2d, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x73,
	0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d,
	0x69, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x69, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x72, 0x70,
	0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x72, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01,
	0x0a, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x52, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x19, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x19, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x73, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52,
	0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x1a, 0xdc, 0x09, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xb7, 0x01,
	0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x8c, 0x08, 0x0a, 0x10, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x92, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x66, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x66, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc0,
	0x01, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x95, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x42, 0x44, 0x58, 0x5f, 0x49,
	0x46, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x49, 0x46, 0x10, 0x03, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x25, 0x0a,
	0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x4c, 0x32, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x10, 0x04, 0x1a, 0xd1, 0x08, 0x0a, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x18, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x73, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x52, 0x18, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0xe3, 0x06, 0x0a, 0x16, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x9e, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0xbd, 0x01, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x9c, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x56, 0x42, 0x44, 0x58, 0x5f, 0x49, 0x46, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x58, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x49, 0x46, 0x10, 0x03,
	0x22, 0x38, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x82, 0x1e, 0x0a, 0x15, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x8e, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xa0, 0x1c, 0x0a,
	0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x72, 0x70, 0x66,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x72, 0x70, 0x66, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x75, 0x72, 0x70, 0x66, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x75, 0x72, 0x70, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x75, 0x72, 0x70, 0x66,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x72, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x61, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x63, 0x61, 0x72, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x72,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63,
	0x61, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x61, 0x72, 0x2d, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x61, 0x72, 0x2d,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x5f, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x61, 0x72, 0x2d, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x61, 0x72, 0x2d,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x72, 0x2d, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x63,
	0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x61, 0x72,
	0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x63, 0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65,
	0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x72,
	0x5f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73,
	0x75, 0x70, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73,
	0x75, 0x70, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e,
	0x69, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e,
	0x69, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x75, 0x6e, 0x69, 0x73, 0x75, 0x70,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x75, 0x70,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22,
	0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x41, 0x0a, 0x0c, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x8d,
	0x02, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0c, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x9d,
	0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xed,
	0x03, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x52, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x1a, 0xe2, 0x02, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x70, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x4d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0xc1,
	0x02, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x23, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x64, 0x0a, 0x20,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x1a, 0x83, 0x05, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x8d,
	0x01, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x19, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xd7,
	0x03, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x69, 0x64, 0x12, 0x77, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x2d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x64, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55,
	0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xce, 0x26, 0x0a, 0x1a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x68, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x73, 0x52, 0x04, 0x63, 0x61, 0x72, 0x73, 0x12, 0x71, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x2d, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x61, 0x72, 0x73, 0x1a, 0xbf, 0x0c, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xbe, 0x0b, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x78, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x8c, 0x03,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42,
	0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x30, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x31,
	0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x32, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x33, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x43, 0x4f, 0x53, 0x34, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x35, 0x10, 0x0e, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x4f, 0x53, 0x36, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x37, 0x10, 0x10, 0x1a, 0x86, 0x08, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x03, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x03, 0x63, 0x61, 0x72, 0x1a, 0xa5, 0x07,
	0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x68, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x64, 0x12, 0x6c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22,
	0xf7, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x58, 0x5f, 0x55, 0x4e,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x33, 0x58, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x55, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x58, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x09, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x8c, 0x06, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7c, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xfc, 0x04, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x7e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x1a, 0xb2, 0x08, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x72, 0x73, 0x12, 0x78, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x72, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x61, 0x72, 0x1a,
	0xa7, 0x07, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x64, 0x12, 0x7c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x84, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x73,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x2e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x2d, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72,
	0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75,
	0x6d, 0x5f, 0x50, 0x30, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x75, 0x6d, 0x5f, 0x50, 0x31, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x5f, 0x50, 0x32, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x5f, 0x50, 0x33,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75,
	0x6d, 0x5f, 0x50, 0x34, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x75, 0x6d, 0x5f, 0x50, 0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x5f, 0x50, 0x36, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x5f, 0x50, 0x37,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x75,
	0x6d, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x08, 0x1a, 0xd9, 0x08, 0x0a, 0x11, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12,
	0x73, 0x0a, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0xce, 0x07, 0x0a, 0x10, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x6b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72,
	0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xd4,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x10, 0x08, 0x1a, 0xfd, 0x03, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x7b, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2d, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xe8, 0x02, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x6f, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x69, 0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0xba, 0x06, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x6d, 0x0a, 0x10, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xb6, 0x05, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37,
	0x10, 0x07, 0x1a, 0x92, 0x0c, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x7f, 0x0a, 0x15, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xf8, 0x0a, 0x0a,
	0x13, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7c, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x74, 0x61, 0x69, 0x6c, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72, 0x65, 0x64,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72,
	0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72,
	0x65, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x65, 0x61, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x65, 0x61, 0x6b, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0x8a, 0x09, 0x0a, 0x1b, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x1d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xca, 0x07, 0x0a, 0x1a, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x1a, 0xd8, 0x05, 0x0a, 0x1b, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x1d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x2d, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0x98, 0x04, 0x0a, 0x1a, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45,
	0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a,
	0x8a, 0x08, 0x0a, 0x1b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12,
	0x9d, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a,
	0xca, 0x06, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2d, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x08, 0x1a, 0x9a, 0x03, 0x0a,
	0x10, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x73, 0x12, 0x6f, 0x0a, 0x11, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x1a, 0x94, 0x02, 0x0a, 0x0f, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63,
	0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x22, 0x74, 0x0a, 0x07, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x55, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x10, 0x05, 0x1a, 0xc1, 0x05, 0x0a, 0x18, 0x4c, 0x32,
	0x56, 0x70, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x32,
	0x56, 0x70, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x48, 0x61, 0x72, 0x64,
	0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1a,
	0x6c, 0x32, 0x76, 0x70, 0x6e, 0x2d, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x90, 0x04, 0x0a, 0x17, 0x4c,
	0x32, 0x56, 0x70, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x79,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4c, 0x32, 0x56, 0x70, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x4c, 0x32, 0x56,
	0x70, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x1a, 0x90, 0x03,
	0x0a, 0x20, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0xe4, 0x06, 0x0a, 0x12, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x77, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x13, 0x66, 0x6c, 0x6f,
	0x77, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0xd4, 0x05, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x66, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x6d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x06, 0x49, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45,
	0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xae, 0x0b, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12,
	0xbf, 0x01, 0x0a, 0x26, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x26, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x1a, 0xc4, 0x09, 0x0a, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x71,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x74,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46,
	0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43,
	0x53, 0x37, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53,
	0x30, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x31, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x4f, 0x53, 0x32, 0x10,
	0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x4f, 0x53, 0x33, 0x10, 0x0c, 0x1a, 0xce, 0x09, 0x0a, 0x21, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xb7,
	0x01, 0x0a, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xee, 0x07, 0x0a, 0x20, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d, 0x76, 0x6c,
	0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12,
	0x8b, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72,
	0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41,
	0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x08, 0x1a, 0xba, 0x07, 0x0a, 0x1f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xaf, 0x01,
	0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x22, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a,
	0xe4, 0x05, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22,
	0xd4, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x41, 0x46, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x43, 0x53, 0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x10, 0x08, 0x1a, 0xba, 0x04, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x50, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x68, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x69, 0x70, 0x65,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xf5, 0x02, 0x0a, 0x1b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64, 0x50, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72,
	0x61, 0x74, 0x65, 0x1a, 0xb4, 0x05, 0x0a, 0x10, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x11, 0x71, 0x6f, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x1a, 0xae, 0x04, 0x0a, 0x0f, 0x51, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x68, 0x0a,
	0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x43, 0x4c, 0x56, 0x34, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x43, 0x4c, 0x56, 0x36, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x32, 0x41, 0x43, 0x4c, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x43, 0x4c, 0x56, 0x34, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x43, 0x4c, 0x56, 0x36, 0x10, 0x06, 0x1a, 0xf4, 0x03, 0x0a, 0x15, 0x53,
	0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x17, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xd2, 0x02, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12,
	0x73, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x65,
	0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x1a, 0x95, 0x06, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x72,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xeb, 0x04, 0x0a, 0x16,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x77,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xb8, 0x06, 0x0a, 0x1d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x6c, 0x32,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63,
	0x61, 0x72, 0x2d, 0x6c, 0x32, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xec, 0x04, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x65, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x4c,
	0x32, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x1a, 0xfe, 0x06, 0x0a, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x38, 0x30, 0x32, 0x31, 0x50, 0x44, 0x73, 0x63, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x23, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x38, 0x30, 0x32, 0x31,
	0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x38, 0x30, 0x32, 0x31, 0x50, 0x44, 0x73, 0x63, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x38, 0x30, 0x32, 0x31, 0x50, 0x44, 0x73, 0x63, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x23, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x38, 0x30, 0x32, 0x31, 0x70, 0x2d,
	0x64, 0x73, 0x63, 0x70, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a,
	0xa3, 0x05, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x38, 0x30, 0x32, 0x31, 0x50, 0x44, 0x73, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x38, 0x30,
	0x32, 0x31, 0x50, 0x44, 0x73, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x72, 0x38,
	0x30, 0x32, 0x31, 0x50, 0x44, 0x73, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x2d,
	0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xba, 0x0d, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x81,
	0x0c, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x2d,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x72,
	0x2d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x63, 0x61, 0x72, 0x2d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x64, 0x72, 0x6f, 0x70,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x63, 0x61, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1e, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x36, 0x34, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2d, 0x36, 0x34, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x36,
	0x35, 0x74, 0x6f, 0x31, 0x32, 0x37, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2d, 0x36, 0x35, 0x74, 0x6f, 0x31, 0x32,
	0x37, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x5f, 0x31, 0x32, 0x38, 0x74, 0x6f, 0x32, 0x35, 0x35, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2d, 0x31, 0x32, 0x38,
	0x74, 0x6f, 0x32, 0x35, 0x35, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x5f, 0x32, 0x35, 0x36, 0x74, 0x6f, 0x35, 0x31, 0x31, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x2d, 0x32, 0x35, 0x36, 0x74, 0x6f, 0x35, 0x31, 0x31, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x54,
	0x0a, 0x25, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x35, 0x31, 0x32, 0x74, 0x6f, 0x31, 0x30,
	0x32, 0x33, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x2d, 0x35, 0x31, 0x32, 0x74, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x31,
	0x30, 0x32, 0x34, 0x74, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x26, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2d, 0x31, 0x30, 0x32,
	0x34, 0x74, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x1f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x5f, 0x31, 0x35, 0x31, 0x38, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2d, 0x31, 0x35, 0x31,
	0x38, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x36, 0x34, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2d, 0x36, 0x34, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x36, 0x35, 0x74, 0x6f,
	0x31, 0x32, 0x37, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x2d, 0x36, 0x35, 0x74, 0x6f, 0x31, 0x32, 0x37, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x21, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x31, 0x32, 0x38, 0x74, 0x6f, 0x32, 0x35, 0x35,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x73, 0x65, 0x6e,
	0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x2d, 0x31, 0x32, 0x38, 0x74, 0x6f, 0x32, 0x35, 0x35, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x21, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x32, 0x35, 0x36, 0x74, 0x6f, 0x35, 0x31, 0x31, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2d, 0x32,
	0x35, 0x36, 0x74, 0x6f, 0x35, 0x31, 0x31, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x5f, 0x35, 0x31, 0x32, 0x74, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2d, 0x35, 0x31,
	0x32, 0x74, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x23,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x74, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2d, 0x31,
	0x30, 0x32, 0x34, 0x74, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x5f, 0x31, 0x35, 0x31, 0x38, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2d, 0x31, 0x35, 0x31, 0x38, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x94, 0x08, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x73, 0x75, 0x62, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbe, 0x06, 0x0a, 0x1e, 0x53, 0x75, 0x62,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xb0, 0x01, 0x0a, 0x17, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x17, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc7, 0x02, 0x0a, 0x16, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x8c, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x65, 0x0a, 0x15, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xa1, 0x08, 0x0a, 0x21, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xb7, 0x01, 0x0a, 0x24, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x24, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc1, 0x06, 0x0a, 0x20, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a,
	0x17, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x61, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xcb, 0x02, 0x0a, 0x16, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc9,
	0x01, 0x0a, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x90, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x65, 0x0a, 0x15, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xe3, 0x07,
	0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa1,
	0x01, 0x0a, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x61,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x9e, 0x06, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x81, 0x01, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x61, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x61, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xc1, 0x02, 0x0a, 0x16, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbf,
	0x01, 0x0a, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x86, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71,
	0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x65, 0x0a, 0x15, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x1a, 0xb8, 0x05, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x1a, 0xa8, 0x04, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x69, 0x64, 0x12, 0x6d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x64, 0x2d, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x69,
	0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x63, 0x69, 0x72, 0x2d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x70, 0x69, 0x72, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63,
	0x69, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x63, 0x69, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x69, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x70, 0x69, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xc5,
	0x06, 0x0a, 0x1d, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x1f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xfb, 0x04, 0x0a, 0x1c, 0x46, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x69, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x68, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x46, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x6d, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x6d, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0c,
	0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x45, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x46, 0x31, 0x58, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x46, 0x33,
	0x58, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6f, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x46, 0x58, 0x5f, 0x43, 0x53, 0x36, 0x58,
	0x5f, 0x43, 0x53, 0x37, 0x10, 0x03, 0x1a, 0xa3, 0x06, 0x0a, 0x1f, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x21, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x21, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xcf, 0x04, 0x0a, 0x1e, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x73, 0x6c,
	0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73,
	0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x73, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x6d, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x6d, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x78, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x42, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x46, 0x31, 0x58, 0x5f, 0x41, 0x46, 0x32,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x46, 0x33, 0x58, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x6f, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x46,
	0x58, 0x5f, 0x43, 0x53, 0x36, 0x58, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x03, 0x1a, 0xda, 0x09, 0x0a,
	0x18, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x1a, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xa9, 0x08,
	0x0a, 0x17, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x69, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x72, 0x6f,
	0x70, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72, 0x65, 0x64,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72,
	0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x77, 0x72, 0x65, 0x64,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x45, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x41, 0x46, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x46, 0x33,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x41, 0x46, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x43, 0x53,
	0x36, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x53, 0x37, 0x10, 0x07, 0x1a, 0xd0, 0x09, 0x0a, 0x1d, 0x53, 0x6c,
	0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x1f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x1f, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x86, 0x08, 0x0a, 0x1c, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x6d, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x6c, 0x6f,
	0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x2d,
	0x6d, 0x61, 0x78, 0x2d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x30,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x30, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2d, 0x31, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x30, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x30, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x30,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x30, 0x12, 0x32, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x73, 0x65, 0x64,
	0x2d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x31,
	0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x66, 0x72, 0x65, 0x65, 0x2d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2d, 0x31, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x72,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x64, 0x2d, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x30, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x30, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x70, 0x69,
	0x72, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x30, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x30,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x61, 0x6e,
	0x6b, 0x6e, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x30, 0x12, 0x32, 0x0a, 0x14,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x30, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x72, 0x65, 0x65,
	0x2d, 0x62, 0x61, 0x6e, 0x6b, 0x6e, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x30,
	0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x2d,
	0x70, 0x69, 0x72, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x31, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x70, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x31, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x70, 0x69, 0x72, 0x2d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2d, 0x31, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x61, 0x6e, 0x6b, 0x6e, 0x6f, 0x74,
	0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x31, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x31,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x72, 0x65, 0x65, 0x2d, 0x62, 0x61, 0x6e,
	0x6b, 0x6e, 0x6f, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x31, 0x1a, 0xd3, 0x33, 0x0a,
	0x04, 0x51, 0x70, 0x70, 0x62, 0x12, 0x4c, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73,
	0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x73, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x73, 0x12, 0x55, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xb1, 0x04, 0x0a, 0x0c, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f,
	0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x1a, 0xc8, 0x03, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x52, 0x0d,
	0x71, 0x6f, 0x73, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x73, 0x1a, 0xcc, 0x01,
	0x0a, 0x0b, 0x51, 0x6f, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x6d, 0x0a,
	0x0c, 0x71, 0x6f, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x0c,
	0x71, 0x6f, 0x73, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x1a, 0x4e, 0x0a, 0x0a,
	0x51, 0x6f, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa0, 0x04, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x12, 0x56, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xb7, 0x03, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73,
	0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x42, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x58, 0x5f, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a,
	0x80, 0x29, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x62, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x2e, 0x51,
	0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0x88, 0x28, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x60,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x71, 0x6f, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x2e, 0x51, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x63, 0x61,
	0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x2d, 0x63, 0x61, 0x72, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x61, 0x72,
	0x2d, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x61, 0x72, 0x5f,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x61, 0x72, 0x2d, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x63, 0x61, 0x72, 0x2d, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x63, 0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x63, 0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x63, 0x61, 0x72, 0x2d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61,
	0x72, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x61, 0x72, 0x2d, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x2d, 0x72,
	0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61,
	0x72, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x63, 0x61, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x71, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x62, 0x65,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x2d, 0x73, 0x71, 0x2d, 0x62, 0x65, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x31, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x31, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x73, 0x71, 0x5f, 0x61, 0x66, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71,
	0x2d, 0x61, 0x66, 0x31, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x32, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x32, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71,
	0x5f, 0x61, 0x66, 0x32, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61,
	0x66, 0x32, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x33, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x33, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61,
	0x66, 0x33, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x33,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d,
	0x73, 0x71, 0x2d, 0x61, 0x66, 0x34, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x34,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x34, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x71, 0x5f, 0x65, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d,
	0x65, 0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x65, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x65, 0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73,
	0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x36, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d,
	0x73, 0x71, 0x2d, 0x63, 0x73, 0x36, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73, 0x37, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x37, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x73, 0x71, 0x5f, 0x63, 0x73, 0x37, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71,
	0x2d, 0x63, 0x73, 0x37, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x62, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x2d, 0x73, 0x71, 0x2d, 0x62, 0x65, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x62, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x62, 0x65, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x31, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x31, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61,
	0x66, 0x31, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x31, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x71, 0x5f, 0x61, 0x66, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x32,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71,
	0x2d, 0x61, 0x66, 0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x33, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d,
	0x73, 0x71, 0x2d, 0x61, 0x66, 0x33, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x33, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x33, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66,
	0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x34, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71,
	0x5f, 0x61, 0x66, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x34,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x71, 0x5f, 0x65, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x65, 0x66,
	0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x71, 0x5f, 0x65, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d,
	0x65, 0x66, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73, 0x36, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71,
	0x2d, 0x63, 0x73, 0x36, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73, 0x36, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x36, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73, 0x37, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x37, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63,
	0x73, 0x37, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x37, 0x2d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x71, 0x5f, 0x62, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71,
	0x2d, 0x62, 0x65, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x62, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x62, 0x65, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x31, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x31, 0x2d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x31, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x31, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x71, 0x5f, 0x61, 0x66, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73,
	0x71, 0x2d, 0x61, 0x66, 0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61,
	0x66, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d,
	0x61, 0x66, 0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x33, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x33, 0x2d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x33, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x33, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x34, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x73, 0x71, 0x5f, 0x61, 0x66, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x34, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f,
	0x65, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x17, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x65,
	0x66, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x65, 0x66, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x65, 0x66, 0x2d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73, 0x36, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x36, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x73, 0x71, 0x5f, 0x63, 0x73, 0x36, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x36, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f,
	0x63, 0x73, 0x37, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d,
	0x63, 0x73, 0x37, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73, 0x37,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73,
	0x37, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x19, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x62, 0x65, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x62, 0x65, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x31, 0x2d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x31, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x31, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x32, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66, 0x32, 0x2d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x32, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66,
	0x32, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3e,
	0x0a, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x33, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d, 0x61, 0x66,
	0x33, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66, 0x33,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d,
	0x61, 0x66, 0x33, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61, 0x66,
	0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d,
	0x61, 0x66, 0x34, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x61,
	0x66, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73,
	0x71, 0x2d, 0x61, 0x66, 0x34, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f,
	0x65, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71,
	0x2d, 0x65, 0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x65,
	0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73, 0x71,
	0x2d, 0x65, 0x66, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63, 0x73,
	0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73, 0x71, 0x2d,
	0x63, 0x73, 0x36, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x63,
	0x73, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x73,
	0x71, 0x2d, 0x63, 0x73, 0x36, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x5f,
	0x63, 0x73, 0x37, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x73,
	0x71, 0x2d, 0x63, 0x73, 0x37, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x71,
	0x5f, 0x63, 0x73, 0x37, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x2d, 0x73, 0x71, 0x2d, 0x63, 0x73, 0x37, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d,
	0x72, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x03, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x3b, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x71, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R12_qos_proto_rawDescOnce sync.Once
	file_huaweiV8R12_qos_proto_rawDescData = file_huaweiV8R12_qos_proto_rawDesc
)

func file_huaweiV8R12_qos_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_qos_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_qos_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_qos_proto_rawDescData)
	})
	return file_huaweiV8R12_qos_proto_rawDescData
}

var file_huaweiV8R12_qos_proto_enumTypes = make([]protoimpl.EnumInfo, 258)
var file_huaweiV8R12_qos_proto_msgTypes = make([]protoimpl.MessageInfo, 397)
var file_huaweiV8R12_qos_proto_goTypes = []interface{}{
	(Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor_Color)(0),                                                                                // 0: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors.WredColor.Color
	(Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor_Color)(0),                                                                                // 1: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors.WredColor.Color
	(Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState_Color)(0),                                                                      // 2: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates.WredColorState.Color
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Mode)(0),                                                                                          // 3: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Mode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ServiceClass)(0),                                                                     // 4: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ServiceClass
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ScheduleMode)(0),                                              // 5: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ScheduleMode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowLatency)(0),                                                // 6: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.LowLatency
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_LowJitter)(0),                                                 // 7: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.LowJitter
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirScheduleMode)(0),                                               // 8: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirScheduleMode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_PirScheduleMode)(0),                                               // 9: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.PirScheduleMode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue_ServiceClass)(0),                                                 // 10: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues.NormalModeQueue.ServiceClass
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Be)(0),                                                                 // 11: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Be
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af1)(0),                                                                // 12: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af1
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af2)(0),                                                                // 13: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af2
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af3)(0),                                                                // 14: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af3
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Af4)(0),                                                                // 15: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af4
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Ef)(0),                                                                 // 16: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Ef
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs6)(0),                                                                // 17: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Cs6
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_Cs7)(0),                                                                // 18: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Cs7
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping_QueueScheduleMode)(0),                                                  // 19: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.QueueScheduleMode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_ShapId)(0),                                                         // 20: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.ShapId
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Be)(0),                                                             // 21: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Be
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af1)(0),                                                            // 22: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af1
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af2)(0),                                                            // 23: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af2
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af3)(0),                                                            // 24: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af3
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Af4)(0),                                                            // 25: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af4
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Ef)(0),                                                             // 26: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Ef
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs6)(0),                                                            // 27: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Cs6
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_Cs7)(0),                                                            // 28: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Cs7
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId_QueueScheduleMode)(0),                                              // 29: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.QueueScheduleMode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Be)(0),                                           // 30: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Be
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af1)(0),                                          // 31: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af1
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af2)(0),                                          // 32: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af2
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af3)(0),                                          // 33: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af3
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Af4)(0),                                          // 34: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af4
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Ef)(0),                                           // 35: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Ef
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs6)(0),                                          // 36: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Cs6
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard_Cs7)(0),                                          // 37: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Cs7
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard_ServiceClass)(0),                                 // 38: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards.NormalModeRandomDiscard.ServiceClass
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_CosValue)(0),                                                   // 39: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue.CosValue
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue_ScheduleMode)(0),                                               // 40: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue.ScheduleMode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue_ServiceClass)(0),                                             // 41: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues.PriorityModeQueue.ServiceClass
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule_ScheduleMode)(0),                                       // 42: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules.PriorityModeSchedule.ScheduleMode
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ShapId)(0),                                     // 43: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.ShapId
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Be)(0),                                         // 44: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Be
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af1)(0),                                        // 45: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af1
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af2)(0),                                        // 46: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af2
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af3)(0),                                        // 47: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af3
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Af4)(0),                                        // 48: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af4
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Ef)(0),                                         // 49: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Ef
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs6)(0),                                        // 50: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Cs6
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_Cs7)(0),                                        // 51: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Cs7
	(Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping_ScheduleMode)(0),                               // 52: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.ScheduleMode
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Mode)(0),                                                                                              // 53: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Mode
	(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_Direction)(0),                                                                    // 54: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.Direction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_PriorityLevelId)(0),                                                              // 55: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.PriorityLevelId
	(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_AdjustOnCard)(0),                                                                 // 56: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.AdjustOnCard
	(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight_Direction)(0),                                                        // 57: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights.UserQueueWeight.Direction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_Direction)(0),                                                  // 58: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.Direction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_PriorityLevelId)(0),                                            // 59: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.PriorityLevelId
	(Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange_AdjustOnCard)(0),                                               // 60: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.AdjustOnCard
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Type)(0),                                                                                     // 61: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.Type
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_Direction)(0),                                                                                // 62: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.Direction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenAction)(0),                                                                              // 63: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.GreenAction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenServiceClass)(0),                                                                        // 64: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.GreenServiceClass
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_GreenColor)(0),                                                                               // 65: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.GreenColor
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowAction)(0),                                                                             // 66: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.YellowAction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowServiceClass)(0),                                                                       // 67: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.YellowServiceClass
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_YellowColor)(0),                                                                              // 68: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.YellowColor
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedAction)(0),                                                                                // 69: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.RedAction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedServiceClass)(0),                                                                          // 70: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.RedServiceClass
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_RedColor)(0),                                                                                 // 71: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.RedColor
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car_ColorAware)(0),                                                                               // 72: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.ColorAware
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Type)(0),                                                                       // 73: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.Type
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_Direction)(0),                                                                  // 74: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.Direction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_PriorityAware)(0),                                                              // 75: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.PriorityAware
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenAction)(0),                                                                // 76: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.GreenAction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenServiceClass)(0),                                                          // 77: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.GreenServiceClass
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_GreenColor)(0),                                                                 // 78: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.GreenColor
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowAction)(0),                                                               // 79: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.YellowAction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowServiceClass)(0),                                                         // 80: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.YellowServiceClass
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_YellowColor)(0),                                                                // 81: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.YellowColor
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedAction)(0),                                                                  // 82: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.RedAction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedServiceClass)(0),                                                            // 83: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.RedServiceClass
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_RedColor)(0),                                                                   // 84: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.RedColor
	(Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar_ColorAware)(0),                                                                 // 85: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.ColorAware
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Type)(0),                                                                     // 86: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression.Type
	(Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression_Direction)(0),                                                                // 87: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression.Direction
	(Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue_Direction)(0),                                                    // 88: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues.EightCosModeQueue.Direction
	(Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_FlowQueueServiceClass)(0),                                                // 89: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter.FlowQueueServiceClass
	(Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter_PortQueueServiceClass)(0),                                                // 90: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter.PortQueueServiceClass
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Mode)(0),                                                                                // 91: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Mode
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ModeTemplate)(0),                                                                        // 92: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ModeTemplate
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping_Direction)(0),                                                          // 93: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings.Shaping.Direction
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Priority)(0),                                             // 94: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty.Priority
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty_Direction)(0),                                            // 95: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty.Direction
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir_Direction)(0),                                                            // 96: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs.CirPir.Direction
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight_Direction)(0),                                                            // 97: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights.Weight.Direction
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_Direction)(0),                        // 98: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics.Direction
	(Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics_ServiceClass)(0),                     // 99: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics.ServiceClass
	(Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength_Direction)(0),                                            // 100: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths.ServiceLength.Direction
	(Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FlowQueueServiceClass)(0),                                      // 101: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter.FlowQueueServiceClass
	(Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter_FourQueueServiceClass)(0),                                      // 102: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter.FourQueueServiceClass
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue_ServiceClass)(0),                                                     // 103: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues.Queue.ServiceClass
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState_ServiceClass)(0),                                           // 104: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates.QueueState.ServiceClass
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Be)(0),                                                     // 105: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Be
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af1)(0),                                                    // 106: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af1
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af2)(0),                                                    // 107: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af2
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af3)(0),                                                    // 108: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af3
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Af4)(0),                                                    // 109: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af4
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Ef)(0),                                                     // 110: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Ef
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs6)(0),                                                    // 111: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Cs6
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_Cs7)(0),                                                    // 112: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Cs7
	(Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape_QueueScheduleMode)(0),                                      // 113: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.QueueScheduleMode
	(Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferModeGe)(0),                                             // 114: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot.BufferModeGe
	(Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot_BufferMode10Ge)(0),                                           // 115: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot.BufferMode10Ge
	(Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface_BufferMode)(0),                                     // 116: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces.BufferModeInterface.BufferMode
	(Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_ServiceClass)(0),                                   // 117: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters.ServiceClass
	(Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters_Priority)(0),                                       // 118: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters.Priority
	(Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_ServiceClass)(0),                                                       // 119: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue.ServiceClass
	(Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue_Color)(0),                                                              // 120: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue.Color
	(Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Mode)(0),                                                                          // 121: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.Mode
	(Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode_ScheduleMode)(0),                       // 122: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes.PriorityShedulerMode.ScheduleMode
	(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Type)(0),                                           // 123: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.Type
	(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_ServiceClass)(0),                                   // 124: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.ServiceClass
	(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation_Color)(0),                                          // 125: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.Color
	(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Type)(0),                                                     // 126: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.Type
	(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_ServiceClass)(0),                                             // 127: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.ServiceClass
	(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior_Color)(0),                                                    // 128: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.Color
	(Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication_Direction)(0),                          // 129: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications.DiffservDomainApplication.Direction
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_Operator)(0),                                                                          // 130: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.Operator
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny_ProtocolFamily)(0),                                                   // 131: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys.RuleAny.ProtocolFamily
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority_Type)(0),                                                   // 132: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys.RulePriority.Type
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass_ServiceClass)(0),                                   // 133: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss.RuleServiceClass.ServiceClass
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6_AddressType)(0),                                      // 134: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S.RuleAddressIpv6.AddressType
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask_MacType)(0),                                            // 135: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks.RuleMacAndMask.MacType
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress_Type)(0),                                               // 136: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss.RuleMacAddress.Type
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6_Family)(0),                                         // 137: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S.RuleProtocolIpv6.Family
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag_BitMatchType)(0),                                             // 138: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags.RuleTcpFlag.BitMatchType
	(Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6_BitMatchType)(0),                                     // 139: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S.RuleTcpFlagIpv6.BitMatchType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction_Filter)(0),                                                                   // 140: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FilterAction.Filter
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ActionType)(0),                                     // 141: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.ActionType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_ServiceClass)(0),                                   // 142: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.ServiceClass
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_Color)(0),                                          // 143: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.Color
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction_RemarkSwitch)(0),                                   // 144: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.RemarkSwitch
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_ActionType)(0),                                                 // 145: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction.ActionType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction_AfterTrust)(0),                                                 // 146: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction.AfterTrust
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction_ActionType)(0),                                                               // 147: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.AclLogAction.ActionType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ActionType)(0),                                                       // 148: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.ActionType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_GreenAction)(0),                                                      // 149: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.GreenAction
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_YellowAction)(0),                                                     // 150: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.YellowAction
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_RedAction)(0),                                                        // 151: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.RedAction
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_ColorAware)(0),                                                       // 152: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.ColorAware
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction_LimitType)(0),                                                        // 153: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.LimitType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction_IpType)(0),                                                   // 154: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions.FlowCarAction.IpType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction_Priority)(0),                                                       // 155: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.IncreasePriorityAction.Priority
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_HierarchicalCar)(0),                                            // 156: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction.HierarchicalCar
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction_Layer)(0),                                                      // 157: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction.Layer
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_SuppressType)(0),                                     // 158: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.SuppressType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenAction)(0),                                      // 159: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.GreenAction
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenServiceClass)(0),                                // 160: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.GreenServiceClass
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_GreenColor)(0),                                       // 161: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.GreenColor
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedAction)(0),                                        // 162: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.RedAction
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedServiceClass)(0),                                  // 163: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.RedServiceClass
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction_RedColor)(0),                                         // 164: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.RedColor
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction_BalanceType)(0),                                                                // 165: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.LoadAction.BalanceType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction_MatchTerm)(0),                                                             // 166: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.MatchTermAction.MatchTerm
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_FlowType)(0),                               // 167: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction.FlowType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction_SampleType)(0),                             // 168: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction.SampleType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_CheckType)(0),                                                                  // 169: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.CheckType
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_AllowDefault)(0),                                                               // 170: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.AllowDefault
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction_IgnoreDefault)(0),                                                              // 171: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.IgnoreDefault
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction_DenyAction)(0),                                                           // 172: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ExceptDenyAction.DenyAction
	(Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction_StatisticsType)(0),                                                        // 173: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SystemLogAction.StatisticsType
	(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_ShareMode)(0),                                                                                 // 174: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.ShareMode
	(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_StatFlag)(0),                                                                                  // 175: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.StatFlag
	(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_LinkExclude)(0),                                                                               // 176: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.LinkExclude
	(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_Direction)(0),                                        // 177: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode.Direction
	(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode_GroupType)(0),                                        // 178: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode.GroupType
	(Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch_Enable)(0),                                                                  // 179: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.Ipv6LocalIdSwitch.Enable
	(Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_Direction)(0),                                                                                         // 180: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.Direction
	(Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_UclType)(0),                                                                                           // 181: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.UclType
	(Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch_Type)(0),                                                                                  // 182: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs.TrafficPolicyMatch.Type
	(Qos_GlobalConfig_GlobalSetQueueStat_Interval)(0),                                                                                                  // 183: huaweiV8R12_qos.Qos.GlobalConfig.GlobalSetQueueStat.Interval
	(Qos_GlobalConfig_QueueWreds_QueueWred_ServiceClass)(0),                                                                                            // 184: huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred.ServiceClass
	(Qos_GlobalConfig_QueueWreds_QueueWred_SpeedType)(0),                                                                                               // 185: huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred.SpeedType
	(Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableType)(0),                                                                                // 186: huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable.EnableType
	(Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable_EnableValue)(0),                                                                               // 187: huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable.EnableValue
	(Qos_GlobalConfig_SchedulingModes_SchedulingMode_ModeType)(0),                                                                                      // 188: huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes.SchedulingMode.ModeType
	(Qos_GlobalConfig_ConvergenceSchedule_Mode)(0),                                                                                                     // 189: huaweiV8R12_qos.Qos.GlobalConfig.ConvergenceSchedule.Mode
	(Qos_GlobalConfig_PortConvergenceSchedule_Mode)(0),                                                                                                 // 190: huaweiV8R12_qos.Qos.GlobalConfig.PortConvergenceSchedule.Mode
	(Qos_GlobalConfig_TrafficPolicyUntag_UntagType)(0),                                                                                                 // 191: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyUntag.UntagType
	(Qos_GlobalConfig_HostPackets_HostPacket_ServiceClass)(0),                                                                                          // 192: huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket.ServiceClass
	(Qos_GlobalConfig_HostPackets_HostPacket_Color)(0),                                                                                                 // 193: huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket.Color
	(Qos_GlobalConfig_ExpPhbDisable_ForwardType)(0),                                                                                                    // 194: huaweiV8R12_qos.Qos.GlobalConfig.ExpPhbDisable.ForwardType
	(Qos_GlobalConfig_Packs_Pack_SwitchFlag)(0),                                                                                                        // 195: huaweiV8R12_qos.Qos.GlobalConfig.Packs.Pack.SwitchFlag
	(Qos_GlobalConfig_BurstSizes_BurstSize_ServiceClass)(0),                                                                                            // 196: huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes.BurstSize.ServiceClass
	(Qos_GlobalConfig_RedbackPacketAdjustment_UserType)(0),                                                                                             // 197: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustment.UserType
	(Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot_UserType)(0),                                                            // 198: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots.RedbackPacketAdjustmentSlot.UserType
	(Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude_AccessType)(0),                                                                                // 199: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes.LinkLayerExclude.AccessType
	(Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot_AccessType)(0),                                                                        // 200: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots.LinkLayerExcludeSlot.AccessType
	(Qos_GlobalConfig_L2TpLayerExclude_L2TpUser)(0),                                                                                                    // 201: huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExclude.L2TpUser
	(Qos_GlobalConfig_LocalIdEnable_Mode)(0),                                                                                                           // 202: huaweiV8R12_qos.Qos.GlobalConfig.LocalIdEnable.Mode
	(Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics_ServiceClass)(0),                                                                   // 203: huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss.DefaultQueueStatistics.ServiceClass
	(Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics_ServiceClass)(0),                                                                           // 204: huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss.AllQueueStatistics.ServiceClass
	(Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics_ServiceClass)(0),                                                                   // 205: huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss.ChannelQueueStatistics.ServiceClass
	(Qos_GlobalQuery_UserInformations_UserInformation_Direction)(0),                                                                                    // 206: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.Direction
	(Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics_ServiceClass)(0),                                        // 207: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss.UserQueueStatistics.ServiceClass
	(Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics_ResourceType)(0),                                                    // 208: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss.CarStatistics.ResourceType
	(Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ServiceClass)(0),                                                    // 209: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo.ServiceClass
	(Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo_ScheduleType)(0),                                                    // 210: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo.ScheduleType
	(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_Direction)(0),                                                  // 211: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.Direction
	(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_SwitchStatus)(0),                                               // 212: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.SwitchStatus
	(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ServiceType)(0),             // 213: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics.ServiceType
	(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics_ProtocolFamily)(0),          // 214: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics.ProtocolFamily
	(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ServiceType)(0), // 215: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics.ServiceType
	(Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics_ShareMode)(0),   // 216: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics.ShareMode
	(Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse_Direction)(0),                                                                                  // 217: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses.TrafficBufferUse.Direction
	(Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource_Direction)(0),                                                                      // 218: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources.UserGroupQueueResource.Direction
	(Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_Direction)(0),                                                                     // 219: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue.Direction
	(Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue_ServiceClass)(0),                                                                  // 220: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue.ServiceClass
	(Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_CarType)(0),                                                                                   // 221: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car.CarType
	(Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car_Direction)(0),                                                                                 // 222: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car.Direction
	(Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping_Direction)(0),                                                               // 223: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings.ShareShaping.Direction
	(Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_Direction)(0),                                                                 // 224: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar.Direction
	(Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar_PriorityNum)(0),                                                               // 225: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar.PriorityNum
	(Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_Direction)(0),                                                                                  // 226: huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics.Direction
	(Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics_ServiceClass)(0),                                                                               // 227: huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics.ServiceClass
	(Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage_Direction)(0),                                                                              // 228: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages.TrafficBufferUsage.Direction
	(Qos_GlobalQuery_QueueStatisticss_QueueStatistics_ServiceClass)(0),                                                                                 // 229: huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss.QueueStatistics.ServiceClass
	(Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics_ServiceClass)(0),                                                                         // 230: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss.PortQueueStatistics.ServiceClass
	(Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics_ServiceClass)(0),                                                           // 231: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss.PortQueueDefaultStatistics.ServiceClass
	(Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics_ServiceClass)(0),                                                           // 232: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss.PortQueueOnboardStatistics.ServiceClass
	(Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics_ServiceClass)(0),                                                           // 233: huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss.DefaultFlowQueueStatistics.ServiceClass
	(Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility_Ability)(0),                                                                                      // 234: huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys.HardPipeAbility.Ability
	(Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics_Direction)(0),                                                                    // 235: huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss.L2VpnHardPipeStatistics.Direction
	(Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_IpType)(0),                                                                                   // 236: huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics.IpType
	(Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics_Direction)(0),                                                                                // 237: huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics.Direction
	(Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_Direction)(0),                                              // 238: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics.Direction
	(Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics_ServiceClass)(0),                                           // 239: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics.ServiceClass
	(Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_Direction)(0),                                                  // 240: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic.Direction
	(Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic_ServiceClass)(0),                                               // 241: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic.ServiceClass
	(Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic_ServiceClass)(0),                                                   // 242: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics.InterfaceSubPortQueueStatistic.ServiceClass
	(Qos_GlobalQuery_QosResourceRules_QosResourceRule_RuleType)(0),                                                                                     // 243: huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules.QosResourceRule.RuleType
	(Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource_Direction)(0),                                                                          // 244: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources.SubPortQueueResource.Direction
	(Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics_Direction)(0),                                                                      // 245: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss.InterfaceCarStatistics.Direction
	(Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics_Direction)(0),                                                          // 246: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss.InterfaceCarL2PortStatistics.Direction
	(Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics_Direction)(0),                                                    // 247: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss.InterfaceCar8021PDscpStatistics.Direction
	(Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_Direction)(0),                                                      // 248: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.Direction
	(Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_Direction)(0),                                                  // 249: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.Direction
	(Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_Direction)(0),                                                            // 250: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.Direction
	(Qos_GlobalQuery_UserQueueResources_UserQueueResource_Direction)(0),                                                                                // 251: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources.UserQueueResource.Direction
	(Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics_CosValueType)(0),                                                       // 252: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss.FabricQueueUnicastStatistics.CosValueType
	(Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics_CosValueType)(0),                                                   // 253: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss.FabricQueueMulticastStatistics.CosValueType
	(Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics_ServiceClass)(0),                                                                 // 254: huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss.SlotPortQueueStatistics.ServiceClass
	(Qos_Qppb_QueryPolicys_QueryPolicy_Direction)(0),                                                                                                   // 255: huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy.Direction
	(Qos_Qppb_QueryPolicys_QueryPolicy_State)(0),                                                                                                       // 256: huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy.State
	(Qos_Qppb_QueryStatistics_QueryStatistic_Direction)(0),                                                                                             // 257: huaweiV8R12_qos.Qos.Qppb.QueryStatistics.QueryStatistic.Direction
	(*Qos)(nil),                                                                                                                                   // 258: huaweiV8R12_qos.Qos
	(*Qos_WredTemplate)(nil),                                                                                                                      // 259: huaweiV8R12_qos.Qos.WredTemplate
	(*Qos_QueueSchedulerTemplate)(nil),                                                                                                            // 260: huaweiV8R12_qos.Qos.QueueSchedulerTemplate
	(*Qos_ClassifierTemplate)(nil),                                                                                                                // 261: huaweiV8R12_qos.Qos.ClassifierTemplate
	(*Qos_GlobalConfig)(nil),                                                                                                                      // 262: huaweiV8R12_qos.Qos.GlobalConfig
	(*Qos_GlobalQuery)(nil),                                                                                                                       // 263: huaweiV8R12_qos.Qos.GlobalQuery
	(*Qos_Qppb)(nil),                                                                                                                              // 264: huaweiV8R12_qos.Qos.Qppb
	(*Qos_WredTemplate_FlowWreds)(nil),                                                                                                            // 265: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds
	(*Qos_WredTemplate_PortWreds)(nil),                                                                                                            // 266: huaweiV8R12_qos.Qos.WredTemplate.PortWreds
	(*Qos_WredTemplate_Wreds)(nil),                                                                                                                // 267: huaweiV8R12_qos.Qos.WredTemplate.Wreds
	(*Qos_WredTemplate_FlowWreds_FlowWred)(nil),                                                                                                   // 268: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred
	(*Qos_WredTemplate_FlowWreds_FlowWred_WredColors)(nil),                                                                                        // 269: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors
	(*Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor)(nil),                                                                              // 270: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors.WredColor
	(*Qos_WredTemplate_PortWreds_PortWred)(nil),                                                                                                   // 271: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred
	(*Qos_WredTemplate_PortWreds_PortWred_WredColors)(nil),                                                                                        // 272: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors
	(*Qos_WredTemplate_PortWreds_PortWred_WredColorStates)(nil),                                                                                   // 273: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates
	(*Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor)(nil),                                                                              // 274: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors.WredColor
	(*Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState)(nil),                                                                    // 275: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates.WredColorState
	(*Qos_WredTemplate_Wreds_Wred)(nil),                                                                                                           // 276: huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred
	(*Qos_WredTemplate_Wreds_Wred_Colors)(nil),                                                                                                    // 277: huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred.Colors
	(*Qos_WredTemplate_Wreds_Wred_Colors_Color)(nil),                                                                                              // 278: huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred.Colors.Color
	(*Qos_QueueSchedulerTemplate_FlowQueues)(nil),                                                                                                 // 279: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues
	(*Qos_QueueSchedulerTemplate_Profiles)(nil),                                                                                                   // 280: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles
	(*Qos_QueueSchedulerTemplate_FlowMappings)(nil),                                                                                               // 281: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings
	(*Qos_QueueSchedulerTemplate_UserGroupQueues)(nil),                                                                                            // 282: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues
	(*Qos_QueueSchedulerTemplate_ServiceTemplates)(nil),                                                                                           // 283: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates
	(*Qos_QueueSchedulerTemplate_Queue4CosMappings)(nil),                                                                                          // 284: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates)(nil),                                                                                         // 285: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates
	(*Qos_QueueSchedulerTemplate_ChannelProfiles)(nil),                                                                                            // 286: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles
	(*Qos_QueueSchedulerTemplate_BufferPolicys)(nil),                                                                                              // 287: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys
	(*Qos_QueueSchedulerTemplate_QosQueueTemplates)(nil),                                                                                          // 288: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates
	(*Qos_QueueSchedulerTemplate_SubPortQueues)(nil),                                                                                              // 289: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues
	(*Qos_QueueSchedulerTemplate_PriorityTemplates)(nil),                                                                                          // 290: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates)(nil),                                                                                         // 291: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue)(nil),                                                                                       // 292: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues)(nil),                                                                                // 293: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues)(nil),                                                                      // 294: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings)(nil),                                                                         // 295: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds)(nil),                                                                       // 296: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards)(nil),                                                              // 297: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards)(nil),                                                              // 298: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues)(nil),                                                                     // 299: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues)(nil),                                                                    // 300: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules)(nil),                                                                 // 301: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings)(nil),                                                             // 302: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues)(nil),                                                                    // 303: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue)(nil),                                                                          // 304: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType)(nil),                                                               // 305: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode)(nil),                                                   // 306: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode)(nil),                                                       // 307: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters)(nil),                                 // 308: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping)(nil),                         // 309: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.Shaping
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent)(nil),                  // 310: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.ShapingPercent
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car)(nil),                             // 311: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.Car
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent)(nil),                      // 312: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.CarPercent
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters)(nil),                                         // 313: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir)(nil),                                     // 314: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters.Cir
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent)(nil),                              // 315: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters.CirPercent
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue)(nil),                                                      // 316: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues.NormalModeQueue
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping)(nil),                                                            // 317: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId)(nil),                                                        // 318: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard)(nil),                                      // 319: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard)(nil),                                      // 320: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards.NormalModeRandomDiscard
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue)(nil),                                                    // 321: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue)(nil),                                                  // 322: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues.PriorityModeQueue
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule)(nil),                                            // 323: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules.PriorityModeSchedule
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping)(nil),                                    // 324: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue)(nil),                                                  // 325: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred)(nil),                                         // 326: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.FlowWred
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode)(nil),                                          // 327: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.CarMode
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor)(nil),                                      // 328: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.RemarkColor
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority)(nil),                                   // 329: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.ParentPriority
	(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir)(nil),                                              // 330: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.Pir
	(*Qos_QueueSchedulerTemplate_Profiles_Profile)(nil),                                                                                           // 331: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues)(nil),                                                                                // 332: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights)(nil),                                                                          // 333: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges)(nil),                                                                       // 334: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars)(nil),                                                                                      // 335: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars)(nil),                                                                               // 336: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions)(nil),                                                                              // 337: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues)(nil),                                                                      // 338: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.MplsTunnelFlowQueues
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues)(nil),                                                                        // 339: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue)(nil),                                                                      // 340: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType)(nil),                                                           // 341: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode)(nil),                                                   // 342: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType.CirMode
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode)(nil),                                            // 343: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType.CirPercentMode
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight)(nil),                                                          // 344: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights.UserQueueWeight
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange)(nil),                                                    // 345: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car)(nil),                                                                                  // 346: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar)(nil),                                                                    // 347: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression)(nil),                                                                  // 348: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue)(nil),                                                  // 349: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.MplsTunnelFlowQueues.MplsTunnelFlowQueue
	(*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue)(nil),                                                      // 350: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues.EightCosModeQueue
	(*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping)(nil),                                                                                   // 351: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping
	(*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters)(nil),                                                                        // 352: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters
	(*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter)(nil),                                                              // 353: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue)(nil),                                                                             // 354: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings)(nil),                                                                    // 355: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys)(nil),                                                             // 356: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs)(nil),                                                                     // 357: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights)(nil),                                                                     // 358: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss)(nil),                                                   // 359: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping)(nil),                                                            // 360: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings.Shaping
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty)(nil),                                              // 361: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir)(nil),                                                              // 362: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs.CirPir
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight)(nil),                                                              // 363: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights.Weight
	(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics)(nil),                          // 364: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics
	(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate)(nil),                                                                           // 365: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate
	(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths)(nil),                                                            // 366: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths
	(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm)(nil),                                                        // 367: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengthOnEtm
	(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength)(nil),                                              // 368: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths.ServiceLength
	(*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping)(nil),                                                                         // 369: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping
	(*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters)(nil),                                                              // 370: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters
	(*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter)(nil),                                                    // 371: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate)(nil),                                                                       // 372: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues)(nil),                                                                // 373: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates)(nil),                                                           // 374: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes)(nil),                                                           // 375: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue)(nil),                                                          // 376: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues.Queue
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState)(nil),                                                // 377: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates.QueueState
	(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape)(nil),                                                // 378: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape
	(*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile)(nil),                                                                             // 379: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile
	(*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas)(nil),                                                                // 380: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile.ChannelParas
	(*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara)(nil),                                                    // 381: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile.ChannelParas.ChannelPara
	(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy)(nil),                                                                                 // 382: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy
	(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots)(nil),                                                                 // 383: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots
	(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces)(nil),                                                            // 384: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces
	(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot)(nil),                                                  // 385: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot
	(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface)(nil),                                        // 386: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces.BufferModeInterface
	(*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate)(nil),                                                                         // 387: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate
	(*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss)(nil),                                                        // 388: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss
	(*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters)(nil),                                        // 389: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters
	(*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue)(nil),                                                                                 // 390: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue
	(*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping)(nil),                                                                         // 391: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue.Shaping
	(*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight)(nil),                                                                          // 392: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue.Weight
	(*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate)(nil),                                                                         // 393: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate
	(*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues)(nil),                                                                  // 394: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues
	(*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue)(nil),                                                            // 395: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate)(nil),                                                                       // 396: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping)(nil),                                                               // 397: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.Shaping
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate)(nil),                                                       // 398: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ServiceTemplate
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes)(nil),                                                 // 399: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights)(nil),                                                 // 400: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPriorityWeights
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys)(nil),                                                       // 401: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPrioritys
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings)(nil),                                                      // 402: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShapings
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode)(nil),                            // 403: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes.PriorityShedulerMode
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight)(nil),                            // 404: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPriorityWeights.ParentPriorityWeight
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority)(nil),                                        // 405: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPrioritys.ParentPriority
	(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping)(nil),                                      // 406: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShapings.PriorityShaping
	(*Qos_ClassifierTemplate_DiffservDomains)(nil),                                                                                                // 407: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains
	(*Qos_ClassifierTemplate_TrafficClassifiers)(nil),                                                                                             // 408: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers
	(*Qos_ClassifierTemplate_TrafficBehaviors)(nil),                                                                                               // 409: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors
	(*Qos_ClassifierTemplate_TrafficPolicys)(nil),                                                                                                 // 410: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys
	(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain)(nil),                                                                                 // 411: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain
	(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations)(nil),                                                            // 412: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations
	(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors)(nil),                                                                 // 413: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors
	(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications)(nil),                                                      // 414: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications
	(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation)(nil),                                        // 415: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation
	(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior)(nil),                                                  // 416: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior
	(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication)(nil),                            // 417: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications.DiffservDomainApplication
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier)(nil),                                                                           // 418: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls)(nil),                                                                  // 419: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAcls
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S)(nil),                                                              // 420: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAclIpv6S
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys)(nil),                                                                  // 421: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys)(nil),                                                             // 422: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss)(nil),                                                         // 423: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds)(nil),                                                                  // 424: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIds
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S)(nil),                                                              // 425: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIdIpv6S
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes)(nil),                                                              // 426: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleEthTypes
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S)(nil),                                                          // 427: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks)(nil),                                                           // 428: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss)(nil),                                                           // 429: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets)(nil),                                                               // 430: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleOffsets
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S)(nil),                                                         // 431: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags)(nil),                                                              // 432: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S)(nil),                                                          // 433: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans)(nil),                                                                 // 434: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleVlans
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds)(nil),                                                           // 435: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.SrcDestLocalIds
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl)(nil),                                                          // 436: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAcls.RuleAcl
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6)(nil),                                                  // 437: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAclIpv6S.RuleAclIpv6
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny)(nil),                                                          // 438: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys.RuleAny
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority)(nil),                                                // 439: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys.RulePriority
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass)(nil),                                        // 440: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss.RuleServiceClass
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId)(nil),                                                          // 441: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIds.LocalId
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6)(nil),                                                  // 442: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIdIpv6S.LocalIdIpv6
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType)(nil),                                                  // 443: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleEthTypes.RuleEthType
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6)(nil),                                          // 444: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S.RuleAddressIpv6
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask)(nil),                                            // 445: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks.RuleMacAndMask
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress)(nil),                                            // 446: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss.RuleMacAddress
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset)(nil),                                                    // 447: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleOffsets.RuleOffset
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6)(nil),                                        // 448: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S.RuleProtocolIpv6
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag)(nil),                                                  // 449: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags.RuleTcpFlag
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6)(nil),                                          // 450: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S.RuleTcpFlagIpv6
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan)(nil),                                                        // 451: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleVlans.RuleVlan
	(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId)(nil),                                            // 452: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.SrcDestLocalIds.SrcDestLocalId
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior)(nil),                                                                               // 453: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction)(nil),                                                                  // 454: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FilterAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions)(nil),                                                           // 455: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions)(nil),                                                                 // 456: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction)(nil),                                                                  // 457: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.AclLogAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions)(nil),                                                                    // 458: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions)(nil),                                                                // 459: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction)(nil),                                                        // 460: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.IncreasePriorityAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions)(nil),                                                                 // 461: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions)(nil),                                                            // 462: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction)(nil),                                                                    // 463: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.LoadAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction)(nil),                                                               // 464: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.MatchTermAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions)(nil),                                                       // 465: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction)(nil),                                                                    // 466: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction)(nil),                                                              // 467: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ExceptDenyAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction)(nil),                                                               // 468: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UserQueueAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction)(nil),                                                               // 469: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SystemLogAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror)(nil),                                                                        // 470: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance)(nil),                                              // 471: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.BehaviorBindMulticastNatInstance
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr)(nil),                                                                           // 472: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction)(nil),                                        // 473: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction)(nil),                                                    // 474: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction)(nil),                                                          // 475: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction)(nil),                                                  // 476: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions.FlowCarAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction)(nil),                                                    // 477: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction)(nil),                                          // 478: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction)(nil),                                // 479: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable)(nil),                                                           // 480: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorEnable
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice)(nil),                                                            // 481: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorSlice
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar)(nil),                                                              // 482: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorCar
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo)(nil),                                                               // 483: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorTo
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat)(nil),                     // 484: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.BehaviorBindMulticastNatInstance.BehaviorBindMulticastNat
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup)(nil),                                                          // 485: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.RedirectVpnGroup
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp)(nil),                                                               // 486: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.RedirectLsp
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4)(nil),                                                                   // 487: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrIpv4
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6)(nil),                                                                   // 488: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrIpv6
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn)(nil),                                                                  // 489: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrL2Vpn
	(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi)(nil),                                                      // 490: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrL2Vpn.RedirectVsi
	(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy)(nil),                                                                                   // 491: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy
	(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes)(nil),                                                                       // 492: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.PolicyNodes
	(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes)(nil),                                                              // 493: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes
	(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch)(nil),                                                                 // 494: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.Ipv6LocalIdSwitch
	(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode)(nil),                                                            // 495: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.PolicyNodes.PolicyNode
	(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode)(nil),                                          // 496: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode
	(*Qos_GlobalConfig_GlobalPolicys)(nil),                                                                                                        // 497: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys
	(*Qos_GlobalConfig_TrafficPolicyMatchs)(nil),                                                                                                  // 498: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs
	(*Qos_GlobalConfig_AclLog)(nil),                                                                                                               // 499: huaweiV8R12_qos.Qos.GlobalConfig.AclLog
	(*Qos_GlobalConfig_GlobalSetQueueStat)(nil),                                                                                                   // 500: huaweiV8R12_qos.Qos.GlobalConfig.GlobalSetQueueStat
	(*Qos_GlobalConfig_BufferPolicyApplys)(nil),                                                                                                   // 501: huaweiV8R12_qos.Qos.GlobalConfig.BufferPolicyApplys
	(*Qos_GlobalConfig_QueueWreds)(nil),                                                                                                           // 502: huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds
	(*Qos_GlobalConfig_LowLatencyEnables)(nil),                                                                                                    // 503: huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables
	(*Qos_GlobalConfig_SchedulingModes)(nil),                                                                                                      // 504: huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes
	(*Qos_GlobalConfig_ConvergenceSchedule)(nil),                                                                                                  // 505: huaweiV8R12_qos.Qos.GlobalConfig.ConvergenceSchedule
	(*Qos_GlobalConfig_PortConvergenceSchedule)(nil),                                                                                              // 506: huaweiV8R12_qos.Qos.GlobalConfig.PortConvergenceSchedule
	(*Qos_GlobalConfig_TrafficPolicyUntag)(nil),                                                                                                   // 507: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyUntag
	(*Qos_GlobalConfig_HostPackets)(nil),                                                                                                          // 508: huaweiV8R12_qos.Qos.GlobalConfig.HostPackets
	(*Qos_GlobalConfig_ExpPhbDisable)(nil),                                                                                                        // 509: huaweiV8R12_qos.Qos.GlobalConfig.ExpPhbDisable
	(*Qos_GlobalConfig_Packs)(nil),                                                                                                                // 510: huaweiV8R12_qos.Qos.GlobalConfig.Packs
	(*Qos_GlobalConfig_PacketBlockThresholdAll)(nil),                                                                                              // 511: huaweiV8R12_qos.Qos.GlobalConfig.PacketBlockThresholdAll
	(*Qos_GlobalConfig_BurstSizes)(nil),                                                                                                           // 512: huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes
	(*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables)(nil),                                                                                   // 513: huaweiV8R12_qos.Qos.GlobalConfig.TmScheduleTrafficStatisticsEnables
	(*Qos_GlobalConfig_RedbackPacketAdjustment)(nil),                                                                                              // 514: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustment
	(*Qos_GlobalConfig_RedbackPacketAdjustmentSlots)(nil),                                                                                         // 515: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots
	(*Qos_GlobalConfig_LinkLayerExcludes)(nil),                                                                                                    // 516: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes
	(*Qos_GlobalConfig_LinkLayerExcludeSlots)(nil),                                                                                                // 517: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots
	(*Qos_GlobalConfig_L2TpLayerExclude)(nil),                                                                                                     // 518: huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExclude
	(*Qos_GlobalConfig_L2TpLayerExcludeSlots)(nil),                                                                                                // 519: huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExcludeSlots
	(*Qos_GlobalConfig_Mirror)(nil),                                                                                                               // 520: huaweiV8R12_qos.Qos.GlobalConfig.Mirror
	(*Qos_GlobalConfig_Pbr)(nil),                                                                                                                  // 521: huaweiV8R12_qos.Qos.GlobalConfig.Pbr
	(*Qos_GlobalConfig_LocalIdEnable)(nil),                                                                                                        // 522: huaweiV8R12_qos.Qos.GlobalConfig.LocalIdEnable
	(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy)(nil),                                                                                           // 523: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy
	(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss)(nil),                                                                   // 524: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss
	(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics)(nil),                                            // 525: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics
	(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss)(nil),                      // 526: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics.ClassifierStatisticss
	(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics)(nil), // 527: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics.ClassifierStatisticss.ClassifierStatistics
	(*Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch)(nil),                                                                               // 528: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs.TrafficPolicyMatch
	(*Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply)(nil),                                                                                 // 529: huaweiV8R12_qos.Qos.GlobalConfig.BufferPolicyApplys.BufferPolicyApply
	(*Qos_GlobalConfig_QueueWreds_QueueWred)(nil),                                                                                                 // 530: huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred
	(*Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable)(nil),                                                                                   // 531: huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable
	(*Qos_GlobalConfig_SchedulingModes_SchedulingMode)(nil),                                                                                       // 532: huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes.SchedulingMode
	(*Qos_GlobalConfig_HostPackets_HostPacket)(nil),                                                                                               // 533: huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket
	(*Qos_GlobalConfig_Packs_Pack)(nil),                                                                                                           // 534: huaweiV8R12_qos.Qos.GlobalConfig.Packs.Pack
	(*Qos_GlobalConfig_BurstSizes_BurstSize)(nil),                                                                                                 // 535: huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes.BurstSize
	(*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable)(nil),                                                 // 536: huaweiV8R12_qos.Qos.GlobalConfig.TmScheduleTrafficStatisticsEnables.TmScheduleTrafficStatisticsEnable
	(*Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot)(nil),                                                             // 537: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots.RedbackPacketAdjustmentSlot
	(*Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude)(nil),                                                                                   // 538: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes.LinkLayerExclude
	(*Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot)(nil),                                                                           // 539: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots.LinkLayerExcludeSlot
	(*Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot)(nil),                                                                           // 540: huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExcludeSlots.L2TpLayerExcludeSlot
	(*Qos_GlobalConfig_Mirror_ToObserve)(nil),                                                                                                     // 541: huaweiV8R12_qos.Qos.GlobalConfig.Mirror.ToObserve
	(*Qos_GlobalConfig_Pbr_GlobalVpnGroups)(nil),                                                                                                  // 542: huaweiV8R12_qos.Qos.GlobalConfig.Pbr.GlobalVpnGroups
	(*Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup)(nil),                                                                                   // 543: huaweiV8R12_qos.Qos.GlobalConfig.Pbr.GlobalVpnGroups.GlobalVpnGroup
	(*Qos_GlobalQuery_DefaultQueueStatisticss)(nil),                                                                                               // 544: huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss
	(*Qos_GlobalQuery_AllQueueStatisticss)(nil),                                                                                                   // 545: huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss
	(*Qos_GlobalQuery_ChannelQueueStatisticss)(nil),                                                                                               // 546: huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss
	(*Qos_GlobalQuery_UserInformations)(nil),                                                                                                      // 547: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss)(nil),                                                                                     // 548: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss
	(*Qos_GlobalQuery_CarResources)(nil),                                                                                                          // 549: huaweiV8R12_qos.Qos.GlobalQuery.CarResources
	(*Qos_GlobalQuery_TrafficBufferUses)(nil),                                                                                                     // 550: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses
	(*Qos_GlobalQuery_TrafficPolicyApplicationResources)(nil),                                                                                     // 551: huaweiV8R12_qos.Qos.GlobalQuery.TrafficPolicyApplicationResources
	(*Qos_GlobalQuery_UserGroupQueueResources)(nil),                                                                                               // 552: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources
	(*Qos_GlobalQuery_InterfaceProfileStatistics)(nil),                                                                                            // 553: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics
	(*Qos_GlobalQuery_MplsTeStatisticss)(nil),                                                                                                     // 554: huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss
	(*Qos_GlobalQuery_TrafficBufferUsages)(nil),                                                                                                   // 555: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages
	(*Qos_GlobalQuery_QueueStatisticss)(nil),                                                                                                      // 556: huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss
	(*Qos_GlobalQuery_PortQueueStatisticss)(nil),                                                                                                  // 557: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss
	(*Qos_GlobalQuery_PortQueueDefaultStatisticss)(nil),                                                                                           // 558: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss
	(*Qos_GlobalQuery_PortQueueOnboardStatisticss)(nil),                                                                                           // 559: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss
	(*Qos_GlobalQuery_DefaultFlowQueueStatisticss)(nil),                                                                                           // 560: huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss
	(*Qos_GlobalQuery_HardPipeAbilitys)(nil),                                                                                                      // 561: huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys
	(*Qos_GlobalQuery_L2VpnHardPipeStatisticss)(nil),                                                                                              // 562: huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss
	(*Qos_GlobalQuery_TrafficPolicyTemplateApplication)(nil),                                                                                      // 563: huaweiV8R12_qos.Qos.GlobalQuery.TrafficPolicyTemplateApplication
	(*Qos_GlobalQuery_FlowCarStatisticss)(nil),                                                                                                    // 564: huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss
	(*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss)(nil),                                                                                   // 565: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss
	(*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics)(nil),                                                                                     // 566: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics
	(*Qos_GlobalQuery_InterfaceSubPortQueueStatistics)(nil),                                                                                       // 567: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics
	(*Qos_GlobalQuery_InterfaceHardPipeStatisticss)(nil),                                                                                          // 568: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceHardPipeStatisticss
	(*Qos_GlobalQuery_QosResourceRules)(nil),                                                                                                      // 569: huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules
	(*Qos_GlobalQuery_SubPortQueueResources)(nil),                                                                                                 // 570: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources
	(*Qos_GlobalQuery_InterfaceCarStatisticss)(nil),                                                                                               // 571: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss
	(*Qos_GlobalQuery_InterfaceCarL2PortStatisticss)(nil),                                                                                         // 572: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss
	(*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss)(nil),                                                                                      // 573: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss
	(*Qos_GlobalQuery_InterfaceExtendStatisticss)(nil),                                                                                            // 574: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceExtendStatisticss
	(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations)(nil),                                                                                       // 575: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations
	(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations)(nil),                                                                                     // 576: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations
	(*Qos_GlobalQuery_UserQueueAbnormalAllocations)(nil),                                                                                          // 577: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations
	(*Qos_GlobalQuery_UserQueueResources)(nil),                                                                                                    // 578: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources
	(*Qos_GlobalQuery_FabricQueueUnicastStatisticss)(nil),                                                                                         // 579: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss
	(*Qos_GlobalQuery_FabricQueueMulticastStatisticss)(nil),                                                                                       // 580: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss
	(*Qos_GlobalQuery_SlotPortQueueStatisticss)(nil),                                                                                              // 581: huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss
	(*Qos_GlobalQuery_SlotChannelProfileStatisticss)(nil),                                                                                         // 582: huaweiV8R12_qos.Qos.GlobalQuery.SlotChannelProfileStatisticss
	(*Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics)(nil),                                                                        // 583: huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss.DefaultQueueStatistics
	(*Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics)(nil),                                                                                // 584: huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss.AllQueueStatistics
	(*Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics)(nil),                                                                        // 585: huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss.ChannelQueueStatistics
	(*Qos_GlobalQuery_UserInformations_UserInformation)(nil),                                                                                      // 586: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation
	(*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss)(nil),                                                                 // 587: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss
	(*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss)(nil),                                                                       // 588: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss
	(*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos)(nil),                                                                       // 589: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos
	(*Qos_GlobalQuery_UserInformations_UserInformation_CirInfo)(nil),                                                                              // 590: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CirInfo
	(*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics)(nil),                                             // 591: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss.UserQueueStatistics
	(*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics)(nil),                                                         // 592: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss.CarStatistics
	(*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo)(nil),                                                         // 593: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics)(nil),                                                    // 594: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss)(nil),                                  // 595: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss)(nil),                            // 596: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss)(nil),                              // 597: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierStatisticss
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics)(nil),                 // 598: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics)(nil),     // 599: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics
	(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics)(nil),         // 600: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierStatisticss.ClassifierStatistics
	(*Qos_GlobalQuery_CarResources_CarResource)(nil),                                                                                              // 601: huaweiV8R12_qos.Qos.GlobalQuery.CarResources.CarResource
	(*Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse)(nil),                                                                                    // 602: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses.TrafficBufferUse
	(*Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource)(nil),                                                    // 603: huaweiV8R12_qos.Qos.GlobalQuery.TrafficPolicyApplicationResources.TrafficPolicyApplicationResource
	(*Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource)(nil),                                                                        // 604: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources.UserGroupQueueResource
	(*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues)(nil),                                                                                 // 605: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues
	(*Qos_GlobalQuery_InterfaceProfileStatistics_Cars)(nil),                                                                                       // 606: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars
	(*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings)(nil),                                                                              // 607: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings
	(*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars)(nil),                                                                               // 608: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars
	(*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue)(nil),                                                                       // 609: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue
	(*Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car)(nil),                                                                                   // 610: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car
	(*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping)(nil),                                                                 // 611: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings.ShareShaping
	(*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar)(nil),                                                                   // 612: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar
	(*Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics)(nil),                                                                                    // 613: huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics
	(*Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage)(nil),                                                                                // 614: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages.TrafficBufferUsage
	(*Qos_GlobalQuery_QueueStatisticss_QueueStatistics)(nil),                                                                                      // 615: huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss.QueueStatistics
	(*Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics)(nil),                                                                              // 616: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss.PortQueueStatistics
	(*Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics)(nil),                                                                // 617: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss.PortQueueDefaultStatistics
	(*Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics)(nil),                                                                // 618: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss.PortQueueOnboardStatistics
	(*Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics)(nil),                                                                // 619: huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss.DefaultFlowQueueStatistics
	(*Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility)(nil),                                                                                      // 620: huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys.HardPipeAbility
	(*Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics)(nil),                                                                      // 621: huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss.L2VpnHardPipeStatistics
	(*Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics)(nil),                                                                                  // 622: huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics
	(*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics)(nil),                                                // 623: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics
	(*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic)(nil),                                                    // 624: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic
	(*Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic)(nil),                                                        // 625: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics.InterfaceSubPortQueueStatistic
	(*Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics)(nil),                                                              // 626: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceHardPipeStatisticss.InterfaceHardPipeStatistics
	(*Qos_GlobalQuery_QosResourceRules_QosResourceRule)(nil),                                                                                      // 627: huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules.QosResourceRule
	(*Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource)(nil),                                                                            // 628: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources.SubPortQueueResource
	(*Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics)(nil),                                                                        // 629: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss.InterfaceCarStatistics
	(*Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics)(nil),                                                            // 630: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss.InterfaceCarL2PortStatistics
	(*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics)(nil),                                                      // 631: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss.InterfaceCar8021PDscpStatistics
	(*Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics)(nil),                                                                  // 632: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceExtendStatisticss.InterfaceExtendStatistics
	(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation)(nil),                                                        // 633: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation
	(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations)(nil),                                 // 634: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.AbnormalConfigurations
	(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration)(nil),           // 635: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.AbnormalConfigurations.AbnormalConfiguration
	(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation)(nil),                                                    // 636: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation
	(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations)(nil),                             // 637: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.AbnormalConfigurations
	(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration)(nil),       // 638: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.AbnormalConfigurations.AbnormalConfiguration
	(*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation)(nil),                                                              // 639: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation
	(*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations)(nil),                                       // 640: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.AbnormalConfigurations
	(*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration)(nil),                 // 641: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.AbnormalConfigurations.AbnormalConfiguration
	(*Qos_GlobalQuery_UserQueueResources_UserQueueResource)(nil),                                                                                  // 642: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources.UserQueueResource
	(*Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics)(nil),                                                            // 643: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss.FabricQueueUnicastStatistics
	(*Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics)(nil),                                                        // 644: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss.FabricQueueMulticastStatistics
	(*Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics)(nil),                                                                      // 645: huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss.SlotPortQueueStatistics
	(*Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics)(nil),                                                            // 646: huaweiV8R12_qos.Qos.GlobalQuery.SlotChannelProfileStatisticss.SlotChannelProfileStatistics
	(*Qos_Qppb_LocalPolicys)(nil),                                                                                                                 // 647: huaweiV8R12_qos.Qos.Qppb.LocalPolicys
	(*Qos_Qppb_QueryPolicys)(nil),                                                                                                                 // 648: huaweiV8R12_qos.Qos.Qppb.QueryPolicys
	(*Qos_Qppb_QueryStatistics)(nil),                                                                                                              // 649: huaweiV8R12_qos.Qos.Qppb.QueryStatistics
	(*Qos_Qppb_LocalPolicys_LocalPolicy)(nil),                                                                                                     // 650: huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy
	(*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds)(nil),                                                                                         // 651: huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy.QosLocalIds
	(*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId)(nil),                                                                              // 652: huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy.QosLocalIds.QosLocalId
	(*Qos_Qppb_QueryPolicys_QueryPolicy)(nil),                                                                                                     // 653: huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy
	(*Qos_Qppb_QueryStatistics_QueryStatistic)(nil),                                                                                               // 654: huaweiV8R12_qos.Qos.Qppb.QueryStatistics.QueryStatistic
}
var file_huaweiV8R12_qos_proto_depIdxs = []int32{
	259, // 0: huaweiV8R12_qos.Qos.wred_template:type_name -> huaweiV8R12_qos.Qos.WredTemplate
	260, // 1: huaweiV8R12_qos.Qos.queue_scheduler_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate
	261, // 2: huaweiV8R12_qos.Qos.classifier_template:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate
	262, // 3: huaweiV8R12_qos.Qos.global_config:type_name -> huaweiV8R12_qos.Qos.GlobalConfig
	263, // 4: huaweiV8R12_qos.Qos.global_query:type_name -> huaweiV8R12_qos.Qos.GlobalQuery
	264, // 5: huaweiV8R12_qos.Qos.qppb:type_name -> huaweiV8R12_qos.Qos.Qppb
	265, // 6: huaweiV8R12_qos.Qos.WredTemplate.flow_wreds:type_name -> huaweiV8R12_qos.Qos.WredTemplate.FlowWreds
	266, // 7: huaweiV8R12_qos.Qos.WredTemplate.port_wreds:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds
	267, // 8: huaweiV8R12_qos.Qos.WredTemplate.wreds:type_name -> huaweiV8R12_qos.Qos.WredTemplate.Wreds
	279, // 9: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.flow_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues
	280, // 10: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.profiles:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles
	281, // 11: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.flow_mappings:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings
	282, // 12: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.user_group_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues
	283, // 13: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.service_templates:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates
	284, // 14: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.queue_4cos_mappings:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings
	285, // 15: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.port_queue_templates:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates
	286, // 16: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.channel_profiles:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles
	287, // 17: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.buffer_policys:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys
	288, // 18: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.qos_queue_templates:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates
	289, // 19: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.sub_port_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues
	290, // 20: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.priority_templates:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates
	291, // 21: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.user_queue_templates:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates
	407, // 22: huaweiV8R12_qos.Qos.ClassifierTemplate.diffserv_domains:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains
	408, // 23: huaweiV8R12_qos.Qos.ClassifierTemplate.traffic_classifiers:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers
	409, // 24: huaweiV8R12_qos.Qos.ClassifierTemplate.traffic_behaviors:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors
	410, // 25: huaweiV8R12_qos.Qos.ClassifierTemplate.traffic_policys:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys
	497, // 26: huaweiV8R12_qos.Qos.GlobalConfig.global_policys:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys
	498, // 27: huaweiV8R12_qos.Qos.GlobalConfig.traffic_policy_matchs:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs
	499, // 28: huaweiV8R12_qos.Qos.GlobalConfig.acl_log:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.AclLog
	500, // 29: huaweiV8R12_qos.Qos.GlobalConfig.global_set_queue_stat:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalSetQueueStat
	501, // 30: huaweiV8R12_qos.Qos.GlobalConfig.buffer_policy_applys:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.BufferPolicyApplys
	502, // 31: huaweiV8R12_qos.Qos.GlobalConfig.queue_wreds:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds
	503, // 32: huaweiV8R12_qos.Qos.GlobalConfig.low_latency_enables:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables
	504, // 33: huaweiV8R12_qos.Qos.GlobalConfig.scheduling_modes:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes
	505, // 34: huaweiV8R12_qos.Qos.GlobalConfig.convergence_schedule:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.ConvergenceSchedule
	506, // 35: huaweiV8R12_qos.Qos.GlobalConfig.port_convergence_schedule:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.PortConvergenceSchedule
	507, // 36: huaweiV8R12_qos.Qos.GlobalConfig.traffic_policy_untag:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyUntag
	508, // 37: huaweiV8R12_qos.Qos.GlobalConfig.host_packets:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.HostPackets
	509, // 38: huaweiV8R12_qos.Qos.GlobalConfig.exp_phb_disable:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.ExpPhbDisable
	510, // 39: huaweiV8R12_qos.Qos.GlobalConfig.packs:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Packs
	511, // 40: huaweiV8R12_qos.Qos.GlobalConfig.packet_block_threshold_all:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.PacketBlockThresholdAll
	512, // 41: huaweiV8R12_qos.Qos.GlobalConfig.burst_sizes:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes
	513, // 42: huaweiV8R12_qos.Qos.GlobalConfig.tm_schedule_traffic_statistics_enables:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.TmScheduleTrafficStatisticsEnables
	514, // 43: huaweiV8R12_qos.Qos.GlobalConfig.redback_packet_adjustment:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustment
	515, // 44: huaweiV8R12_qos.Qos.GlobalConfig.redback_packet_adjustment_slots:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots
	516, // 45: huaweiV8R12_qos.Qos.GlobalConfig.link_layer_excludes:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes
	517, // 46: huaweiV8R12_qos.Qos.GlobalConfig.link_layer_exclude_slots:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots
	518, // 47: huaweiV8R12_qos.Qos.GlobalConfig.l2tp_layer_exclude:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExclude
	519, // 48: huaweiV8R12_qos.Qos.GlobalConfig.l2tp_layer_exclude_slots:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExcludeSlots
	520, // 49: huaweiV8R12_qos.Qos.GlobalConfig.mirror:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Mirror
	521, // 50: huaweiV8R12_qos.Qos.GlobalConfig.pbr:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Pbr
	522, // 51: huaweiV8R12_qos.Qos.GlobalConfig.local_id_enable:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LocalIdEnable
	544, // 52: huaweiV8R12_qos.Qos.GlobalQuery.default_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss
	545, // 53: huaweiV8R12_qos.Qos.GlobalQuery.all_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss
	546, // 54: huaweiV8R12_qos.Qos.GlobalQuery.channel_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss
	547, // 55: huaweiV8R12_qos.Qos.GlobalQuery.user_informations:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations
	548, // 56: huaweiV8R12_qos.Qos.GlobalQuery.interface_traffic_policy_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss
	549, // 57: huaweiV8R12_qos.Qos.GlobalQuery.car_resources:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.CarResources
	550, // 58: huaweiV8R12_qos.Qos.GlobalQuery.traffic_buffer_uses:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses
	551, // 59: huaweiV8R12_qos.Qos.GlobalQuery.traffic_policy_application_resources:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficPolicyApplicationResources
	552, // 60: huaweiV8R12_qos.Qos.GlobalQuery.user_group_queue_resources:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources
	553, // 61: huaweiV8R12_qos.Qos.GlobalQuery.interface_profile_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics
	554, // 62: huaweiV8R12_qos.Qos.GlobalQuery.mpls_te_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss
	555, // 63: huaweiV8R12_qos.Qos.GlobalQuery.traffic_buffer_usages:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages
	556, // 64: huaweiV8R12_qos.Qos.GlobalQuery.queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss
	557, // 65: huaweiV8R12_qos.Qos.GlobalQuery.port_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss
	558, // 66: huaweiV8R12_qos.Qos.GlobalQuery.port_queue_default_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss
	559, // 67: huaweiV8R12_qos.Qos.GlobalQuery.port_queue_onboard_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss
	560, // 68: huaweiV8R12_qos.Qos.GlobalQuery.default_flow_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss
	561, // 69: huaweiV8R12_qos.Qos.GlobalQuery.hard_pipe_abilitys:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys
	562, // 70: huaweiV8R12_qos.Qos.GlobalQuery.l2vpn_hard_pipe_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss
	563, // 71: huaweiV8R12_qos.Qos.GlobalQuery.traffic_policy_template_application:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficPolicyTemplateApplication
	564, // 72: huaweiV8R12_qos.Qos.GlobalQuery.flow_car_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss
	565, // 73: huaweiV8R12_qos.Qos.GlobalQuery.interface_action_user_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss
	566, // 74: huaweiV8R12_qos.Qos.GlobalQuery.interface_user_group_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics
	567, // 75: huaweiV8R12_qos.Qos.GlobalQuery.interface_sub_port_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics
	568, // 76: huaweiV8R12_qos.Qos.GlobalQuery.interface_hard_pipe_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceHardPipeStatisticss
	569, // 77: huaweiV8R12_qos.Qos.GlobalQuery.qos_resource_rules:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules
	570, // 78: huaweiV8R12_qos.Qos.GlobalQuery.sub_port_queue_resources:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources
	571, // 79: huaweiV8R12_qos.Qos.GlobalQuery.interface_car_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss
	572, // 80: huaweiV8R12_qos.Qos.GlobalQuery.interface_car_l2_port_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss
	573, // 81: huaweiV8R12_qos.Qos.GlobalQuery.interface_car_8021p_dscp_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss
	574, // 82: huaweiV8R12_qos.Qos.GlobalQuery.interface_extend_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceExtendStatisticss
	575, // 83: huaweiV8R12_qos.Qos.GlobalQuery.sub_port_queue_abnormal_allocations:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations
	576, // 84: huaweiV8R12_qos.Qos.GlobalQuery.user_group_queue_abnormal_allocations:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations
	577, // 85: huaweiV8R12_qos.Qos.GlobalQuery.user_queue_abnormal_allocations:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations
	578, // 86: huaweiV8R12_qos.Qos.GlobalQuery.user_queue_resources:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources
	579, // 87: huaweiV8R12_qos.Qos.GlobalQuery.fabric_queue_unicast_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss
	580, // 88: huaweiV8R12_qos.Qos.GlobalQuery.fabric_queue_multicast_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss
	581, // 89: huaweiV8R12_qos.Qos.GlobalQuery.slot_port_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss
	582, // 90: huaweiV8R12_qos.Qos.GlobalQuery.slot_channel_profile_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SlotChannelProfileStatisticss
	647, // 91: huaweiV8R12_qos.Qos.Qppb.local_policys:type_name -> huaweiV8R12_qos.Qos.Qppb.LocalPolicys
	648, // 92: huaweiV8R12_qos.Qos.Qppb.query_policys:type_name -> huaweiV8R12_qos.Qos.Qppb.QueryPolicys
	649, // 93: huaweiV8R12_qos.Qos.Qppb.query_statistics:type_name -> huaweiV8R12_qos.Qos.Qppb.QueryStatistics
	268, // 94: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.flow_wred:type_name -> huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred
	271, // 95: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.port_wred:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred
	276, // 96: huaweiV8R12_qos.Qos.WredTemplate.Wreds.wred:type_name -> huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred
	269, // 97: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.wred_colors:type_name -> huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors
	270, // 98: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors.wred_color:type_name -> huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors.WredColor
	0,   // 99: huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors.WredColor.color:type_name -> huaweiV8R12_qos.Qos.WredTemplate.FlowWreds.FlowWred.WredColors.WredColor.Color
	272, // 100: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.wred_colors:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors
	273, // 101: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.wred_color_states:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates
	274, // 102: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors.wred_color:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors.WredColor
	275, // 103: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates.wred_color_state:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates.WredColorState
	1,   // 104: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors.WredColor.color:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColors.WredColor.Color
	2,   // 105: huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates.WredColorState.color:type_name -> huaweiV8R12_qos.Qos.WredTemplate.PortWreds.PortWred.WredColorStates.WredColorState.Color
	277, // 106: huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred.colors:type_name -> huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred.Colors
	278, // 107: huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred.Colors.color:type_name -> huaweiV8R12_qos.Qos.WredTemplate.Wreds.Wred.Colors.Color
	292, // 108: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.flow_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue
	331, // 109: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.profile:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile
	351, // 110: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.flow_mapping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping
	354, // 111: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.user_group_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue
	365, // 112: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.service_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate
	369, // 113: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.queue_4cos_mapping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping
	372, // 114: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.port_queue_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate
	379, // 115: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.channel_profile:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile
	382, // 116: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.buffer_policy:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy
	387, // 117: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.qos_queue_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate
	390, // 118: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.sub_port_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue
	393, // 119: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.priority_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate
	396, // 120: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.user_queue_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate
	3,   // 121: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Mode
	293, // 122: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues
	294, // 123: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.normal_mode_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues
	295, // 124: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.share_shapings:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings
	296, // 125: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.share_shaping_ids:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds
	297, // 126: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.share_shape_random_discards:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards
	298, // 127: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.normal_mode_random_discards:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards
	299, // 128: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.four_cos_mode_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues
	300, // 129: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.priority_mode_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues
	301, // 130: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.priority_mode_schedules:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules
	302, // 131: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.priority_mode_share_shapings:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings
	303, // 132: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.eight_cos_mode_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues
	304, // 133: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue
	316, // 134: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues.normal_mode_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues.NormalModeQueue
	317, // 135: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.share_shaping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping
	318, // 136: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.share_shaping_id:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId
	319, // 137: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.share_shape_random_discard:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard
	320, // 138: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards.normal_mode_random_discard:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards.NormalModeRandomDiscard
	321, // 139: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.four_cos_mode_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue
	322, // 140: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues.priority_mode_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues.PriorityModeQueue
	323, // 141: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules.priority_mode_schedule:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules.PriorityModeSchedule
	324, // 142: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.priority_mode_share_shaping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping
	325, // 143: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.eight_cos_mode_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue
	4,   // 144: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ServiceClass
	305, // 145: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.config_type:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType
	306, // 146: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.shaping_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode
	307, // 147: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.cir_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode
	5,   // 148: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ScheduleMode
	6,   // 149: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.low_latency:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.LowLatency
	7,   // 150: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.low_jitter:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.LowJitter
	308, // 151: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.shaping_parameters:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters
	8,   // 152: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.cir_schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirScheduleMode
	9,   // 153: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.pir_schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.PirScheduleMode
	313, // 154: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.cir_parameters:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters
	309, // 155: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.shaping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.Shaping
	310, // 156: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.shaping_percent:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.ShapingPercent
	311, // 157: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.car:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.Car
	312, // 158: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.car_percent:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.ShapingMode.ShapingParameters.CarPercent
	314, // 159: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters.cir:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters.Cir
	315, // 160: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters.cir_percent:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.Queues.Queue.ConfigType.CirMode.CirParameters.CirPercent
	10,  // 161: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues.NormalModeQueue.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeQueues.NormalModeQueue.ServiceClass
	11,  // 162: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.be:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Be
	12,  // 163: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.af1:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af1
	13,  // 164: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.af2:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af2
	14,  // 165: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.af3:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af3
	15,  // 166: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.af4:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Af4
	16,  // 167: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.ef:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Ef
	17,  // 168: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.cs6:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Cs6
	18,  // 169: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.cs7:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.Cs7
	19,  // 170: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.queue_schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapings.ShareShaping.QueueScheduleMode
	20,  // 171: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.shap_id:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.ShapId
	21,  // 172: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.be:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Be
	22,  // 173: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.af1:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af1
	23,  // 174: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.af2:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af2
	24,  // 175: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.af3:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af3
	25,  // 176: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.af4:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Af4
	26,  // 177: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.ef:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Ef
	27,  // 178: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.cs6:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Cs6
	28,  // 179: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.cs7:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.Cs7
	29,  // 180: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.queue_schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapingIds.ShareShapingId.QueueScheduleMode
	30,  // 181: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.be:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Be
	31,  // 182: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.af1:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af1
	32,  // 183: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.af2:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af2
	33,  // 184: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.af3:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af3
	34,  // 185: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.af4:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Af4
	35,  // 186: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.ef:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Ef
	36,  // 187: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.cs6:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Cs6
	37,  // 188: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.cs7:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.ShareShapeRandomDiscards.ShareShapeRandomDiscard.Cs7
	38,  // 189: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards.NormalModeRandomDiscard.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.NormalModeRandomDiscards.NormalModeRandomDiscard.ServiceClass
	39,  // 190: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue.cos_value:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue.CosValue
	40,  // 191: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue.schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.FourCosModeQueues.FourCosModeQueue.ScheduleMode
	41,  // 192: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues.PriorityModeQueue.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeQueues.PriorityModeQueue.ServiceClass
	42,  // 193: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules.PriorityModeSchedule.schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeSchedules.PriorityModeSchedule.ScheduleMode
	43,  // 194: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.shap_id:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.ShapId
	44,  // 195: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.be:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Be
	45,  // 196: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.af1:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af1
	46,  // 197: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.af2:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af2
	47,  // 198: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.af3:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af3
	48,  // 199: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.af4:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Af4
	49,  // 200: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.ef:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Ef
	50,  // 201: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.cs6:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Cs6
	51,  // 202: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.cs7:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.Cs7
	52,  // 203: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.PriorityModeShareShapings.PriorityModeShareShaping.ScheduleMode
	326, // 204: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.flow_wred:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.FlowWred
	327, // 205: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.car_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.CarMode
	328, // 206: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.remark_color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.RemarkColor
	329, // 207: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.parent_priority:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.ParentPriority
	330, // 208: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.pir:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowQueues.FlowQueue.EightCosModeQueues.EightCosModeQueue.Pir
	53,  // 209: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Mode
	332, // 210: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.user_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues
	333, // 211: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.user_queue_weights:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights
	334, // 212: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.user_queue_time_ranges:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges
	335, // 213: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.cars:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars
	336, // 214: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.profile_cars:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars
	337, // 215: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.suppressions:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions
	338, // 216: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.mpls_tunnel_flow_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.MplsTunnelFlowQueues
	339, // 217: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.eight_cos_mode_queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues
	340, // 218: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.user_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue
	344, // 219: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights.user_queue_weight:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights.UserQueueWeight
	345, // 220: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.user_queue_time_range:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange
	346, // 221: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.car:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car
	347, // 222: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.profile_car:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar
	348, // 223: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.suppression:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression
	349, // 224: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.MplsTunnelFlowQueues.mpls_tunnel_flow_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.MplsTunnelFlowQueues.MplsTunnelFlowQueue
	350, // 225: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues.eight_cos_mode_queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues.EightCosModeQueue
	54,  // 226: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.Direction
	341, // 227: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.config_type:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType
	55,  // 228: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.priority_level_id:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.PriorityLevelId
	56,  // 229: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.adjust_on_card:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.AdjustOnCard
	342, // 230: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType.cir_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType.CirMode
	343, // 231: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType.cir_percent_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueues.UserQueue.ConfigType.CirPercentMode
	57,  // 232: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights.UserQueueWeight.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueWeights.UserQueueWeight.Direction
	58,  // 233: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.Direction
	59,  // 234: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.priority_level_id:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.PriorityLevelId
	60,  // 235: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.adjust_on_card:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.UserQueueTimeRanges.UserQueueTimeRange.AdjustOnCard
	61,  // 236: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.type:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.Type
	62,  // 237: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.Direction
	63,  // 238: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.green_action:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.GreenAction
	64,  // 239: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.green_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.GreenServiceClass
	65,  // 240: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.green_color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.GreenColor
	66,  // 241: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.yellow_action:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.YellowAction
	67,  // 242: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.yellow_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.YellowServiceClass
	68,  // 243: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.yellow_color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.YellowColor
	69,  // 244: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.red_action:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.RedAction
	70,  // 245: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.red_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.RedServiceClass
	71,  // 246: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.red_color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.RedColor
	72,  // 247: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.color_aware:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Cars.Car.ColorAware
	73,  // 248: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.type:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.Type
	74,  // 249: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.Direction
	75,  // 250: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.priority_aware:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.PriorityAware
	76,  // 251: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.green_action:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.GreenAction
	77,  // 252: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.green_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.GreenServiceClass
	78,  // 253: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.green_color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.GreenColor
	79,  // 254: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.yellow_action:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.YellowAction
	80,  // 255: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.yellow_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.YellowServiceClass
	81,  // 256: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.yellow_color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.YellowColor
	82,  // 257: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.red_action:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.RedAction
	83,  // 258: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.red_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.RedServiceClass
	84,  // 259: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.red_color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.RedColor
	85,  // 260: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.color_aware:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.ProfileCars.ProfileCar.ColorAware
	86,  // 261: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression.type:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression.Type
	87,  // 262: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.Suppressions.Suppression.Direction
	88,  // 263: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues.EightCosModeQueue.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Profiles.Profile.EightCosModeQueues.EightCosModeQueue.Direction
	352, // 264: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.parameters:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters
	353, // 265: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.parameter:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter
	89,  // 266: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter.flow_queue_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter.FlowQueueServiceClass
	90,  // 267: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter.port_queue_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.FlowMappings.FlowMapping.Parameters.Parameter.PortQueueServiceClass
	91,  // 268: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Mode
	92,  // 269: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.mode_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ModeTemplate
	355, // 270: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.shapings:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings
	356, // 271: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.shaping_priortys:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys
	357, // 272: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.cir_pirs:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs
	358, // 273: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.weights:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights
	359, // 274: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.user_group_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss
	360, // 275: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings.shaping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings.Shaping
	361, // 276: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.shaping_priorty:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty
	362, // 277: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs.cir_pir:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs.CirPir
	363, // 278: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights.weight:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights.Weight
	364, // 279: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.user_group_queue_statistics:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics
	93,  // 280: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings.Shaping.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Shapings.Shaping.Direction
	94,  // 281: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty.priority:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty.Priority
	95,  // 282: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.ShapingPriortys.ShapingPriorty.Direction
	96,  // 283: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs.CirPir.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.CirPirs.CirPir.Direction
	97,  // 284: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights.Weight.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.Weights.Weight.Direction
	98,  // 285: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics.Direction
	99,  // 286: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserGroupQueues.UserGroupQueue.UserGroupQueueStatisticss.UserGroupQueueStatistics.ServiceClass
	366, // 287: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.service_lengths:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths
	367, // 288: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.service_length_on_etm:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengthOnEtm
	368, // 289: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths.service_length:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths.ServiceLength
	100, // 290: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths.ServiceLength.direction:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ServiceTemplates.ServiceTemplate.ServiceLengths.ServiceLength.Direction
	370, // 291: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.parameters:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters
	371, // 292: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.parameter:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter
	101, // 293: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter.flow_queue_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter.FlowQueueServiceClass
	102, // 294: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter.four_queue_service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.Queue4CosMappings.Queue4CosMapping.Parameters.Parameter.FourQueueServiceClass
	373, // 295: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues
	374, // 296: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.queue_states:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates
	375, // 297: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.share_shapes:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes
	376, // 298: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues.queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues.Queue
	377, // 299: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates.queue_state:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates.QueueState
	378, // 300: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.share_shape:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape
	103, // 301: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues.Queue.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.Queues.Queue.ServiceClass
	104, // 302: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates.QueueState.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.QueueStates.QueueState.ServiceClass
	105, // 303: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.be:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Be
	106, // 304: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.af1:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af1
	107, // 305: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.af2:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af2
	108, // 306: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.af3:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af3
	109, // 307: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.af4:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Af4
	110, // 308: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.ef:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Ef
	111, // 309: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.cs6:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Cs6
	112, // 310: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.cs7:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.Cs7
	113, // 311: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.queue_schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PortQueueTemplates.PortQueueTemplate.ShareShapes.ShareShape.QueueScheduleMode
	380, // 312: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile.channel_paras:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile.ChannelParas
	381, // 313: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile.ChannelParas.channel_para:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.ChannelProfiles.ChannelProfile.ChannelParas.ChannelPara
	383, // 314: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.buffer_mode_slots:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots
	384, // 315: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.buffer_mode_interfaces:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces
	385, // 316: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.buffer_mode_slot:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot
	386, // 317: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces.buffer_mode_interface:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces.BufferModeInterface
	114, // 318: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot.buffer_mode_ge:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot.BufferModeGe
	115, // 319: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot.buffer_mode_10ge:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeSlots.BufferModeSlot.BufferMode10Ge
	116, // 320: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces.BufferModeInterface.buffer_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.BufferPolicys.BufferPolicy.BufferModeInterfaces.BufferModeInterface.BufferMode
	388, // 321: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.queue_parameterss:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss
	389, // 322: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.queue_parameters:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters
	117, // 323: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters.ServiceClass
	118, // 324: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters.priority:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.QosQueueTemplates.QosQueueTemplate.QueueParameterss.QueueParameters.Priority
	391, // 325: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue.shaping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue.Shaping
	392, // 326: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue.weight:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.SubPortQueues.SubPortQueue.Weight
	394, // 327: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.queues:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues
	395, // 328: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.queue:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue
	119, // 329: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue.service_class:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue.ServiceClass
	120, // 330: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue.color:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.PriorityTemplates.PriorityTemplate.Queues.Queue.Color
	121, // 331: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.Mode
	397, // 332: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.shaping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.Shaping
	398, // 333: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.service_template:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ServiceTemplate
	399, // 334: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.priority_sheduler_modes:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes
	400, // 335: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.parent_priority_weights:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPriorityWeights
	401, // 336: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.parent_prioritys:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPrioritys
	402, // 337: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.priority_shapings:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShapings
	403, // 338: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes.priority_sheduler_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes.PriorityShedulerMode
	404, // 339: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPriorityWeights.parent_priority_weight:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPriorityWeights.ParentPriorityWeight
	405, // 340: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPrioritys.parent_priority:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.ParentPrioritys.ParentPriority
	406, // 341: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShapings.priority_shaping:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShapings.PriorityShaping
	122, // 342: huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes.PriorityShedulerMode.schedule_mode:type_name -> huaweiV8R12_qos.Qos.QueueSchedulerTemplate.UserQueueTemplates.UserQueueTemplate.PriorityShedulerModes.PriorityShedulerMode.ScheduleMode
	411, // 343: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.diffserv_domain:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain
	418, // 344: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.traffic_classifier:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier
	453, // 345: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.traffic_behavior:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior
	491, // 346: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.traffic_policy:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy
	412, // 347: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.behavior_aggregations:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations
	413, // 348: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.per_hop_behaviors:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors
	414, // 349: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.diffserv_domain_applications:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications
	415, // 350: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.behavior_aggregation:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation
	416, // 351: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.per_hop_behavior:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior
	417, // 352: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications.diffserv_domain_application:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications.DiffservDomainApplication
	123, // 353: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.Type
	124, // 354: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.service_class:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.ServiceClass
	125, // 355: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.color:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.BehaviorAggregations.BehaviorAggregation.Color
	126, // 356: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.Type
	127, // 357: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.service_class:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.ServiceClass
	128, // 358: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.color:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.PerHopBehaviors.PerHopBehavior.Color
	129, // 359: huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications.DiffservDomainApplication.direction:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.DiffservDomains.DiffservDomain.DiffservDomainApplications.DiffservDomainApplication.Direction
	130, // 360: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.operator:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.Operator
	419, // 361: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_acls:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAcls
	420, // 362: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_acl_ipv6s:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAclIpv6S
	421, // 363: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_anys:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys
	422, // 364: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_prioritys:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys
	423, // 365: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_service_classs:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss
	424, // 366: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.local_ids:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIds
	425, // 367: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.local_id_ipv6s:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIdIpv6S
	426, // 368: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_eth_types:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleEthTypes
	427, // 369: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_address_ipv6s:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S
	428, // 370: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_mac_and_masks:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks
	429, // 371: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_mac_addresss:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss
	430, // 372: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_offsets:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleOffsets
	431, // 373: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_protocol_ipv6s:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S
	432, // 374: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_tcp_flags:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags
	433, // 375: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_tcp_flag_ipv6s:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S
	434, // 376: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.rule_vlans:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleVlans
	435, // 377: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.src_dest_local_ids:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.SrcDestLocalIds
	436, // 378: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAcls.rule_acl:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAcls.RuleAcl
	437, // 379: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAclIpv6S.rule_acl_ipv6:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAclIpv6S.RuleAclIpv6
	438, // 380: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys.rule_any:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys.RuleAny
	439, // 381: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys.rule_priority:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys.RulePriority
	440, // 382: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss.rule_service_class:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss.RuleServiceClass
	441, // 383: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIds.local_id:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIds.LocalId
	442, // 384: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIdIpv6S.local_id_ipv6:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.LocalIdIpv6S.LocalIdIpv6
	443, // 385: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleEthTypes.rule_eth_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleEthTypes.RuleEthType
	444, // 386: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S.rule_address_ipv6:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S.RuleAddressIpv6
	445, // 387: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks.rule_mac_and_mask:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks.RuleMacAndMask
	446, // 388: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss.rule_mac_address:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss.RuleMacAddress
	447, // 389: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleOffsets.rule_offset:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleOffsets.RuleOffset
	448, // 390: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S.rule_protocol_ipv6:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S.RuleProtocolIpv6
	449, // 391: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags.rule_tcp_flag:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags.RuleTcpFlag
	450, // 392: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S.rule_tcp_flag_ipv6:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S.RuleTcpFlagIpv6
	451, // 393: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleVlans.rule_vlan:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleVlans.RuleVlan
	452, // 394: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.SrcDestLocalIds.src_dest_local_id:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.SrcDestLocalIds.SrcDestLocalId
	131, // 395: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys.RuleAny.protocol_family:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAnys.RuleAny.ProtocolFamily
	132, // 396: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys.RulePriority.type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RulePrioritys.RulePriority.Type
	133, // 397: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss.RuleServiceClass.service_class:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleServiceClasss.RuleServiceClass.ServiceClass
	134, // 398: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S.RuleAddressIpv6.address_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleAddressIpv6S.RuleAddressIpv6.AddressType
	135, // 399: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks.RuleMacAndMask.mac_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAndMasks.RuleMacAndMask.MacType
	136, // 400: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss.RuleMacAddress.type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleMacAddresss.RuleMacAddress.Type
	137, // 401: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S.RuleProtocolIpv6.family:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleProtocolIpv6S.RuleProtocolIpv6.Family
	138, // 402: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags.RuleTcpFlag.bit_match_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlags.RuleTcpFlag.BitMatchType
	139, // 403: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S.RuleTcpFlagIpv6.bit_match_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficClassifiers.TrafficClassifier.RuleTcpFlagIpv6S.RuleTcpFlagIpv6.BitMatchType
	454, // 404: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.filter_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FilterAction
	455, // 405: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.service_class_actions:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions
	456, // 406: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.remark_actions:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions
	457, // 407: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.acl_log_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.AclLogAction
	458, // 408: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.car_actions:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions
	459, // 409: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.flow_car_actions:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions
	460, // 410: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.increase_priority_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.IncreasePriorityAction
	461, // 411: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.policy_actions:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions
	462, // 412: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.suppression_actions:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions
	463, // 413: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.load_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.LoadAction
	464, // 414: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.match_term_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.MatchTermAction
	465, // 415: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.netstream_sampler_actions:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions
	466, // 416: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.urpf_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction
	467, // 417: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.except_deny_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ExceptDenyAction
	468, // 418: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.user_queue_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UserQueueAction
	469, // 419: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.system_log_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SystemLogAction
	470, // 420: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.mirror:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror
	471, // 421: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.behavior_bind_multicast_nat_instance:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.BehaviorBindMulticastNatInstance
	472, // 422: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.pbr:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr
	140, // 423: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FilterAction.filter:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FilterAction.Filter
	473, // 424: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.service_class_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction
	474, // 425: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.remark_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction
	147, // 426: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.AclLogAction.action_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.AclLogAction.ActionType
	475, // 427: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.car_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction
	476, // 428: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions.flow_car_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions.FlowCarAction
	155, // 429: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.IncreasePriorityAction.priority:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.IncreasePriorityAction.Priority
	477, // 430: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.policy_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction
	478, // 431: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.suppression_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction
	165, // 432: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.LoadAction.balance_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.LoadAction.BalanceType
	166, // 433: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.MatchTermAction.match_term:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.MatchTermAction.MatchTerm
	479, // 434: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.netstream_sampler_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction
	169, // 435: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.check_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.CheckType
	170, // 436: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.allow_default:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.AllowDefault
	171, // 437: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.ignore_default:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.UrpfAction.IgnoreDefault
	172, // 438: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ExceptDenyAction.deny_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ExceptDenyAction.DenyAction
	173, // 439: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SystemLogAction.statistics_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SystemLogAction.StatisticsType
	480, // 440: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.mirror_enable:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorEnable
	481, // 441: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.mirror_slice:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorSlice
	482, // 442: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.mirror_car:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorCar
	483, // 443: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.mirror_to:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Mirror.MirrorTo
	484, // 444: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.BehaviorBindMulticastNatInstance.behavior_bind_multicast_nat:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.BehaviorBindMulticastNatInstance.BehaviorBindMulticastNat
	485, // 445: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.redirect_vpn_group:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.RedirectVpnGroup
	486, // 446: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.redirect_lsp:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.RedirectLsp
	487, // 447: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.pbr_ipv4:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrIpv4
	488, // 448: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.pbr_ipv6:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrIpv6
	489, // 449: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.pbr_l2vpn:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrL2Vpn
	141, // 450: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.action_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.ActionType
	142, // 451: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.service_class:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.ServiceClass
	143, // 452: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.color:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.Color
	144, // 453: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.remark_switch:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.ServiceClassActions.ServiceClassAction.RemarkSwitch
	145, // 454: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction.action_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction.ActionType
	146, // 455: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction.after_trust:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.RemarkActions.RemarkAction.AfterTrust
	148, // 456: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.action_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.ActionType
	149, // 457: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.green_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.GreenAction
	150, // 458: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.yellow_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.YellowAction
	151, // 459: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.red_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.RedAction
	152, // 460: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.color_aware:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.ColorAware
	153, // 461: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.limit_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.CarActions.CarAction.LimitType
	154, // 462: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions.FlowCarAction.ip_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.FlowCarActions.FlowCarAction.IpType
	156, // 463: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction.hierarchical_car:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction.HierarchicalCar
	157, // 464: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction.layer:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.PolicyActions.PolicyAction.Layer
	158, // 465: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.suppress_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.SuppressType
	159, // 466: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.green_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.GreenAction
	160, // 467: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.green_service_class:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.GreenServiceClass
	161, // 468: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.green_color:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.GreenColor
	162, // 469: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.red_action:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.RedAction
	163, // 470: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.red_service_class:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.RedServiceClass
	164, // 471: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.red_color:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.SuppressionActions.SuppressionAction.RedColor
	167, // 472: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction.flow_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction.FlowType
	168, // 473: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction.sample_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.NetstreamSamplerActions.NetstreamSamplerAction.SampleType
	490, // 474: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrL2Vpn.redirect_vsi:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficBehaviors.TrafficBehavior.Pbr.PbrL2Vpn.RedirectVsi
	174, // 475: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.share_mode:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.ShareMode
	175, // 476: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.stat_flag:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.StatFlag
	176, // 477: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.link_exclude:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.LinkExclude
	492, // 478: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.policy_nodes:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.PolicyNodes
	493, // 479: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.group_mode_policy_nodes:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes
	494, // 480: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.ipv6_local_id_switch:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.Ipv6LocalIdSwitch
	495, // 481: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.PolicyNodes.policy_node:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.PolicyNodes.PolicyNode
	496, // 482: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.group_mode_policy_node:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode
	179, // 483: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.Ipv6LocalIdSwitch.enable:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.Ipv6LocalIdSwitch.Enable
	177, // 484: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode.direction:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode.Direction
	178, // 485: huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode.group_type:type_name -> huaweiV8R12_qos.Qos.ClassifierTemplate.TrafficPolicys.TrafficPolicy.GroupModePolicyNodes.GroupModePolicyNode.GroupType
	523, // 486: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.global_policy:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy
	528, // 487: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs.traffic_policy_match:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs.TrafficPolicyMatch
	183, // 488: huaweiV8R12_qos.Qos.GlobalConfig.GlobalSetQueueStat.interval:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalSetQueueStat.Interval
	529, // 489: huaweiV8R12_qos.Qos.GlobalConfig.BufferPolicyApplys.buffer_policy_apply:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.BufferPolicyApplys.BufferPolicyApply
	530, // 490: huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.queue_wred:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred
	531, // 491: huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.low_latency_enable:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable
	532, // 492: huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes.scheduling_mode:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes.SchedulingMode
	189, // 493: huaweiV8R12_qos.Qos.GlobalConfig.ConvergenceSchedule.mode:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.ConvergenceSchedule.Mode
	190, // 494: huaweiV8R12_qos.Qos.GlobalConfig.PortConvergenceSchedule.mode:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.PortConvergenceSchedule.Mode
	191, // 495: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyUntag.untag_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyUntag.UntagType
	533, // 496: huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.host_packet:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket
	194, // 497: huaweiV8R12_qos.Qos.GlobalConfig.ExpPhbDisable.forward_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.ExpPhbDisable.ForwardType
	534, // 498: huaweiV8R12_qos.Qos.GlobalConfig.Packs.pack:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Packs.Pack
	535, // 499: huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes.burst_size:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes.BurstSize
	536, // 500: huaweiV8R12_qos.Qos.GlobalConfig.TmScheduleTrafficStatisticsEnables.tm_schedule_traffic_statistics_enable:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.TmScheduleTrafficStatisticsEnables.TmScheduleTrafficStatisticsEnable
	197, // 501: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustment.user_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustment.UserType
	537, // 502: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots.redback_packet_adjustment_slot:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots.RedbackPacketAdjustmentSlot
	538, // 503: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes.link_layer_exclude:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes.LinkLayerExclude
	539, // 504: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots.link_layer_exclude_slot:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots.LinkLayerExcludeSlot
	201, // 505: huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExclude.l2tp_user:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExclude.L2TpUser
	540, // 506: huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExcludeSlots.l2tp_layer_exclude_slot:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.L2TpLayerExcludeSlots.L2TpLayerExcludeSlot
	541, // 507: huaweiV8R12_qos.Qos.GlobalConfig.Mirror.to_observe:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Mirror.ToObserve
	542, // 508: huaweiV8R12_qos.Qos.GlobalConfig.Pbr.global_vpn_groups:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Pbr.GlobalVpnGroups
	202, // 509: huaweiV8R12_qos.Qos.GlobalConfig.LocalIdEnable.mode:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LocalIdEnable.Mode
	180, // 510: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.direction:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.Direction
	181, // 511: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.ucl_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.UclType
	524, // 512: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.global_policy_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss
	525, // 513: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.global_policy_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics
	526, // 514: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics.classifier_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics.ClassifierStatisticss
	527, // 515: huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics.ClassifierStatisticss.classifier_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.GlobalPolicys.GlobalPolicy.GlobalPolicyStatisticss.GlobalPolicyStatistics.ClassifierStatisticss.ClassifierStatistics
	182, // 516: huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs.TrafficPolicyMatch.type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.TrafficPolicyMatchs.TrafficPolicyMatch.Type
	184, // 517: huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred.ServiceClass
	185, // 518: huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred.speed_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.QueueWreds.QueueWred.SpeedType
	186, // 519: huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable.enable_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable.EnableType
	187, // 520: huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable.enable_value:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LowLatencyEnables.LowLatencyEnable.EnableValue
	188, // 521: huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes.SchedulingMode.mode_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.SchedulingModes.SchedulingMode.ModeType
	192, // 522: huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket.ServiceClass
	193, // 523: huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket.color:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.HostPackets.HostPacket.Color
	195, // 524: huaweiV8R12_qos.Qos.GlobalConfig.Packs.Pack.switch_flag:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Packs.Pack.SwitchFlag
	196, // 525: huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes.BurstSize.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.BurstSizes.BurstSize.ServiceClass
	198, // 526: huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots.RedbackPacketAdjustmentSlot.user_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.RedbackPacketAdjustmentSlots.RedbackPacketAdjustmentSlot.UserType
	199, // 527: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes.LinkLayerExclude.access_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludes.LinkLayerExclude.AccessType
	200, // 528: huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots.LinkLayerExcludeSlot.access_type:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.LinkLayerExcludeSlots.LinkLayerExcludeSlot.AccessType
	543, // 529: huaweiV8R12_qos.Qos.GlobalConfig.Pbr.GlobalVpnGroups.global_vpn_group:type_name -> huaweiV8R12_qos.Qos.GlobalConfig.Pbr.GlobalVpnGroups.GlobalVpnGroup
	583, // 530: huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss.default_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss.DefaultQueueStatistics
	584, // 531: huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss.all_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss.AllQueueStatistics
	585, // 532: huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss.channel_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss.ChannelQueueStatistics
	586, // 533: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.user_information:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation
	594, // 534: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.interface_traffic_policy_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics
	601, // 535: huaweiV8R12_qos.Qos.GlobalQuery.CarResources.car_resource:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.CarResources.CarResource
	602, // 536: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses.traffic_buffer_use:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses.TrafficBufferUse
	603, // 537: huaweiV8R12_qos.Qos.GlobalQuery.TrafficPolicyApplicationResources.traffic_policy_application_resource:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficPolicyApplicationResources.TrafficPolicyApplicationResource
	604, // 538: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources.user_group_queue_resource:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources.UserGroupQueueResource
	605, // 539: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.user_queues:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues
	606, // 540: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.cars:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars
	607, // 541: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.share_shapings:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings
	608, // 542: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.priority_cars:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars
	613, // 543: huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.mpls_te_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics
	614, // 544: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages.traffic_buffer_usage:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages.TrafficBufferUsage
	615, // 545: huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss.queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss.QueueStatistics
	616, // 546: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss.port_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss.PortQueueStatistics
	617, // 547: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss.port_queue_default_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss.PortQueueDefaultStatistics
	618, // 548: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss.port_queue_onboard_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss.PortQueueOnboardStatistics
	619, // 549: huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss.default_flow_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss.DefaultFlowQueueStatistics
	620, // 550: huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys.hard_pipe_ability:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys.HardPipeAbility
	621, // 551: huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss.l2vpn_hard_pipe_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss.L2VpnHardPipeStatistics
	622, // 552: huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.flow_car_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics
	623, // 553: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.interface_action_user_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics
	624, // 554: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.interface_user_group_queue_statistic:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic
	625, // 555: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics.interface_sub_port_queue_statistic:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics.InterfaceSubPortQueueStatistic
	626, // 556: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceHardPipeStatisticss.interface_hard_pipe_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceHardPipeStatisticss.InterfaceHardPipeStatistics
	627, // 557: huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules.qos_resource_rule:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules.QosResourceRule
	628, // 558: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources.sub_port_queue_resource:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources.SubPortQueueResource
	629, // 559: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss.interface_car_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss.InterfaceCarStatistics
	630, // 560: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss.interface_car_l2_port_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss.InterfaceCarL2PortStatistics
	631, // 561: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss.interface_car_8021p_dscp_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss.InterfaceCar8021PDscpStatistics
	632, // 562: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceExtendStatisticss.interface_extend_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceExtendStatisticss.InterfaceExtendStatistics
	633, // 563: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.sub_port_queue_abnormal_allocation:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation
	636, // 564: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.user_group_queue_abnormal_allocation:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation
	639, // 565: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.user_queue_abnormal_allocation:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation
	642, // 566: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources.user_queue_resource:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources.UserQueueResource
	643, // 567: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss.fabric_queue_unicast_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss.FabricQueueUnicastStatistics
	644, // 568: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss.fabric_queue_multicast_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss.FabricQueueMulticastStatistics
	645, // 569: huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss.slot_port_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss.SlotPortQueueStatistics
	646, // 570: huaweiV8R12_qos.Qos.GlobalQuery.SlotChannelProfileStatisticss.slot_channel_profile_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SlotChannelProfileStatisticss.SlotChannelProfileStatistics
	203, // 571: huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss.DefaultQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.DefaultQueueStatisticss.DefaultQueueStatistics.ServiceClass
	204, // 572: huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss.AllQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.AllQueueStatisticss.AllQueueStatistics.ServiceClass
	205, // 573: huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss.ChannelQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.ChannelQueueStatisticss.ChannelQueueStatistics.ServiceClass
	206, // 574: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.Direction
	587, // 575: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.user_queue_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss
	588, // 576: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.car_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss
	589, // 577: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.flow_queue_infos:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos
	590, // 578: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.cir_info:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CirInfo
	591, // 579: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss.user_queue_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss.UserQueueStatistics
	592, // 580: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss.car_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss.CarStatistics
	593, // 581: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.flow_queue_info:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo
	207, // 582: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss.UserQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.UserQueueStatisticss.UserQueueStatistics.ServiceClass
	208, // 583: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss.CarStatistics.resource_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.CarStatisticss.CarStatistics.ResourceType
	209, // 584: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo.ServiceClass
	210, // 585: huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo.schedule_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserInformations.UserInformation.FlowQueueInfos.FlowQueueInfo.ScheduleType
	211, // 586: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.Direction
	212, // 587: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.switch_status:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.SwitchStatus
	595, // 588: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.rule_based_staticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss
	596, // 589: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.classifier_based_staticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss
	597, // 590: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.classifier_statisticss:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierStatisticss
	598, // 591: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.rule_based_statics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics
	599, // 592: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.classifier_based_statics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics
	600, // 593: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierStatisticss.classifier_statistics:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierStatisticss.ClassifierStatistics
	213, // 594: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics.service_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics.ServiceType
	214, // 595: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics.protocol_family:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.RuleBasedStaticss.RuleBasedStatics.ProtocolFamily
	215, // 596: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics.service_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics.ServiceType
	216, // 597: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics.share_mode:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceTrafficPolicyStatisticss.InterfaceTrafficPolicyStatistics.ClassifierBasedStaticss.ClassifierBasedStatics.ShareMode
	217, // 598: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses.TrafficBufferUse.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUses.TrafficBufferUse.Direction
	218, // 599: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources.UserGroupQueueResource.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueResources.UserGroupQueueResource.Direction
	609, // 600: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.user_queue:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue
	610, // 601: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.car:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car
	611, // 602: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings.share_shaping:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings.ShareShaping
	612, // 603: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.priority_car:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar
	219, // 604: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue.Direction
	220, // 605: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.UserQueues.UserQueue.ServiceClass
	221, // 606: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car.car_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car.CarType
	222, // 607: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.Cars.Car.Direction
	223, // 608: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings.ShareShaping.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.ShareShapings.ShareShaping.Direction
	224, // 609: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar.Direction
	225, // 610: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar.priority_num:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceProfileStatistics.PriorityCars.PriorityCar.PriorityNum
	226, // 611: huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics.Direction
	227, // 612: huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.MplsTeStatisticss.MplsTeStatistics.ServiceClass
	228, // 613: huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages.TrafficBufferUsage.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.TrafficBufferUsages.TrafficBufferUsage.Direction
	229, // 614: huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss.QueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.QueueStatisticss.QueueStatistics.ServiceClass
	230, // 615: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss.PortQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueStatisticss.PortQueueStatistics.ServiceClass
	231, // 616: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss.PortQueueDefaultStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueDefaultStatisticss.PortQueueDefaultStatistics.ServiceClass
	232, // 617: huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss.PortQueueOnboardStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.PortQueueOnboardStatisticss.PortQueueOnboardStatistics.ServiceClass
	233, // 618: huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss.DefaultFlowQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.DefaultFlowQueueStatisticss.DefaultFlowQueueStatistics.ServiceClass
	234, // 619: huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys.HardPipeAbility.ability:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.HardPipeAbilitys.HardPipeAbility.Ability
	235, // 620: huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss.L2VpnHardPipeStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.L2VpnHardPipeStatisticss.L2VpnHardPipeStatistics.Direction
	236, // 621: huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics.ip_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics.IpType
	237, // 622: huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FlowCarStatisticss.FlowCarStatistics.Direction
	238, // 623: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics.Direction
	239, // 624: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceActionUserQueueStatisticss.InterfaceActionUserQueueStatistics.ServiceClass
	240, // 625: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic.Direction
	241, // 626: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceUserGroupQueueStatistics.InterfaceUserGroupQueueStatistic.ServiceClass
	242, // 627: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics.InterfaceSubPortQueueStatistic.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceSubPortQueueStatistics.InterfaceSubPortQueueStatistic.ServiceClass
	243, // 628: huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules.QosResourceRule.rule_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.QosResourceRules.QosResourceRule.RuleType
	244, // 629: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources.SubPortQueueResource.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueResources.SubPortQueueResource.Direction
	245, // 630: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss.InterfaceCarStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarStatisticss.InterfaceCarStatistics.Direction
	246, // 631: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss.InterfaceCarL2PortStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCarL2PortStatisticss.InterfaceCarL2PortStatistics.Direction
	247, // 632: huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss.InterfaceCar8021PDscpStatistics.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.InterfaceCar8021PDscpStatisticss.InterfaceCar8021PDscpStatistics.Direction
	248, // 633: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.Direction
	634, // 634: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.abnormal_configurations:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.AbnormalConfigurations
	635, // 635: huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.AbnormalConfigurations.abnormal_configuration:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SubPortQueueAbnormalAllocations.SubPortQueueAbnormalAllocation.AbnormalConfigurations.AbnormalConfiguration
	249, // 636: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.Direction
	637, // 637: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.abnormal_configurations:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.AbnormalConfigurations
	638, // 638: huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.AbnormalConfigurations.abnormal_configuration:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserGroupQueueAbnormalAllocations.UserGroupQueueAbnormalAllocation.AbnormalConfigurations.AbnormalConfiguration
	250, // 639: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.Direction
	640, // 640: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.abnormal_configurations:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.AbnormalConfigurations
	641, // 641: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.AbnormalConfigurations.abnormal_configuration:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueAbnormalAllocations.UserQueueAbnormalAllocation.AbnormalConfigurations.AbnormalConfiguration
	251, // 642: huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources.UserQueueResource.direction:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.UserQueueResources.UserQueueResource.Direction
	252, // 643: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss.FabricQueueUnicastStatistics.cos_value_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueUnicastStatisticss.FabricQueueUnicastStatistics.CosValueType
	253, // 644: huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss.FabricQueueMulticastStatistics.cos_value_type:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.FabricQueueMulticastStatisticss.FabricQueueMulticastStatistics.CosValueType
	254, // 645: huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss.SlotPortQueueStatistics.service_class:type_name -> huaweiV8R12_qos.Qos.GlobalQuery.SlotPortQueueStatisticss.SlotPortQueueStatistics.ServiceClass
	650, // 646: huaweiV8R12_qos.Qos.Qppb.LocalPolicys.local_policy:type_name -> huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy
	653, // 647: huaweiV8R12_qos.Qos.Qppb.QueryPolicys.query_policy:type_name -> huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy
	654, // 648: huaweiV8R12_qos.Qos.Qppb.QueryStatistics.query_statistic:type_name -> huaweiV8R12_qos.Qos.Qppb.QueryStatistics.QueryStatistic
	651, // 649: huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy.qos_local_ids:type_name -> huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy.QosLocalIds
	652, // 650: huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy.QosLocalIds.qos_local_id:type_name -> huaweiV8R12_qos.Qos.Qppb.LocalPolicys.LocalPolicy.QosLocalIds.QosLocalId
	255, // 651: huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy.direction:type_name -> huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy.Direction
	256, // 652: huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy.state:type_name -> huaweiV8R12_qos.Qos.Qppb.QueryPolicys.QueryPolicy.State
	257, // 653: huaweiV8R12_qos.Qos.Qppb.QueryStatistics.QueryStatistic.direction:type_name -> huaweiV8R12_qos.Qos.Qppb.QueryStatistics.QueryStatistic.Direction
	654, // [654:654] is the sub-list for method output_type
	654, // [654:654] is the sub-list for method input_type
	654, // [654:654] is the sub-list for extension type_name
	654, // [654:654] is the sub-list for extension extendee
	0,   // [0:654] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_qos_proto_init() }
func file_huaweiV8R12_qos_proto_init() {
	if File_huaweiV8R12_qos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_qos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_FlowWreds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_PortWreds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_Wreds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_FlowWreds_FlowWred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_FlowWreds_FlowWred_WredColors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_FlowWreds_FlowWred_WredColors_WredColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_PortWreds_PortWred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_PortWreds_PortWred_WredColors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_PortWreds_PortWred_WredColorStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_PortWreds_PortWred_WredColors_WredColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_PortWreds_PortWred_WredColorStates_WredColorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_Wreds_Wred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_Wreds_Wred_Colors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_WredTemplate_Wreds_Wred_Colors_Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowMappings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ServiceTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Queue4CosMappings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ChannelProfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_BufferPolicys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_QosQueueTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_SubPortQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PriorityTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Shaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_ShapingPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_ShapingMode_ShapingParameters_CarPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_Cir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_Queues_Queue_ConfigType_CirMode_CirParameters_CirPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeQueues_NormalModeQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapings_ShareShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapingIds_ShareShapingId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_ShareShapeRandomDiscards_ShareShapeRandomDiscard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_NormalModeRandomDiscards_NormalModeRandomDiscard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_FourCosModeQueues_FourCosModeQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeQueues_PriorityModeQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeSchedules_PriorityModeSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_PriorityModeShareShapings_PriorityModeShareShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_FlowWred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_CarMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_RemarkColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_ParentPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowQueues_FlowQueue_EightCosModeQueues_EightCosModeQueue_Pir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueues_UserQueue_ConfigType_CirPercentMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueWeights_UserQueueWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_UserQueueTimeRanges_UserQueueTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_Cars_Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_ProfileCars_ProfileCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_Suppressions_Suppression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_MplsTunnelFlowQueues_MplsTunnelFlowQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Profiles_Profile_EightCosModeQueues_EightCosModeQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_FlowMappings_FlowMapping_Parameters_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Shapings_Shaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_ShapingPriortys_ShapingPriorty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_CirPirs_CirPir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_Weights_Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserGroupQueues_UserGroupQueue_UserGroupQueueStatisticss_UserGroupQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengthOnEtm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ServiceTemplates_ServiceTemplate_ServiceLengths_ServiceLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_Queue4CosMappings_Queue4CosMapping_Parameters_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_Queues_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_QueueStates_QueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PortQueueTemplates_PortQueueTemplate_ShareShapes_ShareShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_ChannelProfiles_ChannelProfile_ChannelParas_ChannelPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeSlots_BufferModeSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_BufferPolicys_BufferPolicy_BufferModeInterfaces_BufferModeInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_QosQueueTemplates_QosQueueTemplate_QueueParameterss_QueueParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Shaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_SubPortQueues_SubPortQueue_Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_PriorityTemplates_PriorityTemplate_Queues_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_Shaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ServiceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShedulerModes_PriorityShedulerMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPriorityWeights_ParentPriorityWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_ParentPrioritys_ParentPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_QueueSchedulerTemplate_UserQueueTemplates_UserQueueTemplate_PriorityShapings_PriorityShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficPolicys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_BehaviorAggregations_BehaviorAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_PerHopBehaviors_PerHopBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_DiffservDomains_DiffservDomain_DiffservDomainApplications_DiffservDomainApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAcls_RuleAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAclIpv6S_RuleAclIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAnys_RuleAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RulePrioritys_RulePriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleServiceClasss_RuleServiceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIds_LocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_LocalIdIpv6S_LocalIdIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleEthTypes_RuleEthType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleAddressIpv6S_RuleAddressIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAndMasks_RuleMacAndMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleMacAddresss_RuleMacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleOffsets_RuleOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleProtocolIpv6S_RuleProtocolIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlags_RuleTcpFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleTcpFlagIpv6S_RuleTcpFlagIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_RuleVlans_RuleVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficClassifiers_TrafficClassifier_SrcDestLocalIds_SrcDestLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FilterAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_AclLogAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_IncreasePriorityAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_LoadAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_MatchTermAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UrpfAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ExceptDenyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_UserQueueAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SystemLogAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_ServiceClassActions_ServiceClassAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_RemarkActions_RemarkAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_CarActions_CarAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_FlowCarActions_FlowCarAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_PolicyActions_PolicyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_SuppressionActions_SuppressionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_NetstreamSamplerActions_NetstreamSamplerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Mirror_MirrorTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_BehaviorBindMulticastNatInstance_BehaviorBindMulticastNat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectVpnGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_RedirectLsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficBehaviors_TrafficBehavior_Pbr_PbrL2Vpn_RedirectVsi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_Ipv6LocalIdSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_PolicyNodes_PolicyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_ClassifierTemplate_TrafficPolicys_TrafficPolicy_GroupModePolicyNodes_GroupModePolicyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_GlobalPolicys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_TrafficPolicyMatchs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_AclLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_GlobalSetQueueStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_BufferPolicyApplys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_QueueWreds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_LowLatencyEnables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_SchedulingModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_ConvergenceSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_PortConvergenceSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_TrafficPolicyUntag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_HostPackets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_ExpPhbDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_Packs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_PacketBlockThresholdAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_BurstSizes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_RedbackPacketAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_RedbackPacketAdjustmentSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_LinkLayerExcludes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_LinkLayerExcludeSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_L2TpLayerExclude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_L2TpLayerExcludeSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_Pbr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_LocalIdEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_GlobalPolicys_GlobalPolicy_GlobalPolicyStatisticss_GlobalPolicyStatistics_ClassifierStatisticss_ClassifierStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_TrafficPolicyMatchs_TrafficPolicyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_BufferPolicyApplys_BufferPolicyApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_QueueWreds_QueueWred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_LowLatencyEnables_LowLatencyEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_SchedulingModes_SchedulingMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_HostPackets_HostPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_Packs_Pack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_BurstSizes_BurstSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_TmScheduleTrafficStatisticsEnables_TmScheduleTrafficStatisticsEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_RedbackPacketAdjustmentSlots_RedbackPacketAdjustmentSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_LinkLayerExcludes_LinkLayerExclude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_LinkLayerExcludeSlots_LinkLayerExcludeSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_L2TpLayerExcludeSlots_L2TpLayerExcludeSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_Mirror_ToObserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_Pbr_GlobalVpnGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalConfig_Pbr_GlobalVpnGroups_GlobalVpnGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_DefaultQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_AllQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_ChannelQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_CarResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_TrafficBufferUses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_TrafficPolicyApplicationResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserGroupQueueResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_MplsTeStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_TrafficBufferUsages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_QueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_PortQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_PortQueueDefaultStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_PortQueueOnboardStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_DefaultFlowQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_HardPipeAbilitys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_L2VpnHardPipeStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_TrafficPolicyTemplateApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_FlowCarStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceSubPortQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceHardPipeStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_QosResourceRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SubPortQueueResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceCarStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceCarL2PortStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceExtendStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserQueueAbnormalAllocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserQueueResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_FabricQueueUnicastStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_FabricQueueMulticastStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SlotPortQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SlotChannelProfileStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_DefaultQueueStatisticss_DefaultQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_AllQueueStatisticss_AllQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_ChannelQueueStatisticss_ChannelQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation_CirInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation_UserQueueStatisticss_UserQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation_CarStatisticss_CarStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserInformations_UserInformation_FlowQueueInfos_FlowQueueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_RuleBasedStaticss_RuleBasedStatics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierBasedStaticss_ClassifierBasedStatics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceTrafficPolicyStatisticss_InterfaceTrafficPolicyStatistics_ClassifierStatisticss_ClassifierStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_CarResources_CarResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_TrafficBufferUses_TrafficBufferUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_TrafficPolicyApplicationResources_TrafficPolicyApplicationResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserGroupQueueResources_UserGroupQueueResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_Cars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_UserQueues_UserQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_Cars_Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_ShareShapings_ShareShaping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceProfileStatistics_PriorityCars_PriorityCar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_MplsTeStatisticss_MplsTeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_TrafficBufferUsages_TrafficBufferUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_QueueStatisticss_QueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_PortQueueStatisticss_PortQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_PortQueueDefaultStatisticss_PortQueueDefaultStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_PortQueueOnboardStatisticss_PortQueueOnboardStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_DefaultFlowQueueStatisticss_DefaultFlowQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_HardPipeAbilitys_HardPipeAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_L2VpnHardPipeStatisticss_L2VpnHardPipeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_FlowCarStatisticss_FlowCarStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceActionUserQueueStatisticss_InterfaceActionUserQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceUserGroupQueueStatistics_InterfaceUserGroupQueueStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceSubPortQueueStatistics_InterfaceSubPortQueueStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceHardPipeStatisticss_InterfaceHardPipeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_QosResourceRules_QosResourceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SubPortQueueResources_SubPortQueueResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceCarStatisticss_InterfaceCarStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceCarL2PortStatisticss_InterfaceCarL2PortStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceCar8021PDscpStatisticss_InterfaceCar8021PDscpStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_InterfaceExtendStatisticss_InterfaceExtendStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SubPortQueueAbnormalAllocations_SubPortQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserGroupQueueAbnormalAllocations_UserGroupQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserQueueAbnormalAllocations_UserQueueAbnormalAllocation_AbnormalConfigurations_AbnormalConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_UserQueueResources_UserQueueResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_FabricQueueUnicastStatisticss_FabricQueueUnicastStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_FabricQueueMulticastStatisticss_FabricQueueMulticastStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SlotPortQueueStatisticss_SlotPortQueueStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_GlobalQuery_SlotChannelProfileStatisticss_SlotChannelProfileStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_LocalPolicys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_QueryPolicys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_QueryStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_LocalPolicys_LocalPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_LocalPolicys_LocalPolicy_QosLocalIds_QosLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_QueryPolicys_QueryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_qos_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qos_Qppb_QueryStatistics_QueryStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_qos_proto_rawDesc,
			NumEnums:      258,
			NumMessages:   397,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_qos_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_qos_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_qos_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_qos_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_qos_proto = out.File
	file_huaweiV8R12_qos_proto_rawDesc = nil
	file_huaweiV8R12_qos_proto_goTypes = nil
	file_huaweiV8R12_qos_proto_depIdxs = nil
}
