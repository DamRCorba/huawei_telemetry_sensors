// ---------------------------------------------------------------------------
// Protofilename : huawei-qos.proto
syntax = "proto3";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-qos
// revision 2020-06-11
// revision 2020-05-27
// revision 2020-04-10
// revision 2020-04-01
// revision 2020-03-20
// revision 2020-03-11
// revision 2020-02-03
// revision 2020-01-18
// revision 2019-12-02
// revision 2019-11-04
// revision 2019-10-18
// namespace urn:huawei:yang:huawei-qos

option go_package = ".;huaweiV8R12_qos";
package huaweiV8R12_qos;

message Qos {
   message WredTemplate {
      message FlowWreds {
         message FlowWred {
            string name = 1 [json_name = "name"];
            uint32 queue_depth = 2 [json_name = "queue-depth"];
            message WredColors {
               message WredColor {
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 1 [json_name = "color"];
                  uint32 low_limit_percentage = 2 [json_name = "low-limit-percentage"];
                  uint32 high_limit_percentage = 3 [json_name = "high-limit-percentage"];
                  uint32 discard_percentage = 4 [json_name = "discard-percentage"];
               }
               repeated WredColor wred_color = 1 [json_name = "wred-color"];
            }
            WredColors wred_colors = 3 [json_name = "wred-colors"];
         }
         repeated FlowWred flow_wred = 1 [json_name = "flow-wred"];
      }
      FlowWreds flow_wreds = 1 [json_name = "flow-wreds"];
      message PortWreds {
         message PortWred {
            string name = 1 [json_name = "name"];
            uint32 queue_depth = 2 [json_name = "queue-depth"];
            message WredColors {
               message WredColor {
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 1 [json_name = "color"];
                  uint32 low_limit_percentage = 2 [json_name = "low-limit-percentage"];
                  uint32 high_limit_percentage = 3 [json_name = "high-limit-percentage"];
                  uint32 discard_percentage = 4 [json_name = "discard-percentage"];
               }
               repeated WredColor wred_color = 1 [json_name = "wred-color"];
            }
            WredColors wred_colors = 3 [json_name = "wred-colors"];
            message WredColorStates {
               message WredColorState {
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 1 [json_name = "color"];
                  uint32 low_limit_percentage = 2 [json_name = "low-limit-percentage"];
                  uint32 high_limit_percentage = 3 [json_name = "high-limit-percentage"];
                  uint32 discard_percentage = 4 [json_name = "discard-percentage"];
               }
               repeated WredColorState wred_color_state = 1 [json_name = "wred-color-state"];
            }
            WredColorStates wred_color_states = 4 [json_name = "wred-color-states"];
         }
         repeated PortWred port_wred = 1 [json_name = "port-wred"];
      }
      PortWreds port_wreds = 2 [json_name = "port-wreds"];
      message Wreds {
         message Wred {
            string name = 1 [json_name = "name"];
            uint32 buffer_size_percentage = 2 [json_name = "buffer-size-percentage"];
            message Colors {
               message Color {
                  uint32 low_limit_percentage = 2 [json_name = "low-limit-percentage"];
                  uint32 high_limit_percentage = 3 [json_name = "high-limit-percentage"];
                  uint32 discard_percentage = 4 [json_name = "discard-percentage"];
               }
               repeated Color color = 1 [json_name = "color"];
            }
            Colors colors = 3 [json_name = "colors"];
         }
         repeated Wred wred = 1 [json_name = "wred"];
      }
      Wreds wreds = 3 [json_name = "wreds"];
   }
   WredTemplate wred_template = 1 [json_name = "wred-template"];
   message QueueSchedulerTemplate {
      message FlowQueues {
         message FlowQueue {
            string name = 1 [json_name = "name"];
            enum Mode {
               Mode_NORMAL = 0;
               Mode_PRIORITY = 1;
               Mode_X_4COS = 2;
               Mode_X_8COSX_ENHANCE = 5;
            };
            Mode mode = 2 [json_name = "mode"];
            message Queues {
               message Queue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string flow_wred_name = 2 [json_name = "flow-wred-name"];
                  message ConfigType {
                     message ShapingMode {
                        enum ScheduleMode {
                           ScheduleMode_PQ = 0;
                           ScheduleMode_WFQ = 1;
                           ScheduleMode_LPQ = 2;
                        };
                        ScheduleMode schedule_mode = 1 [json_name = "schedule-mode"];
                        uint32 weight = 2 [json_name = "weight"];
                        uint32 pbs = 3 [json_name = "pbs"];
                        enum LowLatency {
                           INVALID_ENUM_VALUE_LowLatency = 0;
                           LowLatency_ENABLE = 1;
                        };
                        LowLatency low_latency = 4 [json_name = "low-latency"];
                        enum LowJitter {
                           INVALID_ENUM_VALUE_LowJitter = 0;
                           LowJitter_ENABLE = 1;
                        };
                        LowJitter low_jitter = 5 [json_name = "low-jitter"];
                        message ShapingParameters {
                           message Shaping {
                              uint32 shaping_value = 1 [json_name = "shaping-value"];
                           }
                           Shaping shaping = 1 [json_name = "shaping"];
                           message ShapingPercent {
                              uint32 shaping_percentage = 1 [json_name = "shaping-percentage"];
                           }
                           ShapingPercent shaping_percent = 2 [json_name = "shaping-percent"];
                           message Car {
                              uint32 car_value = 1 [json_name = "car-value"];
                           }
                           Car car = 3 [json_name = "car"];
                           message CarPercent {
                              uint32 car_percentage = 1 [json_name = "car-percentage"];
                           }
                           CarPercent car_percent = 4 [json_name = "car-percent"];
                        }
                        ShapingParameters shaping_parameters = 6 [json_name = "shaping-parameters"];
                     }
                     ShapingMode shaping_mode = 1 [json_name = "shaping-mode"];
                     message CirMode {
                        enum CirScheduleMode {
                           CirScheduleMode_PQ = 0;
                        };
                        CirScheduleMode cir_schedule_mode = 1 [json_name = "cir-schedule-mode"];
                        enum PirScheduleMode {
                           PirScheduleMode_PQ = 0;
                           PirScheduleMode_WFQ = 1;
                           PirScheduleMode_LPQ = 2;
                        };
                        PirScheduleMode pir_schedule_mode = 2 [json_name = "pir-schedule-mode"];
                        uint32 pir_weight = 3 [json_name = "pir-weight"];
                        uint32 cbs = 4 [json_name = "cbs"];
                        uint32 pir_pbs = 5 [json_name = "pir-pbs"];
                        message CirParameters {
                           message Cir {
                              uint32 cir_value = 1 [json_name = "cir-value"];
                              uint32 pir_value = 2 [json_name = "pir-value"];
                           }
                           Cir cir = 1 [json_name = "cir"];
                           message CirPercent {
                              uint32 cir_percentage = 1 [json_name = "cir-percentage"];
                              uint32 pir_percentage = 2 [json_name = "pir-percentage"];
                           }
                           CirPercent cir_percent = 2 [json_name = "cir-percent"];
                        }
                        CirParameters cir_parameters = 6 [json_name = "cir-parameters"];
                     }
                     CirMode cir_mode = 2 [json_name = "cir-mode"];
                  }
                  ConfigType config_type = 3 [json_name = "config-type"];
               }
               repeated Queue queue = 1 [json_name = "queue"];
            }
            Queues queues = 3 [json_name = "queues"];
            message NormalModeQueues {
               message NormalModeQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string flow_wred_name = 2 [json_name = "flow-wred-name"];
               }
               repeated NormalModeQueue normal_mode_queue = 1 [json_name = "normal-mode-queue"];
            }
            NormalModeQueues normal_mode_queues = 4 [json_name = "normal-mode-queues"];
            message ShareShapings {
               message ShareShaping {
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 1 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 2 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 3 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 4 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 5 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 6 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 7 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 8 [json_name = "cs7"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                     QueueScheduleMode_NOTX_CONFIG = 3;
                  };
                  QueueScheduleMode queue_schedule_mode = 9 [json_name = "queue-schedule-mode"];
                  uint32 weight = 10 [json_name = "weight"];
                  uint32 share_shaping_pir = 11 [json_name = "share-shaping-pir"];
                  uint32 pbs = 12 [json_name = "pbs"];
               }
               ShareShaping share_shaping = 1 [json_name = "share-shaping"];
            }
            ShareShapings share_shapings = 5 [json_name = "share-shapings"];
            message ShareShapingIds {
               message ShareShapingId {
                  enum ShapId {
                     INVALID_ENUM_VALUE_ShapId = 0;
                     ShapId_X_1 = 1;
                  };
                  ShapId shap_id = 1 [json_name = "shap-id"];
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 2 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 3 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 4 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 5 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 6 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 7 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 8 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 9 [json_name = "cs7"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                     QueueScheduleMode_NOTX_CONFIG = 3;
                  };
                  QueueScheduleMode queue_schedule_mode = 10 [json_name = "queue-schedule-mode"];
                  uint32 weight = 11 [json_name = "weight"];
                  uint32 share_shaping_pir = 12 [json_name = "share-shaping-pir"];
                  uint32 pbs = 13 [json_name = "pbs"];
               }
               repeated ShareShapingId share_shaping_id = 1 [json_name = "share-shaping-id"];
            }
            ShareShapingIds share_shaping_ids = 6 [json_name = "share-shaping-ids"];
            message ShareShapeRandomDiscards {
               message ShareShapeRandomDiscard {
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 1 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 2 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 3 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 4 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 5 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 6 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 7 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 8 [json_name = "cs7"];
                  string random_discard = 9 [json_name = "random-discard"];
               }
               ShareShapeRandomDiscard share_shape_random_discard = 1 [json_name = "share-shape-random-discard"];
            }
            ShareShapeRandomDiscards share_shape_random_discards = 7 [json_name = "share-shape-random-discards"];
            message NormalModeRandomDiscards {
               message NormalModeRandomDiscard {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string random_discard = 2 [json_name = "random-discard"];
               }
               repeated NormalModeRandomDiscard normal_mode_random_discard = 1 [json_name = "normal-mode-random-discard"];
            }
            NormalModeRandomDiscards normal_mode_random_discards = 8 [json_name = "normal-mode-random-discards"];
            message FourCosModeQueues {
               message FourCosModeQueue {
                  enum CosValue {
                     CosValue_COS0 = 0;
                     CosValue_COS1 = 1;
                     CosValue_COS2 = 2;
                     CosValue_COS3 = 3;
                  };
                  CosValue cos_value = 1 [json_name = "cos-value"];
                  enum ScheduleMode {
                     ScheduleMode_PQ = 0;
                     ScheduleMode_WFQ = 1;
                     ScheduleMode_LPQ = 2;
                  };
                  ScheduleMode schedule_mode = 2 [json_name = "schedule-mode"];
                  uint32 weight = 3 [json_name = "weight"];
                  uint32 shaping = 4 [json_name = "shaping"];
                  uint32 shaping_percentage = 5 [json_name = "shaping-percentage"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  string flow_wred_name = 7 [json_name = "flow-wred-name"];
               }
               repeated FourCosModeQueue four_cos_mode_queue = 1 [json_name = "four-cos-mode-queue"];
            }
            FourCosModeQueues four_cos_mode_queues = 9 [json_name = "four-cos-mode-queues"];
            message PriorityModeQueues {
               message PriorityModeQueue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 priority = 2 [json_name = "priority"];
                  uint32 weight = 3 [json_name = "weight"];
                  uint32 shaping = 4 [json_name = "shaping"];
                  uint32 shaping_percentage = 5 [json_name = "shaping-percentage"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  string flow_wred_name = 7 [json_name = "flow-wred-name"];
               }
               repeated PriorityModeQueue priority_mode_queue = 1 [json_name = "priority-mode-queue"];
            }
            PriorityModeQueues priority_mode_queues = 10 [json_name = "priority-mode-queues"];
            message PriorityModeSchedules {
               message PriorityModeSchedule {
                  uint32 priority = 1 [json_name = "priority"];
                  enum ScheduleMode {
                     ScheduleMode_PQ = 0;
                     ScheduleMode_WFQ = 1;
                  };
                  ScheduleMode schedule_mode = 2 [json_name = "schedule-mode"];
               }
               repeated PriorityModeSchedule priority_mode_schedule = 1 [json_name = "priority-mode-schedule"];
            }
            PriorityModeSchedules priority_mode_schedules = 11 [json_name = "priority-mode-schedules"];
            message PriorityModeShareShapings {
               message PriorityModeShareShaping {
                  enum ShapId {
                     INVALID_ENUM_VALUE_ShapId = 0;
                     ShapId_X_1 = 1;
                     ShapId_NOTX_CONFIG = 2;
                  };
                  ShapId shap_id = 1 [json_name = "shap-id"];
                  enum Be {
                     Be_TRUE = 0;
                  };
                  Be be = 2 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                  };
                  Af1 af1 = 3 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                  };
                  Af2 af2 = 4 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                  };
                  Af3 af3 = 5 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                  };
                  Af4 af4 = 6 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                  };
                  Ef ef = 7 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                  };
                  Cs6 cs6 = 8 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                  };
                  Cs7 cs7 = 9 [json_name = "cs7"];
                  enum ScheduleMode {
                     ScheduleMode_PQ = 0;
                     ScheduleMode_WFQ = 1;
                  };
                  ScheduleMode schedule_mode = 10 [json_name = "schedule-mode"];
                  uint32 weight = 11 [json_name = "weight"];
                  uint32 share_shaping_pir = 12 [json_name = "share-shaping-pir"];
                  uint32 pbs = 13 [json_name = "pbs"];
               }
               repeated PriorityModeShareShaping priority_mode_share_shaping = 1 [json_name = "priority-mode-share-shaping"];
            }
            PriorityModeShareShapings priority_mode_share_shapings = 12 [json_name = "priority-mode-share-shapings"];
            message EightCosModeQueues {
               message EightCosModeQueue {
                  uint32 cos = 1 [json_name = "cos"];
                  message FlowWred {
                     string name = 1 [json_name = "name"];
                  }
                  FlowWred flow_wred = 2 [json_name = "flow-wred"];
                  message CarMode {
                  }
                  CarMode car_mode = 3 [json_name = "car-mode"];
                  message RemarkColor {
                  }
                  RemarkColor remark_color = 4 [json_name = "remark-color"];
                  message ParentPriority {
                     uint32 cir_parent_priority = 1 [json_name = "cir-parent-priority"];
                     uint32 cir_weight = 2 [json_name = "cir-weight"];
                     uint32 pir_parent_priority = 3 [json_name = "pir-parent-priority"];
                     uint32 pir_weight = 4 [json_name = "pir-weight"];
                  }
                  ParentPriority parent_priority = 5 [json_name = "parent-priority"];
                  message Pir {
                     uint32 pbs = 1 [json_name = "pbs"];
                     uint32 cbs = 2 [json_name = "cbs"];
                  }
                  Pir pir = 6 [json_name = "pir"];
               }
               repeated EightCosModeQueue eight_cos_mode_queue = 1 [json_name = "eight-cos-mode-queue"];
            }
            EightCosModeQueues eight_cos_mode_queues = 13 [json_name = "eight-cos-mode-queues"];
         }
         repeated FlowQueue flow_queue = 1 [json_name = "flow-queue"];
      }
      FlowQueues flow_queues = 1 [json_name = "flow-queues"];
      message Profiles {
         message Profile {
            string name = 1 [json_name = "name"];
            enum Mode {
               Mode_NORMAL = 0;
               Mode_TIMEX_RANGE = 1;
               Mode_X_8COSX_ENHANCE = 5;
            };
            Mode mode = 2 [json_name = "mode"];
            string description = 3 [json_name = "description"];
            message UserQueues {
               message UserQueue {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  message ConfigType {
                     message CirMode {
                        uint32 cir = 1 [json_name = "cir"];
                        uint32 pir = 2 [json_name = "pir"];
                     }
                     CirMode cir_mode = 1 [json_name = "cir-mode"];
                     message CirPercentMode {
                        uint32 cir_percent = 1 [json_name = "cir-percent"];
                        uint32 pir_percent = 2 [json_name = "pir-percent"];
                     }
                     CirPercentMode cir_percent_mode = 2 [json_name = "cir-percent-mode"];
                  }
                  ConfigType config_type = 2 [json_name = "config-type"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  uint32 pbs = 4 [json_name = "pbs"];
                  enum PriorityLevelId {
                     INVALID_ENUM_VALUE_PriorityLevelId = 0;
                     PriorityLevelId_HIGH = 1;
                     PriorityLevelId_LOW = 255;
                  };
                  PriorityLevelId priority_level_id = 5 [json_name = "priority-level-id"];
                  string flow_queue_name = 6 [json_name = "flow-queue-name"];
                  string flow_mapping_name = 7 [json_name = "flow-mapping-name"];
                  string user_group_queue_name = 8 [json_name = "user-group-queue-name"];
                  string service_template_name = 9 [json_name = "service-template-name"];
                  enum AdjustOnCard {
                     AdjustOnCard_DISABLE = 0;
                     AdjustOnCard_ENABLE = 1;
                  };
                  AdjustOnCard adjust_on_card = 10 [json_name = "adjust-on-card"];
               }
               repeated UserQueue user_queue = 1 [json_name = "user-queue"];
            }
            UserQueues user_queues = 4 [json_name = "user-queues"];
            message UserQueueWeights {
               message UserQueueWeight {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 weight = 2 [json_name = "weight"];
               }
               repeated UserQueueWeight user_queue_weight = 1 [json_name = "user-queue-weight"];
            }
            UserQueueWeights user_queue_weights = 5 [json_name = "user-queue-weights"];
            message UserQueueTimeRanges {
               message UserQueueTimeRange {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string time_range_name = 2 [json_name = "time-range-name"];
                  uint32 cir = 3 [json_name = "cir"];
                  uint32 pir = 4 [json_name = "pir"];
                  uint32 cbs = 5 [json_name = "cbs"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  enum PriorityLevelId {
                     INVALID_ENUM_VALUE_PriorityLevelId = 0;
                     PriorityLevelId_HIGH = 1;
                     PriorityLevelId_LOW = 255;
                  };
                  PriorityLevelId priority_level_id = 7 [json_name = "priority-level-id"];
                  string flow_queue_name = 8 [json_name = "flow-queue-name"];
                  string flow_mapping_name = 9 [json_name = "flow-mapping-name"];
                  string user_group_queue_name = 10 [json_name = "user-group-queue-name"];
                  string service_template_name = 11 [json_name = "service-template-name"];
                  enum AdjustOnCard {
                     AdjustOnCard_DISABLE = 0;
                     AdjustOnCard_ENABLE = 1;
                  };
                  AdjustOnCard adjust_on_card = 12 [json_name = "adjust-on-card"];
               }
               repeated UserQueueTimeRange user_queue_time_range = 1 [json_name = "user-queue-time-range"];
            }
            UserQueueTimeRanges user_queue_time_ranges = 6 [json_name = "user-queue-time-ranges"];
            message Cars {
               message Car {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_CAR = 1;
                  };
                  Type type = 1 [json_name = "type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  uint32 pbs = 4 [json_name = "pbs"];
                  enum GreenAction {
                     GreenAction_PASS = 0;
                     GreenAction_DISCARD = 2;
                  };
                  GreenAction green_action = 5 [json_name = "green-action"];
                  enum GreenServiceClass {
                     GreenServiceClass_BE = 0;
                     GreenServiceClass_AF1 = 1;
                     GreenServiceClass_AF2 = 2;
                     GreenServiceClass_AF3 = 3;
                     GreenServiceClass_AF4 = 4;
                     GreenServiceClass_EF = 5;
                     GreenServiceClass_CS6 = 6;
                     GreenServiceClass_CS7 = 7;
                  };
                  GreenServiceClass green_service_class = 6 [json_name = "green-service-class"];
                  enum GreenColor {
                     GreenColor_GREEN = 0;
                     GreenColor_YELLOW = 1;
                     GreenColor_RED = 2;
                  };
                  GreenColor green_color = 7 [json_name = "green-color"];
                  enum YellowAction {
                     YellowAction_PASS = 0;
                     YellowAction_DISCARD = 2;
                  };
                  YellowAction yellow_action = 8 [json_name = "yellow-action"];
                  enum YellowServiceClass {
                     YellowServiceClass_BE = 0;
                     YellowServiceClass_AF1 = 1;
                     YellowServiceClass_AF2 = 2;
                     YellowServiceClass_AF3 = 3;
                     YellowServiceClass_AF4 = 4;
                     YellowServiceClass_EF = 5;
                     YellowServiceClass_CS6 = 6;
                     YellowServiceClass_CS7 = 7;
                  };
                  YellowServiceClass yellow_service_class = 9 [json_name = "yellow-service-class"];
                  enum YellowColor {
                     YellowColor_GREEN = 0;
                     YellowColor_YELLOW = 1;
                     YellowColor_RED = 2;
                  };
                  YellowColor yellow_color = 10 [json_name = "yellow-color"];
                  enum RedAction {
                     RedAction_PASS = 0;
                     RedAction_DISCARD = 2;
                  };
                  RedAction red_action = 11 [json_name = "red-action"];
                  enum RedServiceClass {
                     RedServiceClass_BE = 0;
                     RedServiceClass_AF1 = 1;
                     RedServiceClass_AF2 = 2;
                     RedServiceClass_AF3 = 3;
                     RedServiceClass_AF4 = 4;
                     RedServiceClass_EF = 5;
                     RedServiceClass_CS6 = 6;
                     RedServiceClass_CS7 = 7;
                  };
                  RedServiceClass red_service_class = 12 [json_name = "red-service-class"];
                  enum RedColor {
                     RedColor_GREEN = 0;
                     RedColor_YELLOW = 1;
                     RedColor_RED = 2;
                  };
                  RedColor red_color = 13 [json_name = "red-color"];
                  enum ColorAware {
                     INVALID_ENUM_VALUE_ColorAware = 0;
                     ColorAware_ENABLE = 1;
                  };
                  ColorAware color_aware = 14 [json_name = "color-aware"];
               }
               repeated Car car = 1 [json_name = "car"];
            }
            Cars cars = 7 [json_name = "cars"];
            message ProfileCars {
               message ProfileCar {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_CAR = 1;
                  };
                  Type type = 1 [json_name = "type"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_ALL = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  uint32 cir_value = 3 [json_name = "cir-value"];
                  uint32 pir_value = 4 [json_name = "pir-value"];
                  uint32 cbs = 5 [json_name = "cbs"];
                  uint32 pbs = 6 [json_name = "pbs"];
                  enum PriorityAware {
                     INVALID_ENUM_VALUE_PriorityAware = 0;
                     PriorityAware_ENABLE = 1;
                  };
                  PriorityAware priority_aware = 7 [json_name = "priority-aware"];
                  string priority_template_name = 8 [json_name = "priority-template-name"];
                  int32 adjust_value = 9 [json_name = "adjust-value"];
                  enum GreenAction {
                     GreenAction_PASS = 0;
                     GreenAction_DISCARD = 2;
                  };
                  GreenAction green_action = 10 [json_name = "green-action"];
                  enum GreenServiceClass {
                     GreenServiceClass_BE = 0;
                     GreenServiceClass_AF1 = 1;
                     GreenServiceClass_AF2 = 2;
                     GreenServiceClass_AF3 = 3;
                     GreenServiceClass_AF4 = 4;
                     GreenServiceClass_EF = 5;
                     GreenServiceClass_CS6 = 6;
                     GreenServiceClass_CS7 = 7;
                  };
                  GreenServiceClass green_service_class = 11 [json_name = "green-service-class"];
                  enum GreenColor {
                     GreenColor_GREEN = 0;
                     GreenColor_YELLOW = 1;
                     GreenColor_RED = 2;
                  };
                  GreenColor green_color = 12 [json_name = "green-color"];
                  enum YellowAction {
                     YellowAction_PASS = 0;
                     YellowAction_DISCARD = 2;
                  };
                  YellowAction yellow_action = 13 [json_name = "yellow-action"];
                  enum YellowServiceClass {
                     YellowServiceClass_BE = 0;
                     YellowServiceClass_AF1 = 1;
                     YellowServiceClass_AF2 = 2;
                     YellowServiceClass_AF3 = 3;
                     YellowServiceClass_AF4 = 4;
                     YellowServiceClass_EF = 5;
                     YellowServiceClass_CS6 = 6;
                     YellowServiceClass_CS7 = 7;
                  };
                  YellowServiceClass yellow_service_class = 14 [json_name = "yellow-service-class"];
                  enum YellowColor {
                     YellowColor_GREEN = 0;
                     YellowColor_YELLOW = 1;
                     YellowColor_RED = 2;
                  };
                  YellowColor yellow_color = 15 [json_name = "yellow-color"];
                  enum RedAction {
                     RedAction_PASS = 0;
                     RedAction_DISCARD = 2;
                  };
                  RedAction red_action = 16 [json_name = "red-action"];
                  enum RedServiceClass {
                     RedServiceClass_BE = 0;
                     RedServiceClass_AF1 = 1;
                     RedServiceClass_AF2 = 2;
                     RedServiceClass_AF3 = 3;
                     RedServiceClass_AF4 = 4;
                     RedServiceClass_EF = 5;
                     RedServiceClass_CS6 = 6;
                     RedServiceClass_CS7 = 7;
                  };
                  RedServiceClass red_service_class = 17 [json_name = "red-service-class"];
                  enum RedColor {
                     RedColor_GREEN = 0;
                     RedColor_YELLOW = 1;
                     RedColor_RED = 2;
                  };
                  RedColor red_color = 18 [json_name = "red-color"];
                  enum ColorAware {
                     INVALID_ENUM_VALUE_ColorAware = 0;
                     ColorAware_ENABLE = 1;
                  };
                  ColorAware color_aware = 19 [json_name = "color-aware"];
               }
               repeated ProfileCar profile_car = 1 [json_name = "profile-car"];
            }
            ProfileCars profile_cars = 8 [json_name = "profile-cars"];
            message Suppressions {
               message Suppression {
                  enum Type {
                     INVALID_ENUM_VALUE_Type = 0;
                     Type_BROADCAST = 2;
                     Type_MULTICAST = 3;
                     Type_UNKNOWX_UNICAST = 4;
                     Type_BUM = 7;
                     Type_BU = 8;
                     Type_UNKNOWX_MULTICAST = 9;
                  };
                  Type type = 1 [json_name = "type"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  uint32 cir = 3 [json_name = "cir"];
                  uint32 cbs = 4 [json_name = "cbs"];
                  int32 adjust_value = 5 [json_name = "adjust-value"];
               }
               repeated Suppression suppression = 1 [json_name = "suppression"];
            }
            Suppressions suppressions = 9 [json_name = "suppressions"];
            message MplsTunnelFlowQueues {
               message MplsTunnelFlowQueue {
                  string flow_queue_name = 1 [json_name = "flow-queue-name"];
                  string flow_mapping_name = 2 [json_name = "flow-mapping-name"];
                  string user_group_queue_name = 3 [json_name = "user-group-queue-name"];
                  string service_template_name = 4 [json_name = "service-template-name"];
               }
               MplsTunnelFlowQueue mpls_tunnel_flow_queue = 1 [json_name = "mpls-tunnel-flow-queue"];
            }
            MplsTunnelFlowQueues mpls_tunnel_flow_queues = 10 [json_name = "mpls-tunnel-flow-queues"];
            message EightCosModeQueues {
               message EightCosModeQueue {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                     Direction_ALL = 2;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  string user_queue_name = 2 [json_name = "user-queue-name"];
                  string flow_queue_name = 3 [json_name = "flow-queue-name"];
                  string user_group_queue_name = 4 [json_name = "user-group-queue-name"];
               }
               repeated EightCosModeQueue eight_cos_mode_queue = 1 [json_name = "eight-cos-mode-queue"];
            }
            EightCosModeQueues eight_cos_mode_queues = 11 [json_name = "eight-cos-mode-queues"];
         }
         repeated Profile profile = 1 [json_name = "profile"];
      }
      Profiles profiles = 2 [json_name = "profiles"];
      message FlowMappings {
         message FlowMapping {
            string name = 1 [json_name = "name"];
            message Parameters {
               message Parameter {
                  enum FlowQueueServiceClass {
                     FlowQueueServiceClass_BE = 0;
                     FlowQueueServiceClass_AF1 = 1;
                     FlowQueueServiceClass_AF2 = 2;
                     FlowQueueServiceClass_AF3 = 3;
                     FlowQueueServiceClass_AF4 = 4;
                     FlowQueueServiceClass_EF = 5;
                     FlowQueueServiceClass_CS6 = 6;
                     FlowQueueServiceClass_CS7 = 7;
                  };
                  FlowQueueServiceClass flow_queue_service_class = 1 [json_name = "flow-queue-service-class"];
                  enum PortQueueServiceClass {
                     PortQueueServiceClass_BE = 0;
                     PortQueueServiceClass_AF1 = 1;
                     PortQueueServiceClass_AF2 = 2;
                     PortQueueServiceClass_AF3 = 3;
                     PortQueueServiceClass_AF4 = 4;
                     PortQueueServiceClass_EF = 5;
                     PortQueueServiceClass_CS6 = 6;
                     PortQueueServiceClass_CS7 = 7;
                  };
                  PortQueueServiceClass port_queue_service_class = 2 [json_name = "port-queue-service-class"];
               }
               repeated Parameter parameter = 1 [json_name = "parameter"];
            }
            Parameters parameters = 2 [json_name = "parameters"];
         }
         repeated FlowMapping flow_mapping = 1 [json_name = "flow-mapping"];
      }
      FlowMappings flow_mappings = 3 [json_name = "flow-mappings"];
      message UserGroupQueues {
         message UserGroupQueue {
            string name = 1 [json_name = "name"];
            enum Mode {
               Mode_NORMAL = 0;
               Mode_PRIORITY = 1;
            };
            Mode mode = 2 [json_name = "mode"];
            enum ModeTemplate {
               ModeTemplate_DISABLE = 0;
               ModeTemplate_ENABLE = 1;
            };
            ModeTemplate mode_template = 3 [json_name = "mode-template"];
            message Shapings {
               message Shaping {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 pir = 2 [json_name = "pir"];
                  uint32 pbs = 3 [json_name = "pbs"];
               }
               repeated Shaping shaping = 1 [json_name = "shaping"];
            }
            Shapings shapings = 4 [json_name = "shapings"];
            message ShapingPriortys {
               message ShapingPriorty {
                  enum Priority {
                     Priority_PRIORITY0 = 0;
                     Priority_PRIORITY1 = 1;
                     Priority_PRIORITY2 = 2;
                     Priority_NOPRIORITY = 255;
                  };
                  Priority priority = 1 [json_name = "priority"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  uint32 shaping_value = 3 [json_name = "shaping-value"];
                  uint32 pbs = 4 [json_name = "pbs"];
               }
               repeated ShapingPriorty shaping_priorty = 1 [json_name = "shaping-priorty"];
            }
            ShapingPriortys shaping_priortys = 5 [json_name = "shaping-priortys"];
            message CirPirs {
               message CirPir {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  uint32 pir = 4 [json_name = "pir"];
                  uint32 pbs = 5 [json_name = "pbs"];
               }
               repeated CirPir cir_pir = 1 [json_name = "cir-pir"];
            }
            CirPirs cir_pirs = 6 [json_name = "cir-pirs"];
            message Weights {
               message Weight {
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  uint32 weight_value = 2 [json_name = "weight-value"];
               }
               repeated Weight weight = 1 [json_name = "weight"];
            }
            Weights weights = 7 [json_name = "weights"];
            message UserGroupQueueStatisticss {
               message UserGroupQueueStatistics {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                     ServiceClass_TOTAL = 8;
                  };
                  ServiceClass service_class = 3 [json_name = "service-class"];
                  string group_name = 4 [json_name = "group-name"];
                  uint64 pass_packets = 5 [json_name = "pass-packets"];
                  uint64 pass_bytes = 6 [json_name = "pass-bytes"];
                  uint64 pass_packet_rate = 7 [json_name = "pass-packet-rate"];
                  uint64 pass_byte_rate = 8 [json_name = "pass-byte-rate"];
                  uint64 drop_packets = 9 [json_name = "drop-packets"];
                  uint64 drop_bytes = 10 [json_name = "drop-bytes"];
                  uint64 drop_packet_rate = 11 [json_name = "drop-packet-rate"];
                  uint64 drop_byte_rate = 12 [json_name = "drop-byte-rate"];
               }
               repeated UserGroupQueueStatistics user_group_queue_statistics = 1 [json_name = "user-group-queue-statistics"];
            }
            UserGroupQueueStatisticss user_group_queue_statisticss = 8 [json_name = "user-group-queue-statisticss"];
         }
         repeated UserGroupQueue user_group_queue = 1 [json_name = "user-group-queue"];
      }
      UserGroupQueues user_group_queues = 4 [json_name = "user-group-queues"];
      message ServiceTemplates {
         message ServiceTemplate {
            string name = 1 [json_name = "name"];
            string slot_id = 2 [json_name = "slot-id"];
            message ServiceLengths {
               message ServiceLength {
                  enum Direction {
                     Direction_INBOUND = 0;
                     Direction_OUTBOUND = 1;
                  };
                  Direction direction = 1 [json_name = "direction"];
                  int32 value = 2 [json_name = "value"];
               }
               repeated ServiceLength service_length = 1 [json_name = "service-length"];
            }
            ServiceLengths service_lengths = 3 [json_name = "service-lengths"];
            message ServiceLengthOnEtm {
               int32 value = 1 [json_name = "value"];
            }
            ServiceLengthOnEtm service_length_on_etm = 4 [json_name = "service-length-on-etm"];
         }
         repeated ServiceTemplate service_template = 1 [json_name = "service-template"];
      }
      ServiceTemplates service_templates = 5 [json_name = "service-templates"];
      message Queue4CosMappings {
         message Queue4CosMapping {
            string name = 1 [json_name = "name"];
            message Parameters {
               message Parameter {
                  enum FlowQueueServiceClass {
                     FlowQueueServiceClass_BE = 0;
                     FlowQueueServiceClass_AF1 = 1;
                     FlowQueueServiceClass_AF2 = 2;
                     FlowQueueServiceClass_AF3 = 3;
                     FlowQueueServiceClass_AF4 = 4;
                     FlowQueueServiceClass_EF = 5;
                     FlowQueueServiceClass_CS6 = 6;
                     FlowQueueServiceClass_CS7 = 7;
                  };
                  FlowQueueServiceClass flow_queue_service_class = 1 [json_name = "flow-queue-service-class"];
                  enum FourQueueServiceClass {
                     FourQueueServiceClass_COS0 = 0;
                     FourQueueServiceClass_COS1 = 1;
                     FourQueueServiceClass_COS2 = 2;
                     FourQueueServiceClass_COS3 = 3;
                  };
                  FourQueueServiceClass four_queue_service_class = 2 [json_name = "four-queue-service-class"];
               }
               repeated Parameter parameter = 1 [json_name = "parameter"];
            }
            Parameters parameters = 2 [json_name = "parameters"];
         }
         repeated Queue4CosMapping queue_4cos_mapping = 1 [json_name = "queue-4cos-mapping"];
      }
      Queue4CosMappings queue_4cos_mappings = 6 [json_name = "queue-4cos-mappings"];
      message PortQueueTemplates {
         message PortQueueTemplate {
            string name = 1 [json_name = "name"];
            message Queues {
               message Queue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string port_wred_name = 2 [json_name = "port-wred-name"];
               }
               repeated Queue queue = 1 [json_name = "queue"];
            }
            Queues queues = 2 [json_name = "queues"];
            message QueueStates {
               message QueueState {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  string port_wred_name = 2 [json_name = "port-wred-name"];
               }
               repeated QueueState queue_state = 1 [json_name = "queue-state"];
            }
            QueueStates queue_states = 3 [json_name = "queue-states"];
            message ShareShapes {
               message ShareShape {
                  enum Be {
                     Be_TRUE = 0;
                     Be_FALSE = 8;
                  };
                  Be be = 1 [json_name = "be"];
                  enum Af1 {
                     INVALID_ENUM_VALUE_Af1 = 0;
                     Af1_TRUE = 1;
                     Af1_FALSE = 8;
                  };
                  Af1 af1 = 2 [json_name = "af1"];
                  enum Af2 {
                     INVALID_ENUM_VALUE_Af2 = 0;
                     Af2_TRUE = 2;
                     Af2_FALSE = 8;
                  };
                  Af2 af2 = 3 [json_name = "af2"];
                  enum Af3 {
                     INVALID_ENUM_VALUE_Af3 = 0;
                     Af3_TRUE = 3;
                     Af3_FALSE = 8;
                  };
                  Af3 af3 = 4 [json_name = "af3"];
                  enum Af4 {
                     INVALID_ENUM_VALUE_Af4 = 0;
                     Af4_TRUE = 4;
                     Af4_FALSE = 8;
                  };
                  Af4 af4 = 5 [json_name = "af4"];
                  enum Ef {
                     INVALID_ENUM_VALUE_Ef = 0;
                     Ef_TRUE = 5;
                     Ef_FALSE = 8;
                  };
                  Ef ef = 6 [json_name = "ef"];
                  enum Cs6 {
                     INVALID_ENUM_VALUE_Cs6 = 0;
                     Cs6_TRUE = 6;
                     Cs6_FALSE = 8;
                  };
                  Cs6 cs6 = 7 [json_name = "cs6"];
                  enum Cs7 {
                     INVALID_ENUM_VALUE_Cs7 = 0;
                     Cs7_TRUE = 7;
                     Cs7_FALSE = 8;
                  };
                  Cs7 cs7 = 8 [json_name = "cs7"];
                  enum QueueScheduleMode {
                     QueueScheduleMode_PQ = 0;
                     QueueScheduleMode_WFQ = 1;
                     QueueScheduleMode_LPQ = 2;
                  };
                  QueueScheduleMode queue_schedule_mode = 9 [json_name = "queue-schedule-mode"];
                  uint32 weight = 10 [json_name = "weight"];
                  uint32 pbs = 11 [json_name = "pbs"];
               }
               ShareShape share_shape = 1 [json_name = "share-shape"];
            }
            ShareShapes share_shapes = 4 [json_name = "share-shapes"];
         }
         repeated PortQueueTemplate port_queue_template = 1 [json_name = "port-queue-template"];
      }
      PortQueueTemplates port_queue_templates = 7 [json_name = "port-queue-templates"];
      message ChannelProfiles {
         message ChannelProfile {
            string name = 1 [json_name = "name"];
            message ChannelParas {
               message ChannelPara {
                  uint32 channel_id = 1 [json_name = "channel-id"];
                  uint32 bandwidth = 2 [json_name = "bandwidth"];
                  uint32 quantity = 3 [json_name = "quantity"];
               }
               repeated ChannelPara channel_para = 1 [json_name = "channel-para"];
            }
            ChannelParas channel_paras = 2 [json_name = "channel-paras"];
         }
         repeated ChannelProfile channel_profile = 1 [json_name = "channel-profile"];
      }
      ChannelProfiles channel_profiles = 8 [json_name = "channel-profiles"];
      message BufferPolicys {
         message BufferPolicy {
            string name = 1 [json_name = "name"];
            message BufferModeSlots {
               message BufferModeSlot {
                  string slot_id = 1 [json_name = "slot-id"];
                  enum BufferModeGe {
                     BufferModeGe_NORMAL = 0;
                     BufferModeGe_LARGE = 1;
                  };
                  BufferModeGe buffer_mode_ge = 2 [json_name = "buffer-mode-ge"];
                  enum BufferMode10Ge {
                     BufferMode10Ge_NORMAL = 0;
                     BufferMode10Ge_LARGE = 1;
                  };
                  BufferMode10Ge buffer_mode_10ge = 3 [json_name = "buffer-mode-10ge"];
               }
               repeated BufferModeSlot buffer_mode_slot = 1 [json_name = "buffer-mode-slot"];
            }
            BufferModeSlots buffer_mode_slots = 2 [json_name = "buffer-mode-slots"];
            message BufferModeInterfaces {
               message BufferModeInterface {
                  string ifname = 1 [json_name = "ifname"];
                  enum BufferMode {
                     BufferMode_NORMAL = 0;
                     BufferMode_LARGE = 1;
                  };
                  BufferMode buffer_mode = 2 [json_name = "buffer-mode"];
               }
               repeated BufferModeInterface buffer_mode_interface = 1 [json_name = "buffer-mode-interface"];
            }
            BufferModeInterfaces buffer_mode_interfaces = 3 [json_name = "buffer-mode-interfaces"];
         }
         repeated BufferPolicy buffer_policy = 1 [json_name = "buffer-policy"];
      }
      BufferPolicys buffer_policys = 9 [json_name = "buffer-policys"];
      message QosQueueTemplates {
         message QosQueueTemplate {
            string name = 1 [json_name = "name"];
            message QueueParameterss {
               message QueueParameters {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint32 cir_percent = 2 [json_name = "cir-percent"];
                  uint32 pir_percent = 3 [json_name = "pir-percent"];
                  enum Priority {
                     Priority_PQ = 0;
                     Priority_WFQ = 1;
                     Priority_LPQ = 2;
                  };
                  Priority priority = 4 [json_name = "priority"];
               }
               repeated QueueParameters queue_parameters = 1 [json_name = "queue-parameters"];
            }
            QueueParameterss queue_parameterss = 2 [json_name = "queue-parameterss"];
         }
         repeated QosQueueTemplate qos_queue_template = 1 [json_name = "qos-queue-template"];
      }
      QosQueueTemplates qos_queue_templates = 10 [json_name = "qos-queue-templates"];
      message SubPortQueues {
         message SubPortQueue {
            string name = 1 [json_name = "name"];
            message Shaping {
               uint32 shaping_value = 1 [json_name = "shaping-value"];
               uint32 pbs = 2 [json_name = "pbs"];
            }
            Shaping shaping = 2 [json_name = "shaping"];
            message Weight {
               uint32 weight_value = 1 [json_name = "weight-value"];
            }
            Weight weight = 3 [json_name = "weight"];
         }
         repeated SubPortQueue sub_port_queue = 1 [json_name = "sub-port-queue"];
      }
      SubPortQueues sub_port_queues = 11 [json_name = "sub-port-queues"];
      message PriorityTemplates {
         message PriorityTemplate {
            string name = 1 [json_name = "name"];
            message Queues {
               message Queue {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 2 [json_name = "color"];
                  uint32 priority = 3 [json_name = "priority"];
               }
               repeated Queue queue = 1 [json_name = "queue"];
            }
            Queues queues = 2 [json_name = "queues"];
         }
         repeated PriorityTemplate priority_template = 1 [json_name = "priority-template"];
      }
      PriorityTemplates priority_templates = 12 [json_name = "priority-templates"];
      message UserQueueTemplates {
         message UserQueueTemplate {
            string name = 1 [json_name = "name"];
            enum Mode {
               Mode_X_4X_PRIORITY = 0;
            };
            Mode mode = 2 [json_name = "mode"];
            message Shaping {
               uint32 pbs = 1 [json_name = "pbs"];
               uint32 cbs = 2 [json_name = "cbs"];
            }
            Shaping shaping = 3 [json_name = "shaping"];
            message ServiceTemplate {
               string name = 1 [json_name = "name"];
            }
            ServiceTemplate service_template = 4 [json_name = "service-template"];
            message PriorityShedulerModes {
               message PriorityShedulerMode {
                  uint32 priority = 1 [json_name = "priority"];
                  enum ScheduleMode {
                     ScheduleMode_PQ = 0;
                     ScheduleMode_WFQ = 1;
                  };
                  ScheduleMode schedule_mode = 2 [json_name = "schedule-mode"];
               }
               repeated PriorityShedulerMode priority_sheduler_mode = 1 [json_name = "priority-sheduler-mode"];
            }
            PriorityShedulerModes priority_sheduler_modes = 5 [json_name = "priority-sheduler-modes"];
            message ParentPriorityWeights {
               message ParentPriorityWeight {
                  uint32 priority = 1 [json_name = "priority"];
                  uint32 weight = 2 [json_name = "weight"];
               }
               repeated ParentPriorityWeight parent_priority_weight = 1 [json_name = "parent-priority-weight"];
            }
            ParentPriorityWeights parent_priority_weights = 6 [json_name = "parent-priority-weights"];
            message ParentPrioritys {
               message ParentPriority {
                  uint32 priority = 1 [json_name = "priority"];
                  uint32 cir_parent_priority = 2 [json_name = "cir-parent-priority"];
                  uint32 pir_parent_priority = 3 [json_name = "pir-parent-priority"];
               }
               repeated ParentPriority parent_priority = 1 [json_name = "parent-priority"];
            }
            ParentPrioritys parent_prioritys = 7 [json_name = "parent-prioritys"];
            message PriorityShapings {
               message PriorityShaping {
                  uint32 priority = 1 [json_name = "priority"];
                  uint32 pir = 2 [json_name = "pir"];
                  uint32 pbs = 3 [json_name = "pbs"];
               }
               repeated PriorityShaping priority_shaping = 1 [json_name = "priority-shaping"];
            }
            PriorityShapings priority_shapings = 8 [json_name = "priority-shapings"];
         }
         repeated UserQueueTemplate user_queue_template = 1 [json_name = "user-queue-template"];
      }
      UserQueueTemplates user_queue_templates = 13 [json_name = "user-queue-templates"];
   }
   QueueSchedulerTemplate queue_scheduler_template = 2 [json_name = "queue-scheduler-template"];
   message ClassifierTemplate {
      message DiffservDomains {
         message DiffservDomain {
            string name = 1 [json_name = "name"];
            uint32 id = 2 [json_name = "id"];
            message BehaviorAggregations {
               message BehaviorAggregation {
                  enum Type {
                     Type_X_8021P = 0;
                     Type_IPX_DSCP = 1;
                     Type_MPLSX_EXP = 2;
                     Type_USERX_PRIORITY = 3;
                     Type_IPX_PRECEDENCE = 11;
                  };
                  Type type = 1 [json_name = "type"];
                  uint32 value = 2 [json_name = "value"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 3 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 4 [json_name = "color"];
               }
               repeated BehaviorAggregation behavior_aggregation = 1 [json_name = "behavior-aggregation"];
            }
            BehaviorAggregations behavior_aggregations = 3 [json_name = "behavior-aggregations"];
            message PerHopBehaviors {
               message PerHopBehavior {
                  enum Type {
                     Type_X_8021P = 0;
                     Type_IPX_DSCP = 1;
                     Type_MPLSX_EXP = 2;
                     Type_IPX_PRECEDENCE = 11;
                  };
                  Type type = 1 [json_name = "type"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 2 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 3 [json_name = "color"];
                  uint32 value = 4 [json_name = "value"];
               }
               repeated PerHopBehavior per_hop_behavior = 1 [json_name = "per-hop-behavior"];
            }
            PerHopBehaviors per_hop_behaviors = 4 [json_name = "per-hop-behaviors"];
            message DiffservDomainApplications {
               message DiffservDomainApplication {
                  string interface_name = 1 [json_name = "interface-name"];
                  enum Direction {
                     Direction_INX_OUTBOUND = 0;
                     Direction_INBOUND = 1;
                     Direction_OUTBOUND = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
               }
               repeated DiffservDomainApplication diffserv_domain_application = 1 [json_name = "diffserv-domain-application"];
            }
            DiffservDomainApplications diffserv_domain_applications = 5 [json_name = "diffserv-domain-applications"];
         }
         repeated DiffservDomain diffserv_domain = 1 [json_name = "diffserv-domain"];
      }
      DiffservDomains diffserv_domains = 1 [json_name = "diffserv-domains"];
      message TrafficClassifiers {
         message TrafficClassifier {
            string name = 1 [json_name = "name"];
            enum Operator {
               Operator_OR = 0;
               Operator_AND = 1;
            };
            Operator operator = 2 [json_name = "operator"];
            string description = 3 [json_name = "description"];
            message RuleAcls {
               message RuleAcl {
                  string acl_name = 1 [json_name = "acl-name"];
               }
               repeated RuleAcl rule_acl = 1 [json_name = "rule-acl"];
            }
            RuleAcls rule_acls = 4 [json_name = "rule-acls"];
            message RuleAclIpv6S {
               message RuleAclIpv6 {
                  string acl_name = 1 [json_name = "acl-name"];
               }
               repeated RuleAclIpv6 rule_acl_ipv6 = 1 [json_name = "rule-acl-ipv6"];
            }
            RuleAclIpv6S rule_acl_ipv6s = 5 [json_name = "rule-acl-ipv6s"];
            message RuleAnys {
               message RuleAny {
                  enum ProtocolFamily {
                     INVALID_ENUM_VALUE_ProtocolFamily = 0;
                     ProtocolFamily_IPV4 = 1;
                     ProtocolFamily_IPV6 = 2;
                  };
                  ProtocolFamily protocol_family = 1 [json_name = "protocol-family"];
               }
               repeated RuleAny rule_any = 1 [json_name = "rule-any"];
            }
            RuleAnys rule_anys = 6 [json_name = "rule-anys"];
            message RulePrioritys {
               message RulePriority {
                  enum Type {
                     Type_X_8021P = 0;
                     Type_IPX_PRECEDENCE = 1;
                     Type_DSCP = 2;
                     Type_MPLSX_EXP = 4;
                     Type_IPV6X_DSCP = 5;
                     Type_IPV6X_IPX_PRECEDENCE = 6;
                  };
                  Type type = 1 [json_name = "type"];
                  uint32 value = 2 [json_name = "value"];
               }
               repeated RulePriority rule_priority = 1 [json_name = "rule-priority"];
            }
            RulePrioritys rule_prioritys = 7 [json_name = "rule-prioritys"];
            message RuleServiceClasss {
               message RuleServiceClass {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
               }
               repeated RuleServiceClass rule_service_class = 1 [json_name = "rule-service-class"];
            }
            RuleServiceClasss rule_service_classs = 8 [json_name = "rule-service-classs"];
            message LocalIds {
               message LocalId {
                  uint32 value = 1 [json_name = "value"];
               }
               repeated LocalId local_id = 1 [json_name = "local-id"];
            }
            LocalIds local_ids = 9 [json_name = "local-ids"];
            message LocalIdIpv6S {
               message LocalIdIpv6 {
                  uint32 value = 1 [json_name = "value"];
               }
               repeated LocalIdIpv6 local_id_ipv6 = 1 [json_name = "local-id-ipv6"];
            }
            LocalIdIpv6S local_id_ipv6s = 10 [json_name = "local-id-ipv6s"];
            message RuleEthTypes {
               message RuleEthType {
                  string value = 1 [json_name = "value"];
               }
               repeated RuleEthType rule_eth_type = 1 [json_name = "rule-eth-type"];
            }
            RuleEthTypes rule_eth_types = 11 [json_name = "rule-eth-types"];
            message RuleAddressIpv6S {
               message RuleAddressIpv6 {
                  enum AddressType {
                     AddressType_SOURCE = 0;
                     AddressType_DESTINATION = 1;
                  };
                  AddressType address_type = 1 [json_name = "address-type"];
                  string address_value = 2 [json_name = "address-value"];
                  uint32 prefix_length = 3 [json_name = "prefix-length"];
               }
               repeated RuleAddressIpv6 rule_address_ipv6 = 1 [json_name = "rule-address-ipv6"];
            }
            RuleAddressIpv6S rule_address_ipv6s = 12 [json_name = "rule-address-ipv6s"];
            message RuleMacAndMasks {
               message RuleMacAndMask {
                  enum MacType {
                     MacType_SOURCE = 0;
                     MacType_DESTINATION = 1;
                  };
                  MacType mac_type = 1 [json_name = "mac-type"];
                  string mac_address = 2 [json_name = "mac-address"];
                  string mac_address_mask = 3 [json_name = "mac-address-mask"];
               }
               repeated RuleMacAndMask rule_mac_and_mask = 1 [json_name = "rule-mac-and-mask"];
            }
            RuleMacAndMasks rule_mac_and_masks = 13 [json_name = "rule-mac-and-masks"];
            message RuleMacAddresss {
               message RuleMacAddress {
                  enum Type {
                     Type_SOURCE = 0;
                     Type_DESTINATION = 1;
                  };
                  Type type = 1 [json_name = "type"];
                  string address = 2 [json_name = "address"];
               }
               repeated RuleMacAddress rule_mac_address = 1 [json_name = "rule-mac-address"];
            }
            RuleMacAddresss rule_mac_addresss = 14 [json_name = "rule-mac-addresss"];
            message RuleOffsets {
               message RuleOffset {
                  uint32 offset_value1 = 1 [json_name = "offset-value1"];
                  string match_value1 = 2 [json_name = "match-value1"];
                  string match_mask1 = 3 [json_name = "match-mask1"];
                  uint32 offset_value2 = 4 [json_name = "offset-value2"];
                  string match_value2 = 5 [json_name = "match-value2"];
                  string match_mask2 = 6 [json_name = "match-mask2"];
                  uint32 offset_value3 = 7 [json_name = "offset-value3"];
                  string match_value3 = 8 [json_name = "match-value3"];
                  string match_mask3 = 9 [json_name = "match-mask3"];
                  uint32 offset_value4 = 10 [json_name = "offset-value4"];
                  string match_value4 = 11 [json_name = "match-value4"];
                  string match_mask4 = 12 [json_name = "match-mask4"];
               }
               RuleOffset rule_offset = 1 [json_name = "rule-offset"];
            }
            RuleOffsets rule_offsets = 15 [json_name = "rule-offsets"];
            message RuleProtocolIpv6S {
               message RuleProtocolIpv6 {
                  enum Family {
                     INVALID_ENUM_VALUE_Family = 0;
                     Family_IPV6 = 2;
                  };
                  Family family = 1 [json_name = "family"];
                  uint32 number = 2 [json_name = "number"];
               }
               repeated RuleProtocolIpv6 rule_protocol_ipv6 = 1 [json_name = "rule-protocol-ipv6"];
            }
            RuleProtocolIpv6S rule_protocol_ipv6s = 16 [json_name = "rule-protocol-ipv6s"];
            message RuleTcpFlags {
               message RuleTcpFlag {
                  enum BitMatchType {
                     BitMatchType_NOTX_CONFIG = 0;
                     BitMatchType_ESTABLISHED = 1;
                     BitMatchType_FIN = 2;
                     BitMatchType_SYN = 3;
                     BitMatchType_RST = 4;
                     BitMatchType_PSH = 5;
                     BitMatchType_ACK = 6;
                     BitMatchType_URG = 7;
                     BitMatchType_ECE = 8;
                     BitMatchType_CWR = 9;
                     BitMatchType_NS = 10;
                  };
                  BitMatchType bit_match_type = 1 [json_name = "bit-match-type"];
                  uint32 tcp_flag = 2 [json_name = "tcp-flag"];
                  uint32 tcp_flag_mask = 3 [json_name = "tcp-flag-mask"];
               }
               repeated RuleTcpFlag rule_tcp_flag = 1 [json_name = "rule-tcp-flag"];
            }
            RuleTcpFlags rule_tcp_flags = 17 [json_name = "rule-tcp-flags"];
            message RuleTcpFlagIpv6S {
               message RuleTcpFlagIpv6 {
                  enum BitMatchType {
                     BitMatchType_NOTX_CONFIG = 0;
                     BitMatchType_ESTABLISHED = 1;
                     BitMatchType_FIN = 2;
                     BitMatchType_SYN = 3;
                     BitMatchType_RST = 4;
                     BitMatchType_PSH = 5;
                     BitMatchType_ACK = 6;
                     BitMatchType_URG = 7;
                  };
                  BitMatchType bit_match_type = 1 [json_name = "bit-match-type"];
                  uint32 tcp_flag = 2 [json_name = "tcp-flag"];
                  uint32 tcp_flag_mask = 3 [json_name = "tcp-flag-mask"];
               }
               repeated RuleTcpFlagIpv6 rule_tcp_flag_ipv6 = 1 [json_name = "rule-tcp-flag-ipv6"];
            }
            RuleTcpFlagIpv6S rule_tcp_flag_ipv6s = 18 [json_name = "rule-tcp-flag-ipv6s"];
            message RuleVlans {
               message RuleVlan {
                  uint32 vlan_id = 1 [json_name = "vlan-id"];
                  uint32 ce_vlan_id = 2 [json_name = "ce-vlan-id"];
               }
               repeated RuleVlan rule_vlan = 1 [json_name = "rule-vlan"];
            }
            RuleVlans rule_vlans = 19 [json_name = "rule-vlans"];
            message SrcDestLocalIds {
               message SrcDestLocalId {
                  uint32 source = 1 [json_name = "source"];
                  uint32 destination = 2 [json_name = "destination"];
               }
               repeated SrcDestLocalId src_dest_local_id = 1 [json_name = "src-dest-local-id"];
            }
            SrcDestLocalIds src_dest_local_ids = 20 [json_name = "src-dest-local-ids"];
         }
         repeated TrafficClassifier traffic_classifier = 1 [json_name = "traffic-classifier"];
      }
      TrafficClassifiers traffic_classifiers = 2 [json_name = "traffic-classifiers"];
      message TrafficBehaviors {
         message TrafficBehavior {
            string name = 1 [json_name = "name"];
            string description = 2 [json_name = "description"];
            message FilterAction {
               enum Filter {
                  Filter_PERMIT = 0;
                  Filter_DENY = 1;
               };
               Filter filter = 1 [json_name = "filter"];
            }
            FilterAction filter_action = 3 [json_name = "filter-action"];
            message ServiceClassActions {
               message ServiceClassAction {
                  enum ActionType {
                     ActionType_SERVICEX_CLASS = 0;
                     ActionType_SERVICEX_CLASSX_MASTERX_BFD = 1;
                     ActionType_SERVICEX_CLASSX_SLAVEX_BFD = 2;
                  };
                  ActionType action_type = 1 [json_name = "action-type"];
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                  };
                  ServiceClass service_class = 2 [json_name = "service-class"];
                  enum Color {
                     Color_GREEN = 0;
                     Color_YELLOW = 1;
                     Color_RED = 2;
                  };
                  Color color = 3 [json_name = "color"];
                  enum RemarkSwitch {
                     RemarkSwitch_ENABLE = 0;
                     RemarkSwitch_DISABLE = 1;
                  };
                  RemarkSwitch remark_switch = 4 [json_name = "remark-switch"];
                  string bfd_session_name = 5 [json_name = "bfd-session-name"];
               }
               repeated ServiceClassAction service_class_action = 1 [json_name = "service-class-action"];
            }
            ServiceClassActions service_class_actions = 4 [json_name = "service-class-actions"];
            message RemarkActions {
               message RemarkAction {
                  enum ActionType {
                     INVALID_ENUM_VALUE_ActionType = 0;
                     ActionType_X_8021P = 12;
                     ActionType_IPV4X_DSCP = 13;
                     ActionType_IPV6X_DSCP = 14;
                     ActionType_IPX_PRECEDENCE = 15;
                     ActionType_MPLSX_EXP = 16;
                     ActionType_TOS = 19;
                     ActionType_IPX_DF = 21;
                     ActionType_TTL = 26;
                     ActionType_INNERX_8021P = 34;
                     ActionType_OUTERX_8021P = 35;
                  };
                  ActionType action_type = 1 [json_name = "action-type"];
                  uint32 remark_value = 2 [json_name = "remark-value"];
                  enum AfterTrust {
                     INVALID_ENUM_VALUE_AfterTrust = 0;
                     AfterTrust_ENABLE = 1;
                  };
                  AfterTrust after_trust = 3 [json_name = "after-trust"];
               }
               repeated RemarkAction remark_action = 1 [json_name = "remark-action"];
            }
            RemarkActions remark_actions = 5 [json_name = "remark-actions"];
            message AclLogAction {
               enum ActionType {
                  INVALID_ENUM_VALUE_ActionType = 0;
                  ActionType_FIRSTX_PACKET = 39;
               };
               ActionType action_type = 1 [json_name = "action-type"];
            }
            AclLogAction acl_log_action = 6 [json_name = "acl-log-action"];
            message CarActions {
               message CarAction {
                  enum ActionType {
                     ActionType_CAR = 0;
                  };
                  ActionType action_type = 1 [json_name = "action-type"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 pir = 3 [json_name = "pir"];
                  uint32 cbs = 4 [json_name = "cbs"];
                  uint32 pbs = 5 [json_name = "pbs"];
                  int32 adjust = 6 [json_name = "adjust"];
                  enum GreenAction {
                     GreenAction_PASS = 0;
                     GreenAction_DISCARD = 2;
                  };
                  GreenAction green_action = 7 [json_name = "green-action"];
                  enum YellowAction {
                     YellowAction_PASS = 0;
                     YellowAction_DISCARD = 2;
                  };
                  YellowAction yellow_action = 8 [json_name = "yellow-action"];
                  enum RedAction {
                     RedAction_PASS = 0;
                     RedAction_DISCARD = 2;
                  };
                  RedAction red_action = 9 [json_name = "red-action"];
                  enum ColorAware {
                     INVALID_ENUM_VALUE_ColorAware = 0;
                     ColorAware_ENABLE = 1;
                  };
                  ColorAware color_aware = 10 [json_name = "color-aware"];
                  enum LimitType {
                     INVALID_ENUM_VALUE_LimitType = 0;
                     LimitType_PPS = 1;
                  };
                  LimitType limit_type = 11 [json_name = "limit-type"];
               }
               repeated CarAction car_action = 1 [json_name = "car-action"];
            }
            CarActions car_actions = 7 [json_name = "car-actions"];
            message FlowCarActions {
               message FlowCarAction {
                  uint32 cir = 1 [json_name = "cir"];
                  uint32 pir = 2 [json_name = "pir"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  uint32 pbs = 4 [json_name = "pbs"];
                  enum IpType {
                     INVALID_ENUM_VALUE_IpType = 0;
                     IpType_SOURCEX_IP = 1;
                     IpType_DESTINATIONX_IP = 2;
                  };
                  IpType ip_type = 5 [json_name = "ip-type"];
               }
               FlowCarAction flow_car_action = 1 [json_name = "flow-car-action"];
            }
            FlowCarActions flow_car_actions = 8 [json_name = "flow-car-actions"];
            message IncreasePriorityAction {
               enum Priority {
                  INVALID_ENUM_VALUE_Priority = 0;
                  Priority_INCREASEX_PRIORITY = 1;
               };
               Priority priority = 1 [json_name = "priority"];
            }
            IncreasePriorityAction increase_priority_action = 9 [json_name = "increase-priority-action"];
            message PolicyActions {
               message PolicyAction {
                  string policy_name = 1 [json_name = "policy-name"];
                  enum HierarchicalCar {
                     INVALID_ENUM_VALUE_HierarchicalCar = 0;
                     HierarchicalCar_ENABLE = 1;
                  };
                  HierarchicalCar hierarchical_car = 2 [json_name = "hierarchical-car"];
                  enum Layer {
                     INVALID_ENUM_VALUE_Layer = 0;
                     Layer_IPX_LAYER = 1;
                  };
                  Layer layer = 3 [json_name = "layer"];
               }
               PolicyAction policy_action = 1 [json_name = "policy-action"];
            }
            PolicyActions policy_actions = 10 [json_name = "policy-actions"];
            message SuppressionActions {
               message SuppressionAction {
                  enum SuppressType {
                     INVALID_ENUM_VALUE_SuppressType = 0;
                     SuppressType_UNKNOWNX_UNICASTX_SUPPRESSION = 2;
                     SuppressType_MULTICASTX_SUPPRESSION = 3;
                     SuppressType_BROADCASTX_SUPPRESSION = 4;
                  };
                  SuppressType suppress_type = 1 [json_name = "suppress-type"];
                  uint32 cir = 2 [json_name = "cir"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  enum GreenAction {
                     GreenAction_PASS = 0;
                     GreenAction_DISCARD = 2;
                  };
                  GreenAction green_action = 4 [json_name = "green-action"];
                  enum GreenServiceClass {
                     GreenServiceClass_BE = 0;
                     GreenServiceClass_AF1 = 1;
                     GreenServiceClass_AF2 = 2;
                     GreenServiceClass_AF3 = 3;
                     GreenServiceClass_AF4 = 4;
                     GreenServiceClass_EF = 5;
                     GreenServiceClass_CS6 = 6;
                     GreenServiceClass_CS7 = 7;
                  };
                  GreenServiceClass green_service_class = 5 [json_name = "green-service-class"];
                  enum GreenColor {
                     GreenColor_GREEN = 0;
                     GreenColor_YELLOW = 1;
                     GreenColor_RED = 2;
                  };
                  GreenColor green_color = 6 [json_name = "green-color"];
                  enum RedAction {
                     RedAction_PASS = 0;
                     RedAction_DISCARD = 2;
                  };
                  RedAction red_action = 7 [json_name = "red-action"];
                  enum RedServiceClass {
                     RedServiceClass_BE = 0;
                     RedServiceClass_AF1 = 1;
                     RedServiceClass_AF2 = 2;
                     RedServiceClass_AF3 = 3;
                     RedServiceClass_AF4 = 4;
                     RedServiceClass_EF = 5;
                     RedServiceClass_CS6 = 6;
                     RedServiceClass_CS7 = 7;
                  };
                  RedServiceClass red_service_class = 8 [json_name = "red-service-class"];
                  enum RedColor {
                     RedColor_GREEN = 0;
                     RedColor_YELLOW = 1;
                     RedColor_RED = 2;
                  };
                  RedColor red_color = 9 [json_name = "red-color"];
               }
               repeated SuppressionAction suppression_action = 1 [json_name = "suppression-action"];
            }
            SuppressionActions suppression_actions = 11 [json_name = "suppression-actions"];
            message LoadAction {
               enum BalanceType {
                  BalanceType_FLOW = 0;
                  BalanceType_PACKET = 1;
                  BalanceType_FLOWX_L2 = 2;
                  BalanceType_FLOWX_L3 = 3;
               };
               BalanceType balance_type = 1 [json_name = "balance-type"];
            }
            LoadAction load_action = 12 [json_name = "load-action"];
            message MatchTermAction {
               enum MatchTerm {
                  INVALID_ENUM_VALUE_MatchTerm = 0;
                  MatchTerm_ENABLE = 1;
               };
               MatchTerm match_term = 1 [json_name = "match-term"];
            }
            MatchTermAction match_term_action = 13 [json_name = "match-term-action"];
            message NetstreamSamplerActions {
               message NetstreamSamplerAction {
                  enum FlowType {
                     FlowType_IPV4 = 0;
                     FlowType_IPV6 = 1;
                  };
                  FlowType flow_type = 1 [json_name = "flow-type"];
                  enum SampleType {
                     SampleType_FIXX_PACKETS = 0;
                     SampleType_FIXX_TIME = 1;
                     SampleType_RANDOMX_PACKETS = 2;
                  };
                  SampleType sample_type = 2 [json_name = "sample-type"];
                  uint32 sample_value = 3 [json_name = "sample-value"];
               }
               repeated NetstreamSamplerAction netstream_sampler_action = 1 [json_name = "netstream-sampler-action"];
            }
            NetstreamSamplerActions netstream_sampler_actions = 14 [json_name = "netstream-sampler-actions"];
            message UrpfAction {
               enum CheckType {
                  CheckType_STRICT = 0;
                  CheckType_LOOSE = 1;
               };
               CheckType check_type = 1 [json_name = "check-type"];
               enum AllowDefault {
                  INVALID_ENUM_VALUE_AllowDefault = 0;
                  AllowDefault_ENABLE = 1;
               };
               AllowDefault allow_default = 2 [json_name = "allow-default"];
               enum IgnoreDefault {
                  IgnoreDefault_DISABLE = 0;
               };
               IgnoreDefault ignore_default = 3 [json_name = "ignore-default"];
            }
            UrpfAction urpf_action = 15 [json_name = "urpf-action"];
            message ExceptDenyAction {
               enum DenyAction {
                  INVALID_ENUM_VALUE_DenyAction = 0;
                  DenyAction_ENABLE = 1;
               };
               DenyAction deny_action = 1 [json_name = "deny-action"];
            }
            ExceptDenyAction except_deny_action = 16 [json_name = "except-deny-action"];
            message UserQueueAction {
               uint32 cir = 1 [json_name = "cir"];
               uint32 pir = 2 [json_name = "pir"];
               string flow_queue_name = 3 [json_name = "flow-queue-name"];
               string flow_mapping_name = 4 [json_name = "flow-mapping-name"];
               string user_group_queue_name = 5 [json_name = "user-group-queue-name"];
               string service_template_name = 6 [json_name = "service-template-name"];
            }
            UserQueueAction user_queue_action = 17 [json_name = "user-queue-action"];
            message SystemLogAction {
               uint32 threshold = 1 [json_name = "threshold"];
               enum StatisticsType {
                  INVALID_ENUM_VALUE_StatisticsType = 0;
                  StatisticsType_BPS = 1;
                  StatisticsType_PPS = 2;
               };
               StatisticsType statistics_type = 2 [json_name = "statistics-type"];
            }
            SystemLogAction system_log_action = 18 [json_name = "system-log-action"];
            message Mirror {
               message MirrorEnable {
               }
               MirrorEnable mirror_enable = 1 [json_name = "mirror-enable"];
               message MirrorSlice {
                  uint32 slice_size = 1 [json_name = "slice-size"];
               }
               MirrorSlice mirror_slice = 2 [json_name = "mirror-slice"];
               message MirrorCar {
                  uint32 cir = 1 [json_name = "cir"];
                  uint32 pir = 2 [json_name = "pir"];
                  uint32 cbs = 3 [json_name = "cbs"];
                  uint32 pbs = 4 [json_name = "pbs"];
               }
               MirrorCar mirror_car = 3 [json_name = "mirror-car"];
               message MirrorTo {
                  string observe_index = 1 [json_name = "observe-index"];
               }
               MirrorTo mirror_to = 4 [json_name = "mirror-to"];
            }
            Mirror mirror = 19 [json_name = "mirror"];
            message BehaviorBindMulticastNatInstance {
               message BehaviorBindMulticastNat {
                  uint32 instance_id = 1 [json_name = "instance-id"];
                  string instance_name = 2 [json_name = "instance-name"];
               }
               repeated BehaviorBindMulticastNat behavior_bind_multicast_nat = 1 [json_name = "behavior-bind-multicast-nat"];
            }
            BehaviorBindMulticastNatInstance behavior_bind_multicast_nat_instance = 20 [json_name = "behavior-bind-multicast-nat-instance"];
            message Pbr {
               message RedirectVpnGroup {
                  string vpn_group_name = 1 [json_name = "vpn-group-name"];
               }
               RedirectVpnGroup redirect_vpn_group = 1 [json_name = "redirect-vpn-group"];
               message RedirectLsp {
                  string target_address = 1 [json_name = "target-address"];
               }
               RedirectLsp redirect_lsp = 2 [json_name = "redirect-lsp"];
               message PbrIpv4 {
               }
               PbrIpv4 pbr_ipv4 = 3 [json_name = "pbr-ipv4"];
               message PbrIpv6 {
               }
               PbrIpv6 pbr_ipv6 = 4 [json_name = "pbr-ipv6"];
               message PbrL2Vpn {
                  message RedirectVsi {
                     string vsi_name = 1 [json_name = "vsi-name"];
                  }
                  RedirectVsi redirect_vsi = 1 [json_name = "redirect-vsi"];
               }
               PbrL2Vpn pbr_l2vpn = 5 [json_name = "pbr-l2vpn"];
            }
            Pbr pbr = 21 [json_name = "pbr"];
         }
         repeated TrafficBehavior traffic_behavior = 1 [json_name = "traffic-behavior"];
      }
      TrafficBehaviors traffic_behaviors = 3 [json_name = "traffic-behaviors"];
      message TrafficPolicys {
         message TrafficPolicy {
            string name = 1 [json_name = "name"];
            string description = 2 [json_name = "description"];
            uint32 step = 3 [json_name = "step"];
            enum ShareMode {
               ShareMode_DISABLE = 0;
               ShareMode_ENABLE = 1;
            };
            ShareMode share_mode = 4 [json_name = "share-mode"];
            enum StatFlag {
               StatFlag_DISABLE = 0;
               StatFlag_ENABLE = 1;
            };
            StatFlag stat_flag = 5 [json_name = "stat-flag"];
            enum LinkExclude {
               LinkExclude_DISABLE = 0;
               LinkExclude_ENABLE = 1;
            };
            LinkExclude link_exclude = 6 [json_name = "link-exclude"];
            message PolicyNodes {
               message PolicyNode {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  string behavior_name = 2 [json_name = "behavior-name"];
                  uint32 priority = 3 [json_name = "priority"];
               }
               repeated PolicyNode policy_node = 1 [json_name = "policy-node"];
            }
            PolicyNodes policy_nodes = 7 [json_name = "policy-nodes"];
            message GroupModePolicyNodes {
               message GroupModePolicyNode {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  enum Direction {
                     INVALID_ENUM_VALUE_Direction = 0;
                     Direction_SOURCE = 1;
                     Direction_DESTINATION = 2;
                  };
                  Direction direction = 2 [json_name = "direction"];
                  enum GroupType {
                     INVALID_ENUM_VALUE_GroupType = 0;
                     GroupType_SERVICEX_GROUP = 1;
                     GroupType_USERX_GROUP = 2;
                  };
                  GroupType group_type = 3 [json_name = "group-type"];
                  string group_name = 4 [json_name = "group-name"];
                  string behavior_name = 5 [json_name = "behavior-name"];
                  uint32 priority = 6 [json_name = "priority"];
               }
               repeated GroupModePolicyNode group_mode_policy_node = 1 [json_name = "group-mode-policy-node"];
            }
            GroupModePolicyNodes group_mode_policy_nodes = 8 [json_name = "group-mode-policy-nodes"];
            message Ipv6LocalIdSwitch {
               enum Enable {
                  INVALID_ENUM_VALUE_Enable = 0;
                  Enable_ENABLE = 1;
               };
               Enable enable = 1 [json_name = "enable"];
            }
            Ipv6LocalIdSwitch ipv6_local_id_switch = 9 [json_name = "ipv6-local-id-switch"];
         }
         repeated TrafficPolicy traffic_policy = 1 [json_name = "traffic-policy"];
      }
      TrafficPolicys traffic_policys = 4 [json_name = "traffic-policys"];
   }
   ClassifierTemplate classifier_template = 3 [json_name = "classifier-template"];
   message GlobalConfig {
      message GlobalPolicys {
         message GlobalPolicy {
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 1 [json_name = "direction"];
            string policy_name = 2 [json_name = "policy-name"];
            uint32 up_id = 3 [json_name = "up-id"];
            enum UclType {
               UclType_UCL = 0;
               UclType_ACL = 1;
            };
            UclType ucl_type = 4 [json_name = "ucl-type"];
            message GlobalPolicyStatisticss {
               message GlobalPolicyStatistics {
                  string slot_id = 1 [json_name = "slot-id"];
                  string apply_time = 2 [json_name = "apply-time"];
                  string enable_time = 3 [json_name = "enable-time"];
                  string clear_time = 4 [json_name = "clear-time"];
                  bool clear_flag = 5 [json_name = "clear-flag"];
                  uint64 match_packets = 6 [json_name = "match-packets"];
                  uint64 match_bytes = 7 [json_name = "match-bytes"];
                  uint64 match_packet_rate = 8 [json_name = "match-packet-rate"];
                  uint64 match_byte_rate = 9 [json_name = "match-byte-rate"];
                  uint64 miss_packets = 10 [json_name = "miss-packets"];
                  uint64 miss_bytes = 11 [json_name = "miss-bytes"];
                  uint64 match_pass_packets = 12 [json_name = "match-pass-packets"];
                  uint64 match_pass_bytes = 13 [json_name = "match-pass-bytes"];
                  uint64 match_drop_packets = 14 [json_name = "match-drop-packets"];
                  uint64 match_drop_bytes = 15 [json_name = "match-drop-bytes"];
                  uint64 miss_packet_rate = 16 [json_name = "miss-packet-rate"];
                  uint64 miss_byte_rate = 17 [json_name = "miss-byte-rate"];
                  uint64 match_pass_packet_rate = 18 [json_name = "match-pass-packet-rate"];
                  uint64 match_pass_byte_rate = 19 [json_name = "match-pass-byte-rate"];
                  uint64 match_drop_packet_rate = 20 [json_name = "match-drop-packet-rate"];
                  uint64 match_drop_byte_rate = 21 [json_name = "match-drop-byte-rate"];
                  uint64 urpf_packets = 22 [json_name = "urpf-packets"];
                  uint64 urpf_bytes = 23 [json_name = "urpf-bytes"];
                  uint64 urpf_packet_rate = 24 [json_name = "urpf-packet-rate"];
                  uint64 urpf_byte_rate = 25 [json_name = "urpf-byte-rate"];
                  uint64 car_packets = 26 [json_name = "car-packets"];
                  uint64 car_bytes = 27 [json_name = "car-bytes"];
                  uint64 car_packet_rate = 28 [json_name = "car-packet-rate"];
                  uint64 car_byte_rate = 29 [json_name = "car-byte-rate"];
                  uint64 filter_packets = 30 [json_name = "filter-packets"];
                  uint64 filter_bytes = 31 [json_name = "filter-bytes"];
                  uint64 filter_packet_rate = 32 [json_name = "filter-packet-rate"];
                  uint64 filter_byte_rate = 33 [json_name = "filter-byte-rate"];
                  message ClassifierStatisticss {
                     message ClassifierStatistics {
                        string classifier_name = 1 [json_name = "classifier-name"];
                        string stream_direction = 2 [json_name = "stream-direction"];
                        string group_type = 3 [json_name = "group-type"];
                        string group_name = 4 [json_name = "group-name"];
                        uint64 match_packets = 5 [json_name = "match-packets"];
                        uint64 match_bytes = 6 [json_name = "match-bytes"];
                        uint64 match_packet_rate = 7 [json_name = "match-packet-rate"];
                        uint64 match_byte_rate = 8 [json_name = "match-byte-rate"];
                        uint64 match_pass_packets = 9 [json_name = "match-pass-packets"];
                        uint64 match_pass_bytes = 10 [json_name = "match-pass-bytes"];
                        uint64 match_drop_packets = 11 [json_name = "match-drop-packets"];
                        uint64 match_drop_bytes = 12 [json_name = "match-drop-bytes"];
                        uint64 match_pass_packet_rate = 13 [json_name = "match-pass-packet-rate"];
                        uint64 match_pass_byte_rate = 14 [json_name = "match-pass-byte-rate"];
                        uint64 match_drop_packet_rate = 15 [json_name = "match-drop-packet-rate"];
                        uint64 match_drop_byte_rate = 16 [json_name = "match-drop-byte-rate"];
                        uint64 filter_packets = 17 [json_name = "filter-packets"];
                        uint64 filter_bytes = 18 [json_name = "filter-bytes"];
                        uint64 filter_paket_rate = 19 [json_name = "filter-paket-rate"];
                        uint64 filter_byte_rate = 20 [json_name = "filter-byte-rate"];
                        uint64 urpf_drop_packets = 21 [json_name = "urpf-drop-packets"];
                        uint64 urpf_drop_bytes = 22 [json_name = "urpf-drop-bytes"];
                        uint64 urpf_drop_packet_rate = 23 [json_name = "urpf-drop-packet-rate"];
                        uint64 urpf_drop_byte_rate = 24 [json_name = "urpf-drop-byte-rate"];
                        uint64 car_packets = 25 [json_name = "car-packets"];
                        uint64 car_bytes = 26 [json_name = "car-bytes"];
                        uint64 car_packet_rate = 27 [json_name = "car-packet-rate"];
                        uint64 car_byte_rate = 28 [json_name = "car-byte-rate"];
                        uint64 car_pass_packets = 29 [json_name = "car-pass-packets"];
                        uint64 car_pass_bytes = 30 [json_name = "car-pass-bytes"];
                        uint64 car_drop_packets = 31 [json_name = "car-drop-packets"];
                        uint64 car_drop_bytes = 32 [json_name = "car-drop-bytes"];
                        uint64 car_pass_packet_rate = 33 [json_name = "car-pass-packet-rate"];
                        uint64 car_pass_byte_rate = 34 [json_name = "car-pass-byte-rate"];
                        uint64 car_drop_packet_rate = 35 [json_name = "car-drop-packet-rate"];
                        uint64 car_drop_byte_rate = 36 [json_name = "car-drop-byte-rate"];
                        uint64 car_green_packets = 37 [json_name = "car-green-packets"];
                        uint64 car_green_bytes = 38 [json_name = "car-green-bytes"];
                        uint64 car_yellow_packets = 39 [json_name = "car-yellow-packets"];
                        uint64 car_yellow_bytes = 40 [json_name = "car-yellow-bytes"];
                        uint64 car_red_packets = 41 [json_name = "car-red-packets"];
                        uint64 car_red_bytes = 42 [json_name = "car-red-bytes"];
                        uint64 car_green_packet_rate = 43 [json_name = "car-green-packet-rate"];
                        uint64 car_green_byte_rate = 44 [json_name = "car-green-byte-rate"];
                        uint64 car_yellow_packet_rate = 45 [json_name = "car-yellow-packet-rate"];
                        uint64 car_yellow_byte_rate = 46 [json_name = "car-yellow-byte-rate"];
                        uint64 car_red_packet_rate = 47 [json_name = "car-red-packet-rate"];
                        uint64 car_red_byte_rate = 48 [json_name = "car-red-byte-rate"];
                     }
                     repeated ClassifierStatistics classifier_statistics = 1 [json_name = "classifier-statistics"];
                  }
                  ClassifierStatisticss classifier_statisticss = 34 [json_name = "classifier-statisticss"];
               }
               repeated GlobalPolicyStatistics global_policy_statistics = 1 [json_name = "global-policy-statistics"];
            }
            GlobalPolicyStatisticss global_policy_statisticss = 5 [json_name = "global-policy-statisticss"];
         }
         repeated GlobalPolicy global_policy = 1 [json_name = "global-policy"];
      }
      GlobalPolicys global_policys = 1 [json_name = "global-policys"];
      message TrafficPolicyMatchs {
         message TrafficPolicyMatch {
            enum Type {
               Type_IPX_LAYERX_PUSH = 0;
               Type_PROTOCOLX_MCX_RESERVED = 2;
               Type_MPLSX_LAYERX_PUSH = 3;
               Type_MPLSX_LAYERX_L2X_INBOUND = 4;
               Type_RULEX_PACKET = 5;
               Type_MPLSX_LAYERX_POP = 6;
               Type_IPX_LAYERX_POP = 7;
            };
            Type type = 1 [json_name = "type"];
         }
         repeated TrafficPolicyMatch traffic_policy_match = 1 [json_name = "traffic-policy-match"];
      }
      TrafficPolicyMatchs traffic_policy_matchs = 2 [json_name = "traffic-policy-matchs"];
      message AclLog {
         uint32 entry_num = 1 [json_name = "entry-num"];
         uint32 agging_time = 2 [json_name = "agging-time"];
      }
      AclLog acl_log = 3 [json_name = "acl-log"];
      message GlobalSetQueueStat {
         enum Interval {
            INVALID_ENUM_VALUE_Interval = 0;
            Interval_X_5S = 5;
            Interval_X_30S = 30;
            Interval_X_300S = 300;
         };
         Interval interval = 1 [json_name = "interval"];
      }
      GlobalSetQueueStat global_set_queue_stat = 4 [json_name = "global-set-queue-stat"];
      message BufferPolicyApplys {
         message BufferPolicyApply {
            string name = 1 [json_name = "name"];
         }
         repeated BufferPolicyApply buffer_policy_apply = 1 [json_name = "buffer-policy-apply"];
      }
      BufferPolicyApplys buffer_policy_applys = 5 [json_name = "buffer-policy-applys"];
      message QueueWreds {
         message QueueWred {
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 1 [json_name = "service-class"];
            enum SpeedType {
               SpeedType_BOTHX_SPEED = 0;
               SpeedType_LOWX_SPEED = 1;
               SpeedType_HIGHX_SPEED = 2;
            };
            SpeedType speed_type = 2 [json_name = "speed-type"];
            string wred_name = 3 [json_name = "wred-name"];
         }
         repeated QueueWred queue_wred = 1 [json_name = "queue-wred"];
      }
      QueueWreds queue_wreds = 6 [json_name = "queue-wreds"];
      message LowLatencyEnables {
         message LowLatencyEnable {
            enum EnableType {
               INVALID_ENUM_VALUE_EnableType = 0;
               EnableType_FLOWX_QUEUE = 1;
            };
            EnableType enable_type = 1 [json_name = "enable-type"];
            enum EnableValue {
               INVALID_ENUM_VALUE_EnableValue = 0;
               EnableValue_ENABLE = 1;
            };
            EnableValue enable_value = 2 [json_name = "enable-value"];
         }
         repeated LowLatencyEnable low_latency_enable = 1 [json_name = "low-latency-enable"];
      }
      LowLatencyEnables low_latency_enables = 7 [json_name = "low-latency-enables"];
      message SchedulingModes {
         message SchedulingMode {
            string slot_id = 1 [json_name = "slot-id"];
            enum ModeType {
               ModeType_MODE2 = 0;
               ModeType_MODE3 = 1;
            };
            ModeType mode_type = 2 [json_name = "mode-type"];
         }
         repeated SchedulingMode scheduling_mode = 1 [json_name = "scheduling-mode"];
      }
      SchedulingModes scheduling_modes = 8 [json_name = "scheduling-modes"];
      message ConvergenceSchedule {
         enum Mode {
            INVALID_ENUM_VALUE_Mode = 0;
            Mode_DISABLE = 4;
         };
         Mode mode = 1 [json_name = "mode"];
      }
      ConvergenceSchedule convergence_schedule = 9 [json_name = "convergence-schedule"];
      message PortConvergenceSchedule {
         enum Mode {
            INVALID_ENUM_VALUE_Mode = 0;
            Mode_ENABLE = 1;
         };
         Mode mode = 1 [json_name = "mode"];
      }
      PortConvergenceSchedule port_convergence_schedule = 10 [json_name = "port-convergence-schedule"];
      message TrafficPolicyUntag {
         enum UntagType {
            UntagType_DISABLE = 0;
         };
         UntagType untag_type = 1 [json_name = "untag-type"];
      }
      TrafficPolicyUntag traffic_policy_untag = 11 [json_name = "traffic-policy-untag"];
      message HostPackets {
         message HostPacket {
            uint32 dscp = 1 [json_name = "dscp"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            enum Color {
               Color_GREEN = 0;
               Color_YELLOW = 1;
               Color_RED = 2;
            };
            Color color = 3 [json_name = "color"];
         }
         repeated HostPacket host_packet = 1 [json_name = "host-packet"];
      }
      HostPackets host_packets = 12 [json_name = "host-packets"];
      message ExpPhbDisable {
         enum ForwardType {
            INVALID_ENUM_VALUE_ForwardType = 0;
            ForwardType_VLL = 1;
         };
         ForwardType forward_type = 1 [json_name = "forward-type"];
      }
      ExpPhbDisable exp_phb_disable = 13 [json_name = "exp-phb-disable"];
      message Packs {
         message Pack {
            string slot_id = 1 [json_name = "slot-id"];
            enum SwitchFlag {
               SwitchFlag_DISABLE = 0;
               SwitchFlag_ENABLE = 1;
            };
            SwitchFlag switch_flag = 2 [json_name = "switch-flag"];
         }
         repeated Pack pack = 1 [json_name = "pack"];
      }
      Packs packs = 14 [json_name = "packs"];
      message PacketBlockThresholdAll {
         uint32 size = 1 [json_name = "size"];
      }
      PacketBlockThresholdAll packet_block_threshold_all = 15 [json_name = "packet-block-threshold-all"];
      message BurstSizes {
         message BurstSize {
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 1 [json_name = "service-class"];
            uint32 value = 2 [json_name = "value"];
         }
         repeated BurstSize burst_size = 1 [json_name = "burst-size"];
      }
      BurstSizes burst_sizes = 16 [json_name = "burst-sizes"];
      message TmScheduleTrafficStatisticsEnables {
         message TmScheduleTrafficStatisticsEnable {
            string slot_id = 1 [json_name = "slot-id"];
            string card_id = 2 [json_name = "card-id"];
         }
         repeated TmScheduleTrafficStatisticsEnable tm_schedule_traffic_statistics_enable = 1 [json_name = "tm-schedule-traffic-statistics-enable"];
      }
      TmScheduleTrafficStatisticsEnables tm_schedule_traffic_statistics_enables = 17 [json_name = "tm-schedule-traffic-statistics-enables"];
      message RedbackPacketAdjustment {
         enum UserType {
            INVALID_ENUM_VALUE_UserType = 0;
            UserType_LAC = 1;
            UserType_LNS = 2;
            UserType_LACX_ANDX_LNS = 3;
         };
         UserType user_type = 1 [json_name = "user-type"];
      }
      RedbackPacketAdjustment redback_packet_adjustment = 18 [json_name = "redback-packet-adjustment"];
      message RedbackPacketAdjustmentSlots {
         message RedbackPacketAdjustmentSlot {
            string slot_id = 1 [json_name = "slot-id"];
            enum UserType {
               INVALID_ENUM_VALUE_UserType = 0;
               UserType_LAC = 1;
               UserType_LNS = 2;
               UserType_LACX_ANDX_LNS = 3;
            };
            UserType user_type = 2 [json_name = "user-type"];
         }
         repeated RedbackPacketAdjustmentSlot redback_packet_adjustment_slot = 1 [json_name = "redback-packet-adjustment-slot"];
      }
      RedbackPacketAdjustmentSlots redback_packet_adjustment_slots = 19 [json_name = "redback-packet-adjustment-slots"];
      message LinkLayerExcludes {
         message LinkLayerExclude {
            enum AccessType {
               AccessType_NONE = 0;
               AccessType_LEASEDX_LINEX_ACCESS = 1;
            };
            AccessType access_type = 1 [json_name = "access-type"];
         }
         repeated LinkLayerExclude link_layer_exclude = 1 [json_name = "link-layer-exclude"];
      }
      LinkLayerExcludes link_layer_excludes = 20 [json_name = "link-layer-excludes"];
      message LinkLayerExcludeSlots {
         message LinkLayerExcludeSlot {
            string slot_id = 1 [json_name = "slot-id"];
            enum AccessType {
               AccessType_NONE = 0;
               AccessType_LEASEDX_LINEX_ACCESS = 1;
            };
            AccessType access_type = 2 [json_name = "access-type"];
         }
         repeated LinkLayerExcludeSlot link_layer_exclude_slot = 1 [json_name = "link-layer-exclude-slot"];
      }
      LinkLayerExcludeSlots link_layer_exclude_slots = 21 [json_name = "link-layer-exclude-slots"];
      message L2TpLayerExclude {
         enum L2TpUser {
            INVALID_ENUM_VALUE_L2TpUser = 0;
            L2TpUser_L2TPX_USER = 12;
         };
         L2TpUser l2tp_user = 1 [json_name = "l2tp-user"];
      }
      L2TpLayerExclude l2tp_layer_exclude = 22 [json_name = "l2tp-layer-exclude"];
      message L2TpLayerExcludeSlots {
         message L2TpLayerExcludeSlot {
            string slot_id = 1 [json_name = "slot-id"];
         }
         repeated L2TpLayerExcludeSlot l2tp_layer_exclude_slot = 1 [json_name = "l2tp-layer-exclude-slot"];
      }
      L2TpLayerExcludeSlots l2tp_layer_exclude_slots = 23 [json_name = "l2tp-layer-exclude-slots"];
      message Mirror {
         message ToObserve {
            uint32 index = 1 [json_name = "index"];
         }
         ToObserve to_observe = 1 [json_name = "to-observe"];
      }
      Mirror mirror = 24 [json_name = "mirror"];
      message Pbr {
         message GlobalVpnGroups {
            message GlobalVpnGroup {
               string vpn_group_name = 1 [json_name = "vpn-group-name"];
               repeated string vrf_name = 2 [json_name = "vrf-name"];
            }
            repeated GlobalVpnGroup global_vpn_group = 1 [json_name = "global-vpn-group"];
         }
         GlobalVpnGroups global_vpn_groups = 1 [json_name = "global-vpn-groups"];
      }
      Pbr pbr = 25 [json_name = "pbr"];
      message LocalIdEnable {
         enum Mode {
            Mode_SOURCE = 0;
            Mode_DESTINATION = 1;
            Mode_BOTH = 2;
         };
         Mode mode = 1 [json_name = "mode"];
      }
      LocalIdEnable local_id_enable = 26 [json_name = "local-id-enable"];
   }
   GlobalConfig global_config = 4 [json_name = "global-config"];
   message GlobalQuery {
      message DefaultQueueStatisticss {
         message DefaultQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 dropped_packets = 3 [json_name = "dropped-packets"];
            uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
            uint64 passed_pps = 5 [json_name = "passed-pps"];
            uint64 passed_bps = 6 [json_name = "passed-bps"];
            uint64 total_packets = 7 [json_name = "total-packets"];
            uint64 total_bytes = 8 [json_name = "total-bytes"];
            uint32 total_buffer = 9 [json_name = "total-buffer"];
            uint32 current_buffer = 10 [json_name = "current-buffer"];
            uint32 buffer_percent = 11 [json_name = "buffer-percent"];
            uint32 max_buffer_percent = 12 [json_name = "max-buffer-percent"];
            uint64 buffer_time = 13 [json_name = "buffer-time"];
            uint64 clean_time = 14 [json_name = "clean-time"];
         }
         repeated DefaultQueueStatistics default_queue_statistics = 1 [json_name = "default-queue-statistics"];
      }
      DefaultQueueStatisticss default_queue_statisticss = 1 [json_name = "default-queue-statisticss"];
      message AllQueueStatisticss {
         message AllQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 dropped_packets = 3 [json_name = "dropped-packets"];
            uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
            uint64 passed_pps = 5 [json_name = "passed-pps"];
            uint64 passed_bps = 6 [json_name = "passed-bps"];
            uint64 total_packets = 7 [json_name = "total-packets"];
            uint64 total_bytes = 8 [json_name = "total-bytes"];
         }
         repeated AllQueueStatistics all_queue_statistics = 1 [json_name = "all-queue-statistics"];
      }
      AllQueueStatisticss all_queue_statisticss = 2 [json_name = "all-queue-statisticss"];
      message ChannelQueueStatisticss {
         message ChannelQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 dropped_packets = 3 [json_name = "dropped-packets"];
            uint64 dropped_bytes = 4 [json_name = "dropped-bytes"];
            uint64 passed_pps = 5 [json_name = "passed-pps"];
            uint64 passed_bps = 6 [json_name = "passed-bps"];
            uint64 total_packets = 7 [json_name = "total-packets"];
            uint64 total_bytes = 8 [json_name = "total-bytes"];
            uint32 total_buffer = 9 [json_name = "total-buffer"];
            uint32 current_buffer = 10 [json_name = "current-buffer"];
            uint32 buffer_percent = 11 [json_name = "buffer-percent"];
            uint32 max_buffer_percent = 12 [json_name = "max-buffer-percent"];
            uint64 buffer_time = 13 [json_name = "buffer-time"];
            uint64 clean_time = 14 [json_name = "clean-time"];
         }
         repeated ChannelQueueStatistics channel_queue_statistics = 1 [json_name = "channel-queue-statistics"];
      }
      ChannelQueueStatisticss channel_queue_statisticss = 3 [json_name = "channel-queue-statisticss"];
      message UserInformations {
         message UserInformation {
            uint32 id = 1 [json_name = "id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            message UserQueueStatisticss {
               message UserQueueStatistics {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                     ServiceClass_TOTAL = 8;
                     ServiceClass_COS0 = 9;
                     ServiceClass_COS1 = 10;
                     ServiceClass_COS2 = 11;
                     ServiceClass_COS3 = 12;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  uint64 pass_packet_rate = 2 [json_name = "pass-packet-rate"];
                  uint64 pass_byte_rate = 3 [json_name = "pass-byte-rate"];
                  uint64 pass_packets = 4 [json_name = "pass-packets"];
                  uint64 pass_bytes = 5 [json_name = "pass-bytes"];
                  uint64 discard_packet_rate = 6 [json_name = "discard-packet-rate"];
                  uint64 discard_byte_rate = 7 [json_name = "discard-byte-rate"];
                  uint64 discard_packets = 8 [json_name = "discard-packets"];
                  uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                  string pass_peak_packet_time = 10 [json_name = "pass-peak-packet-time"];
                  uint64 pass_peak_packet_rate = 11 [json_name = "pass-peak-packet-rate"];
                  string pass_peak_byte_time = 12 [json_name = "pass-peak-byte-time"];
                  uint64 pass_peak_byte_rate = 13 [json_name = "pass-peak-byte-rate"];
                  string drop_peak_packet_time = 14 [json_name = "drop-peak-packet-time"];
                  uint64 drop_peak_packet_rate = 15 [json_name = "drop-peak-packet-rate"];
                  string drop_peak_byte_time = 16 [json_name = "drop-peak-byte-time"];
                  uint64 drop_peak_byte_rate = 17 [json_name = "drop-peak-byte-rate"];
                  string tail_peak_packet_time = 18 [json_name = "tail-peak-packet-time"];
                  uint64 tail_peak_packet_rate = 19 [json_name = "tail-peak-packet-rate"];
                  string tail_peak_byte_time = 20 [json_name = "tail-peak-byte-time"];
                  uint64 tail_peak_byte_rate = 21 [json_name = "tail-peak-byte-rate"];
               }
               repeated UserQueueStatistics user_queue_statistics = 1 [json_name = "user-queue-statistics"];
            }
            UserQueueStatisticss user_queue_statisticss = 3 [json_name = "user-queue-statisticss"];
            message CarStatisticss {
               message CarStatistics {
                  enum ResourceType {
                     ResourceType_NULL = 0;
                     ResourceType_SQ = 1;
                     ResourceType_CAR = 2;
                     ResourceType_SQX_CAR = 3;
                     ResourceType_L2X_CAR = 4;
                     ResourceType_L2X_L3X_CAR = 5;
                     ResourceType_L3X_CAR = 6;
                  };
                  ResourceType resource_type = 1 [json_name = "resource-type"];
                  uint64 pass_packet_rate = 2 [json_name = "pass-packet-rate"];
                  uint64 pass_byte_rate = 3 [json_name = "pass-byte-rate"];
                  uint64 pass_packets = 4 [json_name = "pass-packets"];
                  uint64 pass_bytes = 5 [json_name = "pass-bytes"];
                  uint64 discard_packet_rate = 6 [json_name = "discard-packet-rate"];
                  uint64 discard_byte_rate = 7 [json_name = "discard-byte-rate"];
                  uint64 discard_packets = 8 [json_name = "discard-packets"];
                  uint64 discard_bytes = 9 [json_name = "discard-bytes"];
                  string pass_peak_packet_time = 10 [json_name = "pass-peak-packet-time"];
                  uint64 pass_peak_packet_rate = 11 [json_name = "pass-peak-packet-rate"];
                  string pass_peak_byte_time = 12 [json_name = "pass-peak-byte-time"];
                  uint64 pass_peak_byte_rate = 13 [json_name = "pass-peak-byte-rate"];
                  string drop_peak_packet_time = 14 [json_name = "drop-peak-packet-time"];
                  uint64 drop_peak_packet_rate = 15 [json_name = "drop-peak-packet-rate"];
                  string drop_peak_byte_time = 16 [json_name = "drop-peak-byte-time"];
                  uint64 drop_peak_byte_rate = 17 [json_name = "drop-peak-byte-rate"];
                  string v6_pass_peak_packet_time = 18 [json_name = "v6-pass-peak-packet-time"];
                  uint64 v6_pass_peak_packet_rate = 19 [json_name = "v6-pass-peak-packet-rate"];
                  string v6_pass_peak_byte_time = 20 [json_name = "v6-pass-peak-byte-time"];
                  uint64 v6_pass_peak_byte_rate = 21 [json_name = "v6-pass-peak-byte-rate"];
                  string v6_tail_peak_packet_time = 22 [json_name = "v6-tail-peak-packet-time"];
                  uint64 v6_tail_peak_packet_rate = 23 [json_name = "v6-tail-peak-packet-rate"];
                  string v6_tail_peak_byte_time = 24 [json_name = "v6-tail-peak-byte-time"];
                  uint64 v6_tail_peak_byte_rate = 25 [json_name = "v6-tail-peak-byte-rate"];
               }
               repeated CarStatistics car_statistics = 1 [json_name = "car-statistics"];
            }
            CarStatisticss car_statisticss = 4 [json_name = "car-statisticss"];
            message FlowQueueInfos {
               message FlowQueueInfo {
                  enum ServiceClass {
                     ServiceClass_BE = 0;
                     ServiceClass_AF1 = 1;
                     ServiceClass_AF2 = 2;
                     ServiceClass_AF3 = 3;
                     ServiceClass_AF4 = 4;
                     ServiceClass_EF = 5;
                     ServiceClass_CS6 = 6;
                     ServiceClass_CS7 = 7;
                     ServiceClass_TOTAL = 8;
                     ServiceClass_COS0 = 9;
                     ServiceClass_COS1 = 10;
                     ServiceClass_COS2 = 11;
                     ServiceClass_COS3 = 12;
                  };
                  ServiceClass service_class = 1 [json_name = "service-class"];
                  enum ScheduleType {
                     ScheduleType_PQ = 0;
                     ScheduleType_WFQ = 1;
                     ScheduleType_LPQ = 2;
                  };
                  ScheduleType schedule_type = 2 [json_name = "schedule-type"];
                  uint32 weight = 3 [json_name = "weight"];
                  uint32 shaping = 4 [json_name = "shaping"];
                  uint32 priority = 5 [json_name = "priority"];
               }
               repeated FlowQueueInfo flow_queue_info = 1 [json_name = "flow-queue-info"];
            }
            FlowQueueInfos flow_queue_infos = 5 [json_name = "flow-queue-infos"];
            message CirInfo {
               uint32 cir = 1 [json_name = "cir"];
               uint32 pir = 2 [json_name = "pir"];
            }
            CirInfo cir_info = 6 [json_name = "cir-info"];
         }
         repeated UserInformation user_information = 1 [json_name = "user-information"];
      }
      UserInformations user_informations = 4 [json_name = "user-informations"];
      message InterfaceTrafficPolicyStatisticss {
         message InterfaceTrafficPolicyStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
            uint32 vlan_id = 3 [json_name = "vlan-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 4 [json_name = "direction"];
            string slot_id = 5 [json_name = "slot-id"];
            string traffic_policy_name = 6 [json_name = "traffic-policy-name"];
            string apply_time = 7 [json_name = "apply-time"];
            enum SwitchStatus {
               SwitchStatus_DISABLE = 0;
               SwitchStatus_ENABLE = 1;
            };
            SwitchStatus switch_status = 8 [json_name = "switch-status"];
            string switch_time = 9 [json_name = "switch-time"];
            string clear_time = 10 [json_name = "clear-time"];
            bool clear_flag = 11 [json_name = "clear-flag"];
            uint64 match_packets = 12 [json_name = "match-packets"];
            uint64 match_bytes = 13 [json_name = "match-bytes"];
            uint64 match_packet_rate = 14 [json_name = "match-packet-rate"];
            uint64 match_byte_rate = 15 [json_name = "match-byte-rate"];
            uint64 match_pass_packets = 16 [json_name = "match-pass-packets"];
            uint64 match_pass_bytes = 17 [json_name = "match-pass-bytes"];
            uint64 match_pass_packet_rate = 18 [json_name = "match-pass-packet-rate"];
            uint64 match_pass_byte_rate = 19 [json_name = "match-pass-byte-rate"];
            uint64 match_drop_packets = 20 [json_name = "match-drop-packets"];
            uint64 match_drop_bytes = 21 [json_name = "match-drop-bytes"];
            uint64 match_drop_packet_rate = 22 [json_name = "match-drop-packet-rate"];
            uint64 match_drop_byte_rate = 23 [json_name = "match-drop-byte-rate"];
            uint64 miss_packets = 24 [json_name = "miss-packets"];
            uint64 miss_bytes = 25 [json_name = "miss-bytes"];
            uint64 miss_packet_rate = 26 [json_name = "miss-packet-rate"];
            uint64 miss_byte_rate = 27 [json_name = "miss-byte-rate"];
            uint64 urpf_packets = 28 [json_name = "urpf-packets"];
            uint64 urpf_bytes = 29 [json_name = "urpf-bytes"];
            uint64 urpf_packet_rate = 30 [json_name = "urpf-packet-rate"];
            uint64 urpf_byte_rate = 31 [json_name = "urpf-byte-rate"];
            uint64 car_packets = 32 [json_name = "car-packets"];
            uint64 car_bytes = 33 [json_name = "car-bytes"];
            uint64 car_packet_rate = 34 [json_name = "car-packet-rate"];
            uint64 car_byte_rate = 35 [json_name = "car-byte-rate"];
            uint64 filter_packets = 36 [json_name = "filter-packets"];
            uint64 filter_bytes = 37 [json_name = "filter-bytes"];
            uint64 filter_packet_rate = 38 [json_name = "filter-packet-rate"];
            uint64 filter_byte_rate = 39 [json_name = "filter-byte-rate"];
            message RuleBasedStaticss {
               message RuleBasedStatics {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  string traffic_policy_name = 2 [json_name = "traffic-policy-name"];
                  enum ServiceType {
                     ServiceType_NORMAL = 0;
                     ServiceType_VBDX_IF = 1;
                     ServiceType_MULTIX_TYPE = 2;
                     ServiceType_VLANX_IF = 3;
                  };
                  ServiceType service_type = 3 [json_name = "service-type"];
                  uint32 ifmatch_id = 4 [json_name = "ifmatch-id"];
                  string acl_name = 5 [json_name = "acl-name"];
                  enum ProtocolFamily {
                     INVALID_ENUM_VALUE_ProtocolFamily = 0;
                     ProtocolFamily_IPV4 = 1;
                     ProtocolFamily_IPV6 = 2;
                     ProtocolFamily_L2 = 3;
                     ProtocolFamily_MPLS = 4;
                  };
                  ProtocolFamily protocol_family = 6 [json_name = "protocol-family"];
                  uint32 rule_id = 7 [json_name = "rule-id"];
                  uint64 match_pass_packets = 8 [json_name = "match-pass-packets"];
                  uint64 match_pass_bytes = 9 [json_name = "match-pass-bytes"];
                  uint64 match_drop_packets = 10 [json_name = "match-drop-packets"];
                  uint64 match_drop_bytes = 11 [json_name = "match-drop-bytes"];
               }
               repeated RuleBasedStatics rule_based_statics = 1 [json_name = "rule-based-statics"];
            }
            RuleBasedStaticss rule_based_staticss = 40 [json_name = "rule-based-staticss"];
            message ClassifierBasedStaticss {
               message ClassifierBasedStatics {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  string traffic_policy_name = 2 [json_name = "traffic-policy-name"];
                  enum ServiceType {
                     ServiceType_NORMAL = 0;
                     ServiceType_VBDX_IF = 1;
                     ServiceType_MULTIX_TYPE = 2;
                     ServiceType_VLANX_IF = 3;
                  };
                  ServiceType service_type = 3 [json_name = "service-type"];
                  enum ShareMode {
                     ShareMode_DISABLE = 0;
                     ShareMode_ENABLE = 1;
                  };
                  ShareMode share_mode = 4 [json_name = "share-mode"];
                  uint64 match_pass_packets = 5 [json_name = "match-pass-packets"];
                  uint64 match_pass_bytes = 6 [json_name = "match-pass-bytes"];
                  uint64 match_drop_packets = 7 [json_name = "match-drop-packets"];
                  uint64 match_drop_bytes = 8 [json_name = "match-drop-bytes"];
               }
               repeated ClassifierBasedStatics classifier_based_statics = 1 [json_name = "classifier-based-statics"];
            }
            ClassifierBasedStaticss classifier_based_staticss = 41 [json_name = "classifier-based-staticss"];
            message ClassifierStatisticss {
               message ClassifierStatistics {
                  string classifier_name = 1 [json_name = "classifier-name"];
                  uint64 match_packets = 2 [json_name = "match-packets"];
                  uint64 match_bytes = 3 [json_name = "match-bytes"];
                  uint64 match_packet_rate = 4 [json_name = "match-packet-rate"];
                  uint64 match_byte_rate = 5 [json_name = "match-byte-rate"];
                  uint64 match_pass_packets = 6 [json_name = "match-pass-packets"];
                  uint64 match_pass_bytes = 7 [json_name = "match-pass-bytes"];
                  uint64 match_pass_packet_rate = 8 [json_name = "match-pass-packet-rate"];
                  uint64 match_pass_byte_rate = 9 [json_name = "match-pass-byte-rate"];
                  uint64 match_drop_packets = 10 [json_name = "match-drop-packets"];
                  uint64 match_drop_bytes = 11 [json_name = "match-drop-bytes"];
                  uint64 match_drop_packet_rate = 12 [json_name = "match-drop-packet-rate"];
                  uint64 match_drop_byte_rate = 13 [json_name = "match-drop-byte-rate"];
                  uint64 urpf_drop_packets = 14 [json_name = "urpf-drop-packets"];
                  uint64 urpf_drop_bytes = 15 [json_name = "urpf-drop-bytes"];
                  uint64 urpf_drop_packet_rate = 16 [json_name = "urpf-drop-packet-rate"];
                  uint64 urpf_drop_byte_rate = 17 [json_name = "urpf-drop-byte-rate"];
                  uint64 car_packets = 18 [json_name = "car-packets"];
                  uint64 car_bytes = 19 [json_name = "car-bytes"];
                  uint64 car_packet_rate = 20 [json_name = "car-packet-rate"];
                  uint64 car_byte_rate = 21 [json_name = "car-byte-rate"];
                  uint64 car_pass_packets = 22 [json_name = "car-pass-packets"];
                  uint64 car_pass_bytes = 23 [json_name = "car-pass-bytes"];
                  uint64 car_pass_packet_rate = 24 [json_name = "car-pass-packet-rate"];
                  uint64 car_pass_byte_rate = 25 [json_name = "car-pass-byte-rate"];
                  uint64 car_drop_packets = 26 [json_name = "car-drop-packets"];
                  uint64 car_drop_bytes = 27 [json_name = "car-drop-bytes"];
                  uint64 car_drop_packet_rate = 28 [json_name = "car-drop-packet-rate"];
                  uint64 car_drop_byte_rate = 29 [json_name = "car-drop-byte-rate"];
                  uint64 car_green_packets = 30 [json_name = "car-green-packets"];
                  uint64 car_green_bytes = 31 [json_name = "car-green-bytes"];
                  uint64 car_green_packet_rate = 32 [json_name = "car-green-packet-rate"];
                  uint64 car_green_byte_rate = 33 [json_name = "car-green-byte-rate"];
                  uint64 car_yellow_packets = 34 [json_name = "car-yellow-packets"];
                  uint64 car_yellow_bytes = 35 [json_name = "car-yellow-bytes"];
                  uint64 car_yellow_packet_rate = 36 [json_name = "car-yellow-packet-rate"];
                  uint64 car_yellow_byte_rate = 37 [json_name = "car-yellow-byte-rate"];
                  uint64 car_red_packets = 38 [json_name = "car-red-packets"];
                  uint64 car_red_bytes = 39 [json_name = "car-red-bytes"];
                  uint64 car_red_packet_rate = 40 [json_name = "car-red-packet-rate"];
                  uint64 car_red_byte_rate = 41 [json_name = "car-red-byte-rate"];
                  uint64 filter_packets = 42 [json_name = "filter-packets"];
                  uint64 filter_bytes = 43 [json_name = "filter-bytes"];
                  uint64 filter_packet_rate = 44 [json_name = "filter-packet-rate"];
                  uint64 filter_byte_rate = 45 [json_name = "filter-byte-rate"];
                  uint64 unknownunisup_pass_packets = 46 [json_name = "unknownunisup-pass-packets"];
                  uint64 unknownunisup_pass_bytes = 47 [json_name = "unknownunisup-pass-bytes"];
                  uint64 unknownunisup_pass_packet_rate = 48 [json_name = "unknownunisup-pass-packet-rate"];
                  uint64 unknownunisup_pass_byte_rate = 49 [json_name = "unknownunisup-pass-byte-rate"];
                  uint64 unknownunisup_drop_packets = 50 [json_name = "unknownunisup-drop-packets"];
                  uint64 unknownunisup_drop_bytes = 51 [json_name = "unknownunisup-drop-bytes"];
                  uint64 unknownunisup_drop_packet_rate = 52 [json_name = "unknownunisup-drop-packet-rate"];
                  uint64 unknownunisup_drop_byte_rate = 53 [json_name = "unknownunisup-drop-byte-rate"];
                  uint64 multicastsup_pass_packets = 54 [json_name = "multicastsup-pass-packets"];
                  uint64 multicastsup_pass_bytes = 55 [json_name = "multicastsup-pass-bytes"];
                  uint64 multicastsup_pass_packet_rate = 56 [json_name = "multicastsup-pass-packet-rate"];
                  uint64 multicastsup_pass_byte_rate = 57 [json_name = "multicastsup-pass-byte-rate"];
                  uint64 multicastsup_drop_packets = 58 [json_name = "multicastsup-drop-packets"];
                  uint64 multicastsup_drop_bytes = 59 [json_name = "multicastsup-drop-bytes"];
                  uint64 multicastsup_drop_packet_rate = 60 [json_name = "multicastsup-drop-packet-rate"];
                  uint64 multicastsup_drop_byte_rate = 61 [json_name = "multicastsup-drop-byte-rate"];
                  uint64 broadcastsup_pass_packets = 62 [json_name = "broadcastsup-pass-packets"];
                  uint64 broadcastsup_pass_bytes = 63 [json_name = "broadcastsup-pass-bytes"];
                  uint64 broadcastsup_pass_packet_rate = 64 [json_name = "broadcastsup-pass-packet-rate"];
                  uint64 broadcastsup_pass_byte_rate = 65 [json_name = "broadcastsup-pass-byte-rate"];
                  uint64 broadcastsup_drop_packets = 66 [json_name = "broadcastsup-drop-packets"];
                  uint64 broadcastsup_drop_bytes = 67 [json_name = "broadcastsup-drop-bytes"];
                  uint64 broadcastsup_drop_packet_rate = 68 [json_name = "broadcastsup-drop-packet-rate"];
                  uint64 broadcastsup_drop_byte_rate = 69 [json_name = "broadcastsup-drop-byte-rate"];
               }
               repeated ClassifierStatistics classifier_statistics = 1 [json_name = "classifier-statistics"];
            }
            ClassifierStatisticss classifier_statisticss = 42 [json_name = "classifier-statisticss"];
         }
         repeated InterfaceTrafficPolicyStatistics interface_traffic_policy_statistics = 1 [json_name = "interface-traffic-policy-statistics"];
      }
      InterfaceTrafficPolicyStatisticss interface_traffic_policy_statisticss = 5 [json_name = "interface-traffic-policy-statisticss"];
      message CarResources {
         message CarResource {
            string slot_id = 1 [json_name = "slot-id"];
            string car_type = 2 [json_name = "car-type"];
            uint32 inbound_resource = 3 [json_name = "inbound-resource"];
            uint32 outbound_resource = 4 [json_name = "outbound-resource"];
         }
         repeated CarResource car_resource = 1 [json_name = "car-resource"];
      }
      CarResources car_resources = 6 [json_name = "car-resources"];
      message TrafficBufferUses {
         message TrafficBufferUse {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
               Direction_ALL = 2;
            };
            Direction direction = 2 [json_name = "direction"];
            string chip_name = 3 [json_name = "chip-name"];
            string chip_type = 4 [json_name = "chip-type"];
            uint32 total_size = 5 [json_name = "total-size"];
            uint32 used_size = 6 [json_name = "used-size"];
         }
         repeated TrafficBufferUse traffic_buffer_use = 1 [json_name = "traffic-buffer-use"];
      }
      TrafficBufferUses traffic_buffer_uses = 7 [json_name = "traffic-buffer-uses"];
      message TrafficPolicyApplicationResources {
         message TrafficPolicyApplicationResource {
            string slot_id = 1 [json_name = "slot-id"];
            uint32 used = 2 [json_name = "used"];
            uint32 free = 3 [json_name = "free"];
         }
         repeated TrafficPolicyApplicationResource traffic_policy_application_resource = 1 [json_name = "traffic-policy-application-resource"];
      }
      TrafficPolicyApplicationResources traffic_policy_application_resources = 8 [json_name = "traffic-policy-application-resources"];
      message UserGroupQueueResources {
         message UserGroupQueueResource {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            string tm_type = 3 [json_name = "tm-type"];
            string resource_pool = 4 [json_name = "resource-pool"];
            uint32 used_id_resource = 5 [json_name = "used-id-resource"];
            uint32 free_id_resource = 6 [json_name = "free-id-resource"];
            string pool = 7 [json_name = "pool"];
            uint32 used_number = 8 [json_name = "used-number"];
            uint32 free_number = 9 [json_name = "free-number"];
         }
         repeated UserGroupQueueResource user_group_queue_resource = 1 [json_name = "user-group-queue-resource"];
      }
      UserGroupQueueResources user_group_queue_resources = 9 [json_name = "user-group-queue-resources"];
      message InterfaceProfileStatistics {
         message UserQueues {
            message UserQueue {
               string interface_name = 1 [json_name = "interface-name"];
               uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
               uint32 vlan_id = 3 [json_name = "vlan-id"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 4 [json_name = "direction"];
               enum ServiceClass {
                  ServiceClass_BE = 0;
                  ServiceClass_AF1 = 1;
                  ServiceClass_AF2 = 2;
                  ServiceClass_AF3 = 3;
                  ServiceClass_AF4 = 4;
                  ServiceClass_EF = 5;
                  ServiceClass_CS6 = 6;
                  ServiceClass_CS7 = 7;
                  ServiceClass_TOTAL = 8;
                  ServiceClass_COS0 = 9;
                  ServiceClass_COS1 = 10;
                  ServiceClass_COS2 = 11;
                  ServiceClass_COS3 = 12;
                  ServiceClass_COS4 = 13;
                  ServiceClass_COS5 = 14;
                  ServiceClass_COS6 = 15;
                  ServiceClass_COS7 = 16;
               };
               ServiceClass service_class = 5 [json_name = "service-class"];
               uint64 pass_packets = 6 [json_name = "pass-packets"];
               uint64 pass_bytes = 7 [json_name = "pass-bytes"];
               uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
               uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
               uint64 drop_packets = 10 [json_name = "drop-packets"];
               uint64 drop_bytes = 11 [json_name = "drop-bytes"];
               uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
               uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
               uint64 random_drop_packets = 14 [json_name = "random-drop-packets"];
               uint64 random_drop_bytes = 15 [json_name = "random-drop-bytes"];
               uint64 random_drop_packet_rate = 16 [json_name = "random-drop-packet-rate"];
               uint64 random_drop_byte_rate = 17 [json_name = "random-drop-byte-rate"];
               string time_stamp = 18 [json_name = "time-stamp"];
               uint32 buffer_total = 19 [json_name = "buffer-total"];
               uint32 buffer_used = 20 [json_name = "buffer-used"];
               string clear_time = 21 [json_name = "clear-time"];
            }
            repeated UserQueue user_queue = 1 [json_name = "user-queue"];
         }
         UserQueues user_queues = 1 [json_name = "user-queues"];
         message Cars {
            message Car {
               enum CarType {
                  INVALID_ENUM_VALUE_CarType = 0;
                  CarType_CAR = 1;
                  CarType_BROADCAST = 2;
                  CarType_MULTICAST = 3;
                  CarType_UNKNOWX_UNICAST = 4;
                  CarType_L2X_FORWARD = 5;
                  CarType_L3X_FORWARD = 6;
                  CarType_BUM = 7;
                  CarType_BU = 8;
                  CarType_UNKNOWX_MULTICAST = 9;
               };
               CarType car_type = 1 [json_name = "car-type"];
               string interface_name = 2 [json_name = "interface-name"];
               uint32 pe_vlan_id = 3 [json_name = "pe-vlan-id"];
               uint32 vlan_id = 4 [json_name = "vlan-id"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 5 [json_name = "direction"];
               uint64 pass_packets = 6 [json_name = "pass-packets"];
               uint64 pass_bytes = 7 [json_name = "pass-bytes"];
               uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
               uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
               uint64 drop_packets = 10 [json_name = "drop-packets"];
               uint64 drop_bytes = 11 [json_name = "drop-bytes"];
               uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
               uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
            }
            repeated Car car = 1 [json_name = "car"];
         }
         Cars cars = 2 [json_name = "cars"];
         message ShareShapings {
            message ShareShaping {
               string interface_name = 1 [json_name = "interface-name"];
               uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
               uint32 vlan_id = 3 [json_name = "vlan-id"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 4 [json_name = "direction"];
               uint64 shaping_id = 5 [json_name = "shaping-id"];
               uint64 pass_packets = 6 [json_name = "pass-packets"];
               uint64 pass_bytes = 7 [json_name = "pass-bytes"];
               uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
               uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
               uint64 drop_packets = 10 [json_name = "drop-packets"];
               uint64 drop_bytes = 11 [json_name = "drop-bytes"];
               uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
               uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
            }
            repeated ShareShaping share_shaping = 1 [json_name = "share-shaping"];
         }
         ShareShapings share_shapings = 3 [json_name = "share-shapings"];
         message PriorityCars {
            message PriorityCar {
               string interface_name = 1 [json_name = "interface-name"];
               uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
               uint32 vlan_id = 3 [json_name = "vlan-id"];
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
               };
               Direction direction = 4 [json_name = "direction"];
               enum PriorityNum {
                  PriorityNum_P0 = 0;
                  PriorityNum_P1 = 1;
                  PriorityNum_P2 = 2;
                  PriorityNum_P3 = 3;
                  PriorityNum_P4 = 4;
                  PriorityNum_P5 = 5;
                  PriorityNum_P6 = 6;
                  PriorityNum_P7 = 7;
                  PriorityNum_TOTAL = 8;
               };
               PriorityNum priority_num = 5 [json_name = "priority-num"];
               uint64 pass_packets = 6 [json_name = "pass-packets"];
               uint64 pass_bytes = 7 [json_name = "pass-bytes"];
               uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
               uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
               uint64 drop_packets = 10 [json_name = "drop-packets"];
               uint64 drop_bytes = 11 [json_name = "drop-bytes"];
               uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
               uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
            }
            repeated PriorityCar priority_car = 1 [json_name = "priority-car"];
         }
         PriorityCars priority_cars = 4 [json_name = "priority-cars"];
      }
      InterfaceProfileStatistics interface_profile_statistics = 10 [json_name = "interface-profile-statistics"];
      message MplsTeStatisticss {
         message MplsTeStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
               ServiceClass_TOTAL = 8;
            };
            ServiceClass service_class = 3 [json_name = "service-class"];
            uint64 pass_packets = 4 [json_name = "pass-packets"];
            uint64 pass_bytes = 5 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 6 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 7 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 8 [json_name = "drop-packets"];
            uint64 drop_bytes = 9 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 10 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 11 [json_name = "drop-byte-rate"];
            uint32 total_buffer = 12 [json_name = "total-buffer"];
            uint32 current_buffer = 13 [json_name = "current-buffer"];
            string clear_time = 14 [json_name = "clear-time"];
         }
         repeated MplsTeStatistics mpls_te_statistics = 1 [json_name = "mpls-te-statistics"];
      }
      MplsTeStatisticss mpls_te_statisticss = 11 [json_name = "mpls-te-statisticss"];
      message TrafficBufferUsages {
         message TrafficBufferUsage {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
               Direction_ALL = 2;
            };
            Direction direction = 2 [json_name = "direction"];
            string chip_name = 3 [json_name = "chip-name"];
            string chip_type = 4 [json_name = "chip-type"];
            uint32 total_size = 5 [json_name = "total-size"];
            uint32 used_size = 6 [json_name = "used-size"];
         }
         repeated TrafficBufferUsage traffic_buffer_usage = 1 [json_name = "traffic-buffer-usage"];
      }
      TrafficBufferUsages traffic_buffer_usages = 12 [json_name = "traffic-buffer-usages"];
      message QueueStatisticss {
         message QueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 5 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 6 [json_name = "pass-byte-rate"];
            uint64 discard_packets = 7 [json_name = "discard-packets"];
            uint64 discard_bytes = 8 [json_name = "discard-bytes"];
            uint64 discard_packet_rate = 9 [json_name = "discard-packet-rate"];
            uint64 discard_byte_rate = 10 [json_name = "discard-byte-rate"];
         }
         repeated QueueStatistics queue_statistics = 1 [json_name = "queue-statistics"];
      }
      QueueStatisticss queue_statisticss = 13 [json_name = "queue-statisticss"];
      message PortQueueStatisticss {
         message PortQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 drop_packets = 5 [json_name = "drop-packets"];
            uint64 drop_bytes = 6 [json_name = "drop-bytes"];
            uint64 drop_tail_packets = 7 [json_name = "drop-tail-packets"];
            uint64 drop_tail_bytes = 8 [json_name = "drop-tail-bytes"];
            uint64 drop_wred_packets = 9 [json_name = "drop-wred-packets"];
            uint64 drop_wred_bytes = 10 [json_name = "drop-wred-bytes"];
            uint32 statistics_interval = 11 [json_name = "statistics-interval"];
            uint64 pass_packet_rate = 12 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 13 [json_name = "pass-byte-rate"];
            uint64 drop_packet_rate = 14 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 15 [json_name = "drop-byte-rate"];
            uint64 drop_tail_packet_rate = 16 [json_name = "drop-tail-packet-rate"];
            uint64 drop_tail_byte_rate = 17 [json_name = "drop-tail-byte-rate"];
            uint64 drop_wred_packet_rate = 18 [json_name = "drop-wred-packet-rate"];
            uint64 drop_wred_byte_rate = 19 [json_name = "drop-wred-byte-rate"];
            string peak_time = 20 [json_name = "peak-time"];
            uint64 peak_rate = 21 [json_name = "peak-rate"];
            uint32 current_queue_usage = 22 [json_name = "current-queue-usage"];
            uint32 total_buffer_size = 23 [json_name = "total-buffer-size"];
            uint32 used_buffer_size = 24 [json_name = "used-buffer-size"];
            uint64 traffic_flow = 25 [json_name = "traffic-flow"];
            uint64 physical_bandwidth = 26 [json_name = "physical-bandwidth"];
         }
         repeated PortQueueStatistics port_queue_statistics = 1 [json_name = "port-queue-statistics"];
      }
      PortQueueStatisticss port_queue_statisticss = 14 [json_name = "port-queue-statisticss"];
      message PortQueueDefaultStatisticss {
         message PortQueueDefaultStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 drop_packets = 5 [json_name = "drop-packets"];
            uint64 drop_bytes = 6 [json_name = "drop-bytes"];
            uint32 statistics_interval = 7 [json_name = "statistics-interval"];
            uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
            uint64 drop_packet_rate = 10 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 11 [json_name = "drop-byte-rate"];
            uint32 configured_queue_depth = 12 [json_name = "configured-queue-depth"];
            uint32 used_buffer_size = 13 [json_name = "used-buffer-size"];
            string reset_time = 14 [json_name = "reset-time"];
            uint64 traffic_flow = 15 [json_name = "traffic-flow"];
            uint64 physical_bandwidth = 16 [json_name = "physical-bandwidth"];
         }
         repeated PortQueueDefaultStatistics port_queue_default_statistics = 1 [json_name = "port-queue-default-statistics"];
      }
      PortQueueDefaultStatisticss port_queue_default_statisticss = 15 [json_name = "port-queue-default-statisticss"];
      message PortQueueOnboardStatisticss {
         message PortQueueOnboardStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 drop_packets = 5 [json_name = "drop-packets"];
            uint64 drop_bytes = 6 [json_name = "drop-bytes"];
         }
         repeated PortQueueOnboardStatistics port_queue_onboard_statistics = 1 [json_name = "port-queue-onboard-statistics"];
      }
      PortQueueOnboardStatisticss port_queue_onboard_statisticss = 16 [json_name = "port-queue-onboard-statisticss"];
      message DefaultFlowQueueStatisticss {
         message DefaultFlowQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
               ServiceClass_TOTAL = 8;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 5 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 6 [json_name = "pass-byte-rate"];
            uint64 discard_packets = 7 [json_name = "discard-packets"];
            uint64 discard_bytes = 8 [json_name = "discard-bytes"];
            uint64 discard_packet_rate = 9 [json_name = "discard-packet-rate"];
            uint64 discard_byte_rate = 10 [json_name = "discard-byte-rate"];
            uint32 total_buffer_size = 11 [json_name = "total-buffer-size"];
            uint32 used_buffer_size = 12 [json_name = "used-buffer-size"];
         }
         repeated DefaultFlowQueueStatistics default_flow_queue_statistics = 1 [json_name = "default-flow-queue-statistics"];
      }
      DefaultFlowQueueStatisticss default_flow_queue_statisticss = 17 [json_name = "default-flow-queue-statisticss"];
      message HardPipeAbilitys {
         message HardPipeAbility {
            string interface_name = 1 [json_name = "interface-name"];
            enum Ability {
               INVALID_ENUM_VALUE_Ability = 0;
               Ability_S = 1;
               Ability_N = 2;
               Ability_U = 3;
               Ability_M = 4;
               Ability_E = 5;
            };
            Ability ability = 2 [json_name = "ability"];
         }
         repeated HardPipeAbility hard_pipe_ability = 1 [json_name = "hard-pipe-ability"];
      }
      HardPipeAbilitys hard_pipe_abilitys = 18 [json_name = "hard-pipe-abilitys"];
      message L2VpnHardPipeStatisticss {
         message L2VpnHardPipeStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum Direction {
               Direction_INBOUND = 0;
            };
            Direction direction = 2 [json_name = "direction"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 drop_packets = 5 [json_name = "drop-packets"];
            uint64 drop_bytes = 6 [json_name = "drop-bytes"];
            uint64 pass_packet_rate = 7 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 8 [json_name = "pass-byte-rate"];
            uint64 drop_packet_rate = 9 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 10 [json_name = "drop-byte-rate"];
         }
         repeated L2VpnHardPipeStatistics l2vpn_hard_pipe_statistics = 1 [json_name = "l2vpn-hard-pipe-statistics"];
      }
      L2VpnHardPipeStatisticss l2vpn_hard_pipe_statisticss = 19 [json_name = "l2vpn-hard-pipe-statisticss"];
      message TrafficPolicyTemplateApplication {
         uint32 total_classifier = 1 [json_name = "total-classifier"];
         uint32 created_classifier = 2 [json_name = "created-classifier"];
         uint32 free_classifier = 3 [json_name = "free-classifier"];
         uint32 total_behavior = 4 [json_name = "total-behavior"];
         uint32 created_behavior = 5 [json_name = "created-behavior"];
         uint32 free_behavior = 6 [json_name = "free-behavior"];
         uint32 total_policy = 7 [json_name = "total-policy"];
         uint32 created_policy = 8 [json_name = "created-policy"];
         uint32 free_policy = 9 [json_name = "free-policy"];
      }
      TrafficPolicyTemplateApplication traffic_policy_template_application = 20 [json_name = "traffic-policy-template-application"];
      message FlowCarStatisticss {
         message FlowCarStatistics {
            enum IpType {
               INVALID_ENUM_VALUE_IpType = 0;
               IpType_SOURCE = 1;
               IpType_DESTINATION = 2;
            };
            IpType ip_type = 1 [json_name = "ip-type"];
            string slot_id = 2 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 3 [json_name = "direction"];
            string ip = 4 [json_name = "ip"];
            uint64 pass_packets = 5 [json_name = "pass-packets"];
            uint64 pass_bytes = 6 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 7 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 8 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 9 [json_name = "drop-packets"];
            uint64 drop_bytes = 10 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 11 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 12 [json_name = "drop-byte-rate"];
         }
         repeated FlowCarStatistics flow_car_statistics = 1 [json_name = "flow-car-statistics"];
      }
      FlowCarStatisticss flow_car_statisticss = 21 [json_name = "flow-car-statisticss"];
      message InterfaceActionUserQueueStatisticss {
         message InterfaceActionUserQueueStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
            uint32 vlan_id = 3 [json_name = "vlan-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 4 [json_name = "direction"];
            string classifier_name = 5 [json_name = "classifier-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
               ServiceClass_TOTAL = 8;
               ServiceClass_COS0 = 9;
               ServiceClass_COS1 = 10;
               ServiceClass_COS2 = 11;
               ServiceClass_COS3 = 12;
            };
            ServiceClass service_class = 6 [json_name = "service-class"];
            uint64 pass_packets = 7 [json_name = "pass-packets"];
            uint64 pass_bytes = 8 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 9 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 10 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 11 [json_name = "drop-packets"];
            uint64 drop_bytes = 12 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 13 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 14 [json_name = "drop-byte-rate"];
            uint32 buffer_total = 15 [json_name = "buffer-total"];
            uint32 buffer_used = 16 [json_name = "buffer-used"];
         }
         repeated InterfaceActionUserQueueStatistics interface_action_user_queue_statistics = 1 [json_name = "interface-action-user-queue-statistics"];
      }
      InterfaceActionUserQueueStatisticss interface_action_user_queue_statisticss = 22 [json_name = "interface-action-user-queue-statisticss"];
      message InterfaceUserGroupQueueStatistics {
         message InterfaceUserGroupQueueStatistic {
            string interface_name = 1 [json_name = "interface-name"];
            uint32 pe_vlan_id = 2 [json_name = "pe-vlan-id"];
            uint32 vlan_id = 3 [json_name = "vlan-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 4 [json_name = "direction"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
               ServiceClass_TOTAL = 8;
            };
            ServiceClass service_class = 5 [json_name = "service-class"];
            uint64 pass_packets = 6 [json_name = "pass-packets"];
            uint64 pass_bytes = 7 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 10 [json_name = "drop-packets"];
            uint64 drop_bytes = 11 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
         }
         repeated InterfaceUserGroupQueueStatistic interface_user_group_queue_statistic = 1 [json_name = "interface-user-group-queue-statistic"];
      }
      InterfaceUserGroupQueueStatistics interface_user_group_queue_statistics = 23 [json_name = "interface-user-group-queue-statistics"];
      message InterfaceSubPortQueueStatistics {
         message InterfaceSubPortQueueStatistic {
            string interface_name = 1 [json_name = "interface-name"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
               ServiceClass_TOTAL = 8;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 5 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 6 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 7 [json_name = "drop-packets"];
            uint64 drop_bytes = 8 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 9 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 10 [json_name = "drop-byte-rate"];
         }
         repeated InterfaceSubPortQueueStatistic interface_sub_port_queue_statistic = 1 [json_name = "interface-sub-port-queue-statistic"];
      }
      InterfaceSubPortQueueStatistics interface_sub_port_queue_statistics = 24 [json_name = "interface-sub-port-queue-statistics"];
      message InterfaceHardPipeStatisticss {
         message InterfaceHardPipeStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            uint64 pass_packets = 2 [json_name = "pass-packets"];
            uint64 pass_bytes = 3 [json_name = "pass-bytes"];
            uint64 drop_packets = 4 [json_name = "drop-packets"];
            uint64 drop_bytes = 5 [json_name = "drop-bytes"];
            uint64 pass_packet_rate = 6 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 7 [json_name = "pass-byte-rate"];
            uint64 drop_packet_rate = 8 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 9 [json_name = "drop-byte-rate"];
         }
         repeated InterfaceHardPipeStatistics interface_hard_pipe_statistics = 1 [json_name = "interface-hard-pipe-statistics"];
      }
      InterfaceHardPipeStatisticss interface_hard_pipe_statisticss = 25 [json_name = "interface-hard-pipe-statisticss"];
      message QosResourceRules {
         message QosResourceRule {
            enum RuleType {
               INVALID_ENUM_VALUE_RuleType = 0;
               RuleType_ACLV4 = 1;
               RuleType_ACLV6 = 2;
               RuleType_L2ACL = 3;
               RuleType_MPLS = 4;
               RuleType_UCLV4 = 5;
               RuleType_UCLV6 = 6;
            };
            RuleType rule_type = 1 [json_name = "rule-type"];
            string slot_id = 2 [json_name = "slot-id"];
            string resource_pool = 3 [json_name = "resource-pool"];
            uint32 used_resource = 4 [json_name = "used-resource"];
            uint32 free_resource = 5 [json_name = "free-resource"];
            uint32 reserved_resource = 6 [json_name = "reserved-resource"];
            uint32 total_resource = 7 [json_name = "total-resource"];
            uint32 utilization_rate = 8 [json_name = "utilization-rate"];
         }
         repeated QosResourceRule qos_resource_rule = 1 [json_name = "qos-resource-rule"];
      }
      QosResourceRules qos_resource_rules = 26 [json_name = "qos-resource-rules"];
      message SubPortQueueResources {
         message SubPortQueueResource {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               INVALID_ENUM_VALUE_Direction = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            string tm_type = 3 [json_name = "tm-type"];
            uint32 used_resource = 4 [json_name = "used-resource"];
            uint32 free_resource = 5 [json_name = "free-resource"];
         }
         repeated SubPortQueueResource sub_port_queue_resource = 1 [json_name = "sub-port-queue-resource"];
      }
      SubPortQueueResources sub_port_queue_resources = 27 [json_name = "sub-port-queue-resources"];
      message InterfaceCarStatisticss {
         message InterfaceCarStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            uint32 vlan_id = 3 [json_name = "vlan-id"];
            string slot_id = 4 [json_name = "slot-id"];
            uint32 vid = 5 [json_name = "vid"];
            uint64 pass_packets = 6 [json_name = "pass-packets"];
            uint64 pass_bytes = 7 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 10 [json_name = "drop-packets"];
            uint64 drop_bytes = 11 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
         }
         repeated InterfaceCarStatistics interface_car_statistics = 1 [json_name = "interface-car-statistics"];
      }
      InterfaceCarStatisticss interface_car_statisticss = 28 [json_name = "interface-car-statisticss"];
      message InterfaceCarL2PortStatisticss {
         message InterfaceCarL2PortStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            uint32 vlan_id = 3 [json_name = "vlan-id"];
            string slot_id = 4 [json_name = "slot-id"];
            uint64 pass_packets = 5 [json_name = "pass-packets"];
            uint64 pass_bytes = 6 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 7 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 8 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 9 [json_name = "drop-packets"];
            uint64 drop_bytes = 10 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 11 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 12 [json_name = "drop-byte-rate"];
         }
         repeated InterfaceCarL2PortStatistics interface_car_l2_port_statistics = 1 [json_name = "interface-car-l2-port-statistics"];
      }
      InterfaceCarL2PortStatisticss interface_car_l2_port_statisticss = 29 [json_name = "interface-car-l2-port-statisticss"];
      message InterfaceCar8021PDscpStatisticss {
         message InterfaceCar8021PDscpStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            uint32 pe_vlan_id = 3 [json_name = "pe-vlan-id"];
            uint32 priority_value = 4 [json_name = "priority-value"];
            string slot_id = 5 [json_name = "slot-id"];
            uint64 pass_packets = 6 [json_name = "pass-packets"];
            uint64 pass_bytes = 7 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 8 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 9 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 10 [json_name = "drop-packets"];
            uint64 drop_bytes = 11 [json_name = "drop-bytes"];
            uint64 drop_packet_rate = 12 [json_name = "drop-packet-rate"];
            uint64 drop_byte_rate = 13 [json_name = "drop-byte-rate"];
         }
         repeated InterfaceCar8021PDscpStatistics interface_car_8021p_dscp_statistics = 1 [json_name = "interface-car-8021p-dscp-statistics"];
      }
      InterfaceCar8021PDscpStatisticss interface_car_8021p_dscp_statisticss = 30 [json_name = "interface-car-8021p-dscp-statisticss"];
      message InterfaceExtendStatisticss {
         message InterfaceExtendStatistics {
            string interface_name = 1 [json_name = "interface-name"];
            uint64 interface_car_inbound_drop_packets = 2 [json_name = "interface-car-inbound-drop-packets"];
            uint64 interface_car_outbound_drop_packets = 3 [json_name = "interface-car-outbound-drop-packets"];
            uint64 port_queue_outbound_drop_packets = 4 [json_name = "port-queue-outbound-drop-packets"];
            uint64 vlan_car_inbound_drop_packets = 5 [json_name = "vlan-car-inbound-drop-packets"];
            uint64 vlan_car_outbound_drop_packets = 6 [json_name = "vlan-car-outbound-drop-packets"];
            string receive_packet_equal_64bytes = 7 [json_name = "receive-packet-equal-64bytes"];
            string receive_packet_between_65to127bytes = 8 [json_name = "receive-packet-between-65to127bytes"];
            string receive_packet_between_128to255bytes = 9 [json_name = "receive-packet-between-128to255bytes"];
            string receive_packet_between_256to511bytes = 10 [json_name = "receive-packet-between-256to511bytes"];
            string receive_packet_between_512to1023bytes = 11 [json_name = "receive-packet-between-512to1023bytes"];
            string receive_packet_between_1024to1518bytes = 12 [json_name = "receive-packet-between-1024to1518bytes"];
            string receive_packet_larger_1518bytes = 13 [json_name = "receive-packet-larger-1518bytes"];
            string send_packet_equal_64bytes = 14 [json_name = "send-packet-equal-64bytes"];
            string send_packet_between_65to127bytes = 15 [json_name = "send-packet-between-65to127bytes"];
            string send_packet_between_128to255bytes = 16 [json_name = "send-packet-between-128to255bytes"];
            string send_packet_between_256to511bytes = 17 [json_name = "send-packet-between-256to511bytes"];
            string send_packet_between_512to1023bytes = 18 [json_name = "send-packet-between-512to1023bytes"];
            string send_packet_between_1024to1518bytes = 19 [json_name = "send-packet-between-1024to1518bytes"];
            string send_packet_larger_1518bytes = 20 [json_name = "send-packet-larger-1518bytes"];
         }
         repeated InterfaceExtendStatistics interface_extend_statistics = 1 [json_name = "interface-extend-statistics"];
      }
      InterfaceExtendStatisticss interface_extend_statisticss = 31 [json_name = "interface-extend-statisticss"];
      message SubPortQueueAbnormalAllocations {
         message SubPortQueueAbnormalAllocation {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               INVALID_ENUM_VALUE_Direction = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            uint32 total_abnormal_number = 3 [json_name = "total-abnormal-number"];
            message AbnormalConfigurations {
               message AbnormalConfiguration {
                  string interface_name = 1 [json_name = "interface-name"];
                  string configuration = 2 [json_name = "configuration"];
               }
               repeated AbnormalConfiguration abnormal_configuration = 1 [json_name = "abnormal-configuration"];
            }
            AbnormalConfigurations abnormal_configurations = 4 [json_name = "abnormal-configurations"];
         }
         repeated SubPortQueueAbnormalAllocation sub_port_queue_abnormal_allocation = 1 [json_name = "sub-port-queue-abnormal-allocation"];
      }
      SubPortQueueAbnormalAllocations sub_port_queue_abnormal_allocations = 32 [json_name = "sub-port-queue-abnormal-allocations"];
      message UserGroupQueueAbnormalAllocations {
         message UserGroupQueueAbnormalAllocation {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            uint32 total_abnormal_number = 3 [json_name = "total-abnormal-number"];
            message AbnormalConfigurations {
               message AbnormalConfiguration {
                  string interface_name = 1 [json_name = "interface-name"];
                  string configuration = 2 [json_name = "configuration"];
               }
               repeated AbnormalConfiguration abnormal_configuration = 1 [json_name = "abnormal-configuration"];
            }
            AbnormalConfigurations abnormal_configurations = 4 [json_name = "abnormal-configurations"];
         }
         repeated UserGroupQueueAbnormalAllocation user_group_queue_abnormal_allocation = 1 [json_name = "user-group-queue-abnormal-allocation"];
      }
      UserGroupQueueAbnormalAllocations user_group_queue_abnormal_allocations = 33 [json_name = "user-group-queue-abnormal-allocations"];
      message UserQueueAbnormalAllocations {
         message UserQueueAbnormalAllocation {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            uint32 total_abnormal_number = 3 [json_name = "total-abnormal-number"];
            message AbnormalConfigurations {
               message AbnormalConfiguration {
                  string interface_name = 1 [json_name = "interface-name"];
                  string configuration = 2 [json_name = "configuration"];
               }
               repeated AbnormalConfiguration abnormal_configuration = 1 [json_name = "abnormal-configuration"];
            }
            AbnormalConfigurations abnormal_configurations = 4 [json_name = "abnormal-configurations"];
         }
         repeated UserQueueAbnormalAllocation user_queue_abnormal_allocation = 1 [json_name = "user-queue-abnormal-allocation"];
      }
      UserQueueAbnormalAllocations user_queue_abnormal_allocations = 34 [json_name = "user-queue-abnormal-allocations"];
      message UserQueueResources {
         message UserQueueResource {
            string slot_id = 1 [json_name = "slot-id"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            string tm_type = 3 [json_name = "tm-type"];
            string resource_pool = 4 [json_name = "resource-pool"];
            string used_id_resource = 5 [json_name = "used-id-resource"];
            string free_id_resource = 6 [json_name = "free-id-resource"];
            string used_cir_resource = 7 [json_name = "used-cir-resource"];
            string used_pir_resource = 8 [json_name = "used-pir-resource"];
            string free_cir_resource = 9 [json_name = "free-cir-resource"];
            string free_pir_resource = 10 [json_name = "free-pir-resource"];
         }
         repeated UserQueueResource user_queue_resource = 1 [json_name = "user-queue-resource"];
      }
      UserQueueResources user_queue_resources = 35 [json_name = "user-queue-resources"];
      message FabricQueueUnicastStatisticss {
         message FabricQueueUnicastStatistics {
            string source_slot_id = 1 [json_name = "source-slot-id"];
            string destination_slot_id = 2 [json_name = "destination-slot-id"];
            enum CosValueType {
               CosValueType_BE = 0;
               CosValueType_AF1X_AF2 = 1;
               CosValueType_AF3X_AF4 = 2;
               CosValueType_EFX_CS6X_CS7 = 3;
            };
            CosValueType cos_value_type = 3 [json_name = "cos-value-type"];
            uint32 source_tm_number = 4 [json_name = "source-tm-number"];
            uint32 destination_tm_number = 5 [json_name = "destination-tm-number"];
            uint64 pass_packets = 6 [json_name = "pass-packets"];
            uint64 pass_bytes = 7 [json_name = "pass-bytes"];
            uint64 discard_packets = 8 [json_name = "discard-packets"];
            uint64 discard_bytes = 9 [json_name = "discard-bytes"];
         }
         repeated FabricQueueUnicastStatistics fabric_queue_unicast_statistics = 1 [json_name = "fabric-queue-unicast-statistics"];
      }
      FabricQueueUnicastStatisticss fabric_queue_unicast_statisticss = 36 [json_name = "fabric-queue-unicast-statisticss"];
      message FabricQueueMulticastStatisticss {
         message FabricQueueMulticastStatistics {
            string source_slot_id = 1 [json_name = "source-slot-id"];
            enum CosValueType {
               CosValueType_BE = 0;
               CosValueType_AF1X_AF2 = 1;
               CosValueType_AF3X_AF4 = 2;
               CosValueType_EFX_CS6X_CS7 = 3;
            };
            CosValueType cos_value_type = 2 [json_name = "cos-value-type"];
            uint32 source_tm_number = 3 [json_name = "source-tm-number"];
            uint32 destination_tm_number = 4 [json_name = "destination-tm-number"];
            uint64 pass_packets = 5 [json_name = "pass-packets"];
            uint64 pass_bytes = 6 [json_name = "pass-bytes"];
            uint64 discard_packets = 7 [json_name = "discard-packets"];
            uint64 discard_bytes = 8 [json_name = "discard-bytes"];
         }
         repeated FabricQueueMulticastStatistics fabric_queue_multicast_statistics = 1 [json_name = "fabric-queue-multicast-statistics"];
      }
      FabricQueueMulticastStatisticss fabric_queue_multicast_statisticss = 37 [json_name = "fabric-queue-multicast-statisticss"];
      message SlotPortQueueStatisticss {
         message SlotPortQueueStatistics {
            string slot_id = 1 [json_name = "slot-id"];
            enum ServiceClass {
               ServiceClass_BE = 0;
               ServiceClass_AF1 = 1;
               ServiceClass_AF2 = 2;
               ServiceClass_AF3 = 3;
               ServiceClass_AF4 = 4;
               ServiceClass_EF = 5;
               ServiceClass_CS6 = 6;
               ServiceClass_CS7 = 7;
            };
            ServiceClass service_class = 2 [json_name = "service-class"];
            uint64 pass_packets = 3 [json_name = "pass-packets"];
            uint64 pass_bytes = 4 [json_name = "pass-bytes"];
            uint64 pass_packet_rate = 5 [json_name = "pass-packet-rate"];
            uint64 pass_byte_rate = 6 [json_name = "pass-byte-rate"];
            uint64 drop_packets = 7 [json_name = "drop-packets"];
            uint64 drop_tail_packets = 8 [json_name = "drop-tail-packets"];
            uint64 drop_wred_packets = 9 [json_name = "drop-wred-packets"];
            uint64 drop_bytes = 10 [json_name = "drop-bytes"];
            uint64 drop_tail_bytes = 11 [json_name = "drop-tail-bytes"];
            uint64 drop_wred_bytes = 12 [json_name = "drop-wred-bytes"];
            uint64 drop_packet_rate = 13 [json_name = "drop-packet-rate"];
            uint64 drop_tail_packet_rate = 14 [json_name = "drop-tail-packet-rate"];
            uint64 drop_wred_packet_rate = 15 [json_name = "drop-wred-packet-rate"];
            uint64 drop_byte_rate = 16 [json_name = "drop-byte-rate"];
            uint64 drop_tail_byte_rate = 17 [json_name = "drop-tail-byte-rate"];
            uint64 drop_wred_byte_rate = 18 [json_name = "drop-wred-byte-rate"];
         }
         repeated SlotPortQueueStatistics slot_port_queue_statistics = 1 [json_name = "slot-port-queue-statistics"];
      }
      SlotPortQueueStatisticss slot_port_queue_statisticss = 38 [json_name = "slot-port-queue-statisticss"];
      message SlotChannelProfileStatisticss {
         message SlotChannelProfileStatistics {
            string slot_id = 1 [json_name = "slot-id"];
            uint32 tm_id = 2 [json_name = "tm-id"];
            uint32 channel_id = 3 [json_name = "channel-id"];
            string channel_profile_name = 4 [json_name = "channel-profile-name"];
            uint32 slot_configured_bandwidth = 5 [json_name = "slot-configured-bandwidth"];
            uint32 slot_real_bandwidth = 6 [json_name = "slot-real-bandwidth"];
            uint32 slot_quantity = 7 [json_name = "slot-quantity"];
            uint32 slot_max_quantity = 8 [json_name = "slot-max-quantity"];
            uint32 bandwidth_pool_0 = 9 [json_name = "bandwidth-pool-0"];
            uint32 bandwidth_pool_1 = 10 [json_name = "bandwidth-pool-1"];
            uint32 used_quantity_pool_0 = 11 [json_name = "used-quantity-pool-0"];
            uint32 free_quantity_pool_0 = 12 [json_name = "free-quantity-pool-0"];
            uint32 used_quantity_pool_1 = 13 [json_name = "used-quantity-pool-1"];
            uint32 free_quantity_pool_1 = 14 [json_name = "free-quantity-pool-1"];
            uint32 used_pir_pool_0 = 15 [json_name = "used-pir-pool-0"];
            uint32 free_pir_pool_0 = 16 [json_name = "free-pir-pool-0"];
            uint32 used_banknote_pool_0 = 17 [json_name = "used-banknote-pool-0"];
            uint32 free_banknote_pool_0 = 18 [json_name = "free-banknote-pool-0"];
            uint32 used_pir_pool_1 = 19 [json_name = "used-pir-pool-1"];
            uint32 free_pir_pool_1 = 20 [json_name = "free-pir-pool-1"];
            uint32 used_banknote_pool_1 = 21 [json_name = "used-banknote-pool-1"];
            uint32 free_banknote_pool_1 = 22 [json_name = "free-banknote-pool-1"];
         }
         repeated SlotChannelProfileStatistics slot_channel_profile_statistics = 1 [json_name = "slot-channel-profile-statistics"];
      }
      SlotChannelProfileStatisticss slot_channel_profile_statisticss = 39 [json_name = "slot-channel-profile-statisticss"];
   }
   GlobalQuery global_query = 5 [json_name = "global-query"];
   message Qppb {
      message LocalPolicys {
         message LocalPolicy {
            string policy_name = 1 [json_name = "policy-name"];
            bool statistic_enable = 2 [json_name = "statistic-enable"];
            bool service_class_outbound = 3 [json_name = "service-class-outbound"];
            message QosLocalIds {
               message QosLocalId {
                  uint32 local_id = 1 [json_name = "local-id"];
                  string behavior_name = 2 [json_name = "behavior-name"];
               }
               repeated QosLocalId qos_local_id = 1 [json_name = "qos-local-id"];
            }
            QosLocalIds qos_local_ids = 4 [json_name = "qos-local-ids"];
         }
         repeated LocalPolicy local_policy = 1 [json_name = "local-policy"];
      }
      LocalPolicys local_policys = 1 [json_name = "local-policys"];
      message QueryPolicys {
         message QueryPolicy {
            string if_name = 1 [json_name = "if-name"];
            enum Direction {
               Direction_INBOUND = 0;
               Direction_OUTBOUND = 1;
            };
            Direction direction = 2 [json_name = "direction"];
            string policy_name = 3 [json_name = "policy-name"];
            uint32 local_id = 4 [json_name = "local-id"];
            string behavior_name = 5 [json_name = "behavior-name"];
            enum State {
               State_ACTIVE = 0;
               State_ACTIVEX_P = 1;
               State_INACTIVE = 2;
            };
            State state = 6 [json_name = "state"];
         }
         repeated QueryPolicy query_policy = 1 [json_name = "query-policy"];
      }
      QueryPolicys query_policys = 2 [json_name = "query-policys"];
      message QueryStatistics {
         message QueryStatistic {
            string if_name = 1 [json_name = "if-name"];
            string slot_id = 2 [json_name = "slot-id"];
            enum Direction {
               INVALID_ENUM_VALUE_Direction = 0;
               Direction_INBOUND = 2;
               Direction_OUTBOUND = 3;
            };
            Direction direction = 3 [json_name = "direction"];
            uint32 local_id = 4 [json_name = "local-id"];
            uint64 match_packets = 5 [json_name = "match-packets"];
            uint64 match_bytes = 6 [json_name = "match-bytes"];
            uint64 match_packets_rate = 7 [json_name = "match-packets-rate"];
            uint64 match_bytes_rate = 8 [json_name = "match-bytes-rate"];
            uint64 passed_car_packets = 9 [json_name = "passed-car-packets"];
            uint64 passed_car_bytes = 10 [json_name = "passed-car-bytes"];
            uint64 dropped_car_packets = 11 [json_name = "dropped-car-packets"];
            uint64 dropped_car_bytes = 12 [json_name = "dropped-car-bytes"];
            uint64 passed_car_packets_rate = 13 [json_name = "passed-car-packets-rate"];
            uint64 passed_car_bytes_rate = 14 [json_name = "passed-car-bytes-rate"];
            uint64 dropped_car_packets_rate = 15 [json_name = "dropped-car-packets-rate"];
            uint64 dropped_car_bytes_rate = 16 [json_name = "dropped-car-bytes-rate"];
            uint64 car_green_packets = 17 [json_name = "car-green-packets"];
            uint64 car_green_bytes = 18 [json_name = "car-green-bytes"];
            uint64 car_green_packets_rate = 19 [json_name = "car-green-packets-rate"];
            uint64 car_green_bytes_rate = 20 [json_name = "car-green-bytes-rate"];
            uint64 car_yellow_packets = 21 [json_name = "car-yellow-packets"];
            uint64 car_yellow_bytes = 22 [json_name = "car-yellow-bytes"];
            uint64 car_yellow_packets_rate = 23 [json_name = "car-yellow-packets-rate"];
            uint64 car_yellow_bytes_rate = 24 [json_name = "car-yellow-bytes-rate"];
            uint64 car_red_packets = 25 [json_name = "car-red-packets"];
            uint64 car_red_bytes = 26 [json_name = "car-red-bytes"];
            uint64 car_red_packets_rate = 27 [json_name = "car-red-packets-rate"];
            uint64 car_red_bytes_rate = 28 [json_name = "car-red-bytes-rate"];
            uint64 passed_sq_be_packets = 29 [json_name = "passed-sq-be-packets"];
            uint64 dropped_sq_be_packets = 30 [json_name = "dropped-sq-be-packets"];
            uint64 passed_sq_af1_packets = 31 [json_name = "passed-sq-af1-packets"];
            uint64 dropped_sq_af1_packets = 32 [json_name = "dropped-sq-af1-packets"];
            uint64 passed_sq_af2_packets = 33 [json_name = "passed-sq-af2-packets"];
            uint64 dropped_sq_af2_packets = 34 [json_name = "dropped-sq-af2-packets"];
            uint64 passed_sq_af3_packets = 35 [json_name = "passed-sq-af3-packets"];
            uint64 dropped_sq_af3_packets = 36 [json_name = "dropped-sq-af3-packets"];
            uint64 passed_sq_af4_packets = 37 [json_name = "passed-sq-af4-packets"];
            uint64 dropped_sq_af4_packets = 38 [json_name = "dropped-sq-af4-packets"];
            uint64 passed_sq_ef_packets = 39 [json_name = "passed-sq-ef-packets"];
            uint64 dropped_sq_ef_packets = 40 [json_name = "dropped-sq-ef-packets"];
            uint64 passed_sq_cs6_packets = 41 [json_name = "passed-sq-cs6-packets"];
            uint64 dropped_sq_cs6_packets = 42 [json_name = "dropped-sq-cs6-packets"];
            uint64 passed_sq_cs7_packets = 43 [json_name = "passed-sq-cs7-packets"];
            uint64 dropped_sq_cs7_packets = 44 [json_name = "dropped-sq-cs7-packets"];
            uint64 passed_sq_be_bytes = 45 [json_name = "passed-sq-be-bytes"];
            uint64 dropped_sq_be_bytes = 46 [json_name = "dropped-sq-be-bytes"];
            uint64 passed_sq_af1_bytes = 47 [json_name = "passed-sq-af1-bytes"];
            uint64 dropped_sq_af1_bytes = 48 [json_name = "dropped-sq-af1-bytes"];
            uint64 passed_sq_af2_bytes = 49 [json_name = "passed-sq-af2-bytes"];
            uint64 dropped_sq_af2_bytes = 50 [json_name = "dropped-sq-af2-bytes"];
            uint64 passed_sq_af3_bytes = 51 [json_name = "passed-sq-af3-bytes"];
            uint64 dropped_sq_af3_bytes = 52 [json_name = "dropped-sq-af3-bytes"];
            uint64 passed_sq_af4_bytes = 53 [json_name = "passed-sq-af4-bytes"];
            uint64 dropped_sq_af4_bytes = 54 [json_name = "dropped-sq-af4-bytes"];
            uint64 passed_sq_ef_bytes = 55 [json_name = "passed-sq-ef-bytes"];
            uint64 dropped_sq_ef_bytes = 56 [json_name = "dropped-sq-ef-bytes"];
            uint64 passed_sq_cs6_bytes = 57 [json_name = "passed-sq-cs6-bytes"];
            uint64 dropped_sq_cs6_bytes = 58 [json_name = "dropped-sq-cs6-bytes"];
            uint64 passed_sq_cs7_bytes = 59 [json_name = "passed-sq-cs7-bytes"];
            uint64 dropped_sq_cs7_bytes = 60 [json_name = "dropped-sq-cs7-bytes"];
            uint64 passed_sq_be_bytes_rate = 61 [json_name = "passed-sq-be-bytes-rate"];
            uint64 dropped_sq_be_bytes_rate = 62 [json_name = "dropped-sq-be-bytes-rate"];
            uint64 passed_sq_af1_bytes_rate = 63 [json_name = "passed-sq-af1-bytes-rate"];
            uint64 dropped_sq_af1_bytes_rate = 64 [json_name = "dropped-sq-af1-bytes-rate"];
            uint64 passed_sq_af2_bytes_rate = 65 [json_name = "passed-sq-af2-bytes-rate"];
            uint64 dropped_sq_af2_bytes_rate = 66 [json_name = "dropped-sq-af2-bytes-rate"];
            uint64 passed_sq_af3_bytes_rate = 67 [json_name = "passed-sq-af3-bytes-rate"];
            uint64 dropped_sq_af3_bytes_rate = 68 [json_name = "dropped-sq-af3-bytes-rate"];
            uint64 passed_sq_af4_bytes_rate = 69 [json_name = "passed-sq-af4-bytes-rate"];
            uint64 dropped_sq_af4_bytes_rate = 70 [json_name = "dropped-sq-af4-bytes-rate"];
            uint64 passed_sq_ef_bytes_rate = 71 [json_name = "passed-sq-ef-bytes-rate"];
            uint64 dropped_sq_ef_bytes_rate = 72 [json_name = "dropped-sq-ef-bytes-rate"];
            uint64 passed_sq_cs6_bytes_rate = 73 [json_name = "passed-sq-cs6-bytes-rate"];
            uint64 dropped_sq_cs6_bytes_rate = 74 [json_name = "dropped-sq-cs6-bytes-rate"];
            uint64 passed_sq_cs7_bytes_rate = 75 [json_name = "passed-sq-cs7-bytes-rate"];
            uint64 dropped_sq_cs7_bytes_rate = 76 [json_name = "dropped-sq-cs7-bytes-rate"];
            uint64 passed_sq_be_packets_rate = 77 [json_name = "passed-sq-be-packets-rate"];
            uint64 dropped_sq_be_packets_rate = 78 [json_name = "dropped-sq-be-packets-rate"];
            uint64 passed_sq_af1_packets_rate = 79 [json_name = "passed-sq-af1-packets-rate"];
            uint64 dropped_sq_af1_packets_rate = 80 [json_name = "dropped-sq-af1-packets-rate"];
            uint64 passed_sq_af2_packets_rate = 81 [json_name = "passed-sq-af2-packets-rate"];
            uint64 dropped_sq_af2_packets_rate = 82 [json_name = "dropped-sq-af2-packets-rate"];
            uint64 passed_sq_af3_packets_rate = 83 [json_name = "passed-sq-af3-packets-rate"];
            uint64 dropped_sq_af3_packets_rate = 84 [json_name = "dropped-sq-af3-packets-rate"];
            uint64 passed_sq_af4_packets_rate = 85 [json_name = "passed-sq-af4-packets-rate"];
            uint64 dropped_sq_af4_packets_rate = 86 [json_name = "dropped-sq-af4-packets-rate"];
            uint64 passed_sq_ef_packets_rate = 87 [json_name = "passed-sq-ef-packets-rate"];
            uint64 dropped_sq_ef_packets_rate = 88 [json_name = "dropped-sq-ef-packets-rate"];
            uint64 passed_sq_cs6_packets_rate = 89 [json_name = "passed-sq-cs6-packets-rate"];
            uint64 dropped_sq_cs6_packets_rate = 90 [json_name = "dropped-sq-cs6-packets-rate"];
            uint64 passed_sq_cs7_packets_rate = 91 [json_name = "passed-sq-cs7-packets-rate"];
            uint64 dropped_sq_cs7_packets_rate = 92 [json_name = "dropped-sq-cs7-packets-rate"];
         }
         repeated QueryStatistic query_statistic = 1 [json_name = "query-statistic"];
      }
      QueryStatistics query_statistics = 3 [json_name = "query-statistics"];
   }
   Qppb qppb = 6 [json_name = "qppb"];
}

