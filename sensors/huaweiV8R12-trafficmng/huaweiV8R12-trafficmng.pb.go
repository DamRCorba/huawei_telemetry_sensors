// ---------------------------------------------------------------------------
// Protofilename : huawei-trafficmng.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-trafficmng.proto

package huaweiV8R12_trafficmng

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type int32

const (
	Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type_LPU Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type = 0
	Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type_SFU Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type = 1
)

// Enum value maps for Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type.
var (
	Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type_name = map[int32]string{
		0: "Type_LPU",
		1: "Type_SFU",
	}
	Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type_value = map[string]int32{
		"Type_LPU": 0,
		"Type_SFU": 1,
	}
)

func (x Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type) Enum() *Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type {
	p := new(Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type)
	*p = x
	return p
}

func (x Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_trafficmng_proto_enumTypes[0].Descriptor()
}

func (Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_trafficmng_proto_enumTypes[0]
}

func (x Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type.Descriptor instead.
func (Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status int32

const (
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_CLOSE             Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 0
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_OPEN              Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 1
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_INIT              Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 2
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_LINKX_LOSTX_ERROR Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 3
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_CRCX_ERROR        Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 4
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_PACKETX_ERROR     Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 5
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_UNSTABLEX_ERROR   Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 6
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_ISOSWFX_ERROR     Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 11
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_ISOTMX_ERROR      Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 26
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_LINKV             Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 42
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_TXX_OFF           Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 49
)

// Enum value maps for Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status.
var (
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_name = map[int32]string{
		0:  "Status_CLOSE",
		1:  "Status_OPEN",
		2:  "Status_INIT",
		3:  "Status_LINKX_LOSTX_ERROR",
		4:  "Status_CRCX_ERROR",
		5:  "Status_PACKETX_ERROR",
		6:  "Status_UNSTABLEX_ERROR",
		11: "Status_ISOSWFX_ERROR",
		26: "Status_ISOTMX_ERROR",
		42: "Status_LINKV",
		49: "Status_TXX_OFF",
	}
	Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_value = map[string]int32{
		"Status_CLOSE":             0,
		"Status_OPEN":              1,
		"Status_INIT":              2,
		"Status_LINKX_LOSTX_ERROR": 3,
		"Status_CRCX_ERROR":        4,
		"Status_PACKETX_ERROR":     5,
		"Status_UNSTABLEX_ERROR":   6,
		"Status_ISOSWFX_ERROR":     11,
		"Status_ISOTMX_ERROR":      26,
		"Status_LINKV":             42,
		"Status_TXX_OFF":           49,
	}
)

func (x Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Enum() *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status {
	p := new(Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status)
	*p = x
	return p
}

func (x Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_trafficmng_proto_enumTypes[1].Descriptor()
}

func (Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_trafficmng_proto_enumTypes[1]
}

func (x Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status.Descriptor instead.
func (Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

type Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status int32

const (
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_CLOSE             Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 0
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_OPEN              Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 1
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_INIT              Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 2
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_LINKX_LOSTX_ERROR Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 3
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_CRCX_ERROR        Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 4
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_PACKETX_ERROR     Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 5
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_UNSTABLEX_ERROR   Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 6
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_ISOSWFX_ERROR     Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 11
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_ISOTMX_ERROR      Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 26
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_LINKV             Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 42
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_TXX_OFF           Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 49
)

// Enum value maps for Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status.
var (
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_name = map[int32]string{
		0:  "Status_CLOSE",
		1:  "Status_OPEN",
		2:  "Status_INIT",
		3:  "Status_LINKX_LOSTX_ERROR",
		4:  "Status_CRCX_ERROR",
		5:  "Status_PACKETX_ERROR",
		6:  "Status_UNSTABLEX_ERROR",
		11: "Status_ISOSWFX_ERROR",
		26: "Status_ISOTMX_ERROR",
		42: "Status_LINKV",
		49: "Status_TXX_OFF",
	}
	Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_value = map[string]int32{
		"Status_CLOSE":             0,
		"Status_OPEN":              1,
		"Status_INIT":              2,
		"Status_LINKX_LOSTX_ERROR": 3,
		"Status_CRCX_ERROR":        4,
		"Status_PACKETX_ERROR":     5,
		"Status_UNSTABLEX_ERROR":   6,
		"Status_ISOSWFX_ERROR":     11,
		"Status_ISOTMX_ERROR":      26,
		"Status_LINKV":             42,
		"Status_TXX_OFF":           49,
	}
)

func (x Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Enum() *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status {
	p := new(Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status)
	*p = x
	return p
}

func (x Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_trafficmng_proto_enumTypes[2].Descriptor()
}

func (Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_trafficmng_proto_enumTypes[2]
}

func (x Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status.Descriptor instead.
func (Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0}
}

type Trafficmng_SfuWarmBackupSwitch_Enable int32

const (
	Trafficmng_SfuWarmBackupSwitch_Enable_ENABLE Trafficmng_SfuWarmBackupSwitch_Enable = 0
)

// Enum value maps for Trafficmng_SfuWarmBackupSwitch_Enable.
var (
	Trafficmng_SfuWarmBackupSwitch_Enable_name = map[int32]string{
		0: "Enable_ENABLE",
	}
	Trafficmng_SfuWarmBackupSwitch_Enable_value = map[string]int32{
		"Enable_ENABLE": 0,
	}
)

func (x Trafficmng_SfuWarmBackupSwitch_Enable) Enum() *Trafficmng_SfuWarmBackupSwitch_Enable {
	p := new(Trafficmng_SfuWarmBackupSwitch_Enable)
	*p = x
	return p
}

func (x Trafficmng_SfuWarmBackupSwitch_Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trafficmng_SfuWarmBackupSwitch_Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_trafficmng_proto_enumTypes[3].Descriptor()
}

func (Trafficmng_SfuWarmBackupSwitch_Enable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_trafficmng_proto_enumTypes[3]
}

func (x Trafficmng_SfuWarmBackupSwitch_Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trafficmng_SfuWarmBackupSwitch_Enable.Descriptor instead.
func (Trafficmng_SfuWarmBackupSwitch_Enable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 4, 0}
}

type Trafficmng_LpuBackpressureSwitch_Enable int32

const (
	Trafficmng_LpuBackpressureSwitch_Enable_ENABLE Trafficmng_LpuBackpressureSwitch_Enable = 0
)

// Enum value maps for Trafficmng_LpuBackpressureSwitch_Enable.
var (
	Trafficmng_LpuBackpressureSwitch_Enable_name = map[int32]string{
		0: "Enable_ENABLE",
	}
	Trafficmng_LpuBackpressureSwitch_Enable_value = map[string]int32{
		"Enable_ENABLE": 0,
	}
)

func (x Trafficmng_LpuBackpressureSwitch_Enable) Enum() *Trafficmng_LpuBackpressureSwitch_Enable {
	p := new(Trafficmng_LpuBackpressureSwitch_Enable)
	*p = x
	return p
}

func (x Trafficmng_LpuBackpressureSwitch_Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trafficmng_LpuBackpressureSwitch_Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_trafficmng_proto_enumTypes[4].Descriptor()
}

func (Trafficmng_LpuBackpressureSwitch_Enable) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_trafficmng_proto_enumTypes[4]
}

func (x Trafficmng_LpuBackpressureSwitch_Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trafficmng_LpuBackpressureSwitch_Enable.Descriptor instead.
func (Trafficmng_LpuBackpressureSwitch_Enable) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 6, 0}
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status int32

const (
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_CLOSE             Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 0
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_OPEN              Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 1
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_INIT              Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 2
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_LINKX_LOSTX_ERROR Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 3
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_CRCX_ERROR        Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 4
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_PACKETX_ERROR     Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 5
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_UNSTABLEX_ERROR   Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 6
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_ISOSWFX_ERROR     Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 11
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_ISOTMX_ERROR      Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 26
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_LINKV             Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 42
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_TXX_OFF           Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status = 49
)

// Enum value maps for Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status.
var (
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_name = map[int32]string{
		0:  "Status_CLOSE",
		1:  "Status_OPEN",
		2:  "Status_INIT",
		3:  "Status_LINKX_LOSTX_ERROR",
		4:  "Status_CRCX_ERROR",
		5:  "Status_PACKETX_ERROR",
		6:  "Status_UNSTABLEX_ERROR",
		11: "Status_ISOSWFX_ERROR",
		26: "Status_ISOTMX_ERROR",
		42: "Status_LINKV",
		49: "Status_TXX_OFF",
	}
	Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_value = map[string]int32{
		"Status_CLOSE":             0,
		"Status_OPEN":              1,
		"Status_INIT":              2,
		"Status_LINKX_LOSTX_ERROR": 3,
		"Status_CRCX_ERROR":        4,
		"Status_PACKETX_ERROR":     5,
		"Status_UNSTABLEX_ERROR":   6,
		"Status_ISOSWFX_ERROR":     11,
		"Status_ISOTMX_ERROR":      26,
		"Status_LINKV":             42,
		"Status_TXX_OFF":           49,
	}
)

func (x Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Enum() *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status {
	p := new(Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status)
	*p = x
	return p
}

func (x Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_trafficmng_proto_enumTypes[5].Descriptor()
}

func (Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_trafficmng_proto_enumTypes[5]
}

func (x Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status.Descriptor instead.
func (Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 0, 0, 0}
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status int32

const (
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_CLOSE             Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 0
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_OPEN              Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 1
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_INIT              Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 2
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_LINKX_LOSTX_ERROR Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 3
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_CRCX_ERROR        Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 4
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_PACKETX_ERROR     Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 5
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_UNSTABLEX_ERROR   Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 6
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_ISOSWFX_ERROR     Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 11
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_ISOTMX_ERROR      Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 26
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_LINKV             Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 42
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_TXX_OFF           Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status = 49
)

// Enum value maps for Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status.
var (
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_name = map[int32]string{
		0:  "Status_CLOSE",
		1:  "Status_OPEN",
		2:  "Status_INIT",
		3:  "Status_LINKX_LOSTX_ERROR",
		4:  "Status_CRCX_ERROR",
		5:  "Status_PACKETX_ERROR",
		6:  "Status_UNSTABLEX_ERROR",
		11: "Status_ISOSWFX_ERROR",
		26: "Status_ISOTMX_ERROR",
		42: "Status_LINKV",
		49: "Status_TXX_OFF",
	}
	Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_value = map[string]int32{
		"Status_CLOSE":             0,
		"Status_OPEN":              1,
		"Status_INIT":              2,
		"Status_LINKX_LOSTX_ERROR": 3,
		"Status_CRCX_ERROR":        4,
		"Status_PACKETX_ERROR":     5,
		"Status_UNSTABLEX_ERROR":   6,
		"Status_ISOSWFX_ERROR":     11,
		"Status_ISOTMX_ERROR":      26,
		"Status_LINKV":             42,
		"Status_TXX_OFF":           49,
	}
)

func (x Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Enum() *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status {
	p := new(Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status)
	*p = x
	return p
}

func (x Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_trafficmng_proto_enumTypes[6].Descriptor()
}

func (Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_trafficmng_proto_enumTypes[6]
}

func (x Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status.Descriptor instead.
func (Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 1, 0, 0}
}

type Trafficmng struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardAlarmThresholds    *Trafficmng_BoardAlarmThresholds    `protobuf:"bytes,1,opt,name=board_alarm_thresholds,json=board-alarm-thresholds,proto3" json:"board_alarm_thresholds,omitempty"`
	TmSfuInformations       *Trafficmng_TmSfuInformations       `protobuf:"bytes,2,opt,name=tm_sfu_informations,json=tm-sfu-informations,proto3" json:"tm_sfu_informations,omitempty"`
	BoardAlarmSfuThresholds *Trafficmng_BoardAlarmSfuThresholds `protobuf:"bytes,3,opt,name=board_alarm_sfu_thresholds,json=board-alarm-sfu-thresholds,proto3" json:"board_alarm_sfu_thresholds,omitempty"`
	BoardAlarmLpuThresholds *Trafficmng_BoardAlarmLpuThresholds `protobuf:"bytes,4,opt,name=board_alarm_lpu_thresholds,json=board-alarm-lpu-thresholds,proto3" json:"board_alarm_lpu_thresholds,omitempty"`
	SfuWarmBackupSwitch     *Trafficmng_SfuWarmBackupSwitch     `protobuf:"bytes,5,opt,name=sfu_warm_backup_switch,json=sfu-warm-backup-switch,proto3" json:"sfu_warm_backup_switch,omitempty"`
	PacketLossAlarms        *Trafficmng_PacketLossAlarms        `protobuf:"bytes,6,opt,name=packet_loss_alarms,json=packet-loss-alarms,proto3" json:"packet_loss_alarms,omitempty"`
	LpuBackpressureSwitch   *Trafficmng_LpuBackpressureSwitch   `protobuf:"bytes,7,opt,name=lpu_backpressure_switch,json=lpu-backpressure-switch,proto3" json:"lpu_backpressure_switch,omitempty"`
	TmLpuStatuss            *Trafficmng_TmLpuStatuss            `protobuf:"bytes,8,opt,name=tm_lpu_statuss,json=tm-lpu-statuss,proto3" json:"tm_lpu_statuss,omitempty"`
}

func (x *Trafficmng) Reset() {
	*x = Trafficmng{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng) ProtoMessage() {}

func (x *Trafficmng) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng.ProtoReflect.Descriptor instead.
func (*Trafficmng) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0}
}

func (x *Trafficmng) GetBoardAlarmThresholds() *Trafficmng_BoardAlarmThresholds {
	if x != nil {
		return x.BoardAlarmThresholds
	}
	return nil
}

func (x *Trafficmng) GetTmSfuInformations() *Trafficmng_TmSfuInformations {
	if x != nil {
		return x.TmSfuInformations
	}
	return nil
}

func (x *Trafficmng) GetBoardAlarmSfuThresholds() *Trafficmng_BoardAlarmSfuThresholds {
	if x != nil {
		return x.BoardAlarmSfuThresholds
	}
	return nil
}

func (x *Trafficmng) GetBoardAlarmLpuThresholds() *Trafficmng_BoardAlarmLpuThresholds {
	if x != nil {
		return x.BoardAlarmLpuThresholds
	}
	return nil
}

func (x *Trafficmng) GetSfuWarmBackupSwitch() *Trafficmng_SfuWarmBackupSwitch {
	if x != nil {
		return x.SfuWarmBackupSwitch
	}
	return nil
}

func (x *Trafficmng) GetPacketLossAlarms() *Trafficmng_PacketLossAlarms {
	if x != nil {
		return x.PacketLossAlarms
	}
	return nil
}

func (x *Trafficmng) GetLpuBackpressureSwitch() *Trafficmng_LpuBackpressureSwitch {
	if x != nil {
		return x.LpuBackpressureSwitch
	}
	return nil
}

func (x *Trafficmng) GetTmLpuStatuss() *Trafficmng_TmLpuStatuss {
	if x != nil {
		return x.TmLpuStatuss
	}
	return nil
}

type Trafficmng_BoardAlarmThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardAlarmThreshold []*Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold `protobuf:"bytes,1,rep,name=board_alarm_threshold,json=board-alarm-threshold,proto3" json:"board_alarm_threshold,omitempty"`
}

func (x *Trafficmng_BoardAlarmThresholds) Reset() {
	*x = Trafficmng_BoardAlarmThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_BoardAlarmThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_BoardAlarmThresholds) ProtoMessage() {}

func (x *Trafficmng_BoardAlarmThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_BoardAlarmThresholds.ProtoReflect.Descriptor instead.
func (*Trafficmng_BoardAlarmThresholds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Trafficmng_BoardAlarmThresholds) GetBoardAlarmThreshold() []*Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold {
	if x != nil {
		return x.BoardAlarmThreshold
	}
	return nil
}

type Trafficmng_TmSfuInformations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TmSfuInformation []*Trafficmng_TmSfuInformations_TmSfuInformation `protobuf:"bytes,1,rep,name=tm_sfu_information,json=tm-sfu-information,proto3" json:"tm_sfu_information,omitempty"`
}

func (x *Trafficmng_TmSfuInformations) Reset() {
	*x = Trafficmng_TmSfuInformations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations) ProtoMessage() {}

func (x *Trafficmng_TmSfuInformations) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Trafficmng_TmSfuInformations) GetTmSfuInformation() []*Trafficmng_TmSfuInformations_TmSfuInformation {
	if x != nil {
		return x.TmSfuInformation
	}
	return nil
}

type Trafficmng_BoardAlarmSfuThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardAlarmSfuThreshold []*Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold `protobuf:"bytes,1,rep,name=board_alarm_sfu_threshold,json=board-alarm-sfu-threshold,proto3" json:"board_alarm_sfu_threshold,omitempty"`
}

func (x *Trafficmng_BoardAlarmSfuThresholds) Reset() {
	*x = Trafficmng_BoardAlarmSfuThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_BoardAlarmSfuThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_BoardAlarmSfuThresholds) ProtoMessage() {}

func (x *Trafficmng_BoardAlarmSfuThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_BoardAlarmSfuThresholds.ProtoReflect.Descriptor instead.
func (*Trafficmng_BoardAlarmSfuThresholds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Trafficmng_BoardAlarmSfuThresholds) GetBoardAlarmSfuThreshold() []*Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold {
	if x != nil {
		return x.BoardAlarmSfuThreshold
	}
	return nil
}

type Trafficmng_BoardAlarmLpuThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardAlarmLpuThreshold []*Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold `protobuf:"bytes,1,rep,name=board_alarm_lpu_threshold,json=board-alarm-lpu-threshold,proto3" json:"board_alarm_lpu_threshold,omitempty"`
}

func (x *Trafficmng_BoardAlarmLpuThresholds) Reset() {
	*x = Trafficmng_BoardAlarmLpuThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_BoardAlarmLpuThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_BoardAlarmLpuThresholds) ProtoMessage() {}

func (x *Trafficmng_BoardAlarmLpuThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_BoardAlarmLpuThresholds.ProtoReflect.Descriptor instead.
func (*Trafficmng_BoardAlarmLpuThresholds) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Trafficmng_BoardAlarmLpuThresholds) GetBoardAlarmLpuThreshold() []*Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold {
	if x != nil {
		return x.BoardAlarmLpuThreshold
	}
	return nil
}

type Trafficmng_SfuWarmBackupSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable Trafficmng_SfuWarmBackupSwitch_Enable `protobuf:"varint,1,opt,name=enable,proto3,enum=huaweiV8R12_trafficmng.Trafficmng_SfuWarmBackupSwitch_Enable" json:"enable,omitempty"`
}

func (x *Trafficmng_SfuWarmBackupSwitch) Reset() {
	*x = Trafficmng_SfuWarmBackupSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_SfuWarmBackupSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_SfuWarmBackupSwitch) ProtoMessage() {}

func (x *Trafficmng_SfuWarmBackupSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_SfuWarmBackupSwitch.ProtoReflect.Descriptor instead.
func (*Trafficmng_SfuWarmBackupSwitch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Trafficmng_SfuWarmBackupSwitch) GetEnable() Trafficmng_SfuWarmBackupSwitch_Enable {
	if x != nil {
		return x.Enable
	}
	return Trafficmng_SfuWarmBackupSwitch_Enable_ENABLE
}

type Trafficmng_PacketLossAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketLossAlarm []*Trafficmng_PacketLossAlarms_PacketLossAlarm `protobuf:"bytes,1,rep,name=packet_loss_alarm,json=packet-loss-alarm,proto3" json:"packet_loss_alarm,omitempty"`
}

func (x *Trafficmng_PacketLossAlarms) Reset() {
	*x = Trafficmng_PacketLossAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_PacketLossAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_PacketLossAlarms) ProtoMessage() {}

func (x *Trafficmng_PacketLossAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_PacketLossAlarms.ProtoReflect.Descriptor instead.
func (*Trafficmng_PacketLossAlarms) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Trafficmng_PacketLossAlarms) GetPacketLossAlarm() []*Trafficmng_PacketLossAlarms_PacketLossAlarm {
	if x != nil {
		return x.PacketLossAlarm
	}
	return nil
}

type Trafficmng_LpuBackpressureSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable Trafficmng_LpuBackpressureSwitch_Enable `protobuf:"varint,1,opt,name=enable,proto3,enum=huaweiV8R12_trafficmng.Trafficmng_LpuBackpressureSwitch_Enable" json:"enable,omitempty"`
}

func (x *Trafficmng_LpuBackpressureSwitch) Reset() {
	*x = Trafficmng_LpuBackpressureSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_LpuBackpressureSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_LpuBackpressureSwitch) ProtoMessage() {}

func (x *Trafficmng_LpuBackpressureSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_LpuBackpressureSwitch.ProtoReflect.Descriptor instead.
func (*Trafficmng_LpuBackpressureSwitch) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Trafficmng_LpuBackpressureSwitch) GetEnable() Trafficmng_LpuBackpressureSwitch_Enable {
	if x != nil {
		return x.Enable
	}
	return Trafficmng_LpuBackpressureSwitch_Enable_ENABLE
}

type Trafficmng_TmLpuStatuss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TmLpuStatus []*Trafficmng_TmLpuStatuss_TmLpuStatus `protobuf:"bytes,1,rep,name=tm_lpu_status,json=tm-lpu-status,proto3" json:"tm_lpu_status,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss) Reset() {
	*x = Trafficmng_TmLpuStatuss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss) ProtoMessage() {}

func (x *Trafficmng_TmLpuStatuss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Trafficmng_TmLpuStatuss) GetTmLpuStatus() []*Trafficmng_TmLpuStatuss_TmLpuStatus {
	if x != nil {
		return x.TmLpuStatus
	}
	return nil
}

type Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type `protobuf:"varint,1,opt,name=type,proto3,enum=huaweiV8R12_trafficmng.Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type" json:"type,omitempty"`
	SlotId string                                                   `protobuf:"bytes,2,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Value  uint32                                                   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) Reset() {
	*x = Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) ProtoMessage() {}

func (x *Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold.ProtoReflect.Descriptor instead.
func (*Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) GetType() Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type {
	if x != nil {
		return x.Type
	}
	return Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type_LPU
}

func (x *Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Trafficmng_TmSfuInformations_TmSfuInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                    string                                                                   `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	SfuStatistics             *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics             `protobuf:"bytes,2,opt,name=sfu_statistics,json=sfu-statistics,proto3" json:"sfu_statistics,omitempty"`
	InboundSwitchPortStatuss  *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss  `protobuf:"bytes,3,opt,name=inbound_switch_port_statuss,json=inbound-switch-port-statuss,proto3" json:"inbound_switch_port_statuss,omitempty"`
	OutboundSwitchPortStatuss *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss `protobuf:"bytes,4,opt,name=outbound_switch_port_statuss,json=outbound-switch-port-statuss,proto3" json:"outbound_switch_port_statuss,omitempty"`
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation) Reset() {
	*x = Trafficmng_TmSfuInformations_TmSfuInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations_TmSfuInformation) ProtoMessage() {}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations_TmSfuInformation) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation) GetSfuStatistics() *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics {
	if x != nil {
		return x.SfuStatistics
	}
	return nil
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation) GetInboundSwitchPortStatuss() *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss {
	if x != nil {
		return x.InboundSwitchPortStatuss
	}
	return nil
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation) GetOutboundSwitchPortStatuss() *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss {
	if x != nil {
		return x.OutboundSwitchPortStatuss
	}
	return nil
}

type Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SfuStatistic []*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic `protobuf:"bytes,1,rep,name=sfu_statistic,json=sfu-statistic,proto3" json:"sfu_statistic,omitempty"`
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics) Reset() {
	*x = Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics) ProtoMessage() {}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics) GetSfuStatistic() []*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic {
	if x != nil {
		return x.SfuStatistic
	}
	return nil
}

type Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundSwitchPortStatus []*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus `protobuf:"bytes,1,rep,name=inbound_switch_port_status,json=inbound-switch-port-status,proto3" json:"inbound_switch_port_status,omitempty"`
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss) Reset() {
	*x = Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss) ProtoMessage() {}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss) GetInboundSwitchPortStatus() []*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus {
	if x != nil {
		return x.InboundSwitchPortStatus
	}
	return nil
}

type Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutboundSwitchPortStatus []*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus `protobuf:"bytes,1,rep,name=outbound_switch_port_status,json=outbound-switch-port-status,proto3" json:"outbound_switch_port_status,omitempty"`
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss) Reset() {
	*x = Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss) ProtoMessage() {}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss) GetOutboundSwitchPortStatus() []*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus {
	if x != nil {
		return x.OutboundSwitchPortStatus
	}
	return nil
}

type Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipId       uint32 `protobuf:"varint,1,opt,name=chip_id,json=chip-id,proto3" json:"chip_id,omitempty"`
	PassCells    uint64 `protobuf:"varint,2,opt,name=pass_cells,json=pass-cells,proto3" json:"pass_cells,omitempty"`
	DiscardCells uint64 `protobuf:"varint,3,opt,name=discard_cells,json=discard-cells,proto3" json:"discard_cells,omitempty"`
	SendCells    uint64 `protobuf:"varint,4,opt,name=send_cells,json=send-cells,proto3" json:"send_cells,omitempty"`
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) Reset() {
	*x = Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) ProtoMessage() {}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) GetChipId() uint32 {
	if x != nil {
		return x.ChipId
	}
	return 0
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) GetPassCells() uint64 {
	if x != nil {
		return x.PassCells
	}
	return 0
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) GetDiscardCells() uint64 {
	if x != nil {
		return x.DiscardCells
	}
	return 0
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic) GetSendCells() uint64 {
	if x != nil {
		return x.SendCells
	}
	return 0
}

type Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipNumber uint32                                                                                                `protobuf:"varint,1,opt,name=chip_number,json=chip-number,proto3" json:"chip_number,omitempty"`
	Port       uint32                                                                                                `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Status     Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=huaweiV8R12_trafficmng.Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status" json:"status,omitempty"`
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) Reset() {
	*x = Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) ProtoMessage() {
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) GetChipNumber() uint32 {
	if x != nil {
		return x.ChipNumber
	}
	return 0
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus) GetStatus() Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status {
	if x != nil {
		return x.Status
	}
	return Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_CLOSE
}

type Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipNumber uint32                                                                                                  `protobuf:"varint,1,opt,name=chip_number,json=chip-number,proto3" json:"chip_number,omitempty"`
	Port       uint32                                                                                                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Status     Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=huaweiV8R12_trafficmng.Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status" json:"status,omitempty"`
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) Reset() {
	*x = Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) ProtoMessage() {
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0}
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) GetChipNumber() uint32 {
	if x != nil {
		return x.ChipNumber
	}
	return 0
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) GetStatus() Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status {
	if x != nil {
		return x.Status
	}
	return Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_CLOSE
}

type Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Value  uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold) Reset() {
	*x = Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold) ProtoMessage() {}

func (x *Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold.ProtoReflect.Descriptor instead.
func (*Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Value  uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold) Reset() {
	*x = Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold) ProtoMessage() {}

func (x *Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold.ProtoReflect.Descriptor instead.
func (*Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Trafficmng_PacketLossAlarms_PacketLossAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId  string `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	Packets uint32 `protobuf:"varint,2,opt,name=packets,proto3" json:"packets,omitempty"`
	Seconds uint32 `protobuf:"varint,3,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *Trafficmng_PacketLossAlarms_PacketLossAlarm) Reset() {
	*x = Trafficmng_PacketLossAlarms_PacketLossAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_PacketLossAlarms_PacketLossAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_PacketLossAlarms_PacketLossAlarm) ProtoMessage() {}

func (x *Trafficmng_PacketLossAlarms_PacketLossAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_PacketLossAlarms_PacketLossAlarm.ProtoReflect.Descriptor instead.
func (*Trafficmng_PacketLossAlarms_PacketLossAlarm) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Trafficmng_PacketLossAlarms_PacketLossAlarm) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Trafficmng_PacketLossAlarms_PacketLossAlarm) GetPackets() uint32 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *Trafficmng_PacketLossAlarms_PacketLossAlarm) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type Trafficmng_TmLpuStatuss_TmLpuStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId                    string                                                         `protobuf:"bytes,1,opt,name=slot_id,json=slot-id,proto3" json:"slot_id,omitempty"`
	InboundSwitchPortStatuss  *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss  `protobuf:"bytes,2,opt,name=inbound_switch_port_statuss,json=inbound-switch-port-statuss,proto3" json:"inbound_switch_port_statuss,omitempty"`
	OutboundSwitchPortStatuss *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss `protobuf:"bytes,3,opt,name=outbound_switch_port_statuss,json=outbound-switch-port-statuss,proto3" json:"outbound_switch_port_statuss,omitempty"`
	TmStatisticss             *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss             `protobuf:"bytes,4,opt,name=tm_statisticss,json=tm-statisticss,proto3" json:"tm_statisticss,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus) Reset() {
	*x = Trafficmng_TmLpuStatuss_TmLpuStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss_TmLpuStatus) ProtoMessage() {}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss_TmLpuStatus) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus) GetSlotId() string {
	if x != nil {
		return x.SlotId
	}
	return ""
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus) GetInboundSwitchPortStatuss() *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss {
	if x != nil {
		return x.InboundSwitchPortStatuss
	}
	return nil
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus) GetOutboundSwitchPortStatuss() *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss {
	if x != nil {
		return x.OutboundSwitchPortStatuss
	}
	return nil
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus) GetTmStatisticss() *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss {
	if x != nil {
		return x.TmStatisticss
	}
	return nil
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundSwitchPortStatus []*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus `protobuf:"bytes,1,rep,name=inbound_switch_port_status,json=inbound-switch-port-status,proto3" json:"inbound_switch_port_status,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss) Reset() {
	*x = Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss) ProtoMessage() {}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 0}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss) GetInboundSwitchPortStatus() []*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus {
	if x != nil {
		return x.InboundSwitchPortStatus
	}
	return nil
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutboundSwitchPortStatus []*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus `protobuf:"bytes,1,rep,name=outbound_switch_port_status,json=outbound-switch-port-status,proto3" json:"outbound_switch_port_status,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss) Reset() {
	*x = Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss) ProtoMessage() {}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 1}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss) GetOutboundSwitchPortStatus() []*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus {
	if x != nil {
		return x.OutboundSwitchPortStatus
	}
	return nil
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TmStatistics []*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics `protobuf:"bytes,1,rep,name=tm_statistics,json=tm-statistics,proto3" json:"tm_statistics,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss) Reset() {
	*x = Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss) ProtoMessage() {}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 2}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss) GetTmStatistics() []*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics {
	if x != nil {
		return x.TmStatistics
	}
	return nil
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipNumber uint32                                                                                      `protobuf:"varint,1,opt,name=chip_number,json=chip-number,proto3" json:"chip_number,omitempty"`
	Port       uint32                                                                                      `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Status     Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=huaweiV8R12_trafficmng.Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status" json:"status,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) Reset() {
	*x = Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) ProtoMessage() {
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 0, 0}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) GetChipNumber() uint32 {
	if x != nil {
		return x.ChipNumber
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus) GetStatus() Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status {
	if x != nil {
		return x.Status
	}
	return Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status_CLOSE
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipNumber uint32                                                                                        `protobuf:"varint,1,opt,name=chip_number,json=chip-number,proto3" json:"chip_number,omitempty"`
	Port       uint32                                                                                        `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Status     Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=huaweiV8R12_trafficmng.Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status" json:"status,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) Reset() {
	*x = Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) ProtoMessage() {
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 1, 0}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) GetChipNumber() uint32 {
	if x != nil {
		return x.ChipNumber
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus) GetStatus() Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status {
	if x != nil {
		return x.Status
	}
	return Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status_CLOSE
}

type Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipId            uint32 `protobuf:"varint,1,opt,name=chip_id,json=chip-id,proto3" json:"chip_id,omitempty"`
	PassPacketsIn     uint64 `protobuf:"varint,2,opt,name=pass_packets_in,json=pass-packets-in,proto3" json:"pass_packets_in,omitempty"`
	DiscardPacketsIn  uint64 `protobuf:"varint,3,opt,name=discard_packets_in,json=discard-packets-in,proto3" json:"discard_packets_in,omitempty"`
	SendCellsIn       uint64 `protobuf:"varint,4,opt,name=send_cells_in,json=send-cells-in,proto3" json:"send_cells_in,omitempty"`
	PassCellsOut      uint64 `protobuf:"varint,5,opt,name=pass_cells_out,json=pass-cells-out,proto3" json:"pass_cells_out,omitempty"`
	PassPacketsOut    uint64 `protobuf:"varint,6,opt,name=pass_packets_out,json=pass-packets-out,proto3" json:"pass_packets_out,omitempty"`
	DiscardPacketsOut uint64 `protobuf:"varint,7,opt,name=discard_packets_out,json=discard-packets-out,proto3" json:"discard_packets_out,omitempty"`
	SendPacketsOut    uint64 `protobuf:"varint,8,opt,name=send_packets_out,json=send-packets-out,proto3" json:"send_packets_out,omitempty"`
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) Reset() {
	*x = Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) ProtoMessage() {}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_trafficmng_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics.ProtoReflect.Descriptor instead.
func (*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_trafficmng_proto_rawDescGZIP(), []int{0, 7, 0, 2, 0}
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetChipId() uint32 {
	if x != nil {
		return x.ChipId
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetPassPacketsIn() uint64 {
	if x != nil {
		return x.PassPacketsIn
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetDiscardPacketsIn() uint64 {
	if x != nil {
		return x.DiscardPacketsIn
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetSendCellsIn() uint64 {
	if x != nil {
		return x.SendCellsIn
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetPassCellsOut() uint64 {
	if x != nil {
		return x.PassCellsOut
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetPassPacketsOut() uint64 {
	if x != nil {
		return x.PassPacketsOut
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetDiscardPacketsOut() uint64 {
	if x != nil {
		return x.DiscardPacketsOut
	}
	return 0
}

func (x *Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics) GetSendPacketsOut() uint64 {
	if x != nil {
		return x.SendPacketsOut
	}
	return 0
}

var File_huaweiV8R12_trafficmng_proto protoreflect.FileDescriptor

var file_huaweiV8R12_trafficmng_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x22, 0xb8, 0x37, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x6d, 0x6e, 0x67, 0x12, 0x6f, 0x0a, 0x16, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x16,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x74, 0x6d, 0x5f, 0x73, 0x66, 0x75,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x74, 0x6d, 0x2d, 0x73, 0x66,
	0x75, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a,
	0x0a, 0x1a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x66,
	0x75, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x53, 0x66, 0x75, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x1a,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x73, 0x66, 0x75, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x7a, 0x0a, 0x1a, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d,
	0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x70, 0x75,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x1a, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6c, 0x70, 0x75, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x6e, 0x0a, 0x16, 0x73, 0x66, 0x75, 0x5f, 0x77, 0x61,
	0x72, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x53, 0x66, 0x75, 0x57, 0x61,
	0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x16,
	0x73, 0x66, 0x75, 0x2d, 0x77, 0x61, 0x72, 0x6d, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2d,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x63, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73,
	0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d,
	0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x72, 0x0a, 0x17, 0x6c,
	0x70, 0x75, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67,
	0x2e, 0x4c, 0x70, 0x75, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x17, 0x6c, 0x70, 0x75, 0x2d, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x57, 0x0a, 0x0e, 0x74, 0x6d, 0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x52, 0x0e, 0x74, 0x6d, 0x2d, 0x6c, 0x70, 0x75,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x1a, 0xec, 0x02, 0x0a, 0x14, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x15,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xcf, 0x01, 0x0a, 0x13, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x64, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x50, 0x55, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x46, 0x55, 0x10, 0x01, 0x1a, 0xb9, 0x12, 0x0a, 0x11, 0x54, 0x6d, 0x53, 0x66,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a,
	0x12, 0x74, 0x6d, 0x5f, 0x73, 0x66, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d,
	0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d,
	0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x74, 0x6d, 0x2d, 0x73, 0x66, 0x75, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xac, 0x11, 0x0a, 0x10, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x2d, 0x69, 0x64, 0x12, 0x7b, 0x0a, 0x0e, 0x73, 0x66, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e,
	0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x66, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0e, 0x73, 0x66, 0x75, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0xa0, 0x01, 0x0a, 0x1b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6d, 0x53,
	0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x52, 0x1b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54,
	0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x52, 0x1c, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x1a, 0xa9, 0x02, 0x0a, 0x0d, 0x53, 0x66,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0d,
	0x73, 0x66, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x66, 0x75, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x66, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0d, 0x73, 0x66, 0x75, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x1a, 0x8e, 0x01, 0x0a, 0x0c, 0x53, 0x66, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x2d, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x2d,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0xc0, 0x05, 0x0a, 0x18, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x66,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6d,
	0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x1a, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xea, 0x03, 0x0a, 0x17,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68,
	0x69, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x95, 0x01,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d,
	0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x52, 0x43,
	0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e,
	0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x53, 0x4f, 0x53, 0x57, 0x46,
	0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x49, 0x53, 0x4f, 0x54, 0x4d, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x56, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54,
	0x58, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x31, 0x1a, 0xc8, 0x05, 0x0a, 0x19, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67,
	0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x54, 0x6d, 0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0xed, 0x03, 0x0a, 0x18, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x53, 0x66,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6d,
	0x53, 0x66, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x80, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f,
	0x4c, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x52, 0x43, 0x58, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x53, 0x4f, 0x53, 0x57, 0x46, 0x58, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49,
	0x53, 0x4f, 0x54, 0x4d, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1a, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x56, 0x10, 0x2a, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x58, 0x58, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x31, 0x1a, 0xf5, 0x01, 0x0a, 0x17, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x53, 0x66, 0x75, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12,
	0x8f, 0x01, 0x0a, 0x19, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x73, 0x66, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x53, 0x66, 0x75, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x66, 0x75, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x19, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x2d, 0x73, 0x66, 0x75, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x1a, 0x48, 0x0a, 0x16, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53,
	0x66, 0x75, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x17,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x70, 0x75, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x19, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x70, 0x75, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x4c, 0x70, 0x75, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x19,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x6c, 0x70, 0x75, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x48, 0x0a, 0x16, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x70, 0x75, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x13, 0x53, 0x66, 0x75, 0x57, 0x61, 0x72, 0x6d, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x55, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e,
	0x53, 0x66, 0x75, 0x57, 0x61, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x1b, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a,
	0xe6, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x6d, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6c, 0x6f, 0x73,
	0x73, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x1a, 0x5f, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x6f, 0x73, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x2d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x15, 0x4c, 0x70, 0x75,
	0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x57, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x4c, 0x70, 0x75, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1b, 0x0a, 0x06, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x1a, 0x96, 0x13, 0x0a, 0x0c, 0x54, 0x6d, 0x4c,
	0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x74, 0x6d, 0x5f,
	0x6c, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x73, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74,
	0x6d, 0x2d, 0x6c, 0x70, 0x75, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xa2, 0x12, 0x0a,
	0x0b, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x2d, 0x69, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67,
	0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x54, 0x6d,
	0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x73, 0x52, 0x1b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x52, 0x1c, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x0e, 0x74,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x73, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x54, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x52, 0x0e,
	0x74, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x1a, 0xac,
	0x05, 0x0a, 0x18, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x1a,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x73, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xe0, 0x03, 0x0a, 0x17, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x69,
	0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x8b, 0x01, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e,
	0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x54,
	0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x58, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x43, 0x52, 0x43, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49,
	0x53, 0x4f, 0x53, 0x57, 0x46, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x53, 0x4f, 0x54, 0x4d, 0x58, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x56, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x54, 0x58, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x31, 0x1a, 0xb4, 0x05,
	0x0a, 0x19, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x1b,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x73, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xe3,
	0x03, 0x0a, 0x18, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x69, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x73, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58,
	0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x52, 0x43, 0x58, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x53, 0x4f, 0x53, 0x57, 0x46, 0x58, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x49, 0x53, 0x4f, 0x54, 0x4d, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1a, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x56, 0x10, 0x2a,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x58, 0x58, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x31, 0x1a, 0xea, 0x03, 0x0a, 0x0d, 0x54, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x12, 0x7c, 0x0a, 0x0d, 0x74, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e,
	0x67, 0x2e, 0x54, 0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x2e, 0x54,
	0x6d, 0x4c, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x73, 0x2e, 0x54, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x74, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0xda, 0x02, 0x0a, 0x0c, 0x54, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x2d, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x2d, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d,
	0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2d, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2d, 0x6f, 0x75,
	0x74, 0x42, 0x1a, 0x5a, 0x18, 0x2e, 0x3b, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x6d, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R12_trafficmng_proto_rawDescOnce sync.Once
	file_huaweiV8R12_trafficmng_proto_rawDescData = file_huaweiV8R12_trafficmng_proto_rawDesc
)

func file_huaweiV8R12_trafficmng_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_trafficmng_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_trafficmng_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_trafficmng_proto_rawDescData)
	})
	return file_huaweiV8R12_trafficmng_proto_rawDescData
}

var file_huaweiV8R12_trafficmng_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_huaweiV8R12_trafficmng_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_huaweiV8R12_trafficmng_proto_goTypes = []interface{}{
	(Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold_Type)(0),                                                // 0: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds.BoardAlarmThreshold.Type
	(Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status)(0),   // 1: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss.InboundSwitchPortStatus.Status
	(Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status)(0), // 2: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss.OutboundSwitchPortStatus.Status
	(Trafficmng_SfuWarmBackupSwitch_Enable)(0),                                                                   // 3: huaweiV8R12_trafficmng.Trafficmng.SfuWarmBackupSwitch.Enable
	(Trafficmng_LpuBackpressureSwitch_Enable)(0),                                                                 // 4: huaweiV8R12_trafficmng.Trafficmng.LpuBackpressureSwitch.Enable
	(Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus_Status)(0),             // 5: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss.InboundSwitchPortStatus.Status
	(Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus_Status)(0),           // 6: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss.OutboundSwitchPortStatus.Status
	(*Trafficmng)(nil),                                                                                       // 7: huaweiV8R12_trafficmng.Trafficmng
	(*Trafficmng_BoardAlarmThresholds)(nil),                                                                  // 8: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds
	(*Trafficmng_TmSfuInformations)(nil),                                                                     // 9: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations
	(*Trafficmng_BoardAlarmSfuThresholds)(nil),                                                               // 10: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmSfuThresholds
	(*Trafficmng_BoardAlarmLpuThresholds)(nil),                                                               // 11: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmLpuThresholds
	(*Trafficmng_SfuWarmBackupSwitch)(nil),                                                                   // 12: huaweiV8R12_trafficmng.Trafficmng.SfuWarmBackupSwitch
	(*Trafficmng_PacketLossAlarms)(nil),                                                                      // 13: huaweiV8R12_trafficmng.Trafficmng.PacketLossAlarms
	(*Trafficmng_LpuBackpressureSwitch)(nil),                                                                 // 14: huaweiV8R12_trafficmng.Trafficmng.LpuBackpressureSwitch
	(*Trafficmng_TmLpuStatuss)(nil),                                                                          // 15: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss
	(*Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold)(nil),                                              // 16: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds.BoardAlarmThreshold
	(*Trafficmng_TmSfuInformations_TmSfuInformation)(nil),                                                    // 17: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation
	(*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics)(nil),                                      // 18: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.SfuStatistics
	(*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss)(nil),                           // 19: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss
	(*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss)(nil),                          // 20: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss
	(*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic)(nil),                         // 21: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.SfuStatistics.SfuStatistic
	(*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus)(nil),   // 22: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss.InboundSwitchPortStatus
	(*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus)(nil), // 23: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss.OutboundSwitchPortStatus
	(*Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold)(nil),                                        // 24: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmSfuThresholds.BoardAlarmSfuThreshold
	(*Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold)(nil),                                        // 25: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmLpuThresholds.BoardAlarmLpuThreshold
	(*Trafficmng_PacketLossAlarms_PacketLossAlarm)(nil),                                                      // 26: huaweiV8R12_trafficmng.Trafficmng.PacketLossAlarms.PacketLossAlarm
	(*Trafficmng_TmLpuStatuss_TmLpuStatus)(nil),                                                              // 27: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus
	(*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss)(nil),                                     // 28: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss
	(*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss)(nil),                                    // 29: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss
	(*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss)(nil),                                                // 30: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.TmStatisticss
	(*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus)(nil),             // 31: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss.InboundSwitchPortStatus
	(*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus)(nil),           // 32: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss.OutboundSwitchPortStatus
	(*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics)(nil),                                   // 33: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.TmStatisticss.TmStatistics
}
var file_huaweiV8R12_trafficmng_proto_depIdxs = []int32{
	8,  // 0: huaweiV8R12_trafficmng.Trafficmng.board_alarm_thresholds:type_name -> huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds
	9,  // 1: huaweiV8R12_trafficmng.Trafficmng.tm_sfu_informations:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations
	10, // 2: huaweiV8R12_trafficmng.Trafficmng.board_alarm_sfu_thresholds:type_name -> huaweiV8R12_trafficmng.Trafficmng.BoardAlarmSfuThresholds
	11, // 3: huaweiV8R12_trafficmng.Trafficmng.board_alarm_lpu_thresholds:type_name -> huaweiV8R12_trafficmng.Trafficmng.BoardAlarmLpuThresholds
	12, // 4: huaweiV8R12_trafficmng.Trafficmng.sfu_warm_backup_switch:type_name -> huaweiV8R12_trafficmng.Trafficmng.SfuWarmBackupSwitch
	13, // 5: huaweiV8R12_trafficmng.Trafficmng.packet_loss_alarms:type_name -> huaweiV8R12_trafficmng.Trafficmng.PacketLossAlarms
	14, // 6: huaweiV8R12_trafficmng.Trafficmng.lpu_backpressure_switch:type_name -> huaweiV8R12_trafficmng.Trafficmng.LpuBackpressureSwitch
	15, // 7: huaweiV8R12_trafficmng.Trafficmng.tm_lpu_statuss:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss
	16, // 8: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds.board_alarm_threshold:type_name -> huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds.BoardAlarmThreshold
	17, // 9: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.tm_sfu_information:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation
	24, // 10: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmSfuThresholds.board_alarm_sfu_threshold:type_name -> huaweiV8R12_trafficmng.Trafficmng.BoardAlarmSfuThresholds.BoardAlarmSfuThreshold
	25, // 11: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmLpuThresholds.board_alarm_lpu_threshold:type_name -> huaweiV8R12_trafficmng.Trafficmng.BoardAlarmLpuThresholds.BoardAlarmLpuThreshold
	3,  // 12: huaweiV8R12_trafficmng.Trafficmng.SfuWarmBackupSwitch.enable:type_name -> huaweiV8R12_trafficmng.Trafficmng.SfuWarmBackupSwitch.Enable
	26, // 13: huaweiV8R12_trafficmng.Trafficmng.PacketLossAlarms.packet_loss_alarm:type_name -> huaweiV8R12_trafficmng.Trafficmng.PacketLossAlarms.PacketLossAlarm
	4,  // 14: huaweiV8R12_trafficmng.Trafficmng.LpuBackpressureSwitch.enable:type_name -> huaweiV8R12_trafficmng.Trafficmng.LpuBackpressureSwitch.Enable
	27, // 15: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.tm_lpu_status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus
	0,  // 16: huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds.BoardAlarmThreshold.type:type_name -> huaweiV8R12_trafficmng.Trafficmng.BoardAlarmThresholds.BoardAlarmThreshold.Type
	18, // 17: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.sfu_statistics:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.SfuStatistics
	19, // 18: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.inbound_switch_port_statuss:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss
	20, // 19: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.outbound_switch_port_statuss:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss
	21, // 20: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.SfuStatistics.sfu_statistic:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.SfuStatistics.SfuStatistic
	22, // 21: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss.inbound_switch_port_status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss.InboundSwitchPortStatus
	23, // 22: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss.outbound_switch_port_status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss.OutboundSwitchPortStatus
	1,  // 23: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss.InboundSwitchPortStatus.status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.InboundSwitchPortStatuss.InboundSwitchPortStatus.Status
	2,  // 24: huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss.OutboundSwitchPortStatus.status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmSfuInformations.TmSfuInformation.OutboundSwitchPortStatuss.OutboundSwitchPortStatus.Status
	28, // 25: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.inbound_switch_port_statuss:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss
	29, // 26: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.outbound_switch_port_statuss:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss
	30, // 27: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.tm_statisticss:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.TmStatisticss
	31, // 28: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss.inbound_switch_port_status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss.InboundSwitchPortStatus
	32, // 29: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss.outbound_switch_port_status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss.OutboundSwitchPortStatus
	33, // 30: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.TmStatisticss.tm_statistics:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.TmStatisticss.TmStatistics
	5,  // 31: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss.InboundSwitchPortStatus.status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.InboundSwitchPortStatuss.InboundSwitchPortStatus.Status
	6,  // 32: huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss.OutboundSwitchPortStatus.status:type_name -> huaweiV8R12_trafficmng.Trafficmng.TmLpuStatuss.TmLpuStatus.OutboundSwitchPortStatuss.OutboundSwitchPortStatus.Status
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_trafficmng_proto_init() }
func file_huaweiV8R12_trafficmng_proto_init() {
	if File_huaweiV8R12_trafficmng_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_trafficmng_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_BoardAlarmThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_BoardAlarmSfuThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_BoardAlarmLpuThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_SfuWarmBackupSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_PacketLossAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_LpuBackpressureSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_BoardAlarmThresholds_BoardAlarmThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations_TmSfuInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations_TmSfuInformation_SfuStatistics_SfuStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations_TmSfuInformation_InboundSwitchPortStatuss_InboundSwitchPortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmSfuInformations_TmSfuInformation_OutboundSwitchPortStatuss_OutboundSwitchPortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_BoardAlarmSfuThresholds_BoardAlarmSfuThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_BoardAlarmLpuThresholds_BoardAlarmLpuThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_PacketLossAlarms_PacketLossAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss_TmLpuStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss_TmLpuStatus_InboundSwitchPortStatuss_InboundSwitchPortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss_TmLpuStatus_OutboundSwitchPortStatuss_OutboundSwitchPortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_trafficmng_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trafficmng_TmLpuStatuss_TmLpuStatus_TmStatisticss_TmStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_trafficmng_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_trafficmng_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_trafficmng_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_trafficmng_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_trafficmng_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_trafficmng_proto = out.File
	file_huaweiV8R12_trafficmng_proto_rawDesc = nil
	file_huaweiV8R12_trafficmng_proto_goTypes = nil
	file_huaweiV8R12_trafficmng_proto_depIdxs = nil
}
