// ---------------------------------------------------------------------------
// Protofilename : huawei-twamp-controller.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: huaweiV8R12-twamp.proto

package huaweiV8R12_twamp_controller

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TwampController_Client_Sessions_Session_PaddingType int32

const (
	TwampController_Client_Sessions_Session_PaddingType_X_00 TwampController_Client_Sessions_Session_PaddingType = 0
	TwampController_Client_Sessions_Session_PaddingType_X_55 TwampController_Client_Sessions_Session_PaddingType = 85
	TwampController_Client_Sessions_Session_PaddingType_AA   TwampController_Client_Sessions_Session_PaddingType = 170
	TwampController_Client_Sessions_Session_PaddingType_FF   TwampController_Client_Sessions_Session_PaddingType = 255
)

// Enum value maps for TwampController_Client_Sessions_Session_PaddingType.
var (
	TwampController_Client_Sessions_Session_PaddingType_name = map[int32]string{
		0:   "PaddingType_X_00",
		85:  "PaddingType_X_55",
		170: "PaddingType_AA",
		255: "PaddingType_FF",
	}
	TwampController_Client_Sessions_Session_PaddingType_value = map[string]int32{
		"PaddingType_X_00": 0,
		"PaddingType_X_55": 85,
		"PaddingType_AA":   170,
		"PaddingType_FF":   255,
	}
)

func (x TwampController_Client_Sessions_Session_PaddingType) Enum() *TwampController_Client_Sessions_Session_PaddingType {
	p := new(TwampController_Client_Sessions_Session_PaddingType)
	*p = x
	return p
}

func (x TwampController_Client_Sessions_Session_PaddingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TwampController_Client_Sessions_Session_PaddingType) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_twamp_proto_enumTypes[0].Descriptor()
}

func (TwampController_Client_Sessions_Session_PaddingType) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_twamp_proto_enumTypes[0]
}

func (x TwampController_Client_Sessions_Session_PaddingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TwampController_Client_Sessions_Session_PaddingType.Descriptor instead.
func (TwampController_Client_Sessions_Session_PaddingType) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

type TwampController_Sender_Sessions_Session_Period int32

const (
	TwampController_Sender_Sessions_Session_INVALID_ENUM_VALUE_Period TwampController_Sender_Sessions_Session_Period = 0
	TwampController_Sender_Sessions_Session_Period_X_10MS             TwampController_Sender_Sessions_Session_Period = 1
	TwampController_Sender_Sessions_Session_Period_X_100MS            TwampController_Sender_Sessions_Session_Period = 2
	TwampController_Sender_Sessions_Session_Period_X_1000MS           TwampController_Sender_Sessions_Session_Period = 3
	TwampController_Sender_Sessions_Session_Period_X_30000MS          TwampController_Sender_Sessions_Session_Period = 4
)

// Enum value maps for TwampController_Sender_Sessions_Session_Period.
var (
	TwampController_Sender_Sessions_Session_Period_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Period",
		1: "Period_X_10MS",
		2: "Period_X_100MS",
		3: "Period_X_1000MS",
		4: "Period_X_30000MS",
	}
	TwampController_Sender_Sessions_Session_Period_value = map[string]int32{
		"INVALID_ENUM_VALUE_Period": 0,
		"Period_X_10MS":             1,
		"Period_X_100MS":            2,
		"Period_X_1000MS":           3,
		"Period_X_30000MS":          4,
	}
)

func (x TwampController_Sender_Sessions_Session_Period) Enum() *TwampController_Sender_Sessions_Session_Period {
	p := new(TwampController_Sender_Sessions_Session_Period)
	*p = x
	return p
}

func (x TwampController_Sender_Sessions_Session_Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TwampController_Sender_Sessions_Session_Period) Descriptor() protoreflect.EnumDescriptor {
	return file_huaweiV8R12_twamp_proto_enumTypes[1].Descriptor()
}

func (TwampController_Sender_Sessions_Session_Period) Type() protoreflect.EnumType {
	return &file_huaweiV8R12_twamp_proto_enumTypes[1]
}

func (x TwampController_Sender_Sessions_Session_Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TwampController_Sender_Sessions_Session_Period.Descriptor instead.
func (TwampController_Sender_Sessions_Session_Period) EnumDescriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

type TwampController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client *TwampController_Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Sender *TwampController_Sender `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *TwampController) Reset() {
	*x = TwampController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController) ProtoMessage() {}

func (x *TwampController) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController.ProtoReflect.Descriptor instead.
func (*TwampController) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0}
}

func (x *TwampController) GetClient() *TwampController_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *TwampController) GetSender() *TwampController_Sender {
	if x != nil {
		return x.Sender
	}
	return nil
}

type TwampController_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions *TwampController_Client_Sessions `protobuf:"bytes,1,opt,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *TwampController_Client) Reset() {
	*x = TwampController_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Client) ProtoMessage() {}

func (x *TwampController_Client) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Client.ProtoReflect.Descriptor instead.
func (*TwampController_Client) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TwampController_Client) GetSessions() *TwampController_Client_Sessions {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type TwampController_Sender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions        *TwampController_Sender_Sessions        `protobuf:"bytes,1,opt,name=sessions,proto3" json:"sessions,omitempty"`
	RegularSessions *TwampController_Sender_RegularSessions `protobuf:"bytes,2,opt,name=regular_sessions,json=regular-sessions,proto3" json:"regular_sessions,omitempty"`
}

func (x *TwampController_Sender) Reset() {
	*x = TwampController_Sender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Sender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Sender) ProtoMessage() {}

func (x *TwampController_Sender) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Sender.ProtoReflect.Descriptor instead.
func (*TwampController_Sender) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TwampController_Sender) GetSessions() *TwampController_Sender_Sessions {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *TwampController_Sender) GetRegularSessions() *TwampController_Sender_RegularSessions {
	if x != nil {
		return x.RegularSessions
	}
	return nil
}

type TwampController_Client_Sessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session []*TwampController_Client_Sessions_Session `protobuf:"bytes,1,rep,name=session,proto3" json:"session,omitempty"`
}

func (x *TwampController_Client_Sessions) Reset() {
	*x = TwampController_Client_Sessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Client_Sessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Client_Sessions) ProtoMessage() {}

func (x *TwampController_Client_Sessions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Client_Sessions.ProtoReflect.Descriptor instead.
func (*TwampController_Client_Sessions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TwampController_Client_Sessions) GetSession() []*TwampController_Client_Sessions_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type TwampController_Client_Sessions_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32                                                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SendIpAddr            string                                                         `protobuf:"bytes,2,opt,name=send_ip_addr,json=send-ip-addr,proto3" json:"send_ip_addr,omitempty"`
	RefIpAddr             string                                                         `protobuf:"bytes,3,opt,name=ref_ip_addr,json=ref-ip-addr,proto3" json:"ref_ip_addr,omitempty"`
	SendPort              uint32                                                         `protobuf:"varint,4,opt,name=send_port,json=send-port,proto3" json:"send_port,omitempty"`
	RefPort               uint32                                                         `protobuf:"varint,5,opt,name=ref_port,json=ref-port,proto3" json:"ref_port,omitempty"`
	VrfName               string                                                         `protobuf:"bytes,6,opt,name=vrf_name,json=vrf-name,proto3" json:"vrf_name,omitempty"`
	DscpValue             uint32                                                         `protobuf:"varint,7,opt,name=dscp_value,json=dscp-value,proto3" json:"dscp_value,omitempty"`
	PaddingLength         uint32                                                         `protobuf:"varint,8,opt,name=padding_length,json=padding-length,proto3" json:"padding_length,omitempty"`
	PaddingType           TwampController_Client_Sessions_Session_PaddingType            `protobuf:"varint,9,opt,name=padding_type,json=padding-type,proto3,enum=huaweiV8R12_twamp_controller.TwampController_Client_Sessions_Session_PaddingType" json:"padding_type,omitempty"`
	Description           string                                                         `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Statistics            *TwampController_Client_Sessions_Session_Statistics            `protobuf:"bytes,11,opt,name=statistics,proto3" json:"statistics,omitempty"`
	TwowayLossThreshold   *TwampController_Client_Sessions_Session_TwowayLossThreshold   `protobuf:"bytes,12,opt,name=twoway_loss_threshold,json=twoway-loss-threshold,proto3" json:"twoway_loss_threshold,omitempty"`
	TwowayDelayThreshold  *TwampController_Client_Sessions_Session_TwowayDelayThreshold  `protobuf:"bytes,13,opt,name=twoway_delay_threshold,json=twoway-delay-threshold,proto3" json:"twoway_delay_threshold,omitempty"`
	TwowayJitterThreshold *TwampController_Client_Sessions_Session_TwowayJitterThreshold `protobuf:"bytes,14,opt,name=twoway_jitter_threshold,json=twoway-jitter-threshold,proto3" json:"twoway_jitter_threshold,omitempty"`
}

func (x *TwampController_Client_Sessions_Session) Reset() {
	*x = TwampController_Client_Sessions_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Client_Sessions_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Client_Sessions_Session) ProtoMessage() {}

func (x *TwampController_Client_Sessions_Session) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Client_Sessions_Session.ProtoReflect.Descriptor instead.
func (*TwampController_Client_Sessions_Session) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *TwampController_Client_Sessions_Session) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session) GetSendIpAddr() string {
	if x != nil {
		return x.SendIpAddr
	}
	return ""
}

func (x *TwampController_Client_Sessions_Session) GetRefIpAddr() string {
	if x != nil {
		return x.RefIpAddr
	}
	return ""
}

func (x *TwampController_Client_Sessions_Session) GetSendPort() uint32 {
	if x != nil {
		return x.SendPort
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session) GetRefPort() uint32 {
	if x != nil {
		return x.RefPort
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *TwampController_Client_Sessions_Session) GetDscpValue() uint32 {
	if x != nil {
		return x.DscpValue
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session) GetPaddingLength() uint32 {
	if x != nil {
		return x.PaddingLength
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session) GetPaddingType() TwampController_Client_Sessions_Session_PaddingType {
	if x != nil {
		return x.PaddingType
	}
	return TwampController_Client_Sessions_Session_PaddingType_X_00
}

func (x *TwampController_Client_Sessions_Session) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TwampController_Client_Sessions_Session) GetStatistics() *TwampController_Client_Sessions_Session_Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *TwampController_Client_Sessions_Session) GetTwowayLossThreshold() *TwampController_Client_Sessions_Session_TwowayLossThreshold {
	if x != nil {
		return x.TwowayLossThreshold
	}
	return nil
}

func (x *TwampController_Client_Sessions_Session) GetTwowayDelayThreshold() *TwampController_Client_Sessions_Session_TwowayDelayThreshold {
	if x != nil {
		return x.TwowayDelayThreshold
	}
	return nil
}

func (x *TwampController_Client_Sessions_Session) GetTwowayJitterThreshold() *TwampController_Client_Sessions_Session_TwowayJitterThreshold {
	if x != nil {
		return x.TwowayJitterThreshold
	}
	return nil
}

type TwampController_Client_Sessions_Session_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgDelay  uint32 `protobuf:"varint,1,opt,name=avg_delay,json=avg-delay,proto3" json:"avg_delay,omitempty"`
	AvgJitter uint32 `protobuf:"varint,2,opt,name=avg_jitter,json=avg-jitter,proto3" json:"avg_jitter,omitempty"`
	LossCount uint32 `protobuf:"varint,3,opt,name=loss_count,json=loss-count,proto3" json:"loss_count,omitempty"`
	SendCount uint32 `protobuf:"varint,4,opt,name=send_count,json=send-count,proto3" json:"send_count,omitempty"`
}

func (x *TwampController_Client_Sessions_Session_Statistics) Reset() {
	*x = TwampController_Client_Sessions_Session_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Client_Sessions_Session_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Client_Sessions_Session_Statistics) ProtoMessage() {}

func (x *TwampController_Client_Sessions_Session_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Client_Sessions_Session_Statistics.ProtoReflect.Descriptor instead.
func (*TwampController_Client_Sessions_Session_Statistics) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *TwampController_Client_Sessions_Session_Statistics) GetAvgDelay() uint32 {
	if x != nil {
		return x.AvgDelay
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session_Statistics) GetAvgJitter() uint32 {
	if x != nil {
		return x.AvgJitter
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session_Statistics) GetLossCount() uint32 {
	if x != nil {
		return x.LossCount
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session_Statistics) GetSendCount() uint32 {
	if x != nil {
		return x.SendCount
	}
	return 0
}

type TwampController_Client_Sessions_Session_TwowayLossThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpLimit  string `protobuf:"bytes,1,opt,name=up_limit,json=up-limit,proto3" json:"up_limit,omitempty"`
	LowLimit string `protobuf:"bytes,2,opt,name=low_limit,json=low-limit,proto3" json:"low_limit,omitempty"`
}

func (x *TwampController_Client_Sessions_Session_TwowayLossThreshold) Reset() {
	*x = TwampController_Client_Sessions_Session_TwowayLossThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Client_Sessions_Session_TwowayLossThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Client_Sessions_Session_TwowayLossThreshold) ProtoMessage() {}

func (x *TwampController_Client_Sessions_Session_TwowayLossThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Client_Sessions_Session_TwowayLossThreshold.ProtoReflect.Descriptor instead.
func (*TwampController_Client_Sessions_Session_TwowayLossThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *TwampController_Client_Sessions_Session_TwowayLossThreshold) GetUpLimit() string {
	if x != nil {
		return x.UpLimit
	}
	return ""
}

func (x *TwampController_Client_Sessions_Session_TwowayLossThreshold) GetLowLimit() string {
	if x != nil {
		return x.LowLimit
	}
	return ""
}

type TwampController_Client_Sessions_Session_TwowayDelayThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpLimit  uint32 `protobuf:"varint,1,opt,name=up_limit,json=up-limit,proto3" json:"up_limit,omitempty"`
	LowLimit uint32 `protobuf:"varint,2,opt,name=low_limit,json=low-limit,proto3" json:"low_limit,omitempty"`
}

func (x *TwampController_Client_Sessions_Session_TwowayDelayThreshold) Reset() {
	*x = TwampController_Client_Sessions_Session_TwowayDelayThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Client_Sessions_Session_TwowayDelayThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Client_Sessions_Session_TwowayDelayThreshold) ProtoMessage() {}

func (x *TwampController_Client_Sessions_Session_TwowayDelayThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Client_Sessions_Session_TwowayDelayThreshold.ProtoReflect.Descriptor instead.
func (*TwampController_Client_Sessions_Session_TwowayDelayThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

func (x *TwampController_Client_Sessions_Session_TwowayDelayThreshold) GetUpLimit() uint32 {
	if x != nil {
		return x.UpLimit
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session_TwowayDelayThreshold) GetLowLimit() uint32 {
	if x != nil {
		return x.LowLimit
	}
	return 0
}

type TwampController_Client_Sessions_Session_TwowayJitterThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpLimit  uint32 `protobuf:"varint,1,opt,name=up_limit,json=up-limit,proto3" json:"up_limit,omitempty"`
	LowLimit uint32 `protobuf:"varint,2,opt,name=low_limit,json=low-limit,proto3" json:"low_limit,omitempty"`
}

func (x *TwampController_Client_Sessions_Session_TwowayJitterThreshold) Reset() {
	*x = TwampController_Client_Sessions_Session_TwowayJitterThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Client_Sessions_Session_TwowayJitterThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Client_Sessions_Session_TwowayJitterThreshold) ProtoMessage() {}

func (x *TwampController_Client_Sessions_Session_TwowayJitterThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Client_Sessions_Session_TwowayJitterThreshold.ProtoReflect.Descriptor instead.
func (*TwampController_Client_Sessions_Session_TwowayJitterThreshold) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3}
}

func (x *TwampController_Client_Sessions_Session_TwowayJitterThreshold) GetUpLimit() uint32 {
	if x != nil {
		return x.UpLimit
	}
	return 0
}

func (x *TwampController_Client_Sessions_Session_TwowayJitterThreshold) GetLowLimit() uint32 {
	if x != nil {
		return x.LowLimit
	}
	return 0
}

type TwampController_Sender_Sessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session []*TwampController_Sender_Sessions_Session `protobuf:"bytes,1,rep,name=session,proto3" json:"session,omitempty"`
}

func (x *TwampController_Sender_Sessions) Reset() {
	*x = TwampController_Sender_Sessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Sender_Sessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Sender_Sessions) ProtoMessage() {}

func (x *TwampController_Sender_Sessions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Sender_Sessions.ProtoReflect.Descriptor instead.
func (*TwampController_Sender_Sessions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *TwampController_Sender_Sessions) GetSession() []*TwampController_Sender_Sessions_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type TwampController_Sender_RegularSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegularSession []*TwampController_Sender_RegularSessions_RegularSession `protobuf:"bytes,1,rep,name=regular_session,json=regular-session,proto3" json:"regular_session,omitempty"`
}

func (x *TwampController_Sender_RegularSessions) Reset() {
	*x = TwampController_Sender_RegularSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Sender_RegularSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Sender_RegularSessions) ProtoMessage() {}

func (x *TwampController_Sender_RegularSessions) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Sender_RegularSessions.ProtoReflect.Descriptor instead.
func (*TwampController_Sender_RegularSessions) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *TwampController_Sender_RegularSessions) GetRegularSession() []*TwampController_Sender_RegularSessions_RegularSession {
	if x != nil {
		return x.RegularSession
	}
	return nil
}

type TwampController_Sender_Sessions_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32                                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Period  TwampController_Sender_Sessions_Session_Period `protobuf:"varint,2,opt,name=period,proto3,enum=huaweiV8R12_twamp_controller.TwampController_Sender_Sessions_Session_Period" json:"period,omitempty"`
	Timeout uint32                                         `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TwampController_Sender_Sessions_Session) Reset() {
	*x = TwampController_Sender_Sessions_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Sender_Sessions_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Sender_Sessions_Session) ProtoMessage() {}

func (x *TwampController_Sender_Sessions_Session) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Sender_Sessions_Session.ProtoReflect.Descriptor instead.
func (*TwampController_Sender_Sessions_Session) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *TwampController_Sender_Sessions_Session) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TwampController_Sender_Sessions_Session) GetPeriod() TwampController_Sender_Sessions_Session_Period {
	if x != nil {
		return x.Period
	}
	return TwampController_Sender_Sessions_Session_INVALID_ENUM_VALUE_Period
}

func (x *TwampController_Sender_Sessions_Session) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type TwampController_Sender_RegularSessions_RegularSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RegularTime uint32 `protobuf:"varint,2,opt,name=regular_time,json=regular-time,proto3" json:"regular_time,omitempty"`
	PacketCount uint32 `protobuf:"varint,3,opt,name=packet_count,json=packet-count,proto3" json:"packet_count,omitempty"`
	Timeout     uint32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TwampController_Sender_RegularSessions_RegularSession) Reset() {
	*x = TwampController_Sender_RegularSessions_RegularSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huaweiV8R12_twamp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwampController_Sender_RegularSessions_RegularSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwampController_Sender_RegularSessions_RegularSession) ProtoMessage() {}

func (x *TwampController_Sender_RegularSessions_RegularSession) ProtoReflect() protoreflect.Message {
	mi := &file_huaweiV8R12_twamp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwampController_Sender_RegularSessions_RegularSession.ProtoReflect.Descriptor instead.
func (*TwampController_Sender_RegularSessions_RegularSession) Descriptor() ([]byte, []int) {
	return file_huaweiV8R12_twamp_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *TwampController_Sender_RegularSessions_RegularSession) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TwampController_Sender_RegularSessions_RegularSession) GetRegularTime() uint32 {
	if x != nil {
		return x.RegularTime
	}
	return 0
}

func (x *TwampController_Sender_RegularSessions_RegularSession) GetPacketCount() uint32 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *TwampController_Sender_RegularSessions_RegularSession) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

var File_huaweiV8R12_twamp_proto protoreflect.FileDescriptor

var file_huaweiV8R12_twamp_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x2d, 0x74, 0x77,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0xa8, 0x15, 0x0a, 0x0f, 0x54, 0x77, 0x61, 0x6d,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x83, 0x0d, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x59, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52,
	0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x9d, 0x0c,
	0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xaf, 0x0b, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x66, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x72, 0x66, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x75, 0x0a, 0x0c, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f,
	0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x74, 0x77, 0x6f, 0x77, 0x61,
	0x79, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56,
	0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77,
	0x6f, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x15, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2d, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x74, 0x77, 0x6f,
	0x77, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x16, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x2d, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x95, 0x01,
	0x0a, 0x17, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54,
	0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x17, 0x74, 0x77,
	0x6f, 0x77, 0x61, 0x79, 0x2d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x8a, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x2d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x2d, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x73, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x4f, 0x0a, 0x13, 0x54, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x73, 0x73,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x1a, 0x50, 0x0a, 0x14, 0x54, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75,
	0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x51, 0x0a, 0x15, 0x54, 0x77, 0x6f, 0x77, 0x61, 0x79, 0x4a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x75, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x6f, 0x77, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a, 0x0b, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x30, 0x30, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35,
	0x35, 0x10, 0x55, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x41, 0x10, 0xaa, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x46, 0x10, 0xff, 0x01, 0x1a, 0xf2, 0x06,
	0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61,
	0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x82, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31,
	0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x94, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x64, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54,
	0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x79, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x53, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30,
	0x4d, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x58,
	0x5f, 0x33, 0x30, 0x30, 0x30, 0x30, 0x4d, 0x53, 0x10, 0x04, 0x1a, 0x95, 0x02, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7d,
	0x0a, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x56, 0x38, 0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x82, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x42, 0x20, 0x5a, 0x1e, 0x2e, 0x3b, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x56, 0x38,
	0x52, 0x31, 0x32, 0x5f, 0x74, 0x77, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huaweiV8R12_twamp_proto_rawDescOnce sync.Once
	file_huaweiV8R12_twamp_proto_rawDescData = file_huaweiV8R12_twamp_proto_rawDesc
)

func file_huaweiV8R12_twamp_proto_rawDescGZIP() []byte {
	file_huaweiV8R12_twamp_proto_rawDescOnce.Do(func() {
		file_huaweiV8R12_twamp_proto_rawDescData = protoimpl.X.CompressGZIP(file_huaweiV8R12_twamp_proto_rawDescData)
	})
	return file_huaweiV8R12_twamp_proto_rawDescData
}

var file_huaweiV8R12_twamp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_huaweiV8R12_twamp_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_huaweiV8R12_twamp_proto_goTypes = []interface{}{
	(TwampController_Client_Sessions_Session_PaddingType)(0),              // 0: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.PaddingType
	(TwampController_Sender_Sessions_Session_Period)(0),                   // 1: huaweiV8R12_twamp_controller.TwampController.Sender.Sessions.Session.Period
	(*TwampController)(nil),                                               // 2: huaweiV8R12_twamp_controller.TwampController
	(*TwampController_Client)(nil),                                        // 3: huaweiV8R12_twamp_controller.TwampController.Client
	(*TwampController_Sender)(nil),                                        // 4: huaweiV8R12_twamp_controller.TwampController.Sender
	(*TwampController_Client_Sessions)(nil),                               // 5: huaweiV8R12_twamp_controller.TwampController.Client.Sessions
	(*TwampController_Client_Sessions_Session)(nil),                       // 6: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session
	(*TwampController_Client_Sessions_Session_Statistics)(nil),            // 7: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.Statistics
	(*TwampController_Client_Sessions_Session_TwowayLossThreshold)(nil),   // 8: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.TwowayLossThreshold
	(*TwampController_Client_Sessions_Session_TwowayDelayThreshold)(nil),  // 9: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.TwowayDelayThreshold
	(*TwampController_Client_Sessions_Session_TwowayJitterThreshold)(nil), // 10: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.TwowayJitterThreshold
	(*TwampController_Sender_Sessions)(nil),                               // 11: huaweiV8R12_twamp_controller.TwampController.Sender.Sessions
	(*TwampController_Sender_RegularSessions)(nil),                        // 12: huaweiV8R12_twamp_controller.TwampController.Sender.RegularSessions
	(*TwampController_Sender_Sessions_Session)(nil),                       // 13: huaweiV8R12_twamp_controller.TwampController.Sender.Sessions.Session
	(*TwampController_Sender_RegularSessions_RegularSession)(nil),         // 14: huaweiV8R12_twamp_controller.TwampController.Sender.RegularSessions.RegularSession
}
var file_huaweiV8R12_twamp_proto_depIdxs = []int32{
	3,  // 0: huaweiV8R12_twamp_controller.TwampController.client:type_name -> huaweiV8R12_twamp_controller.TwampController.Client
	4,  // 1: huaweiV8R12_twamp_controller.TwampController.sender:type_name -> huaweiV8R12_twamp_controller.TwampController.Sender
	5,  // 2: huaweiV8R12_twamp_controller.TwampController.Client.sessions:type_name -> huaweiV8R12_twamp_controller.TwampController.Client.Sessions
	11, // 3: huaweiV8R12_twamp_controller.TwampController.Sender.sessions:type_name -> huaweiV8R12_twamp_controller.TwampController.Sender.Sessions
	12, // 4: huaweiV8R12_twamp_controller.TwampController.Sender.regular_sessions:type_name -> huaweiV8R12_twamp_controller.TwampController.Sender.RegularSessions
	6,  // 5: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.session:type_name -> huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session
	0,  // 6: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.padding_type:type_name -> huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.PaddingType
	7,  // 7: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.statistics:type_name -> huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.Statistics
	8,  // 8: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.twoway_loss_threshold:type_name -> huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.TwowayLossThreshold
	9,  // 9: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.twoway_delay_threshold:type_name -> huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.TwowayDelayThreshold
	10, // 10: huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.twoway_jitter_threshold:type_name -> huaweiV8R12_twamp_controller.TwampController.Client.Sessions.Session.TwowayJitterThreshold
	13, // 11: huaweiV8R12_twamp_controller.TwampController.Sender.Sessions.session:type_name -> huaweiV8R12_twamp_controller.TwampController.Sender.Sessions.Session
	14, // 12: huaweiV8R12_twamp_controller.TwampController.Sender.RegularSessions.regular_session:type_name -> huaweiV8R12_twamp_controller.TwampController.Sender.RegularSessions.RegularSession
	1,  // 13: huaweiV8R12_twamp_controller.TwampController.Sender.Sessions.Session.period:type_name -> huaweiV8R12_twamp_controller.TwampController.Sender.Sessions.Session.Period
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_huaweiV8R12_twamp_proto_init() }
func file_huaweiV8R12_twamp_proto_init() {
	if File_huaweiV8R12_twamp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huaweiV8R12_twamp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Sender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Client_Sessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Client_Sessions_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Client_Sessions_Session_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Client_Sessions_Session_TwowayLossThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Client_Sessions_Session_TwowayDelayThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Client_Sessions_Session_TwowayJitterThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Sender_Sessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Sender_RegularSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Sender_Sessions_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huaweiV8R12_twamp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwampController_Sender_RegularSessions_RegularSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huaweiV8R12_twamp_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huaweiV8R12_twamp_proto_goTypes,
		DependencyIndexes: file_huaweiV8R12_twamp_proto_depIdxs,
		EnumInfos:         file_huaweiV8R12_twamp_proto_enumTypes,
		MessageInfos:      file_huaweiV8R12_twamp_proto_msgTypes,
	}.Build()
	File_huaweiV8R12_twamp_proto = out.File
	file_huaweiV8R12_twamp_proto_rawDesc = nil
	file_huaweiV8R12_twamp_proto_goTypes = nil
	file_huaweiV8R12_twamp_proto_depIdxs = nil
}
